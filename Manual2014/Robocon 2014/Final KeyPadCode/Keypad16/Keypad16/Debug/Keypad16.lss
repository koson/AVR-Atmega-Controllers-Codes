
Keypad16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000116  00800060  000006d2  00000746  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000864  00000000  00000000  0000085c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000182  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00001242  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00001271  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010a1  00000000  00000000  00001341  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000379  00000000  00000000  000023e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ea  00000000  00000000  0000275b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  00002c48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000029f  00000000  00000000  00002e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000077f  00000000  00000000  000030c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003846  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ed 02 	call	0x5da	; 0x5da <main>
  8a:	0c 94 67 03 	jmp	0x6ce	; 0x6ce <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <WaitMs>:
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
  92:	06 c0       	rjmp	.+12     	; 0xa0 <WaitMs+0xe>
  94:	2c ec       	ldi	r18, 0xCC	; 204
  96:	3c e0       	ldi	r19, 0x0C	; 12
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
  98:	00 00       	nop
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	31 09       	sbc	r19, r1

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
  9e:	e1 f7       	brne	.-8      	; 0x98 <WaitMs+0x6>
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	c0 f7       	brcc	.-16     	; 0x94 <WaitMs+0x2>
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
	}
  a4:	08 95       	ret

000000a6 <toggleE>:
	lcd_cmd(LINE1);	
}

void toggleE(void)
{
SETBIT(PORTD,BIT(3));
  a6:	93 9a       	sbi	0x12, 3	; 18
WaitMs(1);
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 49 00 	call	0x92	; 0x92 <WaitMs>
CLEARBIT(PORTD,BIT(3));
  b0:	93 98       	cbi	0x12, 3	; 18
  b2:	08 95       	ret

000000b4 <lcd_char>:
	//CLEARBIT(PORTD,BIT(5));	// RW PD2 = 0	
	toggleE();
}

void lcd_char(unsigned char single)
{
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
    WaitMs(1);
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 49 00 	call	0x92	; 0x92 <WaitMs>
		
	SETBIT(PORTD,BIT(3));		//Enable
  c0:	93 9a       	sbi	0x12, 3	; 18
	SETBIT(PORTD,BIT(4));
  c2:	94 9a       	sbi	0x12, 4	; 18
	PORTC=single;		//RS
  c4:	c5 bb       	out	0x15, r28	; 21
	CLEARBIT(PORTD,BIT(5));		//RW
  c6:	95 98       	cbi	0x12, 5	; 18
	toggleE();

}
  c8:	cf 91       	pop	r28
		
	SETBIT(PORTD,BIT(3));		//Enable
	SETBIT(PORTD,BIT(4));
	PORTC=single;		//RS
	CLEARBIT(PORTD,BIT(5));		//RW
	toggleE();
  ca:	0c 94 53 00 	jmp	0xa6	; 0xa6 <toggleE>

000000ce <lcd_showvalue>:
		}
}


void lcd_showvalue(unsigned int num)	//prints the decimal 3digit value of num
{
  ce:	ef 92       	push	r14
  d0:	ff 92       	push	r15
  d2:	0f 93       	push	r16
  d4:	1f 93       	push	r17
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	9c 01       	movw	r18, r24
	unsigned char H=0;
	int n = 0,flag = 0;

	if(num%10000 == 0)
  dc:	60 e1       	ldi	r22, 0x10	; 16
  de:	77 e2       	ldi	r23, 0x27	; 39
  e0:	0e 94 26 03 	call	0x64c	; 0x64c <__udivmodhi4>
  e4:	89 2b       	or	r24, r25
  e6:	d1 f0       	breq	.+52     	; 0x11c <lcd_showvalue+0x4e>
	{
		flag = 4;
	}

	else if(num%1000 == 0)
  e8:	c9 01       	movw	r24, r18
  ea:	68 ee       	ldi	r22, 0xE8	; 232
  ec:	73 e0       	ldi	r23, 0x03	; 3
  ee:	0e 94 26 03 	call	0x64c	; 0x64c <__udivmodhi4>
  f2:	89 2b       	or	r24, r25
  f4:	b1 f0       	breq	.+44     	; 0x122 <lcd_showvalue+0x54>
	{
		flag = 3;
	}

	else if(num%100 == 0)
  f6:	c9 01       	movw	r24, r18
  f8:	64 e6       	ldi	r22, 0x64	; 100
  fa:	70 e0       	ldi	r23, 0x00	; 0
  fc:	0e 94 26 03 	call	0x64c	; 0x64c <__udivmodhi4>
 100:	89 2b       	or	r24, r25
 102:	91 f0       	breq	.+36     	; 0x128 <lcd_showvalue+0x5a>
	{
		flag = 2;
	}

	else if(num%10 == 0)
 104:	c9 01       	movw	r24, r18
 106:	6a e0       	ldi	r22, 0x0A	; 10
 108:	70 e0       	ldi	r23, 0x00	; 0
 10a:	0e 94 26 03 	call	0x64c	; 0x64c <__udivmodhi4>
 10e:	01 e0       	ldi	r16, 0x01	; 1
 110:	10 e0       	ldi	r17, 0x00	; 0
 112:	89 2b       	or	r24, r25
 114:	59 f0       	breq	.+22     	; 0x12c <lcd_showvalue+0x5e>
 116:	00 e0       	ldi	r16, 0x00	; 0
 118:	10 e0       	ldi	r17, 0x00	; 0
 11a:	08 c0       	rjmp	.+16     	; 0x12c <lcd_showvalue+0x5e>
	unsigned char H=0;
	int n = 0,flag = 0;

	if(num%10000 == 0)
	{
		flag = 4;
 11c:	04 e0       	ldi	r16, 0x04	; 4
 11e:	10 e0       	ldi	r17, 0x00	; 0
 120:	05 c0       	rjmp	.+10     	; 0x12c <lcd_showvalue+0x5e>
	}

	else if(num%1000 == 0)
	{
		flag = 3;
 122:	03 e0       	ldi	r16, 0x03	; 3
 124:	10 e0       	ldi	r17, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <lcd_showvalue+0x5e>
	}

	else if(num%100 == 0)
	{
		flag = 2;
 128:	02 e0       	ldi	r16, 0x02	; 2
 12a:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char H=0;
	int n = 0,flag = 0;

	if(num%10000 == 0)
	{
		flag = 4;
 12c:	c0 e0       	ldi	r28, 0x00	; 0
 12e:	d0 e0       	ldi	r29, 0x00	; 0



	while(num>0)
	{
		H = num%10;
 130:	ea e0       	ldi	r30, 0x0A	; 10
 132:	f0 e0       	ldi	r31, 0x00	; 0
		num = num/10;
		n = (n*10)+H;
 134:	4a e0       	ldi	r20, 0x0A	; 10
 136:	0d c0       	rjmp	.+26     	; 0x152 <lcd_showvalue+0x84>


	while(num>0)
	{
		H = num%10;
		num = num/10;
 138:	c9 01       	movw	r24, r18
 13a:	bf 01       	movw	r22, r30
 13c:	0e 94 26 03 	call	0x64c	; 0x64c <__udivmodhi4>
 140:	9b 01       	movw	r18, r22
		n = (n*10)+H;
 142:	be 01       	movw	r22, r28
 144:	46 9f       	mul	r20, r22
 146:	e0 01       	movw	r28, r0
 148:	47 9f       	mul	r20, r23
 14a:	d0 0d       	add	r29, r0
 14c:	11 24       	eor	r1, r1
 14e:	c8 0f       	add	r28, r24
 150:	d9 1f       	adc	r29, r25
		flag = 0;
	}



	while(num>0)
 152:	21 15       	cp	r18, r1
 154:	31 05       	cpc	r19, r1
 156:	81 f7       	brne	.-32     	; 0x138 <lcd_showvalue+0x6a>
 158:	09 c0       	rjmp	.+18     	; 0x16c <lcd_showvalue+0x9e>
	}
	
	while(n>0)
	{
		
		H = n%10;
 15a:	ce 01       	movw	r24, r28
 15c:	b7 01       	movw	r22, r14
 15e:	0e 94 3a 03 	call	0x674	; 0x674 <__divmodhi4>
		n = n/10;
 162:	eb 01       	movw	r28, r22
		lcd_char(H+48);
 164:	80 5d       	subi	r24, 0xD0	; 208
 166:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_char>
 16a:	03 c0       	rjmp	.+6      	; 0x172 <lcd_showvalue+0xa4>
	}
	
	while(n>0)
	{
		
		H = n%10;
 16c:	8a e0       	ldi	r24, 0x0A	; 10
 16e:	e8 2e       	mov	r14, r24
 170:	f1 2c       	mov	r15, r1
		H = num%10;
		num = num/10;
		n = (n*10)+H;
	}
	
	while(n>0)
 172:	20 97       	sbiw	r28, 0x00	; 0
 174:	91 f7       	brne	.-28     	; 0x15a <lcd_showvalue+0x8c>
 176:	05 c0       	rjmp	.+10     	; 0x182 <lcd_showvalue+0xb4>
	}
	
	
	while(flag > 0)
	{
		lcd_char('0');
 178:	80 e3       	ldi	r24, 0x30	; 48
 17a:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_char>
		flag--;
 17e:	01 50       	subi	r16, 0x01	; 1
 180:	11 09       	sbc	r17, r1
		lcd_char(H+48);

	}
	
	
	while(flag > 0)
 182:	01 15       	cp	r16, r1
 184:	11 05       	cpc	r17, r1
 186:	c1 f7       	brne	.-16     	; 0x178 <lcd_showvalue+0xaa>
	{
		lcd_char('0');
		flag--;
	}

}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	ff 90       	pop	r15
 192:	ef 90       	pop	r14
 194:	08 95       	ret

00000196 <lcd_cmd>:
		{};
	}
}

void lcd_cmd(unsigned char cmd)
{   
 196:	cf 93       	push	r28
 198:	c8 2f       	mov	r28, r24
    WaitMs(2);
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 49 00 	call	0x92	; 0x92 <WaitMs>
	CLEARBIT(PORTD,BIT(4));		// RS
 1a2:	94 98       	cbi	0x12, 4	; 18
	PORTC=cmd;
 1a4:	c5 bb       	out	0x15, r28	; 21
	//SETBIT(PORTD,BIT(3));	// ENABLE PD0 = 1
		// RS PD1 = 0
	//CLEARBIT(PORTD,BIT(5));	// RW PD2 = 0	
	toggleE();
}
 1a6:	cf 91       	pop	r28
	CLEARBIT(PORTD,BIT(4));		// RS
	PORTC=cmd;
	//SETBIT(PORTD,BIT(3));	// ENABLE PD0 = 1
		// RS PD1 = 0
	//CLEARBIT(PORTD,BIT(5));	// RW PD2 = 0	
	toggleE();
 1a8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <toggleE>

000001ac <lcd_init>:
void lcd_exit(void);
void WaitMs(unsigned int ms);

void lcd_init(void)	//init the lcd
{	
	DDRC=0xFF;
 1ac:	8f ef       	ldi	r24, 0xFF	; 255
 1ae:	84 bb       	out	0x14, r24	; 20
	DDRD=0xFF;
 1b0:	81 bb       	out	0x11, r24	; 17
	toggleE();
 1b2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggleE>
	SETBIT(PORTD,BIT(4));		// RS
 1b6:	94 9a       	sbi	0x12, 4	; 18
	lcd_cmd(0x38);		// Initialization in 8bit mode
 1b8:	88 e3       	ldi	r24, 0x38	; 56
 1ba:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_cmd>
	lcd_cmd(0x01);		// Clear LCD
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_cmd>
	lcd_cmd(0x0E);		// Cursor ON
 1c4:	8e e0       	ldi	r24, 0x0E	; 14
 1c6:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_cmd>
	lcd_cmd(LINE1);	
 1ca:	80 e8       	ldi	r24, 0x80	; 128
 1cc:	0c 94 cb 00 	jmp	0x196	; 0x196 <lcd_cmd>

000001d0 <lcd_string>:
	toggleE();

}

void lcd_string(unsigned char str[32])
{
 1d0:	ff 92       	push	r15
 1d2:	0f 93       	push	r16
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	8c 01       	movw	r16, r24
	unsigned char k=0;
	SETBIT(PORTD,BIT(4));
 1dc:	94 9a       	sbi	0x12, 4	; 18

}

void lcd_string(unsigned char str[32])
{
	unsigned char k=0;
 1de:	f1 2c       	mov	r15, r1
	SETBIT(PORTD,BIT(4));
	while(str[k]!='\0')	//Till null character is encountered
 1e0:	0f c0       	rjmp	.+30     	; 0x200 <lcd_string+0x30>
		{
			WaitMs(1);
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 49 00 	call	0x92	; 0x92 <WaitMs>
			if(k==16)
 1ea:	80 e1       	ldi	r24, 0x10	; 16
 1ec:	f8 12       	cpse	r15, r24
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <lcd_string+0x26>
				lcd_cmd(LINE2);
 1f0:	80 ec       	ldi	r24, 0xC0	; 192
 1f2:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_cmd>
			PORTC=str[k];
 1f6:	88 81       	ld	r24, Y
 1f8:	85 bb       	out	0x15, r24	; 21
			toggleE();
 1fa:	0e 94 53 00 	call	0xa6	; 0xa6 <toggleE>
			k++;
 1fe:	f3 94       	inc	r15

void lcd_string(unsigned char str[32])
{
	unsigned char k=0;
	SETBIT(PORTD,BIT(4));
	while(str[k]!='\0')	//Till null character is encountered
 200:	e8 01       	movw	r28, r16
 202:	cf 0d       	add	r28, r15
 204:	d1 1d       	adc	r29, r1
 206:	88 81       	ld	r24, Y
 208:	81 11       	cpse	r24, r1
 20a:	eb cf       	rjmp	.-42     	; 0x1e2 <lcd_string+0x12>
				lcd_cmd(LINE2);
			PORTC=str[k];
			toggleE();
			k++;
		}
}
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	1f 91       	pop	r17
 212:	0f 91       	pop	r16
 214:	ff 90       	pop	r15
 216:	08 95       	ret

00000218 <UART_INIT>:
uint8_t GetReplyFromMaster();
void PostCommandToMaster(uint8_t data);
void ConfigureLcd();
void UART_INIT()
{	
	UCSRB |= (1 << RXEN) | (1 << TXEN);
 218:	8a b1       	in	r24, 0x0a	; 10
 21a:	88 61       	ori	r24, 0x18	; 24
 21c:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << UCSZ1) | (1 << UCSZ0);
 21e:	80 b5       	in	r24, 0x20	; 32
 220:	86 60       	ori	r24, 0x06	; 6
 222:	80 bd       	out	0x20, r24	; 32
	UCSRA |= (1<<U2X);
 224:	59 9a       	sbi	0x0b, 1	; 11
	
	UBRRH = 0;
 226:	10 bc       	out	0x20, r1	; 32
	UBRRL = 12;
 228:	8c e0       	ldi	r24, 0x0C	; 12
 22a:	89 b9       	out	0x09, r24	; 9
 22c:	08 95       	ret

0000022e <PostCommandToMaster>:
	return UDR;
}

void PostCommandToMaster(uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
 22e:	5d 9b       	sbis	0x0b, 5	; 11
 230:	fe cf       	rjmp	.-4      	; 0x22e <PostCommandToMaster>
	UDR = data;
 232:	8c b9       	out	0x0c, r24	; 12
 234:	08 95       	ret

00000236 <DisplayCommunicationMenu>:
		}
}

void DisplayCommunicationMenu()
{
	lcd_cmd(0x01);		//Clear LCD
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_cmd>
	lcd_string("1. Unit Testing");
 23c:	82 e6       	ldi	r24, 0x62	; 98
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_string>
	lcd_cmd(LINE2);
 244:	80 ec       	ldi	r24, 0xC0	; 192
 246:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_cmd>
	lcd_string("2. Path Testing");
 24a:	82 e7       	ldi	r24, 0x72	; 114
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <lcd_string>

00000252 <DisplayMenu>:
	}	
}

void DisplayMenu()
{
	lcd_cmd(0x01);		// Clear LCD
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_cmd>
	lcd_cmd(LINE1);
 258:	80 e8       	ldi	r24, 0x80	; 128
 25a:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_cmd>
	lcd_string("1. Communication");
 25e:	82 e8       	ldi	r24, 0x82	; 130
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_string>
	lcd_cmd(LINE2);
 266:	80 ec       	ldi	r24, 0xC0	; 192
 268:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_cmd>
	lcd_string("2. Configure LCD");
 26c:	83 e9       	ldi	r24, 0x93	; 147
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <lcd_string>

00000274 <WhichKeyIsPressed>:
}

int WhichKeyIsPressed()
{
	uint8_t r,c;
	PORTA|= 0XF0;
 274:	8b b3       	in	r24, 0x1b	; 27
 276:	80 6f       	ori	r24, 0xF0	; 240
 278:	8b bb       	out	0x1b, r24	; 27
 27a:	40 e0       	ldi	r20, 0x00	; 0
 27c:	50 e0       	ldi	r21, 0x00	; 0

	for(c=0;c<3;c++)
	{
		 DDRA&=~(0XF7);
		DDRA|=(0X08>>c);
 27e:	68 e0       	ldi	r22, 0x08	; 8
 280:	70 e0       	ldi	r23, 0x00	; 0
		for(r=0;r<4;r++)
		{
			if(!(PINA & (0X80>>r)))
 282:	e0 e8       	ldi	r30, 0x80	; 128
 284:	f0 e0       	ldi	r31, 0x00	; 0
	uint8_t r,c;
	PORTA|= 0XF0;

	for(c=0;c<3;c++)
	{
		 DDRA&=~(0XF7);
 286:	8a b3       	in	r24, 0x1a	; 26
 288:	88 70       	andi	r24, 0x08	; 8
 28a:	8a bb       	out	0x1a, r24	; 26
		DDRA|=(0X08>>c);
 28c:	2a b3       	in	r18, 0x1a	; 26
 28e:	cb 01       	movw	r24, r22
 290:	04 2e       	mov	r0, r20
 292:	02 c0       	rjmp	.+4      	; 0x298 <WhichKeyIsPressed+0x24>
 294:	95 95       	asr	r25
 296:	87 95       	ror	r24
 298:	0a 94       	dec	r0
 29a:	e2 f7       	brpl	.-8      	; 0x294 <WhichKeyIsPressed+0x20>
 29c:	28 2b       	or	r18, r24
 29e:	2a bb       	out	0x1a, r18	; 26
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	90 e0       	ldi	r25, 0x00	; 0
		for(r=0;r<4;r++)
		{
			if(!(PINA & (0X80>>r)))
 2a4:	a9 b3       	in	r26, 0x19	; 25
 2a6:	9f 01       	movw	r18, r30
 2a8:	08 2e       	mov	r0, r24
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <WhichKeyIsPressed+0x3c>
 2ac:	35 95       	asr	r19
 2ae:	27 95       	ror	r18
 2b0:	0a 94       	dec	r0
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <WhichKeyIsPressed+0x38>
 2b4:	b0 e0       	ldi	r27, 0x00	; 0
 2b6:	2a 23       	and	r18, r26
 2b8:	3b 23       	and	r19, r27
 2ba:	23 2b       	or	r18, r19
 2bc:	51 f4       	brne	.+20     	; 0x2d2 <WhichKeyIsPressed+0x5e>
			{
			return (r*3+c+46);
 2be:	9c 01       	movw	r18, r24
 2c0:	22 0f       	add	r18, r18
 2c2:	33 1f       	adc	r19, r19
 2c4:	28 0f       	add	r18, r24
 2c6:	39 1f       	adc	r19, r25
 2c8:	24 0f       	add	r18, r20
 2ca:	35 1f       	adc	r19, r21
 2cc:	22 5d       	subi	r18, 0xD2	; 210
 2ce:	3f 4f       	sbci	r19, 0xFF	; 255
 2d0:	11 c0       	rjmp	.+34     	; 0x2f4 <WhichKeyIsPressed+0x80>
 2d2:	01 96       	adiw	r24, 0x01	; 1

	for(c=0;c<3;c++)
	{
		 DDRA&=~(0XF7);
		DDRA|=(0X08>>c);
		for(r=0;r<4;r++)
 2d4:	84 30       	cpi	r24, 0x04	; 4
 2d6:	91 05       	cpc	r25, r1
 2d8:	29 f7       	brne	.-54     	; 0x2a4 <WhichKeyIsPressed+0x30>
 2da:	4f 5f       	subi	r20, 0xFF	; 255
 2dc:	5f 4f       	sbci	r21, 0xFF	; 255
int WhichKeyIsPressed()
{
	uint8_t r,c;
	PORTA|= 0XF0;

	for(c=0;c<3;c++)
 2de:	43 30       	cpi	r20, 0x03	; 3
 2e0:	51 05       	cpc	r21, r1
 2e2:	89 f6       	brne	.-94     	; 0x286 <WhichKeyIsPressed+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e4:	83 ec       	ldi	r24, 0xC3	; 195
 2e6:	99 e0       	ldi	r25, 0x09	; 9
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <WhichKeyIsPressed+0x74>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <WhichKeyIsPressed+0x7a>
 2ee:	00 00       	nop
			return (r*3+c+46);
			}
		}
	}
	_delay_ms(10);
	return 0XFF;//Indicate No key pressed
 2f0:	2f ef       	ldi	r18, 0xFF	; 255
 2f2:	30 e0       	ldi	r19, 0x00	; 0
}
 2f4:	c9 01       	movw	r24, r18
 2f6:	08 95       	ret

000002f8 <GetPressedKey>:
	lcd_string("2. Configure LCD");
}

char GetPressedKey()
{
	int key = WhichKeyIsPressed();
 2f8:	0e 94 3a 01 	call	0x274	; 0x274 <WhichKeyIsPressed>
 2fc:	8e 97       	sbiw	r24, 0x2e	; 46
 2fe:	8c 30       	cpi	r24, 0x0C	; 12
 300:	91 05       	cpc	r25, r1
 302:	28 f4       	brcc	.+10     	; 0x30e <GetPressedKey+0x16>
 304:	fc 01       	movw	r30, r24
 306:	e7 59       	subi	r30, 0x97	; 151
 308:	fe 4f       	sbci	r31, 0xFE	; 254
 30a:	80 81       	ld	r24, Z
 30c:	08 95       	ret
	switch(key)
 30e:	8f ef       	ldi	r24, 0xFF	; 255
		break;
		
		default:
		return 255;
	}
}
 310:	08 95       	ret

00000312 <ConfigureLcd>:
}


void ConfigureLcd()
{
	lcd_cmd(0x01);	//Clear LCD
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_cmd>
	lcd_cmd(LINE1);
 318:	80 e8       	ldi	r24, 0x80	; 128
 31a:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_cmd>
	lcd_string("1. Delay");
 31e:	84 ea       	ldi	r24, 0xA4	; 164
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_string>
	
	char key = 0;
	
	while(1)
	{
			key = GetPressedKey();
 326:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <GetPressedKey>
			if (key == 255)
 32a:	8f 3f       	cpi	r24, 0xFF	; 255
 32c:	e1 f3       	breq	.-8      	; 0x326 <ConfigureLcd+0x14>
			{
				continue;
			}
			else if (key == '1')
 32e:	81 33       	cpi	r24, 0x31	; 49
 330:	09 f0       	breq	.+2      	; 0x334 <ConfigureLcd+0x22>
 332:	4f c0       	rjmp	.+158    	; 0x3d2 <ConfigureLcd+0xc0>
			{
				lcd_cmd(0x01);	//Clear LCD
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_cmd>
				lcd_string("Current Delay:");
 33a:	8d ea       	ldi	r24, 0xAD	; 173
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_string>
				lcd_showvalue(KEYPAD_DELAY);
 342:	80 91 60 00 	lds	r24, 0x0060
 346:	90 91 61 00 	lds	r25, 0x0061
 34a:	0e 94 67 00 	call	0xce	; 0xce <lcd_showvalue>
				lcd_cmd(LINE2);
 34e:	80 ec       	ldi	r24, 0xC0	; 192
 350:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_cmd>
				lcd_string("New Delay:");
 354:	8c eb       	ldi	r24, 0xBC	; 188
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_string>
				
				while(1)
				{
					key = GetPressedKey();
 35c:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <GetPressedKey>
					if(key == '*')
 360:	8a 32       	cpi	r24, 0x2A	; 42
 362:	d1 f1       	breq	.+116    	; 0x3d8 <ConfigureLcd+0xc6>
						return;
					else if (key >= 48 && key <= 57)
 364:	98 2f       	mov	r25, r24
 366:	90 53       	subi	r25, 0x30	; 48
 368:	9a 30       	cpi	r25, 0x0A	; 10
 36a:	c0 f7       	brcc	.-16     	; 0x35c <ConfigureLcd+0x4a>
					{
						if (key == '0')
 36c:	80 33       	cpi	r24, 0x30	; 48
 36e:	19 f4       	brne	.+6      	; 0x376 <ConfigureLcd+0x64>
						{
							KEYPAD_DELAY = 1000;
 370:	88 ee       	ldi	r24, 0xE8	; 232
 372:	93 e0       	ldi	r25, 0x03	; 3
 374:	06 c0       	rjmp	.+12     	; 0x382 <ConfigureLcd+0x70>
						}
						else
						{
							KEYPAD_DELAY = (key-48)*100;						
 376:	24 e6       	ldi	r18, 0x64	; 100
 378:	82 9f       	mul	r24, r18
 37a:	c0 01       	movw	r24, r0
 37c:	11 24       	eor	r1, r1
 37e:	80 5c       	subi	r24, 0xC0	; 192
 380:	92 41       	sbci	r25, 0x12	; 18
 382:	90 93 61 00 	sts	0x0061, r25
 386:	80 93 60 00 	sts	0x0060, r24
						}
						eeprom_update_byte(0x01,KEYPAD_DELAY);
 38a:	60 91 60 00 	lds	r22, 0x0060
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 56 03 	call	0x6ac	; 0x6ac <__eeupd_byte_m16>
						lcd_cmd(0x01);		// CLEAR LCD
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_cmd>
						lcd_string("DELAY CHANGED");
 39c:	87 ec       	ldi	r24, 0xC7	; 199
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_string>
						lcd_cmd(LINE2);
 3a4:	80 ec       	ldi	r24, 0xC0	; 192
 3a6:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_cmd>
						lcd_string("NEW DELAY:");
 3aa:	85 ed       	ldi	r24, 0xD5	; 213
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_string>
						lcd_showvalue(KEYPAD_DELAY);
 3b2:	80 91 60 00 	lds	r24, 0x0060
 3b6:	90 91 61 00 	lds	r25, 0x0061
 3ba:	0e 94 67 00 	call	0xce	; 0xce <lcd_showvalue>
 3be:	8f e7       	ldi	r24, 0x7F	; 127
 3c0:	9a e1       	ldi	r25, 0x1A	; 26
 3c2:	26 e0       	ldi	r18, 0x06	; 6
 3c4:	81 50       	subi	r24, 0x01	; 1
 3c6:	90 40       	sbci	r25, 0x00	; 0
 3c8:	20 40       	sbci	r18, 0x00	; 0
 3ca:	e1 f7       	brne	.-8      	; 0x3c4 <ConfigureLcd+0xb2>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <ConfigureLcd+0xbc>
 3ce:	00 00       	nop
 3d0:	08 95       	ret
						_delay_ms(2000);
						return;
					}
				}
			}
			else if (key == '*')
 3d2:	8a 32       	cpi	r24, 0x2A	; 42
 3d4:	09 f0       	breq	.+2      	; 0x3d8 <ConfigureLcd+0xc6>
 3d6:	a7 cf       	rjmp	.-178    	; 0x326 <ConfigureLcd+0x14>
 3d8:	08 95       	ret

000003da <PathTesting>:
		EXECUTION OF ABOVE COMMANDS IS REPORTED BY RESPONSE AS 220
	*/
/************************************************************************/

void PathTesting()
{
 3da:	cf 93       	push	r28
		char key;
		int reply;
		
		lcd_cmd(1);		// clear LCD
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_cmd>
		lcd_string("Input Command : ");
 3e2:	80 ee       	ldi	r24, 0xE0	; 224
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_string>
 3ea:	83 ec       	ldi	r24, 0xC3	; 195
 3ec:	99 e0       	ldi	r25, 0x09	; 9
 3ee:	01 97       	sbiw	r24, 0x01	; 1
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <PathTesting+0x14>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <PathTesting+0x1a>
 3f4:	00 00       	nop
		_delay_ms(10);
		
		while(1)
		{
			key = GetPressedKey();
 3f6:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <GetPressedKey>
 3fa:	c8 2f       	mov	r28, r24
			if(key == '*')
 3fc:	8a 32       	cpi	r24, 0x2A	; 42
 3fe:	09 f4       	brne	.+2      	; 0x402 <PathTesting+0x28>
 400:	3f c0       	rjmp	.+126    	; 0x480 <__stack+0x21>
			return;
			else if (key == 255 || key == '#')
 402:	8f 3f       	cpi	r24, 0xFF	; 255
 404:	c1 f3       	breq	.-16     	; 0x3f6 <PathTesting+0x1c>
 406:	83 32       	cpi	r24, 0x23	; 35
 408:	b1 f3       	breq	.-20     	; 0x3f6 <PathTesting+0x1c>
			continue;
			
			PostCommandToMaster(key-18);		// Done Everything here do not change parameter
 40a:	82 51       	subi	r24, 0x12	; 18
 40c:	0e 94 17 01 	call	0x22e	; 0x22e <PostCommandToMaster>
 410:	87 ea       	ldi	r24, 0xA7	; 167
 412:	91 e6       	ldi	r25, 0x61	; 97
 414:	01 97       	sbiw	r24, 0x01	; 1
 416:	f1 f7       	brne	.-4      	; 0x414 <PathTesting+0x3a>
 418:	00 c0       	rjmp	.+0      	; 0x41a <PathTesting+0x40>
 41a:	00 00       	nop
			_delay_ms(100);
			lcd_char(key);
 41c:	8c 2f       	mov	r24, r28
 41e:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_char>
	// PD1 - TX
}

uint8_t GetReplyFromMaster()
{
	return UDR;
 422:	8c b1       	in	r24, 0x0c	; 12
			
			PostCommandToMaster(key-18);		// Done Everything here do not change parameter
			_delay_ms(100);
			lcd_char(key);
			reply = GetReplyFromMaster();
			if(reply == 150)					// Command Acceptance Confirmation
 424:	86 39       	cpi	r24, 0x96	; 150
 426:	39 f7       	brne	.-50     	; 0x3f6 <PathTesting+0x1c>
			{
				lcd_cmd(0x01);					//clear LCD
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_cmd>
				lcd_string("RequestedAccepted");
 42e:	81 ef       	ldi	r24, 0xF1	; 241
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_string>
				lcd_cmd(LINE2);
 436:	80 ec       	ldi	r24, 0xC0	; 192
 438:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_cmd>
				lcd_string("Wait...");
 43c:	83 e0       	ldi	r24, 0x03	; 3
 43e:	91 e0       	ldi	r25, 0x01	; 1
 440:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_string>
				
				while(1)
				{
					key = GetPressedKey();
 444:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <GetPressedKey>
					if(key == '*')
 448:	8a 32       	cpi	r24, 0x2A	; 42
 44a:	d1 f0       	breq	.+52     	; 0x480 <__stack+0x21>
	// PD1 - TX
}

uint8_t GetReplyFromMaster()
{
	return UDR;
 44c:	8c b1       	in	r24, 0x0c	; 12
					if(key == '*')
					return;
					
					reply = GetReplyFromMaster();
					
					if(reply == 220)			// Command Execution Success
 44e:	8c 3d       	cpi	r24, 0xDC	; 220
 450:	c9 f7       	brne	.-14     	; 0x444 <PathTesting+0x6a>
					{
						lcd_cmd(0x01);			//Clear LCD
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_cmd>
						lcd_string("Executed");
 458:	8b e0       	ldi	r24, 0x0B	; 11
 45a:	91 e0       	ldi	r25, 0x01	; 1
 45c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_string>
						lcd_cmd(LINE2);
 460:	80 ec       	ldi	r24, 0xC0	; 192
 462:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_cmd>
						lcd_string("Successfully");
 466:	84 e1       	ldi	r24, 0x14	; 20
 468:	91 e0       	ldi	r25, 0x01	; 1
 46a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_string>
 46e:	9f e9       	ldi	r25, 0x9F	; 159
 470:	26 e8       	ldi	r18, 0x86	; 134
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	91 50       	subi	r25, 0x01	; 1
 476:	20 40       	sbci	r18, 0x00	; 0
 478:	80 40       	sbci	r24, 0x00	; 0
 47a:	e1 f7       	brne	.-8      	; 0x474 <__stack+0x15>
 47c:	00 c0       	rjmp	.+0      	; 0x47e <__stack+0x1f>
 47e:	00 00       	nop
						return;
					}
				}
			}
		}
}
 480:	cf 91       	pop	r28
 482:	08 95       	ret

00000484 <UnitTesting>:
		EXECUTION OF ABOVE COMMANDS IS REPORTED BY RESPONSE AS 220
	*/
/************************************************************************/

void UnitTesting()
{
 484:	cf 93       	push	r28
	char key;
	uint8_t reply;
	
	lcd_cmd(0x01);
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_cmd>
	lcd_string("Input Command : ");
 48c:	80 ee       	ldi	r24, 0xE0	; 224
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_string>
	
	while(1)
	{
		key = GetPressedKey();
 494:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <GetPressedKey>
 498:	c8 2f       	mov	r28, r24
		
		if(key == '*')
 49a:	8a 32       	cpi	r24, 0x2A	; 42
 49c:	09 f4       	brne	.+2      	; 0x4a0 <UnitTesting+0x1c>
 49e:	45 c0       	rjmp	.+138    	; 0x52a <UnitTesting+0xa6>
			return;
		else if (key == 255 || key == '#')
 4a0:	8f 3f       	cpi	r24, 0xFF	; 255
 4a2:	c1 f3       	breq	.-16     	; 0x494 <UnitTesting+0x10>
 4a4:	83 32       	cpi	r24, 0x23	; 35
 4a6:	b1 f3       	breq	.-20     	; 0x494 <UnitTesting+0x10>
			continue;
		
		PostCommandToMaster(key-38);		// Done Everything here do not change parameter		
 4a8:	86 52       	subi	r24, 0x26	; 38
 4aa:	0e 94 17 01 	call	0x22e	; 0x22e <PostCommandToMaster>
 4ae:	87 ea       	ldi	r24, 0xA7	; 167
 4b0:	91 e6       	ldi	r25, 0x61	; 97
 4b2:	01 97       	sbiw	r24, 0x01	; 1
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <UnitTesting+0x2e>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <UnitTesting+0x34>
 4b8:	00 00       	nop
		_delay_ms(100);
		lcd_char(key);
 4ba:	8c 2f       	mov	r24, r28
 4bc:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_char>
	// PD1 - TX
}

uint8_t GetReplyFromMaster()
{
	return UDR;
 4c0:	8c b1       	in	r24, 0x0c	; 12
		PostCommandToMaster(key-38);		// Done Everything here do not change parameter		
		_delay_ms(100);
		lcd_char(key);
		reply = GetReplyFromMaster();
		
		if(reply == 150)					// Command Acceptance Confirmation
 4c2:	86 39       	cpi	r24, 0x96	; 150
 4c4:	39 f7       	brne	.-50     	; 0x494 <UnitTesting+0x10>
		{
			lcd_cmd(0x01);					//clear LCD
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_cmd>
			lcd_string("RequestedAccepted");
 4cc:	81 ef       	ldi	r24, 0xF1	; 241
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_string>
			lcd_cmd(LINE2);
 4d4:	80 ec       	ldi	r24, 0xC0	; 192
 4d6:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_cmd>
			lcd_string("Wait...");
 4da:	83 e0       	ldi	r24, 0x03	; 3
 4dc:	91 e0       	ldi	r25, 0x01	; 1
 4de:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_string>
			
			while(1)
			{
				key = GetPressedKey();
 4e2:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <GetPressedKey>
				if(key == '*')
 4e6:	8a 32       	cpi	r24, 0x2A	; 42
 4e8:	01 f1       	breq	.+64     	; 0x52a <UnitTesting+0xa6>
 4ea:	87 ea       	ldi	r24, 0xA7	; 167
 4ec:	91 e6       	ldi	r25, 0x61	; 97
 4ee:	01 97       	sbiw	r24, 0x01	; 1
 4f0:	f1 f7       	brne	.-4      	; 0x4ee <UnitTesting+0x6a>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <UnitTesting+0x70>
 4f4:	00 00       	nop
	// PD1 - TX
}

uint8_t GetReplyFromMaster()
{
	return UDR;
 4f6:	8c b1       	in	r24, 0x0c	; 12
					return;
				
				_delay_ms(100);
				reply = GetReplyFromMaster();
				
				if(reply == 220)			// Command Execution Success
 4f8:	8c 3d       	cpi	r24, 0xDC	; 220
 4fa:	99 f7       	brne	.-26     	; 0x4e2 <UnitTesting+0x5e>
				{
					lcd_cmd(0x01);			//Clear LCD
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_cmd>
					lcd_string("Executed");
 502:	8b e0       	ldi	r24, 0x0B	; 11
 504:	91 e0       	ldi	r25, 0x01	; 1
 506:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_string>
					lcd_cmd(LINE2);
 50a:	80 ec       	ldi	r24, 0xC0	; 192
 50c:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_cmd>
					lcd_string("Successfully");
 510:	84 e1       	ldi	r24, 0x14	; 20
 512:	91 e0       	ldi	r25, 0x01	; 1
 514:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_string>
 518:	9f e9       	ldi	r25, 0x9F	; 159
 51a:	26 e8       	ldi	r18, 0x86	; 134
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	91 50       	subi	r25, 0x01	; 1
 520:	20 40       	sbci	r18, 0x00	; 0
 522:	80 40       	sbci	r24, 0x00	; 0
 524:	e1 f7       	brne	.-8      	; 0x51e <UnitTesting+0x9a>
 526:	00 c0       	rjmp	.+0      	; 0x528 <UnitTesting+0xa4>
 528:	00 00       	nop
					return;
				}
			}
		}
	}
}
 52a:	cf 91       	pop	r28
 52c:	08 95       	ret

0000052e <Communication>:

void Communication()
{
	int ans = 0;
	char key;
	lcd_cmd(0x01);	//Clear LCD
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_cmd>
	lcd_string("Initializing");
 534:	81 e2       	ldi	r24, 0x21	; 33
 536:	91 e0       	ldi	r25, 0x01	; 1
 538:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_string>
	lcd_cmd(LINE2);
 53c:	80 ec       	ldi	r24, 0xC0	; 192
 53e:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_cmd>
	lcd_string("Sequence....");
 542:	8e e2       	ldi	r24, 0x2E	; 46
 544:	91 e0       	ldi	r25, 0x01	; 1
 546:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_string>
 54a:	2f e3       	ldi	r18, 0x3F	; 63
 54c:	8d e0       	ldi	r24, 0x0D	; 13
 54e:	93 e0       	ldi	r25, 0x03	; 3
 550:	21 50       	subi	r18, 0x01	; 1
 552:	80 40       	sbci	r24, 0x00	; 0
 554:	90 40       	sbci	r25, 0x00	; 0
 556:	e1 f7       	brne	.-8      	; 0x550 <Communication+0x22>
 558:	00 c0       	rjmp	.+0      	; 0x55a <Communication+0x2c>
 55a:	00 00       	nop
	_delay_ms(1000);
	
	while(1)
	{
		key = GetPressedKey();
 55c:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <GetPressedKey>
		if (key == '*')
 560:	8a 32       	cpi	r24, 0x2A	; 42
 562:	e9 f0       	breq	.+58     	; 0x59e <Communication+0x70>
		{
			return;
		}
		
		PostCommandToMaster('$');		// Connection Initiation
 564:	84 e2       	ldi	r24, 0x24	; 36
 566:	0e 94 17 01 	call	0x22e	; 0x22e <PostCommandToMaster>
	// PD1 - TX
}

uint8_t GetReplyFromMaster()
{
	return UDR;
 56a:	8c b1       	in	r24, 0x0c	; 12
		}
		
		PostCommandToMaster('$');		// Connection Initiation
		ans = GetReplyFromMaster();
		
		if (ans == 100)
 56c:	84 36       	cpi	r24, 0x64	; 100
 56e:	b1 f7       	brne	.-20     	; 0x55c <Communication+0x2e>
		{
			lcd_cmd(0x01);	//Clear LCD
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_cmd>
			lcd_string("Master Connected");
 576:	8b e3       	ldi	r24, 0x3B	; 59
 578:	91 e0       	ldi	r25, 0x01	; 1
 57a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_string>
			DisplayCommunicationMenu();
 57e:	0e 94 1b 01 	call	0x236	; 0x236 <DisplayCommunicationMenu>
			
			while(1)
			{
				key = GetPressedKey();
 582:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <GetPressedKey>
				if (key == '*')
 586:	8a 32       	cpi	r24, 0x2A	; 42
 588:	51 f0       	breq	.+20     	; 0x59e <Communication+0x70>
					return;
				else if (key == '1')
 58a:	81 33       	cpi	r24, 0x31	; 49
 58c:	19 f4       	brne	.+6      	; 0x594 <Communication+0x66>
				{
					UnitTesting();
 58e:	0e 94 42 02 	call	0x484	; 0x484 <UnitTesting>
					break;
 592:	e4 cf       	rjmp	.-56     	; 0x55c <Communication+0x2e>
				}
				else if (key == '2')
 594:	82 33       	cpi	r24, 0x32	; 50
 596:	a9 f7       	brne	.-22     	; 0x582 <Communication+0x54>
				{
					PathTesting();
 598:	0e 94 ed 01 	call	0x3da	; 0x3da <PathTesting>
					break;
 59c:	df cf       	rjmp	.-66     	; 0x55c <Communication+0x2e>
 59e:	08 95       	ret

000005a0 <InitializeEEPROM>:
	/************************************************************************/
void InitializeEEPROM()
{
	int D;
	
	char byte = eeprom_read_byte(0x01);
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	0e 94 4e 03 	call	0x69c	; 0x69c <__eerd_byte_m16>
	if(byte >= 48 && byte <= 57)
 5a8:	98 2f       	mov	r25, r24
 5aa:	90 53       	subi	r25, 0x30	; 48
 5ac:	9a 30       	cpi	r25, 0x0A	; 10
 5ae:	80 f4       	brcc	.+32     	; 0x5d0 <InitializeEEPROM+0x30>
	{
		if (byte == '0')
 5b0:	80 33       	cpi	r24, 0x30	; 48
 5b2:	19 f4       	brne	.+6      	; 0x5ba <InitializeEEPROM+0x1a>
		{
			KEYPAD_DELAY = 1000;
 5b4:	88 ee       	ldi	r24, 0xE8	; 232
 5b6:	93 e0       	ldi	r25, 0x03	; 3
 5b8:	06 c0       	rjmp	.+12     	; 0x5c6 <InitializeEEPROM+0x26>
			return;
		}
		KEYPAD_DELAY = (byte - 48) * 100;
 5ba:	24 e6       	ldi	r18, 0x64	; 100
 5bc:	82 9f       	mul	r24, r18
 5be:	c0 01       	movw	r24, r0
 5c0:	11 24       	eor	r1, r1
 5c2:	80 5c       	subi	r24, 0xC0	; 192
 5c4:	92 41       	sbci	r25, 0x12	; 18
 5c6:	90 93 61 00 	sts	0x0061, r25
 5ca:	80 93 60 00 	sts	0x0060, r24
		return;
 5ce:	08 95       	ret
	}		
	else
		eeprom_update_byte(0x01,'6');
 5d0:	66 e3       	ldi	r22, 0x36	; 54
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__eeupd_byte_m16>

000005da <main>:

int main(void)
{
	
	char key;
	InitializeEEPROM();
 5da:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <InitializeEEPROM>
	
	lcd_init();
 5de:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_init>
	UART_INIT();
 5e2:	0e 94 0c 01 	call	0x218	; 0x218 <UART_INIT>
	//DDRA = 0x00;		// SET AS INPUT
	//PORTA = 0x0F;		// MAKE PULLS ON OF LAST FOUR PINS\
	
	
	
	lcd_string("----WELCOME----");
 5e6:	8c e4       	ldi	r24, 0x4C	; 76
 5e8:	91 e0       	ldi	r25, 0x01	; 1
 5ea:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_string>
	lcd_cmd(LINE2);
 5ee:	80 ec       	ldi	r24, 0xC0	; 192
 5f0:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_cmd>
	lcd_string("TEAM ROBOCON");
 5f4:	8c e5       	ldi	r24, 0x5C	; 92
 5f6:	91 e0       	ldi	r25, 0x01	; 1
 5f8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_string>
 5fc:	2f e7       	ldi	r18, 0x7F	; 127
 5fe:	8a e1       	ldi	r24, 0x1A	; 26
 600:	96 e0       	ldi	r25, 0x06	; 6
 602:	21 50       	subi	r18, 0x01	; 1
 604:	80 40       	sbci	r24, 0x00	; 0
 606:	90 40       	sbci	r25, 0x00	; 0
 608:	e1 f7       	brne	.-8      	; 0x602 <main+0x28>
 60a:	00 c0       	rjmp	.+0      	; 0x60c <main+0x32>
 60c:	00 00       	nop
	_delay_ms(2000);
	DisplayMenu();
 60e:	0e 94 29 01 	call	0x252	; 0x252 <DisplayMenu>
	
	while(1)
	{
		key = GetPressedKey();
 612:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <GetPressedKey>
 616:	c8 2f       	mov	r28, r24
		if(key == 255)
 618:	8f 3f       	cpi	r24, 0xFF	; 255
 61a:	d9 f3       	breq	.-10     	; 0x612 <main+0x38>
			continue;
		else if (key == '2')
 61c:	82 33       	cpi	r24, 0x32	; 50
 61e:	19 f4       	brne	.+6      	; 0x626 <main+0x4c>
		{
			ConfigureLcd();
 620:	0e 94 89 01 	call	0x312	; 0x312 <ConfigureLcd>
 624:	04 c0       	rjmp	.+8      	; 0x62e <main+0x54>
			DisplayMenu();
		}
		else if (key == '1')
 626:	81 33       	cpi	r24, 0x31	; 49
 628:	21 f4       	brne	.+8      	; 0x632 <main+0x58>
		{
			Communication();
 62a:	0e 94 97 02 	call	0x52e	; 0x52e <Communication>
			DisplayMenu();
 62e:	0e 94 29 01 	call	0x252	; 0x252 <DisplayMenu>
		}
		lcd_char(key);		
 632:	8c 2f       	mov	r24, r28
 634:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_char>
 638:	2f ed       	ldi	r18, 0xDF	; 223
 63a:	82 e2       	ldi	r24, 0x22	; 34
 63c:	92 e0       	ldi	r25, 0x02	; 2
 63e:	21 50       	subi	r18, 0x01	; 1
 640:	80 40       	sbci	r24, 0x00	; 0
 642:	90 40       	sbci	r25, 0x00	; 0
 644:	e1 f7       	brne	.-8      	; 0x63e <main+0x64>
 646:	00 c0       	rjmp	.+0      	; 0x648 <main+0x6e>
 648:	00 00       	nop
 64a:	e3 cf       	rjmp	.-58     	; 0x612 <main+0x38>

0000064c <__udivmodhi4>:
 64c:	aa 1b       	sub	r26, r26
 64e:	bb 1b       	sub	r27, r27
 650:	51 e1       	ldi	r21, 0x11	; 17
 652:	07 c0       	rjmp	.+14     	; 0x662 <__udivmodhi4_ep>

00000654 <__udivmodhi4_loop>:
 654:	aa 1f       	adc	r26, r26
 656:	bb 1f       	adc	r27, r27
 658:	a6 17       	cp	r26, r22
 65a:	b7 07       	cpc	r27, r23
 65c:	10 f0       	brcs	.+4      	; 0x662 <__udivmodhi4_ep>
 65e:	a6 1b       	sub	r26, r22
 660:	b7 0b       	sbc	r27, r23

00000662 <__udivmodhi4_ep>:
 662:	88 1f       	adc	r24, r24
 664:	99 1f       	adc	r25, r25
 666:	5a 95       	dec	r21
 668:	a9 f7       	brne	.-22     	; 0x654 <__udivmodhi4_loop>
 66a:	80 95       	com	r24
 66c:	90 95       	com	r25
 66e:	bc 01       	movw	r22, r24
 670:	cd 01       	movw	r24, r26
 672:	08 95       	ret

00000674 <__divmodhi4>:
 674:	97 fb       	bst	r25, 7
 676:	07 2e       	mov	r0, r23
 678:	16 f4       	brtc	.+4      	; 0x67e <__divmodhi4+0xa>
 67a:	00 94       	com	r0
 67c:	07 d0       	rcall	.+14     	; 0x68c <__divmodhi4_neg1>
 67e:	77 fd       	sbrc	r23, 7
 680:	09 d0       	rcall	.+18     	; 0x694 <__divmodhi4_neg2>
 682:	0e 94 26 03 	call	0x64c	; 0x64c <__udivmodhi4>
 686:	07 fc       	sbrc	r0, 7
 688:	05 d0       	rcall	.+10     	; 0x694 <__divmodhi4_neg2>
 68a:	3e f4       	brtc	.+14     	; 0x69a <__divmodhi4_exit>

0000068c <__divmodhi4_neg1>:
 68c:	90 95       	com	r25
 68e:	81 95       	neg	r24
 690:	9f 4f       	sbci	r25, 0xFF	; 255
 692:	08 95       	ret

00000694 <__divmodhi4_neg2>:
 694:	70 95       	com	r23
 696:	61 95       	neg	r22
 698:	7f 4f       	sbci	r23, 0xFF	; 255

0000069a <__divmodhi4_exit>:
 69a:	08 95       	ret

0000069c <__eerd_byte_m16>:
 69c:	e1 99       	sbic	0x1c, 1	; 28
 69e:	fe cf       	rjmp	.-4      	; 0x69c <__eerd_byte_m16>
 6a0:	9f bb       	out	0x1f, r25	; 31
 6a2:	8e bb       	out	0x1e, r24	; 30
 6a4:	e0 9a       	sbi	0x1c, 0	; 28
 6a6:	99 27       	eor	r25, r25
 6a8:	8d b3       	in	r24, 0x1d	; 29
 6aa:	08 95       	ret

000006ac <__eeupd_byte_m16>:
 6ac:	26 2f       	mov	r18, r22

000006ae <__eeupd_r18_m16>:
 6ae:	e1 99       	sbic	0x1c, 1	; 28
 6b0:	fe cf       	rjmp	.-4      	; 0x6ae <__eeupd_r18_m16>
 6b2:	9f bb       	out	0x1f, r25	; 31
 6b4:	8e bb       	out	0x1e, r24	; 30
 6b6:	e0 9a       	sbi	0x1c, 0	; 28
 6b8:	01 97       	sbiw	r24, 0x01	; 1
 6ba:	0d b2       	in	r0, 0x1d	; 29
 6bc:	02 16       	cp	r0, r18
 6be:	31 f0       	breq	.+12     	; 0x6cc <__eeupd_r18_m16+0x1e>
 6c0:	2d bb       	out	0x1d, r18	; 29
 6c2:	0f b6       	in	r0, 0x3f	; 63
 6c4:	f8 94       	cli
 6c6:	e2 9a       	sbi	0x1c, 2	; 28
 6c8:	e1 9a       	sbi	0x1c, 1	; 28
 6ca:	0f be       	out	0x3f, r0	; 63
 6cc:	08 95       	ret

000006ce <_exit>:
 6ce:	f8 94       	cli

000006d0 <__stop_program>:
 6d0:	ff cf       	rjmp	.-2      	; 0x6d0 <__stop_program>
