
Atmel_Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800200  00000df0  00000e84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000df0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080020e  0080020e  00000e92  2**0
                  ALLOC
  3 .stab         00001b30  00000000  00000000  00000e94  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000057e  00000000  00000000  000029c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00002f48  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e1c  00000000  00000000  00003008  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002cb  00000000  00000000  00003e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000723  00000000  00000000  000040ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000318  00000000  00000000  00004814  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002cb  00000000  00000000  00004b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000074d  00000000  00000000  00004df7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	e0 ef       	ldi	r30, 0xF0	; 240
  f8:	fd e0       	ldi	r31, 0x0D	; 13
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	ae 30       	cpi	r26, 0x0E	; 14
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
 106:	12 e0       	ldi	r17, 0x02	; 2
 108:	ae e0       	ldi	r26, 0x0E	; 14
 10a:	b2 e0       	ldi	r27, 0x02	; 2
 10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
 10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
 110:	ac 31       	cpi	r26, 0x1C	; 28
 112:	b1 07       	cpc	r27, r17
 114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
 116:	0e 94 16 05 	call	0xa2c	; 0xa2c <main>
 11a:	0c 94 f6 06 	jmp	0xdec	; 0xdec <_exit>

0000011e <__bad_interrupt>:
 11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <toggleE>:
}


void toggleE(void)
{
SETBIT(PORTE,BIT(0));
 122:	70 9a       	sbi	0x0e, 0	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	83 e3       	ldi	r24, 0x33	; 51
 126:	97 e0       	ldi	r25, 0x07	; 7
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <toggleE+0x6>
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
 12c:	70 98       	cbi	0x0e, 0	; 14
}
 12e:	08 95       	ret

00000130 <dely_ns>:

void dely_ns(unsigned char tim)
{
	for(j=0;j<tim;j++)
 130:	10 92 1a 02 	sts	0x021A, r1
 134:	88 23       	and	r24, r24
 136:	49 f0       	breq	.+18     	; 0x14a <dely_ns+0x1a>
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	9f 5f       	subi	r25, 0xFF	; 255
 13c:	98 17       	cp	r25, r24
 13e:	e9 f7       	brne	.-6      	; 0x13a <dely_ns+0xa>
 140:	9a e0       	ldi	r25, 0x0A	; 10
 142:	90 93 1b 02 	sts	0x021B, r25
 146:	80 93 1a 02 	sts	0x021A, r24
 14a:	08 95       	ret

0000014c <lcd_exit>:
}
		

void lcd_exit(void)
{
	PORTA=save;
 14c:	80 91 19 02 	lds	r24, 0x0219
 150:	82 b9       	out	0x02, r24	; 2
}
 152:	08 95       	ret

00000154 <WaitMs>:
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 154:	4c ec       	ldi	r20, 0xCC	; 204
 156:	5c e0       	ldi	r21, 0x0C	; 12
 158:	06 c0       	rjmp	.+12     	; 0x166 <WaitMs+0x12>
 15a:	9a 01       	movw	r18, r20
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 15c:	00 00       	nop
 15e:	21 50       	subi	r18, 0x01	; 1
 160:	30 40       	sbci	r19, 0x00	; 0

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 162:	e1 f7       	brne	.-8      	; 0x15c <WaitMs+0x8>
 164:	01 97       	sbiw	r24, 0x01	; 1
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 166:	00 97       	sbiw	r24, 0x00	; 0
 168:	c1 f7       	brne	.-16     	; 0x15a <WaitMs+0x6>
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
	}
}
 16a:	08 95       	ret

0000016c <lcd_char>:

}


void lcd_char(unsigned char data)
{	
 16c:	1f 93       	push	r17
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	18 2f       	mov	r17, r24
	int temp;
	WaitMs(15);
 174:	8f e0       	ldi	r24, 0x0F	; 15
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 aa 00 	call	0x154	; 0x154 <WaitMs>
	SETBIT(PORTG,BIT(5));
 17c:	a5 9a       	sbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 17e:	70 98       	cbi	0x0e, 0	; 14
	temp= (data & 0b11000000); // '10'000000
 180:	c1 2f       	mov	r28, r17
 182:	d0 e0       	ldi	r29, 0x00	; 0
 184:	ce 01       	movw	r24, r28
 186:	80 7c       	andi	r24, 0xC0	; 192
 188:	90 70       	andi	r25, 0x00	; 0
	PORTE=temp;
 18a:	8e b9       	out	0x0e, r24	; 14
	temp=(data>>3) & 0b00000110; // 00000'11'0
	PORTE= PORTE | temp;
 18c:	8e b1       	in	r24, 0x0e	; 14
	WaitMs(15);
	SETBIT(PORTG,BIT(5));
	CLEARBIT(PORTE,BIT(0));
	temp= (data & 0b11000000); // '10'000000
	PORTE=temp;
	temp=(data>>3) & 0b00000110; // 00000'11'0
 18e:	16 95       	lsr	r17
 190:	16 95       	lsr	r17
 192:	16 95       	lsr	r17
 194:	16 70       	andi	r17, 0x06	; 6
	PORTE= PORTE | temp;
 196:	18 2b       	or	r17, r24
 198:	1e b9       	out	0x0e, r17	; 14
 19a:	88 e1       	ldi	r24, 0x18	; 24
 19c:	8a 95       	dec	r24
 19e:	f1 f7       	brne	.-4      	; 0x19c <lcd_char+0x30>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <lcd_char+0x36>
	_delay_us(5);
	toggleE();				// '10'000'11'0 (first nibble Done)
 1a2:	0e 94 91 00 	call	0x122	; 0x122 <toggleE>
							/* PORTA = (data & 0xF0);
							PORTA = (data & 0xF0);
							PORTA = (data & 0xF0);*/

	CLEARBIT(PORTG,BIT(5));
 1a6:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 1a8:	70 98       	cbi	0x0e, 0	; 14
	SETBIT(PORTG,BIT(5));
 1aa:	a5 9a       	sbi	0x14, 5	; 20
	temp=(data << 4) & 0b11000000; // '10'000000
 1ac:	ce 01       	movw	r24, r28
 1ae:	82 95       	swap	r24
 1b0:	92 95       	swap	r25
 1b2:	90 7f       	andi	r25, 0xF0	; 240
 1b4:	98 27       	eor	r25, r24
 1b6:	80 7f       	andi	r24, 0xF0	; 240
 1b8:	98 27       	eor	r25, r24
 1ba:	80 7c       	andi	r24, 0xC0	; 192
 1bc:	90 70       	andi	r25, 0x00	; 0
	PORTE=temp;
 1be:	8e b9       	out	0x0e, r24	; 14
	temp=(data << 1) & 0b00000110; // 00000'01'0 
	PORTE= PORTE | temp;
 1c0:	8e b1       	in	r24, 0x0e	; 14
	CLEARBIT(PORTG,BIT(5));
	CLEARBIT(PORTE,BIT(0));
	SETBIT(PORTG,BIT(5));
	temp=(data << 4) & 0b11000000; // '10'000000
	PORTE=temp;
	temp=(data << 1) & 0b00000110; // 00000'01'0 
 1c2:	cc 0f       	add	r28, r28
 1c4:	dd 1f       	adc	r29, r29
 1c6:	c6 70       	andi	r28, 0x06	; 6
 1c8:	d0 70       	andi	r29, 0x00	; 0
	PORTE= PORTE | temp;
 1ca:	c8 2b       	or	r28, r24
 1cc:	ce b9       	out	0x0e, r28	; 14
 1ce:	88 e1       	ldi	r24, 0x18	; 24
 1d0:	8a 95       	dec	r24
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcd_char+0x64>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <lcd_char+0x6a>
	_delay_us(5);
						/*PORTA = (data << 4);
						PORTA = (data << 4);
						PORTA = (data << 4);	*/					
	toggleE();
 1d6:	0e 94 91 00 	call	0x122	; 0x122 <toggleE>
}
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	08 95       	ret

000001e2 <lcd_showvalue>:
		}
}


void lcd_showvalue(unsigned long int num)
{
 1e2:	4f 92       	push	r4
 1e4:	5f 92       	push	r5
 1e6:	6f 92       	push	r6
 1e8:	7f 92       	push	r7
 1ea:	8f 92       	push	r8
 1ec:	9f 92       	push	r9
 1ee:	af 92       	push	r10
 1f0:	bf 92       	push	r11
 1f2:	cf 92       	push	r12
 1f4:	df 92       	push	r13
 1f6:	ef 92       	push	r14
 1f8:	ff 92       	push	r15
 1fa:	0f 93       	push	r16
 1fc:	1f 93       	push	r17
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	00 d0       	rcall	.+0      	; 0x204 <lcd_showvalue+0x22>
 204:	00 d0       	rcall	.+0      	; 0x206 <lcd_showvalue+0x24>
 206:	cd b7       	in	r28, 0x3d	; 61
 208:	de b7       	in	r29, 0x3e	; 62
 20a:	4b 01       	movw	r8, r22
 20c:	5c 01       	movw	r10, r24
	
	unsigned long int n = 0;
	int flag = 0;


	if(num%100000 == 0)
 20e:	20 ea       	ldi	r18, 0xA0	; 160
 210:	36 e8       	ldi	r19, 0x86	; 134
 212:	41 e0       	ldi	r20, 0x01	; 1
 214:	50 e0       	ldi	r21, 0x00	; 0
 216:	0e 94 d4 06 	call	0xda8	; 0xda8 <__udivmodsi4>
 21a:	dc 01       	movw	r26, r24
 21c:	cb 01       	movw	r24, r22
 21e:	00 97       	sbiw	r24, 0x00	; 0
 220:	a1 05       	cpc	r26, r1
 222:	b1 05       	cpc	r27, r1
 224:	09 f4       	brne	.+2      	; 0x228 <lcd_showvalue+0x46>
 226:	3d c0       	rjmp	.+122    	; 0x2a2 <lcd_showvalue+0xc0>
	{
		flag = 5;
	}
	
	else if(num%10000 == 0)
 228:	c5 01       	movw	r24, r10
 22a:	b4 01       	movw	r22, r8
 22c:	20 e1       	ldi	r18, 0x10	; 16
 22e:	37 e2       	ldi	r19, 0x27	; 39
 230:	40 e0       	ldi	r20, 0x00	; 0
 232:	50 e0       	ldi	r21, 0x00	; 0
 234:	0e 94 d4 06 	call	0xda8	; 0xda8 <__udivmodsi4>
 238:	dc 01       	movw	r26, r24
 23a:	cb 01       	movw	r24, r22
 23c:	00 97       	sbiw	r24, 0x00	; 0
 23e:	a1 05       	cpc	r26, r1
 240:	b1 05       	cpc	r27, r1
 242:	91 f1       	breq	.+100    	; 0x2a8 <lcd_showvalue+0xc6>
	{
		flag = 4;
	}

	else if(num%1000 == 0) 
 244:	c5 01       	movw	r24, r10
 246:	b4 01       	movw	r22, r8
 248:	28 ee       	ldi	r18, 0xE8	; 232
 24a:	33 e0       	ldi	r19, 0x03	; 3
 24c:	40 e0       	ldi	r20, 0x00	; 0
 24e:	50 e0       	ldi	r21, 0x00	; 0
 250:	0e 94 d4 06 	call	0xda8	; 0xda8 <__udivmodsi4>
 254:	dc 01       	movw	r26, r24
 256:	cb 01       	movw	r24, r22
 258:	00 97       	sbiw	r24, 0x00	; 0
 25a:	a1 05       	cpc	r26, r1
 25c:	b1 05       	cpc	r27, r1
 25e:	39 f1       	breq	.+78     	; 0x2ae <lcd_showvalue+0xcc>
	{
		flag = 3;
	}

	else if(num%100 == 0) 
 260:	c5 01       	movw	r24, r10
 262:	b4 01       	movw	r22, r8
 264:	24 e6       	ldi	r18, 0x64	; 100
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	40 e0       	ldi	r20, 0x00	; 0
 26a:	50 e0       	ldi	r21, 0x00	; 0
 26c:	0e 94 d4 06 	call	0xda8	; 0xda8 <__udivmodsi4>
 270:	dc 01       	movw	r26, r24
 272:	cb 01       	movw	r24, r22
 274:	00 97       	sbiw	r24, 0x00	; 0
 276:	a1 05       	cpc	r26, r1
 278:	b1 05       	cpc	r27, r1
 27a:	e1 f0       	breq	.+56     	; 0x2b4 <lcd_showvalue+0xd2>
	{
		flag = 2;
	}

	else if(num%10 == 0) 
 27c:	c5 01       	movw	r24, r10
 27e:	b4 01       	movw	r22, r8
 280:	2a e0       	ldi	r18, 0x0A	; 10
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	40 e0       	ldi	r20, 0x00	; 0
 286:	50 e0       	ldi	r21, 0x00	; 0
 288:	0e 94 d4 06 	call	0xda8	; 0xda8 <__udivmodsi4>
 28c:	dc 01       	movw	r26, r24
 28e:	cb 01       	movw	r24, r22
		flag = 5;
	}
	
	else if(num%10000 == 0)
	{
		flag = 4;
 290:	01 e0       	ldi	r16, 0x01	; 1
 292:	10 e0       	ldi	r17, 0x00	; 0
 294:	00 97       	sbiw	r24, 0x00	; 0
 296:	a1 05       	cpc	r26, r1
 298:	b1 05       	cpc	r27, r1
 29a:	71 f0       	breq	.+28     	; 0x2b8 <lcd_showvalue+0xd6>
 29c:	00 e0       	ldi	r16, 0x00	; 0
 29e:	10 e0       	ldi	r17, 0x00	; 0
 2a0:	0b c0       	rjmp	.+22     	; 0x2b8 <lcd_showvalue+0xd6>
	int flag = 0;


	if(num%100000 == 0)
	{
		flag = 5;
 2a2:	05 e0       	ldi	r16, 0x05	; 5
 2a4:	10 e0       	ldi	r17, 0x00	; 0
 2a6:	08 c0       	rjmp	.+16     	; 0x2b8 <lcd_showvalue+0xd6>
	}
	
	else if(num%10000 == 0)
	{
		flag = 4;
 2a8:	04 e0       	ldi	r16, 0x04	; 4
 2aa:	10 e0       	ldi	r17, 0x00	; 0
 2ac:	05 c0       	rjmp	.+10     	; 0x2b8 <lcd_showvalue+0xd6>
	}

	else if(num%1000 == 0) 
	{
		flag = 3;
 2ae:	03 e0       	ldi	r16, 0x03	; 3
 2b0:	10 e0       	ldi	r17, 0x00	; 0
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <lcd_showvalue+0xd6>
	}

	else if(num%100 == 0) 
	{
		flag = 2;
 2b4:	02 e0       	ldi	r16, 0x02	; 2
 2b6:	10 e0       	ldi	r17, 0x00	; 0
		flag = 0;
	}



	while(num!=0)
 2b8:	81 14       	cp	r8, r1
 2ba:	91 04       	cpc	r9, r1
 2bc:	a1 04       	cpc	r10, r1
 2be:	b1 04       	cpc	r11, r1
 2c0:	09 f4       	brne	.+2      	; 0x2c4 <lcd_showvalue+0xe2>
 2c2:	52 c0       	rjmp	.+164    	; 0x368 <lcd_showvalue+0x186>
 2c4:	cc 24       	eor	r12, r12
 2c6:	dd 24       	eor	r13, r13
 2c8:	76 01       	movw	r14, r12
	{
	
			H = num%10;
 2ca:	0f 2e       	mov	r0, r31
 2cc:	fa e0       	ldi	r31, 0x0A	; 10
 2ce:	4f 2e       	mov	r4, r31
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	5f 2e       	mov	r5, r31
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	6f 2e       	mov	r6, r31
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	7f 2e       	mov	r7, r31
 2dc:	f0 2d       	mov	r31, r0
 2de:	c5 01       	movw	r24, r10
 2e0:	b4 01       	movw	r22, r8
 2e2:	a3 01       	movw	r20, r6
 2e4:	92 01       	movw	r18, r4
 2e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__udivmodsi4>
 2ea:	69 83       	std	Y+1, r22	; 0x01
 2ec:	7a 83       	std	Y+2, r23	; 0x02
 2ee:	8b 83       	std	Y+3, r24	; 0x03
 2f0:	9c 83       	std	Y+4, r25	; 0x04
			num = num/10;
 2f2:	82 2e       	mov	r8, r18
 2f4:	93 2e       	mov	r9, r19
 2f6:	a4 2e       	mov	r10, r20
 2f8:	b5 2e       	mov	r11, r21
			n = (n*10)+H;
 2fa:	c7 01       	movw	r24, r14
 2fc:	b6 01       	movw	r22, r12
 2fe:	a3 01       	movw	r20, r6
 300:	92 01       	movw	r18, r4
 302:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__mulsi3>
 306:	6b 01       	movw	r12, r22
 308:	7c 01       	movw	r14, r24
 30a:	89 81       	ldd	r24, Y+1	; 0x01
 30c:	9a 81       	ldd	r25, Y+2	; 0x02
 30e:	ab 81       	ldd	r26, Y+3	; 0x03
 310:	bc 81       	ldd	r27, Y+4	; 0x04
 312:	c8 0e       	add	r12, r24
 314:	d9 1e       	adc	r13, r25
 316:	ea 1e       	adc	r14, r26
 318:	fb 1e       	adc	r15, r27
		flag = 0;
	}



	while(num!=0)
 31a:	81 14       	cp	r8, r1
 31c:	91 04       	cpc	r9, r1
 31e:	a1 04       	cpc	r10, r1
 320:	b1 04       	cpc	r11, r1
 322:	e9 f6       	brne	.-70     	; 0x2de <lcd_showvalue+0xfc>
			num = num/10;
			n = (n*10)+H;

	}
	
	while(n!=0)
 324:	c1 14       	cp	r12, r1
 326:	d1 04       	cpc	r13, r1
 328:	e1 04       	cpc	r14, r1
 32a:	f1 04       	cpc	r15, r1
 32c:	e9 f0       	breq	.+58     	; 0x368 <lcd_showvalue+0x186>
	{
	
			H = n%10;
 32e:	0f 2e       	mov	r0, r31
 330:	fa e0       	ldi	r31, 0x0A	; 10
 332:	8f 2e       	mov	r8, r31
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	9f 2e       	mov	r9, r31
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	af 2e       	mov	r10, r31
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	bf 2e       	mov	r11, r31
 340:	f0 2d       	mov	r31, r0
 342:	c7 01       	movw	r24, r14
 344:	b6 01       	movw	r22, r12
 346:	a5 01       	movw	r20, r10
 348:	94 01       	movw	r18, r8
 34a:	0e 94 d4 06 	call	0xda8	; 0xda8 <__udivmodsi4>
			n = n/10;
 34e:	c2 2e       	mov	r12, r18
 350:	d3 2e       	mov	r13, r19
 352:	e4 2e       	mov	r14, r20
 354:	f5 2e       	mov	r15, r21
			lcd_char(H+48);
 356:	86 2f       	mov	r24, r22
 358:	80 5d       	subi	r24, 0xD0	; 208
 35a:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_char>
			num = num/10;
			n = (n*10)+H;

	}
	
	while(n!=0)
 35e:	c1 14       	cp	r12, r1
 360:	d1 04       	cpc	r13, r1
 362:	e1 04       	cpc	r14, r1
 364:	f1 04       	cpc	r15, r1
 366:	69 f7       	brne	.-38     	; 0x342 <lcd_showvalue+0x160>
			lcd_char(H+48);

	}
	
	
	while(flag > 0)
 368:	10 16       	cp	r1, r16
 36a:	11 06       	cpc	r1, r17
 36c:	34 f4       	brge	.+12     	; 0x37a <lcd_showvalue+0x198>
	{
		lcd_char(48);
 36e:	80 e3       	ldi	r24, 0x30	; 48
 370:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_char>
		flag--;
 374:	01 50       	subi	r16, 0x01	; 1
 376:	10 40       	sbci	r17, 0x00	; 0
			lcd_char(H+48);

	}
	
	
	while(flag > 0)
 378:	d1 f7       	brne	.-12     	; 0x36e <lcd_showvalue+0x18c>
	{
		lcd_char(48);
		flag--;
	}	

}
 37a:	0f 90       	pop	r0
 37c:	0f 90       	pop	r0
 37e:	0f 90       	pop	r0
 380:	0f 90       	pop	r0
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	1f 91       	pop	r17
 388:	0f 91       	pop	r16
 38a:	ff 90       	pop	r15
 38c:	ef 90       	pop	r14
 38e:	df 90       	pop	r13
 390:	cf 90       	pop	r12
 392:	bf 90       	pop	r11
 394:	af 90       	pop	r10
 396:	9f 90       	pop	r9
 398:	8f 90       	pop	r8
 39a:	7f 90       	pop	r7
 39c:	6f 90       	pop	r6
 39e:	5f 90       	pop	r5
 3a0:	4f 90       	pop	r4
 3a2:	08 95       	ret

000003a4 <lcd_showvaluef>:


void lcd_showvaluef(float num)
{
 3a4:	cf 92       	push	r12
 3a6:	df 92       	push	r13
 3a8:	ef 92       	push	r14
 3aa:	ff 92       	push	r15
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	00 d0       	rcall	.+0      	; 0x3b2 <lcd_showvaluef+0xe>
 3b2:	00 d0       	rcall	.+0      	; 0x3b4 <lcd_showvaluef+0x10>
 3b4:	cd b7       	in	r28, 0x3d	; 61
 3b6:	de b7       	in	r29, 0x3e	; 62
 3b8:	6b 01       	movw	r12, r22
 3ba:	7c 01       	movw	r14, r24

	unsigned long int l;
	double fraction,integer;

	l = (unsigned long int)num;
 3bc:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__fixunssfsi>

	lcd_showvalue(l);
 3c0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_showvalue>

	fraction = modf((double)num,&integer);
 3c4:	c7 01       	movw	r24, r14
 3c6:	b6 01       	movw	r22, r12
 3c8:	ae 01       	movw	r20, r28
 3ca:	4f 5f       	subi	r20, 0xFF	; 255
 3cc:	5f 4f       	sbci	r21, 0xFF	; 255
 3ce:	0e 94 92 05 	call	0xb24	; 0xb24 <modf>
 3d2:	6b 01       	movw	r12, r22
 3d4:	7c 01       	movw	r14, r24

	l = (unsigned long int)(fraction * 100000);

	lcd_char('.');
 3d6:	8e e2       	ldi	r24, 0x2E	; 46
 3d8:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_char>

	lcd_showvalue(l);

	fraction = modf((double)num,&integer);

	l = (unsigned long int)(fraction * 100000);
 3dc:	c7 01       	movw	r24, r14
 3de:	b6 01       	movw	r22, r12
 3e0:	20 e0       	ldi	r18, 0x00	; 0
 3e2:	30 e5       	ldi	r19, 0x50	; 80
 3e4:	43 ec       	ldi	r20, 0xC3	; 195
 3e6:	57 e4       	ldi	r21, 0x47	; 71
 3e8:	0e 94 c5 05 	call	0xb8a	; 0xb8a <__mulsf3>
 3ec:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__fixunssfsi>

	lcd_char('.');

	lcd_showvalue(l);
 3f0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_showvalue>

}
 3f4:	0f 90       	pop	r0
 3f6:	0f 90       	pop	r0
 3f8:	0f 90       	pop	r0
 3fa:	0f 90       	pop	r0
 3fc:	df 91       	pop	r29
 3fe:	cf 91       	pop	r28
 400:	ff 90       	pop	r15
 402:	ef 90       	pop	r14
 404:	df 90       	pop	r13
 406:	cf 90       	pop	r12
 408:	08 95       	ret

0000040a <lcd_cmd>:
		{};
	}
}

void lcd_cmd(unsigned char ch)
{
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
	int temp;
	CLEARBIT(PORTG,BIT(5));
 40e:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 410:	70 98       	cbi	0x0e, 0	; 14
					/*PORTA = (ch & 0xF0);			// Send twice because ATMEGA is too fast 
  					PORTA = (ch & 0xF0); 			// for the LCD display !
  					PORTA = ch & 0xF0;
   					PORTA = ch & 0xF0;*/

	temp= ch & 0b11000000; // '10'000000
 412:	c8 2f       	mov	r28, r24
 414:	d0 e0       	ldi	r29, 0x00	; 0
 416:	9e 01       	movw	r18, r28
 418:	20 7c       	andi	r18, 0xC0	; 192
 41a:	30 70       	andi	r19, 0x00	; 0
	PORTE=temp;
 41c:	2e b9       	out	0x0e, r18	; 14
	temp=(ch >> 3) & 0b00000110; // 00000'11'0
	PORTE= PORTE | temp;
 41e:	9e b1       	in	r25, 0x0e	; 14
  					PORTA = ch & 0xF0;
   					PORTA = ch & 0xF0;*/

	temp= ch & 0b11000000; // '10'000000
	PORTE=temp;
	temp=(ch >> 3) & 0b00000110; // 00000'11'0
 420:	86 95       	lsr	r24
 422:	86 95       	lsr	r24
 424:	86 95       	lsr	r24
 426:	86 70       	andi	r24, 0x06	; 6
	PORTE= PORTE | temp;
 428:	89 2b       	or	r24, r25
 42a:	8e b9       	out	0x0e, r24	; 14
 42c:	88 e1       	ldi	r24, 0x18	; 24
 42e:	8a 95       	dec	r24
 430:	f1 f7       	brne	.-4      	; 0x42e <lcd_cmd+0x24>
 432:	00 c0       	rjmp	.+0      	; 0x434 <lcd_cmd+0x2a>
	_delay_us(5);
	toggleE();
 434:	0e 94 91 00 	call	0x122	; 0x122 <toggleE>
   // Extract lower nibble
	SETBIT(PORTG,BIT(5));
 438:	a5 9a       	sbi	0x14, 5	; 20
   	CLEARBIT(PORTG,BIT(5));
 43a:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 43c:	70 98       	cbi	0x0e, 0	; 14
   					/*PORTA = ((ch << 4) & 0xF0); 	// Send twice because ATMEGA is too fast 
   					PORTA = ((ch << 4) & 0xF0);	// for the LCD display !
   					PORTA = (ch << 4) & 0xF0;
   					PORTA = (ch << 4) & 0xF0;*/
	temp=(ch << 4) & 0b11000000; // '10'000000
 43e:	ce 01       	movw	r24, r28
 440:	82 95       	swap	r24
 442:	92 95       	swap	r25
 444:	90 7f       	andi	r25, 0xF0	; 240
 446:	98 27       	eor	r25, r24
 448:	80 7f       	andi	r24, 0xF0	; 240
 44a:	98 27       	eor	r25, r24
 44c:	80 7c       	andi	r24, 0xC0	; 192
 44e:	90 70       	andi	r25, 0x00	; 0
	PORTE=temp;
 450:	8e b9       	out	0x0e, r24	; 14
	temp=(ch << 1) & 0b00000110; // 00000'01'0 
	PORTE= PORTE | temp;
 452:	8e b1       	in	r24, 0x0e	; 14
   					PORTA = ((ch << 4) & 0xF0);	// for the LCD display !
   					PORTA = (ch << 4) & 0xF0;
   					PORTA = (ch << 4) & 0xF0;*/
	temp=(ch << 4) & 0b11000000; // '10'000000
	PORTE=temp;
	temp=(ch << 1) & 0b00000110; // 00000'01'0 
 454:	cc 0f       	add	r28, r28
 456:	dd 1f       	adc	r29, r29
 458:	c6 70       	andi	r28, 0x06	; 6
 45a:	d0 70       	andi	r29, 0x00	; 0
	PORTE= PORTE | temp;
 45c:	c8 2b       	or	r28, r24
 45e:	ce b9       	out	0x0e, r28	; 14
 460:	88 e1       	ldi	r24, 0x18	; 24
 462:	8a 95       	dec	r24
 464:	f1 f7       	brne	.-4      	; 0x462 <lcd_cmd+0x58>
 466:	00 c0       	rjmp	.+0      	; 0x468 <lcd_cmd+0x5e>
	_delay_us(5);
	toggleE();
 468:	0e 94 91 00 	call	0x122	; 0x122 <toggleE>
   	PORTE = 0x00;
 46c:	1e b8       	out	0x0e, r1	; 14
   	WaitMs(10);
 46e:	8a e0       	ldi	r24, 0x0A	; 10
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	0e 94 aa 00 	call	0x154	; 0x154 <WaitMs>


}
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
 47a:	08 95       	ret

0000047c <lcd_gotoxy2>:
	lcd_cmd(LINE1+pos);
}

void lcd_gotoxy2(unsigned char pos)
{
	lcd_cmd(LINE2+pos);
 47c:	80 54       	subi	r24, 0x40	; 64
 47e:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_cmd>
}
 482:	08 95       	ret

00000484 <lcd_gotoxy1>:

}

void lcd_gotoxy1(unsigned char pos)
{
	lcd_cmd(LINE1+pos);
 484:	80 58       	subi	r24, 0x80	; 128
 486:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_cmd>
}
 48a:	08 95       	ret

0000048c <lcd_string>:
						PORTA = (data << 4);	*/					
	toggleE();
}

void lcd_string(unsigned char str[32])
{
 48c:	ef 92       	push	r14
 48e:	ff 92       	push	r15
 490:	1f 93       	push	r17
 492:	cf 93       	push	r28
 494:	df 93       	push	r29
 496:	7c 01       	movw	r14, r24
	int poop,bitch;
	unsigned char k=0;
	PORTA=0x01;
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	82 b9       	out	0x02, r24	; 2
	SETBIT(PORTG,BIT(5));
 49c:	a5 9a       	sbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 49e:	70 98       	cbi	0x0e, 0	; 14
	while(str[k]!='\0')	//Till null character is encountered
 4a0:	f7 01       	movw	r30, r14
 4a2:	80 81       	ld	r24, Z
 4a4:	88 23       	and	r24, r24
 4a6:	39 f4       	brne	.+14     	; 0x4b6 <lcd_string+0x2a>
 4a8:	41 c0       	rjmp	.+130    	; 0x52c <lcd_string+0xa0>
		{
			if(k==16)
 4aa:	10 31       	cpi	r17, 0x10	; 16
 4ac:	31 f4       	brne	.+12     	; 0x4ba <lcd_string+0x2e>
				lcd_cmd(LINE2);
 4ae:	80 ec       	ldi	r24, 0xC0	; 192
 4b0:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_cmd>
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <lcd_string+0x2e>
	int poop,bitch;
	unsigned char k=0;
	PORTA=0x01;
	SETBIT(PORTG,BIT(5));
	CLEARBIT(PORTE,BIT(0));
	while(str[k]!='\0')	//Till null character is encountered
 4b6:	e7 01       	movw	r28, r14
}

void lcd_string(unsigned char str[32])
{
	int poop,bitch;
	unsigned char k=0;
 4b8:	10 e0       	ldi	r17, 0x00	; 0
	CLEARBIT(PORTE,BIT(0));
	while(str[k]!='\0')	//Till null character is encountered
		{
			if(k==16)
				lcd_cmd(LINE2);
			SETBIT(PORTG,BIT(5));
 4ba:	a5 9a       	sbi	0x14, 5	; 20
			CLEARBIT(PORTE,BIT(0));
 4bc:	70 98       	cbi	0x0e, 0	; 14
			bitch=str[k]; //10111001
 4be:	88 81       	ld	r24, Y
 4c0:	90 e0       	ldi	r25, 0x00	; 0
			poop= bitch & 0b11000000; // '10'000000
 4c2:	9c 01       	movw	r18, r24
 4c4:	20 7c       	andi	r18, 0xC0	; 192
 4c6:	30 70       	andi	r19, 0x00	; 0
			PORTE=poop;
 4c8:	2e b9       	out	0x0e, r18	; 14
			poop=(bitch>>3) & 0b00000110; // 00000'11'0
			PORTE= PORTE | poop;
 4ca:	2e b1       	in	r18, 0x0e	; 14
			SETBIT(PORTG,BIT(5));
			CLEARBIT(PORTE,BIT(0));
			bitch=str[k]; //10111001
			poop= bitch & 0b11000000; // '10'000000
			PORTE=poop;
			poop=(bitch>>3) & 0b00000110; // 00000'11'0
 4cc:	95 95       	asr	r25
 4ce:	87 95       	ror	r24
 4d0:	95 95       	asr	r25
 4d2:	87 95       	ror	r24
 4d4:	95 95       	asr	r25
 4d6:	87 95       	ror	r24
 4d8:	86 70       	andi	r24, 0x06	; 6
 4da:	90 70       	andi	r25, 0x00	; 0
			PORTE= PORTE | poop;
 4dc:	82 2b       	or	r24, r18
 4de:	8e b9       	out	0x0e, r24	; 14
			//PORTA=((str[k])&0xF0)|0x01;
			toggleE();
 4e0:	0e 94 91 00 	call	0x122	; 0x122 <toggleE>
			CLEARBIT(PORTG,BIT(5))
 4e4:	a5 98       	cbi	0x14, 5	; 20
			SETBIT(PORTG,BIT(5));
 4e6:	a5 9a       	sbi	0x14, 5	; 20
			CLEARBIT(PORTE,BIT(0));
 4e8:	70 98       	cbi	0x0e, 0	; 14
			bitch=str[k];
 4ea:	88 81       	ld	r24, Y
 4ec:	90 e0       	ldi	r25, 0x00	; 0
			poop=(bitch << 4) & 0b11000000; // '10'000000
 4ee:	9c 01       	movw	r18, r24
 4f0:	22 95       	swap	r18
 4f2:	32 95       	swap	r19
 4f4:	30 7f       	andi	r19, 0xF0	; 240
 4f6:	32 27       	eor	r19, r18
 4f8:	20 7f       	andi	r18, 0xF0	; 240
 4fa:	32 27       	eor	r19, r18
 4fc:	20 7c       	andi	r18, 0xC0	; 192
 4fe:	30 70       	andi	r19, 0x00	; 0
			PORTE=poop;
 500:	2e b9       	out	0x0e, r18	; 14
			poop=(bitch << 1) & 0b00000110; // 00000'01'0 
			PORTE= PORTE | poop;
 502:	2e b1       	in	r18, 0x0e	; 14
			SETBIT(PORTG,BIT(5));
			CLEARBIT(PORTE,BIT(0));
			bitch=str[k];
			poop=(bitch << 4) & 0b11000000; // '10'000000
			PORTE=poop;
			poop=(bitch << 1) & 0b00000110; // 00000'01'0 
 504:	88 0f       	add	r24, r24
 506:	99 1f       	adc	r25, r25
 508:	86 70       	andi	r24, 0x06	; 6
 50a:	90 70       	andi	r25, 0x00	; 0
			PORTE= PORTE | poop;
 50c:	82 2b       	or	r24, r18
 50e:	8e b9       	out	0x0e, r24	; 14
			//PORTA=((str[k]&(0x0F))*16)|0x01;
			toggleE();
 510:	0e 94 91 00 	call	0x122	; 0x122 <toggleE>
			k++;
 514:	1f 5f       	subi	r17, 0xFF	; 255
			WaitMs(1);
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	0e 94 aa 00 	call	0x154	; 0x154 <WaitMs>
	int poop,bitch;
	unsigned char k=0;
	PORTA=0x01;
	SETBIT(PORTG,BIT(5));
	CLEARBIT(PORTE,BIT(0));
	while(str[k]!='\0')	//Till null character is encountered
 51e:	e7 01       	movw	r28, r14
 520:	c1 0f       	add	r28, r17
 522:	d1 1d       	adc	r29, r1
 524:	88 81       	ld	r24, Y
 526:	88 23       	and	r24, r24
 528:	09 f0       	breq	.+2      	; 0x52c <lcd_string+0xa0>
 52a:	bf cf       	rjmp	.-130    	; 0x4aa <lcd_string+0x1e>
			//PORTA=((str[k]&(0x0F))*16)|0x01;
			toggleE();
			k++;
			WaitMs(1);
		}
}
 52c:	df 91       	pop	r29
 52e:	cf 91       	pop	r28
 530:	1f 91       	pop	r17
 532:	ff 90       	pop	r15
 534:	ef 90       	pop	r14
 536:	08 95       	ret

00000538 <lcd_init>:
void lcd_exit(void);
void WaitMs(unsigned int ms);

void lcd_init(void)	//init the lcd
{	
	DDRE=0xC7;
 538:	87 ec       	ldi	r24, 0xC7	; 199
 53a:	8d b9       	out	0x0d, r24	; 13
	//DDRC=0x80;
	DDRG=0x20;
 53c:	80 e2       	ldi	r24, 0x20	; 32
 53e:	83 bb       	out	0x13, r24	; 19
	WaitMs(15);
 540:	8f e0       	ldi	r24, 0x0F	; 15
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	0e 94 aa 00 	call	0x154	; 0x154 <WaitMs>
	CLEARBIT(PORTG,BIT(5));
 548:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 54a:	70 98       	cbi	0x0e, 0	; 14
	PORTE=0x00;
 54c:	1e b8       	out	0x0e, r1	; 14
	lcd_cmd(0x20);		//data is 8-bit length
 54e:	80 e2       	ldi	r24, 0x20	; 32
 550:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_cmd>
	WaitMs(1);
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	0e 94 aa 00 	call	0x154	; 0x154 <WaitMs>
	lcd_cmd(0x20);		//data is 8-bit length
 55c:	80 e2       	ldi	r24, 0x20	; 32
 55e:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_cmd>
	WaitMs(1);
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	0e 94 aa 00 	call	0x154	; 0x154 <WaitMs>
	lcd_cmd(0x20);		//data is 8-bit length
 56a:	80 e2       	ldi	r24, 0x20	; 32
 56c:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_cmd>
	WaitMs(1);
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	0e 94 aa 00 	call	0x154	; 0x154 <WaitMs>
	lcd_cmd(0x28);		//sets character font
 578:	88 e2       	ldi	r24, 0x28	; 40
 57a:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_cmd>
	WaitMs(1);
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	0e 94 aa 00 	call	0x154	; 0x154 <WaitMs>
	lcd_cmd(0x0E);		//display off(d,c,b=0) 08
 586:	8e e0       	ldi	r24, 0x0E	; 14
 588:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_cmd>
	WaitMs(1);
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	0e 94 aa 00 	call	0x154	; 0x154 <WaitMs>
	lcd_cmd(0x01);		//clears the data
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_cmd>
	WaitMs(1);
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	0e 94 aa 00 	call	0x154	; 0x154 <WaitMs>
	//lcd_cmd(0x02);		//home
	//WaitMs(1);
	lcd_cmd(0x6);		//entry mode--increment
 5a2:	86 e0       	ldi	r24, 0x06	; 6
 5a4:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_cmd>
	WaitMs(1);
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	0e 94 aa 00 	call	0x154	; 0x154 <WaitMs>
	//lcd_cmd(0x0C);		//display--on,cursor--on.blinking--on
	//WaitMs(1);
}
 5b0:	08 95       	ret

000005b2 <pwm_init>:
int MaxonSpeed = 550;

//-----------------INITIALISATION-------------------
void pwm_init(void)
{
	TCCR4A = 0xA8;
 5b2:	38 ea       	ldi	r19, 0xA8	; 168
 5b4:	30 93 a0 00 	sts	0x00A0, r19
	TCCR4B = 0x11;
 5b8:	21 e1       	ldi	r18, 0x11	; 17
 5ba:	20 93 a1 00 	sts	0x00A1, r18
	ICR4 = 737;
 5be:	81 ee       	ldi	r24, 0xE1	; 225
 5c0:	92 e0       	ldi	r25, 0x02	; 2
 5c2:	90 93 a7 00 	sts	0x00A7, r25
 5c6:	80 93 a6 00 	sts	0x00A6, r24
	TCCR5A = 0xA8;
 5ca:	30 93 20 01 	sts	0x0120, r19
	TCCR5B = 0x11;
 5ce:	20 93 21 01 	sts	0x0121, r18
	ICR5 = 737;
 5d2:	90 93 27 01 	sts	0x0127, r25
 5d6:	80 93 26 01 	sts	0x0126, r24
}
 5da:	08 95       	ret

000005dc <port_init>:

void port_init(void)
{
	DDRJ |= (1 << PJ0) | (1 << PJ2) | (1 << PJ1) | (1 << PJ3);
 5dc:	e4 e0       	ldi	r30, 0x04	; 4
 5de:	f1 e0       	ldi	r31, 0x01	; 1
 5e0:	80 81       	ld	r24, Z
 5e2:	8f 60       	ori	r24, 0x0F	; 15
 5e4:	80 83       	st	Z, r24
	DDRE |= (1 << PE3) | (1 << PE4) | (1 << PE5);
 5e6:	8d b1       	in	r24, 0x0d	; 13
 5e8:	88 63       	ori	r24, 0x38	; 56
 5ea:	8d b9       	out	0x0d, r24	; 13
	DDRL |= (1 << PL0) | (1 << PL3) |(1 << PL4)| (1 << PL1) | (1<<PL5);
 5ec:	ea e0       	ldi	r30, 0x0A	; 10
 5ee:	f1 e0       	ldi	r31, 0x01	; 1
 5f0:	80 81       	ld	r24, Z
 5f2:	8b 63       	ori	r24, 0x3B	; 59
 5f4:	80 83       	st	Z, r24
	DDRH |= (1 << PH4) | (1 << PH3) | (1 << PH5) | (1 << PH6);
 5f6:	e1 e0       	ldi	r30, 0x01	; 1
 5f8:	f1 e0       	ldi	r31, 0x01	; 1
 5fa:	80 81       	ld	r24, Z
 5fc:	88 67       	ori	r24, 0x78	; 120
 5fe:	80 83       	st	Z, r24
	DDRG |= (1 << PG4) | (1<<PG2);
 600:	83 b3       	in	r24, 0x13	; 19
 602:	84 61       	ori	r24, 0x14	; 20
 604:	83 bb       	out	0x13, r24	; 19
	DDRA = 0xFF;
 606:	8f ef       	ldi	r24, 0xFF	; 255
 608:	81 b9       	out	0x01, r24	; 1
	DDRC = 0xFF;
 60a:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xFF;
 60c:	8a b9       	out	0x0a, r24	; 10
	PORTC = 0xFF;
 60e:	88 b9       	out	0x08, r24	; 8
	CLEARBIT(PORTA, BIT(0));
 610:	10 98       	cbi	0x02, 0	; 2
	CLEARBIT(PORTE,BIT(5));		//pump
 612:	75 98       	cbi	0x0e, 5	; 14

	CLEARBIT(DDRF,BIT(0));
 614:	80 98       	cbi	0x10, 0	; 16
	SETBIT(PORTF,BIT(0));
 616:	88 9a       	sbi	0x11, 0	; 17
}
 618:	08 95       	ret

0000061a <UartInit>:


//--------------------UART----------------------------
void UartInit(void)
{
	DDRH |= (1<<PH1);
 61a:	e1 e0       	ldi	r30, 0x01	; 1
 61c:	f1 e0       	ldi	r31, 0x01	; 1
 61e:	80 81       	ld	r24, Z
 620:	82 60       	ori	r24, 0x02	; 2
 622:	80 83       	st	Z, r24
	DDRH &= ~(1<<PH0);
 624:	80 81       	ld	r24, Z
 626:	8e 7f       	andi	r24, 0xFE	; 254
 628:	80 83       	st	Z, r24
	
	PORTH |= (1<<PH1);
 62a:	e2 e0       	ldi	r30, 0x02	; 2
 62c:	f1 e0       	ldi	r31, 0x01	; 1
 62e:	80 81       	ld	r24, Z
 630:	82 60       	ori	r24, 0x02	; 2
 632:	80 83       	st	Z, r24
	PORTH &= ~(1<<PH0);
 634:	80 81       	ld	r24, Z
 636:	8e 7f       	andi	r24, 0xFE	; 254
 638:	80 83       	st	Z, r24
	
	UCSR2B |= (1<<RXEN2) | (1<<TXEN2);
 63a:	e1 ed       	ldi	r30, 0xD1	; 209
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	80 81       	ld	r24, Z
 640:	88 61       	ori	r24, 0x18	; 24
 642:	80 83       	st	Z, r24
	UCSR2C |= (1<<UCSZ20) | (1<<UCSZ21);
 644:	e2 ed       	ldi	r30, 0xD2	; 210
 646:	f0 e0       	ldi	r31, 0x00	; 0
 648:	80 81       	ld	r24, Z
 64a:	86 60       	ori	r24, 0x06	; 6
 64c:	80 83       	st	Z, r24
	UCSR2A |= (1<<U2X2);
 64e:	e0 ed       	ldi	r30, 0xD0	; 208
 650:	f0 e0       	ldi	r31, 0x00	; 0
 652:	80 81       	ld	r24, Z
 654:	82 60       	ori	r24, 0x02	; 2
 656:	80 83       	st	Z, r24
	
	UBRR2 = 191;
 658:	8f eb       	ldi	r24, 0xBF	; 191
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	90 93 d5 00 	sts	0x00D5, r25
 660:	80 93 d4 00 	sts	0x00D4, r24
	// RX - PJ0
	// TX - PJ1
	
	// Using Channel 2 of 640 Present at PORTH
}
 664:	08 95       	ret

00000666 <UartTransmit>:

void UartTransmit(uint8_t data)
{
	while ( !( UCSR2A & (1<<UDRE2)) );
 666:	e0 ed       	ldi	r30, 0xD0	; 208
 668:	f0 e0       	ldi	r31, 0x00	; 0
 66a:	90 81       	ld	r25, Z
 66c:	95 ff       	sbrs	r25, 5
 66e:	fd cf       	rjmp	.-6      	; 0x66a <UartTransmit+0x4>
	UDR2 = data;
 670:	80 93 d6 00 	sts	0x00D6, r24
}
 674:	08 95       	ret

00000676 <UartReceive>:
uint8_t UartReceive(void)
{
	while ( !( UCSR2A & (1<<RXC2)) );
 676:	e0 ed       	ldi	r30, 0xD0	; 208
 678:	f0 e0       	ldi	r31, 0x00	; 0
 67a:	80 81       	ld	r24, Z
 67c:	88 23       	and	r24, r24
 67e:	ec f7       	brge	.-6      	; 0x67a <UartReceive+0x4>
	return UDR2;
 680:	80 91 d6 00 	lds	r24, 0x00D6
}
 684:	08 95       	ret

00000686 <ADCInit>:


//------------------ADC-----------------------------
void ADCInit(void)
{
	ADCSRA |= (1<<ADEN);
 686:	ea e7       	ldi	r30, 0x7A	; 122
 688:	f0 e0       	ldi	r31, 0x00	; 0
 68a:	80 81       	ld	r24, Z
 68c:	80 68       	ori	r24, 0x80	; 128
 68e:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 690:	80 81       	ld	r24, Z
 692:	87 60       	ori	r24, 0x07	; 7
 694:	80 83       	st	Z, r24
	ADMUX |= (1<<ADLAR);
 696:	ac e7       	ldi	r26, 0x7C	; 124
 698:	b0 e0       	ldi	r27, 0x00	; 0
 69a:	8c 91       	ld	r24, X
 69c:	80 62       	ori	r24, 0x20	; 32
 69e:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADSC);
 6a0:	80 81       	ld	r24, Z
 6a2:	80 64       	ori	r24, 0x40	; 64
 6a4:	80 83       	st	Z, r24
}
 6a6:	08 95       	ret

000006a8 <ADCConvert>:

int ADCConvert(void)
{
	ADCSRA |= (1<<ADSC);
 6a8:	ea e7       	ldi	r30, 0x7A	; 122
 6aa:	f0 e0       	ldi	r31, 0x00	; 0
 6ac:	80 81       	ld	r24, Z
 6ae:	80 64       	ori	r24, 0x40	; 64
 6b0:	80 83       	st	Z, r24
	
	while( !(ADCSRA & (1<<ADIF)));
 6b2:	80 81       	ld	r24, Z
 6b4:	84 ff       	sbrs	r24, 4
 6b6:	fd cf       	rjmp	.-6      	; 0x6b2 <ADCConvert+0xa>
	return ADCH;
 6b8:	80 91 79 00 	lds	r24, 0x0079
}
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	08 95       	ret

000006c0 <lft_fwd>:
//--------------------------------------------------

//------------MAXON FUNCTIONS----------------------------------
void lft_fwd(void)
{
	PORTJ |= (1 << PJ1);
 6c0:	e5 e0       	ldi	r30, 0x05	; 5
 6c2:	f1 e0       	ldi	r31, 0x01	; 1
 6c4:	80 81       	ld	r24, Z
 6c6:	82 60       	ori	r24, 0x02	; 2
 6c8:	80 83       	st	Z, r24
	PORTJ &= ~(1 << PJ0);
 6ca:	80 81       	ld	r24, Z
 6cc:	8e 7f       	andi	r24, 0xFE	; 254
 6ce:	80 83       	st	Z, r24
	OCR5A = MaxonSpeed;
 6d0:	80 91 00 02 	lds	r24, 0x0200
 6d4:	90 91 01 02 	lds	r25, 0x0201
 6d8:	90 93 29 01 	sts	0x0129, r25
 6dc:	80 93 28 01 	sts	0x0128, r24
}
 6e0:	08 95       	ret

000006e2 <lft_rev>:

void lft_rev(void)
{
	PORTJ |= (1 << PJ0);
 6e2:	e5 e0       	ldi	r30, 0x05	; 5
 6e4:	f1 e0       	ldi	r31, 0x01	; 1
 6e6:	80 81       	ld	r24, Z
 6e8:	81 60       	ori	r24, 0x01	; 1
 6ea:	80 83       	st	Z, r24
	PORTJ &= ~(1 << PJ1);
 6ec:	80 81       	ld	r24, Z
 6ee:	8d 7f       	andi	r24, 0xFD	; 253
 6f0:	80 83       	st	Z, r24
	OCR5A = MaxonSpeed;
 6f2:	80 91 00 02 	lds	r24, 0x0200
 6f6:	90 91 01 02 	lds	r25, 0x0201
 6fa:	90 93 29 01 	sts	0x0129, r25
 6fe:	80 93 28 01 	sts	0x0128, r24
}
 702:	08 95       	ret

00000704 <rgt_fwd>:

void rgt_fwd(void)
{
	PORTJ |= (1 << PJ2);
 704:	e5 e0       	ldi	r30, 0x05	; 5
 706:	f1 e0       	ldi	r31, 0x01	; 1
 708:	80 81       	ld	r24, Z
 70a:	84 60       	ori	r24, 0x04	; 4
 70c:	80 83       	st	Z, r24
	PORTJ &= ~(1 << PJ3);
 70e:	80 81       	ld	r24, Z
 710:	87 7f       	andi	r24, 0xF7	; 247
 712:	80 83       	st	Z, r24
	OCR5B = MaxonSpeed;
 714:	80 91 00 02 	lds	r24, 0x0200
 718:	90 91 01 02 	lds	r25, 0x0201
 71c:	90 93 2b 01 	sts	0x012B, r25
 720:	80 93 2a 01 	sts	0x012A, r24
}
 724:	08 95       	ret

00000726 <rgt_rev>:

void rgt_rev(void)
{
	PORTJ |= (1 << PJ3);
 726:	e5 e0       	ldi	r30, 0x05	; 5
 728:	f1 e0       	ldi	r31, 0x01	; 1
 72a:	80 81       	ld	r24, Z
 72c:	88 60       	ori	r24, 0x08	; 8
 72e:	80 83       	st	Z, r24
	PORTJ &= ~(1 << PJ2);
 730:	80 81       	ld	r24, Z
 732:	8b 7f       	andi	r24, 0xFB	; 251
 734:	80 83       	st	Z, r24
	OCR5B = MaxonSpeed;
 736:	80 91 00 02 	lds	r24, 0x0200
 73a:	90 91 01 02 	lds	r25, 0x0201
 73e:	90 93 2b 01 	sts	0x012B, r25
 742:	80 93 2a 01 	sts	0x012A, r24
}
 746:	08 95       	ret

00000748 <rgt_stop>:


void rgt_stop(void)
{
	OCR5B = 100;
 748:	84 e6       	ldi	r24, 0x64	; 100
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	90 93 2b 01 	sts	0x012B, r25
 750:	80 93 2a 01 	sts	0x012A, r24
	TOGGLEBIT(PORTJ, BIT(2));
 754:	e5 e0       	ldi	r30, 0x05	; 5
 756:	f1 e0       	ldi	r31, 0x01	; 1
 758:	90 81       	ld	r25, Z
 75a:	84 e0       	ldi	r24, 0x04	; 4
 75c:	89 27       	eor	r24, r25
 75e:	80 83       	st	Z, r24
	TOGGLEBIT(PORTJ, BIT(3));
 760:	90 81       	ld	r25, Z
 762:	88 e0       	ldi	r24, 0x08	; 8
 764:	89 27       	eor	r24, r25
 766:	80 83       	st	Z, r24
}
 768:	08 95       	ret

0000076a <lft_stop>:

void lft_stop(void)
{
	OCR5A = 100;
 76a:	84 e6       	ldi	r24, 0x64	; 100
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	90 93 29 01 	sts	0x0129, r25
 772:	80 93 28 01 	sts	0x0128, r24
	TOGGLEBIT(PORTJ, BIT(0));
 776:	e5 e0       	ldi	r30, 0x05	; 5
 778:	f1 e0       	ldi	r31, 0x01	; 1
 77a:	90 81       	ld	r25, Z
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	89 27       	eor	r24, r25
 780:	80 83       	st	Z, r24
	TOGGLEBIT(PORTJ, BIT(1));
 782:	90 81       	ld	r25, Z
 784:	82 e0       	ldi	r24, 0x02	; 2
 786:	89 27       	eor	r24, r25
 788:	80 83       	st	Z, r24
}
 78a:	08 95       	ret

0000078c <ppup>:


//-------------PARALLELOGRAM FUMCTIONS--------------
void ppup(void)
{
	CLEARBIT(PORTH, BIT(7));			
 78c:	e2 e0       	ldi	r30, 0x02	; 2
 78e:	f1 e0       	ldi	r31, 0x01	; 1
 790:	80 81       	ld	r24, Z
 792:	8f 77       	andi	r24, 0x7F	; 127
 794:	80 83       	st	Z, r24
	OCR5C = 737;
 796:	81 ee       	ldi	r24, 0xE1	; 225
 798:	92 e0       	ldi	r25, 0x02	; 2
 79a:	90 93 2d 01 	sts	0x012D, r25
 79e:	80 93 2c 01 	sts	0x012C, r24
	SETBIT(PORTE, BIT(4));				//Break bit
 7a2:	74 9a       	sbi	0x0e, 4	; 14
}
 7a4:	08 95       	ret

000007a6 <ppdown>:

void ppdown(void)
{
	SETBIT(PORTH, BIT(7));			
 7a6:	e2 e0       	ldi	r30, 0x02	; 2
 7a8:	f1 e0       	ldi	r31, 0x01	; 1
 7aa:	80 81       	ld	r24, Z
 7ac:	80 68       	ori	r24, 0x80	; 128
 7ae:	80 83       	st	Z, r24
	OCR5C = 737;
 7b0:	81 ee       	ldi	r24, 0xE1	; 225
 7b2:	92 e0       	ldi	r25, 0x02	; 2
 7b4:	90 93 2d 01 	sts	0x012D, r25
 7b8:	80 93 2c 01 	sts	0x012C, r24
	SETBIT(PORTE, BIT(4));				//Break bit
 7bc:	74 9a       	sbi	0x0e, 4	; 14
}
 7be:	08 95       	ret

000007c0 <ppstop>:

void ppstop(void)
{
	CLEARBIT(PORTH, BIT(7));		
 7c0:	e2 e0       	ldi	r30, 0x02	; 2
 7c2:	f1 e0       	ldi	r31, 0x01	; 1
 7c4:	80 81       	ld	r24, Z
 7c6:	8f 77       	andi	r24, 0x7F	; 127
 7c8:	80 83       	st	Z, r24
	OCR5C = ReversePWMForPP;
 7ca:	80 91 02 02 	lds	r24, 0x0202
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	90 93 2d 01 	sts	0x012D, r25
 7d4:	80 93 2c 01 	sts	0x012C, r24
	SETBIT(PORTE, BIT(4));			//Break bit
 7d8:	74 9a       	sbi	0x0e, 4	; 14
}
 7da:	08 95       	ret

000007dc <seesaw>:
//--------------------------------------------------


void seesaw(void)
{
	SETBIT(PORTA,BIT(5));		//seesaw
 7dc:	15 9a       	sbi	0x02, 5	; 2
	SETBIT(PORTA,BIT(4));		//succup	
 7de:	14 9a       	sbi	0x02, 4	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7e0:	8f ef       	ldi	r24, 0xFF	; 255
 7e2:	9f e7       	ldi	r25, 0x7F	; 127
 7e4:	a4 e0       	ldi	r26, 0x04	; 4
 7e6:	81 50       	subi	r24, 0x01	; 1
 7e8:	90 40       	sbci	r25, 0x00	; 0
 7ea:	a0 40       	sbci	r26, 0x00	; 0
 7ec:	e1 f7       	brne	.-8      	; 0x7e6 <seesaw+0xa>
 7ee:	00 c0       	rjmp	.+0      	; 0x7f0 <seesaw+0x14>
 7f0:	00 00       	nop
	_delay_ms(100);
	SETBIT(PORTE,BIT(5));	//pump
 7f2:	75 9a       	sbi	0x0e, 5	; 14
 7f4:	8f ef       	ldi	r24, 0xFF	; 255
 7f6:	9f e7       	ldi	r25, 0x7F	; 127
 7f8:	a4 e0       	ldi	r26, 0x04	; 4
 7fa:	81 50       	subi	r24, 0x01	; 1
 7fc:	90 40       	sbci	r25, 0x00	; 0
 7fe:	a0 40       	sbci	r26, 0x00	; 0
 800:	e1 f7       	brne	.-8      	; 0x7fa <seesaw+0x1e>
 802:	00 c0       	rjmp	.+0      	; 0x804 <seesaw+0x28>
 804:	00 00       	nop
	_delay_ms(100);
	for(i = 0; i < 3; i++)
 806:	10 92 13 02 	sts	0x0213, r1
	{
		SETBIT(PORTA,BIT(5));		//seesaw 
 80a:	15 9a       	sbi	0x02, 5	; 2
 80c:	8f ef       	ldi	r24, 0xFF	; 255
 80e:	9f ef       	ldi	r25, 0xFF	; 255
 810:	a9 e5       	ldi	r26, 0x59	; 89
 812:	81 50       	subi	r24, 0x01	; 1
 814:	90 40       	sbci	r25, 0x00	; 0
 816:	a0 40       	sbci	r26, 0x00	; 0
 818:	e1 f7       	brne	.-8      	; 0x812 <seesaw+0x36>
 81a:	00 c0       	rjmp	.+0      	; 0x81c <seesaw+0x40>
 81c:	00 00       	nop
		_delay_ms(2000);
		CLEARBIT(PORTA,BIT(5));
 81e:	15 98       	cbi	0x02, 5	; 2
 820:	8f ef       	ldi	r24, 0xFF	; 255
 822:	9f ef       	ldi	r25, 0xFF	; 255
 824:	ac e2       	ldi	r26, 0x2C	; 44
 826:	81 50       	subi	r24, 0x01	; 1
 828:	90 40       	sbci	r25, 0x00	; 0
 82a:	a0 40       	sbci	r26, 0x00	; 0
 82c:	e1 f7       	brne	.-8      	; 0x826 <seesaw+0x4a>
 82e:	00 c0       	rjmp	.+0      	; 0x830 <seesaw+0x54>
 830:	00 00       	nop
	SETBIT(PORTA,BIT(5));		//seesaw
	SETBIT(PORTA,BIT(4));		//succup	
	_delay_ms(100);
	SETBIT(PORTE,BIT(5));	//pump
	_delay_ms(100);
	for(i = 0; i < 3; i++)
 832:	80 91 13 02 	lds	r24, 0x0213
 836:	8f 5f       	subi	r24, 0xFF	; 255
 838:	80 93 13 02 	sts	0x0213, r24
 83c:	83 30       	cpi	r24, 0x03	; 3
 83e:	28 f3       	brcs	.-54     	; 0x80a <seesaw+0x2e>
		SETBIT(PORTA,BIT(5));		//seesaw 
		_delay_ms(2000);
		CLEARBIT(PORTA,BIT(5));
		_delay_ms(1000);
	}
	CLEARBIT(PORTE,BIT(5));		//pump
 840:	75 98       	cbi	0x0e, 5	; 14
 842:	8f ef       	ldi	r24, 0xFF	; 255
 844:	9f e7       	ldi	r25, 0x7F	; 127
 846:	a4 e0       	ldi	r26, 0x04	; 4
 848:	81 50       	subi	r24, 0x01	; 1
 84a:	90 40       	sbci	r25, 0x00	; 0
 84c:	a0 40       	sbci	r26, 0x00	; 0
 84e:	e1 f7       	brne	.-8      	; 0x848 <seesaw+0x6c>
 850:	00 c0       	rjmp	.+0      	; 0x852 <seesaw+0x76>
 852:	00 00       	nop
	_delay_ms(100);
	CLEARBIT(PORTA,BIT(4));
 854:	14 98       	cbi	0x02, 4	; 2
	CLEARBIT(PORTA,BIT(5));		
 856:	15 98       	cbi	0x02, 5	; 2
}
 858:	08 95       	ret

0000085a <ProcessPINC>:
void UartTransmit(uint8_t);
void UartInit(void);
uint8_t lt_st = false, rt_st = false, ppst = false, grip_flag = false;
uint8_t NirmaMech = 0;
void ProcessPINC(uint8_t data)
{
 85a:	1f 93       	push	r17
 85c:	cf 93       	push	r28
 85e:	df 93       	push	r29
 860:	18 2f       	mov	r17, r24
	//lcd_showvalue(data);
	//PAL UP				PC2
	//PAL DN				PC3

	
	if((!(_cb(data,bit(0)))) && (_cb(data,bit(1))))
 862:	c8 2f       	mov	r28, r24
 864:	d0 e0       	ldi	r29, 0x00	; 0
 866:	80 fd       	sbrc	r24, 0
 868:	08 c0       	rjmp	.+16     	; 0x87a <ProcessPINC+0x20>
 86a:	81 ff       	sbrs	r24, 1
 86c:	0e c0       	rjmp	.+28     	; 0x88a <ProcessPINC+0x30>
	{
		rt_st = true;
 86e:	81 e0       	ldi	r24, 0x01	; 1
 870:	80 93 11 02 	sts	0x0211, r24
		rgt_fwd();
 874:	0e 94 82 03 	call	0x704	; 0x704 <rgt_fwd>
 878:	16 c0       	rjmp	.+44     	; 0x8a6 <ProcessPINC+0x4c>
	}
	else if((_cb(data, bit(0))) && (!(_cb(data, bit(1)))))
 87a:	11 fd       	sbrc	r17, 1
 87c:	06 c0       	rjmp	.+12     	; 0x88a <ProcessPINC+0x30>
	{
		rt_st = true;
 87e:	81 e0       	ldi	r24, 0x01	; 1
 880:	80 93 11 02 	sts	0x0211, r24
		rgt_rev();
 884:	0e 94 93 03 	call	0x726	; 0x726 <rgt_rev>
 888:	0e c0       	rjmp	.+28     	; 0x8a6 <ProcessPINC+0x4c>
uint8_t UartReceive(void);
void UartTransmit(uint8_t);
void UartInit(void);
uint8_t lt_st = false, rt_st = false, ppst = false, grip_flag = false;
uint8_t NirmaMech = 0;
void ProcessPINC(uint8_t data)
 88a:	ce 01       	movw	r24, r28
 88c:	83 70       	andi	r24, 0x03	; 3
 88e:	90 70       	andi	r25, 0x00	; 0
	else if((_cb(data, bit(0))) && (!(_cb(data, bit(1)))))
	{
		rt_st = true;
		rgt_rev();
	}
	else if((_cb(data, bit(0))) && (_cb(data,bit(1))))
 890:	83 30       	cpi	r24, 0x03	; 3
 892:	91 05       	cpc	r25, r1
 894:	41 f4       	brne	.+16     	; 0x8a6 <ProcessPINC+0x4c>
	{
		if(rt_st == true) 
 896:	80 91 11 02 	lds	r24, 0x0211
 89a:	81 30       	cpi	r24, 0x01	; 1
 89c:	21 f4       	brne	.+8      	; 0x8a6 <ProcessPINC+0x4c>
		{
			rt_st = false;
 89e:	10 92 11 02 	sts	0x0211, r1
			rgt_stop();
 8a2:	0e 94 a4 03 	call	0x748	; 0x748 <rgt_stop>
		}
	}
	if ((!(_cb(data,bit(6)))) && (_cb(data, bit(7))))
 8a6:	c6 fd       	sbrc	r28, 6
 8a8:	08 c0       	rjmp	.+16     	; 0x8ba <ProcessPINC+0x60>
 8aa:	11 23       	and	r17, r17
 8ac:	b4 f4       	brge	.+44     	; 0x8da <ProcessPINC+0x80>
	{
		lt_st = true;
 8ae:	81 e0       	ldi	r24, 0x01	; 1
 8b0:	80 93 12 02 	sts	0x0212, r24
		lft_fwd();
 8b4:	0e 94 60 03 	call	0x6c0	; 0x6c0 <lft_fwd>
 8b8:	10 c0       	rjmp	.+32     	; 0x8da <ProcessPINC+0x80>
	}
	else if((_cb(data,bit(6))) && (!(_cb(data, bit(7)))))
 8ba:	11 23       	and	r17, r17
 8bc:	34 f0       	brlt	.+12     	; 0x8ca <ProcessPINC+0x70>
	{
		lt_st = true;
 8be:	81 e0       	ldi	r24, 0x01	; 1
 8c0:	80 93 12 02 	sts	0x0212, r24
		lft_rev();
 8c4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <lft_rev>
 8c8:	08 c0       	rjmp	.+16     	; 0x8da <ProcessPINC+0x80>
	}
	else if((_cb(data, bit(6))) && ((_cb(data, bit(7)))))
	{
		if(lt_st == true)
 8ca:	80 91 12 02 	lds	r24, 0x0212
 8ce:	81 30       	cpi	r24, 0x01	; 1
 8d0:	21 f4       	brne	.+8      	; 0x8da <ProcessPINC+0x80>
		{
			lt_st = false;
 8d2:	10 92 12 02 	sts	0x0212, r1
			lft_stop();
 8d6:	0e 94 b5 03 	call	0x76a	; 0x76a <lft_stop>
		}
	}
	
	
	if((!(_cb(data, bit(2)))) && (_cb(data, bit(3))))
 8da:	c2 fd       	sbrc	r28, 2
 8dc:	05 c0       	rjmp	.+10     	; 0x8e8 <ProcessPINC+0x8e>
 8de:	c3 ff       	sbrs	r28, 3
 8e0:	08 c0       	rjmp	.+16     	; 0x8f2 <ProcessPINC+0x98>
	{
		ppup();
 8e2:	0e 94 c6 03 	call	0x78c	; 0x78c <ppup>
 8e6:	0c c0       	rjmp	.+24     	; 0x900 <ProcessPINC+0xa6>
	}
	else if((_cb(data, bit(2))) && (!(_cb(data, bit(3)))))
 8e8:	c3 fd       	sbrc	r28, 3
 8ea:	03 c0       	rjmp	.+6      	; 0x8f2 <ProcessPINC+0x98>
	{
		ppdown();
 8ec:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <ppdown>
 8f0:	07 c0       	rjmp	.+14     	; 0x900 <ProcessPINC+0xa6>
uint8_t UartReceive(void);
void UartTransmit(uint8_t);
void UartInit(void);
uint8_t lt_st = false, rt_st = false, ppst = false, grip_flag = false;
uint8_t NirmaMech = 0;
void ProcessPINC(uint8_t data)
 8f2:	cc 70       	andi	r28, 0x0C	; 12
 8f4:	d0 70       	andi	r29, 0x00	; 0
	}
	else if((_cb(data, bit(2))) && (!(_cb(data, bit(3)))))
	{
		ppdown();
	}
	else if((_cb(data, bit(2))) && (_cb(data, bit(3))))
 8f6:	cc 30       	cpi	r28, 0x0C	; 12
 8f8:	d1 05       	cpc	r29, r1
 8fa:	11 f4       	brne	.+4      	; 0x900 <ProcessPINC+0xa6>
	{
		ppstop();
 8fc:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <ppstop>
	}

}
 900:	df 91       	pop	r29
 902:	cf 91       	pop	r28
 904:	1f 91       	pop	r17
 906:	08 95       	ret

00000908 <ProcessPIND>:

void ProcessPIND(uint8_t data)
{
 908:	cf 93       	push	r28
 90a:	df 93       	push	r29
 90c:	0f 92       	push	r0
 90e:	cd b7       	in	r28, 0x3d	; 61
 910:	de b7       	in	r29, 0x3e	; 62
 912:	89 83       	std	Y+1, r24	; 0x01
	if ( ! (CHECKBIT(data,BIT(5))) )
 914:	85 fd       	sbrc	r24, 5
 916:	02 c0       	rjmp	.+4      	; 0x91c <ProcessPIND+0x14>
	{
		seesaw();
 918:	0e 94 ee 03 	call	0x7dc	; 0x7dc <seesaw>
	}
	
	if (bit_is_clear(data, 2))				//swing automation
 91c:	89 81       	ldd	r24, Y+1	; 0x01
 91e:	82 ff       	sbrs	r24, 2
 920:	03 c0       	rjmp	.+6      	; 0x928 <ProcessPIND+0x20>
 922:	09 c0       	rjmp	.+18     	; 0x936 <ProcessPIND+0x2e>
	{
		while(ADCConvert() >= 163)
		{
			ppup();
 924:	0e 94 c6 03 	call	0x78c	; 0x78c <ppup>
		seesaw();
	}
	
	if (bit_is_clear(data, 2))				//swing automation
	{
		while(ADCConvert() >= 163)
 928:	0e 94 54 03 	call	0x6a8	; 0x6a8 <ADCConvert>
 92c:	83 3a       	cpi	r24, 0xA3	; 163
 92e:	91 05       	cpc	r25, r1
 930:	cc f7       	brge	.-14     	; 0x924 <ProcessPIND+0x1c>
		{
			ppup();
		}
		ppstop();
 932:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <ppstop>
	}
}
 936:	0f 90       	pop	r0
 938:	df 91       	pop	r29
 93a:	cf 91       	pop	r28
 93c:	08 95       	ret

0000093e <ProcessPINB>:
	
void ProcessPINB(uint8_t data)
{
 93e:	cf 93       	push	r28
 940:	df 93       	push	r29
 942:	0f 92       	push	r0
 944:	cd b7       	in	r28, 0x3d	; 61
 946:	de b7       	in	r29, 0x3e	; 62
 948:	89 83       	std	Y+1, r24	; 0x01
	
	//SWING			PB5
	//SS			PB6
	//POLE WA		PB2
	//LADDER		PB3
	if(bit_is_clear(data, 3) && bit_is_set(data, 5) && bit_is_set(data, 2) && bit_is_set(data, 6))
 94a:	89 81       	ldd	r24, Y+1	; 0x01
 94c:	83 fd       	sbrc	r24, 3
 94e:	0c c0       	rjmp	.+24     	; 0x968 <ProcessPINB+0x2a>
 950:	89 81       	ldd	r24, Y+1	; 0x01
 952:	85 ff       	sbrs	r24, 5
 954:	09 c0       	rjmp	.+18     	; 0x968 <ProcessPINB+0x2a>
 956:	89 81       	ldd	r24, Y+1	; 0x01
 958:	82 ff       	sbrs	r24, 2
 95a:	06 c0       	rjmp	.+12     	; 0x968 <ProcessPINB+0x2a>
 95c:	89 81       	ldd	r24, Y+1	; 0x01
 95e:	86 ff       	sbrs	r24, 6
 960:	03 c0       	rjmp	.+6      	; 0x968 <ProcessPINB+0x2a>
	{
		PORTD = 0x08;
 962:	88 e0       	ldi	r24, 0x08	; 8
 964:	8b b9       	out	0x0b, r24	; 11
 966:	2e c0       	rjmp	.+92     	; 0x9c4 <ProcessPINB+0x86>
	}
	else if(bit_is_set(data, 3) && bit_is_clear(data, 5) && bit_is_set(data, 2) && bit_is_set(data, 6))
 968:	89 81       	ldd	r24, Y+1	; 0x01
 96a:	83 ff       	sbrs	r24, 3
 96c:	0c c0       	rjmp	.+24     	; 0x986 <ProcessPINB+0x48>
 96e:	89 81       	ldd	r24, Y+1	; 0x01
 970:	85 fd       	sbrc	r24, 5
 972:	09 c0       	rjmp	.+18     	; 0x986 <ProcessPINB+0x48>
 974:	89 81       	ldd	r24, Y+1	; 0x01
 976:	82 ff       	sbrs	r24, 2
 978:	06 c0       	rjmp	.+12     	; 0x986 <ProcessPINB+0x48>
 97a:	89 81       	ldd	r24, Y+1	; 0x01
 97c:	86 ff       	sbrs	r24, 6
 97e:	03 c0       	rjmp	.+6      	; 0x986 <ProcessPINB+0x48>
	{
		PORTD = 0x04;
 980:	84 e0       	ldi	r24, 0x04	; 4
 982:	8b b9       	out	0x0b, r24	; 11
 984:	1f c0       	rjmp	.+62     	; 0x9c4 <ProcessPINB+0x86>
	}
	else if(bit_is_set(data, 3) && bit_is_set(data, 5) && bit_is_clear(data, 2) && bit_is_set(data, 6))
 986:	89 81       	ldd	r24, Y+1	; 0x01
 988:	83 ff       	sbrs	r24, 3
 98a:	0c c0       	rjmp	.+24     	; 0x9a4 <ProcessPINB+0x66>
 98c:	89 81       	ldd	r24, Y+1	; 0x01
 98e:	85 ff       	sbrs	r24, 5
 990:	09 c0       	rjmp	.+18     	; 0x9a4 <ProcessPINB+0x66>
 992:	89 81       	ldd	r24, Y+1	; 0x01
 994:	82 fd       	sbrc	r24, 2
 996:	06 c0       	rjmp	.+12     	; 0x9a4 <ProcessPINB+0x66>
 998:	89 81       	ldd	r24, Y+1	; 0x01
 99a:	86 ff       	sbrs	r24, 6
 99c:	03 c0       	rjmp	.+6      	; 0x9a4 <ProcessPINB+0x66>
	{
		PORTD = 0x02;
 99e:	82 e0       	ldi	r24, 0x02	; 2
 9a0:	8b b9       	out	0x0b, r24	; 11
 9a2:	10 c0       	rjmp	.+32     	; 0x9c4 <ProcessPINB+0x86>
	}
	else if(bit_is_set(data, 3) && bit_is_set(data, 5) && bit_is_set(data, 2) && bit_is_clear(data, 6))
 9a4:	89 81       	ldd	r24, Y+1	; 0x01
 9a6:	83 ff       	sbrs	r24, 3
 9a8:	0c c0       	rjmp	.+24     	; 0x9c2 <ProcessPINB+0x84>
 9aa:	89 81       	ldd	r24, Y+1	; 0x01
 9ac:	85 ff       	sbrs	r24, 5
 9ae:	09 c0       	rjmp	.+18     	; 0x9c2 <ProcessPINB+0x84>
 9b0:	89 81       	ldd	r24, Y+1	; 0x01
 9b2:	82 ff       	sbrs	r24, 2
 9b4:	06 c0       	rjmp	.+12     	; 0x9c2 <ProcessPINB+0x84>
 9b6:	89 81       	ldd	r24, Y+1	; 0x01
 9b8:	86 fd       	sbrc	r24, 6
 9ba:	03 c0       	rjmp	.+6      	; 0x9c2 <ProcessPINB+0x84>

	{
		PORTD = 0x01;
 9bc:	81 e0       	ldi	r24, 0x01	; 1
 9be:	8b b9       	out	0x0b, r24	; 11
 9c0:	01 c0       	rjmp	.+2      	; 0x9c4 <ProcessPINB+0x86>
	}
	else
	{
		PORTD = 0x00;
 9c2:	1b b8       	out	0x0b, r1	; 11
	}

	
	if (bit_is_clear(data, 1))				//ss automation
 9c4:	89 81       	ldd	r24, Y+1	; 0x01
 9c6:	81 ff       	sbrs	r24, 1
 9c8:	03 c0       	rjmp	.+6      	; 0x9d0 <ProcessPINB+0x92>
 9ca:	09 c0       	rjmp	.+18     	; 0x9de <ProcessPINB+0xa0>
	{
		while(ADCConvert() >= 170)
		{
			ppup();
 9cc:	0e 94 c6 03 	call	0x78c	; 0x78c <ppup>
	}

	
	if (bit_is_clear(data, 1))				//ss automation
	{
		while(ADCConvert() >= 170)
 9d0:	0e 94 54 03 	call	0x6a8	; 0x6a8 <ADCConvert>
 9d4:	8a 3a       	cpi	r24, 0xAA	; 170
 9d6:	91 05       	cpc	r25, r1
 9d8:	cc f7       	brge	.-14     	; 0x9cc <ProcessPINB+0x8e>
		{
			ppup();
		}
		ppstop();
 9da:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <ppstop>
	}
	if (bit_is_clear(data, 0))				//pole automation
 9de:	89 81       	ldd	r24, Y+1	; 0x01
 9e0:	80 ff       	sbrs	r24, 0
 9e2:	03 c0       	rjmp	.+6      	; 0x9ea <ProcessPINB+0xac>
 9e4:	09 c0       	rjmp	.+18     	; 0x9f8 <ProcessPINB+0xba>
	{
		while(ADCConvert() >= 194)
		{
			ppup();
 9e6:	0e 94 c6 03 	call	0x78c	; 0x78c <ppup>
		}
		ppstop();
	}
	if (bit_is_clear(data, 0))				//pole automation
	{
		while(ADCConvert() >= 194)
 9ea:	0e 94 54 03 	call	0x6a8	; 0x6a8 <ADCConvert>
 9ee:	82 3c       	cpi	r24, 0xC2	; 194
 9f0:	91 05       	cpc	r25, r1
 9f2:	cc f7       	brge	.-14     	; 0x9e6 <ProcessPINB+0xa8>
		{
			ppup();
		}
		ppstop();
 9f4:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <ppstop>
	}
	
}
 9f8:	0f 90       	pop	r0
 9fa:	df 91       	pop	r29
 9fc:	cf 91       	pop	r28
 9fe:	08 95       	ret

00000a00 <ProcessPINA>:
	//lcd_string("PINA ");
	//lcd_showvalue(data);
//GRIP				PA2
//GRIPMECH			PA1
//SUCTION MAN INIT	PA0
	if( !(_cb(data,bit(1))) )			//GRIPPER UP DOWN MECH
 a00:	81 fd       	sbrc	r24, 1
 a02:	02 c0       	rjmp	.+4      	; 0xa08 <ProcessPINA+0x8>
	{
		SETBIT(PORTA,BIT(6));
 a04:	16 9a       	sbi	0x02, 6	; 2
 a06:	01 c0       	rjmp	.+2      	; 0xa0a <ProcessPINA+0xa>
	}
	
	else
	{
		CLEARBIT(PORTA,BIT(6));
 a08:	16 98       	cbi	0x02, 6	; 2
	}
	
	if ( !(_cb(data,bit(2))) )			// GRIPPER - Pneumatics
 a0a:	82 fd       	sbrc	r24, 2
 a0c:	05 c0       	rjmp	.+10     	; 0xa18 <ProcessPINA+0x18>
	{
		SETBIT(PORTA,BIT(3));
 a0e:	13 9a       	sbi	0x02, 3	; 2
		ReversePWMForPP = 170;
 a10:	2a ea       	ldi	r18, 0xAA	; 170
 a12:	20 93 02 02 	sts	0x0202, r18
 a16:	04 c0       	rjmp	.+8      	; 0xa20 <ProcessPINA+0x20>
	}
	else
	{
		CLEARBIT(PORTA,BIT(3));
 a18:	13 98       	cbi	0x02, 3	; 2
		ReversePWMForPP = 210;
 a1a:	22 ed       	ldi	r18, 0xD2	; 210
 a1c:	20 93 02 02 	sts	0x0202, r18
	}
	
	
	if(!(_cb(data, bit(0))))			// suc cups & cyl (to hold the bot at one place)
 a20:	80 fd       	sbrc	r24, 0
 a22:	02 c0       	rjmp	.+4      	; 0xa28 <ProcessPINA+0x28>
	{
		SETBIT(PORTE,BIT(5));
 a24:	75 9a       	sbi	0x0e, 5	; 14
 a26:	08 95       	ret
	}
	else
	{
		CLEARBIT(PORTE,BIT(5));
 a28:	75 98       	cbi	0x0e, 5	; 14
 a2a:	08 95       	ret

00000a2c <main>:
*/


int main(void)
{
	lcd_init();
 a2c:	0e 94 9c 02 	call	0x538	; 0x538 <lcd_init>
	UartInit();
 a30:	0e 94 0d 03 	call	0x61a	; 0x61a <UartInit>
	port_init();
 a34:	0e 94 ee 02 	call	0x5dc	; 0x5dc <port_init>
	pwm_init();
 a38:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <pwm_init>
	ADCInit();	
 a3c:	0e 94 43 03 	call	0x686	; 0x686 <ADCInit>
    while(1)
    {
		UartTransmit(50);
 a40:	82 e3       	ldi	r24, 0x32	; 50
 a42:	0e 94 33 03 	call	0x666	; 0x666 <UartTransmit>
		ProcessPINA(UartReceive());
 a46:	0e 94 3b 03 	call	0x676	; 0x676 <UartReceive>
 a4a:	0e 94 00 05 	call	0xa00	; 0xa00 <ProcessPINA>
		
		UartTransmit(60);
 a4e:	8c e3       	ldi	r24, 0x3C	; 60
 a50:	0e 94 33 03 	call	0x666	; 0x666 <UartTransmit>
		ProcessPINB(UartReceive());
 a54:	0e 94 3b 03 	call	0x676	; 0x676 <UartReceive>
 a58:	0e 94 9f 04 	call	0x93e	; 0x93e <ProcessPINB>
		
		UartTransmit(70);
 a5c:	86 e4       	ldi	r24, 0x46	; 70
 a5e:	0e 94 33 03 	call	0x666	; 0x666 <UartTransmit>
		ProcessPINC(UartReceive());
 a62:	0e 94 3b 03 	call	0x676	; 0x676 <UartReceive>
 a66:	0e 94 2d 04 	call	0x85a	; 0x85a <ProcessPINC>
		
		UartTransmit(80);
 a6a:	80 e5       	ldi	r24, 0x50	; 80
 a6c:	0e 94 33 03 	call	0x666	; 0x666 <UartTransmit>
		ProcessPIND(UartReceive());
 a70:	0e 94 3b 03 	call	0x676	; 0x676 <UartReceive>
 a74:	0e 94 84 04 	call	0x908	; 0x908 <ProcessPIND>
 a78:	e3 cf       	rjmp	.-58     	; 0xa40 <main+0x14>

00000a7a <__fixunssfsi>:
 a7a:	33 d0       	rcall	.+102    	; 0xae2 <__fp_splitA>
 a7c:	88 f0       	brcs	.+34     	; 0xaa0 <__fixunssfsi+0x26>
 a7e:	9f 57       	subi	r25, 0x7F	; 127
 a80:	90 f0       	brcs	.+36     	; 0xaa6 <__fixunssfsi+0x2c>
 a82:	b9 2f       	mov	r27, r25
 a84:	99 27       	eor	r25, r25
 a86:	b7 51       	subi	r27, 0x17	; 23
 a88:	a0 f0       	brcs	.+40     	; 0xab2 <__fixunssfsi+0x38>
 a8a:	d1 f0       	breq	.+52     	; 0xac0 <__fixunssfsi+0x46>
 a8c:	66 0f       	add	r22, r22
 a8e:	77 1f       	adc	r23, r23
 a90:	88 1f       	adc	r24, r24
 a92:	99 1f       	adc	r25, r25
 a94:	1a f0       	brmi	.+6      	; 0xa9c <__fixunssfsi+0x22>
 a96:	ba 95       	dec	r27
 a98:	c9 f7       	brne	.-14     	; 0xa8c <__fixunssfsi+0x12>
 a9a:	12 c0       	rjmp	.+36     	; 0xac0 <__fixunssfsi+0x46>
 a9c:	b1 30       	cpi	r27, 0x01	; 1
 a9e:	81 f0       	breq	.+32     	; 0xac0 <__fixunssfsi+0x46>
 aa0:	3a d0       	rcall	.+116    	; 0xb16 <__fp_zero>
 aa2:	b1 e0       	ldi	r27, 0x01	; 1
 aa4:	08 95       	ret
 aa6:	37 c0       	rjmp	.+110    	; 0xb16 <__fp_zero>
 aa8:	67 2f       	mov	r22, r23
 aaa:	78 2f       	mov	r23, r24
 aac:	88 27       	eor	r24, r24
 aae:	b8 5f       	subi	r27, 0xF8	; 248
 ab0:	39 f0       	breq	.+14     	; 0xac0 <__fixunssfsi+0x46>
 ab2:	b9 3f       	cpi	r27, 0xF9	; 249
 ab4:	cc f3       	brlt	.-14     	; 0xaa8 <__fixunssfsi+0x2e>
 ab6:	86 95       	lsr	r24
 ab8:	77 95       	ror	r23
 aba:	67 95       	ror	r22
 abc:	b3 95       	inc	r27
 abe:	d9 f7       	brne	.-10     	; 0xab6 <__fixunssfsi+0x3c>
 ac0:	3e f4       	brtc	.+14     	; 0xad0 <__fixunssfsi+0x56>
 ac2:	90 95       	com	r25
 ac4:	80 95       	com	r24
 ac6:	70 95       	com	r23
 ac8:	61 95       	neg	r22
 aca:	7f 4f       	sbci	r23, 0xFF	; 255
 acc:	8f 4f       	sbci	r24, 0xFF	; 255
 ace:	9f 4f       	sbci	r25, 0xFF	; 255
 ad0:	08 95       	ret

00000ad2 <__fp_split3>:
 ad2:	57 fd       	sbrc	r21, 7
 ad4:	90 58       	subi	r25, 0x80	; 128
 ad6:	44 0f       	add	r20, r20
 ad8:	55 1f       	adc	r21, r21
 ada:	59 f0       	breq	.+22     	; 0xaf2 <__fp_splitA+0x10>
 adc:	5f 3f       	cpi	r21, 0xFF	; 255
 ade:	71 f0       	breq	.+28     	; 0xafc <__fp_splitA+0x1a>
 ae0:	47 95       	ror	r20

00000ae2 <__fp_splitA>:
 ae2:	88 0f       	add	r24, r24
 ae4:	97 fb       	bst	r25, 7
 ae6:	99 1f       	adc	r25, r25
 ae8:	61 f0       	breq	.+24     	; 0xb02 <__fp_splitA+0x20>
 aea:	9f 3f       	cpi	r25, 0xFF	; 255
 aec:	79 f0       	breq	.+30     	; 0xb0c <__fp_splitA+0x2a>
 aee:	87 95       	ror	r24
 af0:	08 95       	ret
 af2:	12 16       	cp	r1, r18
 af4:	13 06       	cpc	r1, r19
 af6:	14 06       	cpc	r1, r20
 af8:	55 1f       	adc	r21, r21
 afa:	f2 cf       	rjmp	.-28     	; 0xae0 <__fp_split3+0xe>
 afc:	46 95       	lsr	r20
 afe:	f1 df       	rcall	.-30     	; 0xae2 <__fp_splitA>
 b00:	08 c0       	rjmp	.+16     	; 0xb12 <__fp_splitA+0x30>
 b02:	16 16       	cp	r1, r22
 b04:	17 06       	cpc	r1, r23
 b06:	18 06       	cpc	r1, r24
 b08:	99 1f       	adc	r25, r25
 b0a:	f1 cf       	rjmp	.-30     	; 0xaee <__fp_splitA+0xc>
 b0c:	86 95       	lsr	r24
 b0e:	71 05       	cpc	r23, r1
 b10:	61 05       	cpc	r22, r1
 b12:	08 94       	sec
 b14:	08 95       	ret

00000b16 <__fp_zero>:
 b16:	e8 94       	clt

00000b18 <__fp_szero>:
 b18:	bb 27       	eor	r27, r27
 b1a:	66 27       	eor	r22, r22
 b1c:	77 27       	eor	r23, r23
 b1e:	cb 01       	movw	r24, r22
 b20:	97 f9       	bld	r25, 7
 b22:	08 95       	ret

00000b24 <modf>:
 b24:	fa 01       	movw	r30, r20
 b26:	dc 01       	movw	r26, r24
 b28:	aa 0f       	add	r26, r26
 b2a:	bb 1f       	adc	r27, r27
 b2c:	9b 01       	movw	r18, r22
 b2e:	ac 01       	movw	r20, r24
 b30:	bf 57       	subi	r27, 0x7F	; 127
 b32:	28 f4       	brcc	.+10     	; 0xb3e <modf+0x1a>
 b34:	22 27       	eor	r18, r18
 b36:	33 27       	eor	r19, r19
 b38:	44 27       	eor	r20, r20
 b3a:	50 78       	andi	r21, 0x80	; 128
 b3c:	1f c0       	rjmp	.+62     	; 0xb7c <modf+0x58>
 b3e:	b7 51       	subi	r27, 0x17	; 23
 b40:	88 f4       	brcc	.+34     	; 0xb64 <modf+0x40>
 b42:	ab 2f       	mov	r26, r27
 b44:	00 24       	eor	r0, r0
 b46:	46 95       	lsr	r20
 b48:	37 95       	ror	r19
 b4a:	27 95       	ror	r18
 b4c:	01 1c       	adc	r0, r1
 b4e:	a3 95       	inc	r26
 b50:	d2 f3       	brmi	.-12     	; 0xb46 <modf+0x22>
 b52:	00 20       	and	r0, r0
 b54:	69 f0       	breq	.+26     	; 0xb70 <modf+0x4c>
 b56:	22 0f       	add	r18, r18
 b58:	33 1f       	adc	r19, r19
 b5a:	44 1f       	adc	r20, r20
 b5c:	b3 95       	inc	r27
 b5e:	da f3       	brmi	.-10     	; 0xb56 <modf+0x32>
 b60:	0d d0       	rcall	.+26     	; 0xb7c <modf+0x58>
 b62:	76 c0       	rjmp	.+236    	; 0xc50 <__subsf3>
 b64:	61 30       	cpi	r22, 0x01	; 1
 b66:	71 05       	cpc	r23, r1
 b68:	a0 e8       	ldi	r26, 0x80	; 128
 b6a:	8a 07       	cpc	r24, r26
 b6c:	b9 46       	sbci	r27, 0x69	; 105
 b6e:	30 f4       	brcc	.+12     	; 0xb7c <modf+0x58>
 b70:	9b 01       	movw	r18, r22
 b72:	ac 01       	movw	r20, r24
 b74:	66 27       	eor	r22, r22
 b76:	77 27       	eor	r23, r23
 b78:	88 27       	eor	r24, r24
 b7a:	90 78       	andi	r25, 0x80	; 128
 b7c:	30 96       	adiw	r30, 0x00	; 0
 b7e:	21 f0       	breq	.+8      	; 0xb88 <modf+0x64>
 b80:	20 83       	st	Z, r18
 b82:	31 83       	std	Z+1, r19	; 0x01
 b84:	42 83       	std	Z+2, r20	; 0x02
 b86:	53 83       	std	Z+3, r21	; 0x03
 b88:	08 95       	ret

00000b8a <__mulsf3>:
 b8a:	0b d0       	rcall	.+22     	; 0xba2 <__mulsf3x>
 b8c:	dd c0       	rjmp	.+442    	; 0xd48 <__fp_round>
 b8e:	ce d0       	rcall	.+412    	; 0xd2c <__fp_pscA>
 b90:	28 f0       	brcs	.+10     	; 0xb9c <__mulsf3+0x12>
 b92:	d3 d0       	rcall	.+422    	; 0xd3a <__fp_pscB>
 b94:	18 f0       	brcs	.+6      	; 0xb9c <__mulsf3+0x12>
 b96:	95 23       	and	r25, r21
 b98:	09 f0       	breq	.+2      	; 0xb9c <__mulsf3+0x12>
 b9a:	bf c0       	rjmp	.+382    	; 0xd1a <__fp_inf>
 b9c:	c4 c0       	rjmp	.+392    	; 0xd26 <__fp_nan>
 b9e:	11 24       	eor	r1, r1
 ba0:	bb cf       	rjmp	.-138    	; 0xb18 <__fp_szero>

00000ba2 <__mulsf3x>:
 ba2:	97 df       	rcall	.-210    	; 0xad2 <__fp_split3>
 ba4:	a0 f3       	brcs	.-24     	; 0xb8e <__mulsf3+0x4>

00000ba6 <__mulsf3_pse>:
 ba6:	95 9f       	mul	r25, r21
 ba8:	d1 f3       	breq	.-12     	; 0xb9e <__mulsf3+0x14>
 baa:	95 0f       	add	r25, r21
 bac:	50 e0       	ldi	r21, 0x00	; 0
 bae:	55 1f       	adc	r21, r21
 bb0:	62 9f       	mul	r22, r18
 bb2:	f0 01       	movw	r30, r0
 bb4:	72 9f       	mul	r23, r18
 bb6:	bb 27       	eor	r27, r27
 bb8:	f0 0d       	add	r31, r0
 bba:	b1 1d       	adc	r27, r1
 bbc:	63 9f       	mul	r22, r19
 bbe:	aa 27       	eor	r26, r26
 bc0:	f0 0d       	add	r31, r0
 bc2:	b1 1d       	adc	r27, r1
 bc4:	aa 1f       	adc	r26, r26
 bc6:	64 9f       	mul	r22, r20
 bc8:	66 27       	eor	r22, r22
 bca:	b0 0d       	add	r27, r0
 bcc:	a1 1d       	adc	r26, r1
 bce:	66 1f       	adc	r22, r22
 bd0:	82 9f       	mul	r24, r18
 bd2:	22 27       	eor	r18, r18
 bd4:	b0 0d       	add	r27, r0
 bd6:	a1 1d       	adc	r26, r1
 bd8:	62 1f       	adc	r22, r18
 bda:	73 9f       	mul	r23, r19
 bdc:	b0 0d       	add	r27, r0
 bde:	a1 1d       	adc	r26, r1
 be0:	62 1f       	adc	r22, r18
 be2:	83 9f       	mul	r24, r19
 be4:	a0 0d       	add	r26, r0
 be6:	61 1d       	adc	r22, r1
 be8:	22 1f       	adc	r18, r18
 bea:	74 9f       	mul	r23, r20
 bec:	33 27       	eor	r19, r19
 bee:	a0 0d       	add	r26, r0
 bf0:	61 1d       	adc	r22, r1
 bf2:	23 1f       	adc	r18, r19
 bf4:	84 9f       	mul	r24, r20
 bf6:	60 0d       	add	r22, r0
 bf8:	21 1d       	adc	r18, r1
 bfa:	82 2f       	mov	r24, r18
 bfc:	76 2f       	mov	r23, r22
 bfe:	6a 2f       	mov	r22, r26
 c00:	11 24       	eor	r1, r1
 c02:	9f 57       	subi	r25, 0x7F	; 127
 c04:	50 40       	sbci	r21, 0x00	; 0
 c06:	8a f0       	brmi	.+34     	; 0xc2a <__mulsf3_pse+0x84>
 c08:	e1 f0       	breq	.+56     	; 0xc42 <__mulsf3_pse+0x9c>
 c0a:	88 23       	and	r24, r24
 c0c:	4a f0       	brmi	.+18     	; 0xc20 <__mulsf3_pse+0x7a>
 c0e:	ee 0f       	add	r30, r30
 c10:	ff 1f       	adc	r31, r31
 c12:	bb 1f       	adc	r27, r27
 c14:	66 1f       	adc	r22, r22
 c16:	77 1f       	adc	r23, r23
 c18:	88 1f       	adc	r24, r24
 c1a:	91 50       	subi	r25, 0x01	; 1
 c1c:	50 40       	sbci	r21, 0x00	; 0
 c1e:	a9 f7       	brne	.-22     	; 0xc0a <__mulsf3_pse+0x64>
 c20:	9e 3f       	cpi	r25, 0xFE	; 254
 c22:	51 05       	cpc	r21, r1
 c24:	70 f0       	brcs	.+28     	; 0xc42 <__mulsf3_pse+0x9c>
 c26:	79 c0       	rjmp	.+242    	; 0xd1a <__fp_inf>
 c28:	77 cf       	rjmp	.-274    	; 0xb18 <__fp_szero>
 c2a:	5f 3f       	cpi	r21, 0xFF	; 255
 c2c:	ec f3       	brlt	.-6      	; 0xc28 <__mulsf3_pse+0x82>
 c2e:	98 3e       	cpi	r25, 0xE8	; 232
 c30:	dc f3       	brlt	.-10     	; 0xc28 <__mulsf3_pse+0x82>
 c32:	86 95       	lsr	r24
 c34:	77 95       	ror	r23
 c36:	67 95       	ror	r22
 c38:	b7 95       	ror	r27
 c3a:	f7 95       	ror	r31
 c3c:	e7 95       	ror	r30
 c3e:	9f 5f       	subi	r25, 0xFF	; 255
 c40:	c1 f7       	brne	.-16     	; 0xc32 <__mulsf3_pse+0x8c>
 c42:	fe 2b       	or	r31, r30
 c44:	88 0f       	add	r24, r24
 c46:	91 1d       	adc	r25, r1
 c48:	96 95       	lsr	r25
 c4a:	87 95       	ror	r24
 c4c:	97 f9       	bld	r25, 7
 c4e:	08 95       	ret

00000c50 <__subsf3>:
 c50:	50 58       	subi	r21, 0x80	; 128

00000c52 <__addsf3>:
 c52:	bb 27       	eor	r27, r27
 c54:	aa 27       	eor	r26, r26
 c56:	0e d0       	rcall	.+28     	; 0xc74 <__addsf3x>
 c58:	77 c0       	rjmp	.+238    	; 0xd48 <__fp_round>
 c5a:	68 d0       	rcall	.+208    	; 0xd2c <__fp_pscA>
 c5c:	30 f0       	brcs	.+12     	; 0xc6a <__addsf3+0x18>
 c5e:	6d d0       	rcall	.+218    	; 0xd3a <__fp_pscB>
 c60:	20 f0       	brcs	.+8      	; 0xc6a <__addsf3+0x18>
 c62:	31 f4       	brne	.+12     	; 0xc70 <__addsf3+0x1e>
 c64:	9f 3f       	cpi	r25, 0xFF	; 255
 c66:	11 f4       	brne	.+4      	; 0xc6c <__addsf3+0x1a>
 c68:	1e f4       	brtc	.+6      	; 0xc70 <__addsf3+0x1e>
 c6a:	5d c0       	rjmp	.+186    	; 0xd26 <__fp_nan>
 c6c:	0e f4       	brtc	.+2      	; 0xc70 <__addsf3+0x1e>
 c6e:	e0 95       	com	r30
 c70:	e7 fb       	bst	r30, 7
 c72:	53 c0       	rjmp	.+166    	; 0xd1a <__fp_inf>

00000c74 <__addsf3x>:
 c74:	e9 2f       	mov	r30, r25
 c76:	2d df       	rcall	.-422    	; 0xad2 <__fp_split3>
 c78:	80 f3       	brcs	.-32     	; 0xc5a <__addsf3+0x8>
 c7a:	ba 17       	cp	r27, r26
 c7c:	62 07       	cpc	r22, r18
 c7e:	73 07       	cpc	r23, r19
 c80:	84 07       	cpc	r24, r20
 c82:	95 07       	cpc	r25, r21
 c84:	18 f0       	brcs	.+6      	; 0xc8c <__addsf3x+0x18>
 c86:	71 f4       	brne	.+28     	; 0xca4 <__addsf3x+0x30>
 c88:	9e f5       	brtc	.+102    	; 0xcf0 <__addsf3x+0x7c>
 c8a:	45 cf       	rjmp	.-374    	; 0xb16 <__fp_zero>
 c8c:	0e f4       	brtc	.+2      	; 0xc90 <__addsf3x+0x1c>
 c8e:	e0 95       	com	r30
 c90:	0b 2e       	mov	r0, r27
 c92:	ba 2f       	mov	r27, r26
 c94:	a0 2d       	mov	r26, r0
 c96:	0b 01       	movw	r0, r22
 c98:	b9 01       	movw	r22, r18
 c9a:	90 01       	movw	r18, r0
 c9c:	0c 01       	movw	r0, r24
 c9e:	ca 01       	movw	r24, r20
 ca0:	a0 01       	movw	r20, r0
 ca2:	11 24       	eor	r1, r1
 ca4:	ff 27       	eor	r31, r31
 ca6:	59 1b       	sub	r21, r25
 ca8:	99 f0       	breq	.+38     	; 0xcd0 <__addsf3x+0x5c>
 caa:	59 3f       	cpi	r21, 0xF9	; 249
 cac:	50 f4       	brcc	.+20     	; 0xcc2 <__addsf3x+0x4e>
 cae:	50 3e       	cpi	r21, 0xE0	; 224
 cb0:	68 f1       	brcs	.+90     	; 0xd0c <__addsf3x+0x98>
 cb2:	1a 16       	cp	r1, r26
 cb4:	f0 40       	sbci	r31, 0x00	; 0
 cb6:	a2 2f       	mov	r26, r18
 cb8:	23 2f       	mov	r18, r19
 cba:	34 2f       	mov	r19, r20
 cbc:	44 27       	eor	r20, r20
 cbe:	58 5f       	subi	r21, 0xF8	; 248
 cc0:	f3 cf       	rjmp	.-26     	; 0xca8 <__addsf3x+0x34>
 cc2:	46 95       	lsr	r20
 cc4:	37 95       	ror	r19
 cc6:	27 95       	ror	r18
 cc8:	a7 95       	ror	r26
 cca:	f0 40       	sbci	r31, 0x00	; 0
 ccc:	53 95       	inc	r21
 cce:	c9 f7       	brne	.-14     	; 0xcc2 <__addsf3x+0x4e>
 cd0:	7e f4       	brtc	.+30     	; 0xcf0 <__addsf3x+0x7c>
 cd2:	1f 16       	cp	r1, r31
 cd4:	ba 0b       	sbc	r27, r26
 cd6:	62 0b       	sbc	r22, r18
 cd8:	73 0b       	sbc	r23, r19
 cda:	84 0b       	sbc	r24, r20
 cdc:	ba f0       	brmi	.+46     	; 0xd0c <__addsf3x+0x98>
 cde:	91 50       	subi	r25, 0x01	; 1
 ce0:	a1 f0       	breq	.+40     	; 0xd0a <__addsf3x+0x96>
 ce2:	ff 0f       	add	r31, r31
 ce4:	bb 1f       	adc	r27, r27
 ce6:	66 1f       	adc	r22, r22
 ce8:	77 1f       	adc	r23, r23
 cea:	88 1f       	adc	r24, r24
 cec:	c2 f7       	brpl	.-16     	; 0xcde <__addsf3x+0x6a>
 cee:	0e c0       	rjmp	.+28     	; 0xd0c <__addsf3x+0x98>
 cf0:	ba 0f       	add	r27, r26
 cf2:	62 1f       	adc	r22, r18
 cf4:	73 1f       	adc	r23, r19
 cf6:	84 1f       	adc	r24, r20
 cf8:	48 f4       	brcc	.+18     	; 0xd0c <__addsf3x+0x98>
 cfa:	87 95       	ror	r24
 cfc:	77 95       	ror	r23
 cfe:	67 95       	ror	r22
 d00:	b7 95       	ror	r27
 d02:	f7 95       	ror	r31
 d04:	9e 3f       	cpi	r25, 0xFE	; 254
 d06:	08 f0       	brcs	.+2      	; 0xd0a <__addsf3x+0x96>
 d08:	b3 cf       	rjmp	.-154    	; 0xc70 <__addsf3+0x1e>
 d0a:	93 95       	inc	r25
 d0c:	88 0f       	add	r24, r24
 d0e:	08 f0       	brcs	.+2      	; 0xd12 <__addsf3x+0x9e>
 d10:	99 27       	eor	r25, r25
 d12:	ee 0f       	add	r30, r30
 d14:	97 95       	ror	r25
 d16:	87 95       	ror	r24
 d18:	08 95       	ret

00000d1a <__fp_inf>:
 d1a:	97 f9       	bld	r25, 7
 d1c:	9f 67       	ori	r25, 0x7F	; 127
 d1e:	80 e8       	ldi	r24, 0x80	; 128
 d20:	70 e0       	ldi	r23, 0x00	; 0
 d22:	60 e0       	ldi	r22, 0x00	; 0
 d24:	08 95       	ret

00000d26 <__fp_nan>:
 d26:	9f ef       	ldi	r25, 0xFF	; 255
 d28:	80 ec       	ldi	r24, 0xC0	; 192
 d2a:	08 95       	ret

00000d2c <__fp_pscA>:
 d2c:	00 24       	eor	r0, r0
 d2e:	0a 94       	dec	r0
 d30:	16 16       	cp	r1, r22
 d32:	17 06       	cpc	r1, r23
 d34:	18 06       	cpc	r1, r24
 d36:	09 06       	cpc	r0, r25
 d38:	08 95       	ret

00000d3a <__fp_pscB>:
 d3a:	00 24       	eor	r0, r0
 d3c:	0a 94       	dec	r0
 d3e:	12 16       	cp	r1, r18
 d40:	13 06       	cpc	r1, r19
 d42:	14 06       	cpc	r1, r20
 d44:	05 06       	cpc	r0, r21
 d46:	08 95       	ret

00000d48 <__fp_round>:
 d48:	09 2e       	mov	r0, r25
 d4a:	03 94       	inc	r0
 d4c:	00 0c       	add	r0, r0
 d4e:	11 f4       	brne	.+4      	; 0xd54 <__fp_round+0xc>
 d50:	88 23       	and	r24, r24
 d52:	52 f0       	brmi	.+20     	; 0xd68 <__fp_round+0x20>
 d54:	bb 0f       	add	r27, r27
 d56:	40 f4       	brcc	.+16     	; 0xd68 <__fp_round+0x20>
 d58:	bf 2b       	or	r27, r31
 d5a:	11 f4       	brne	.+4      	; 0xd60 <__fp_round+0x18>
 d5c:	60 ff       	sbrs	r22, 0
 d5e:	04 c0       	rjmp	.+8      	; 0xd68 <__fp_round+0x20>
 d60:	6f 5f       	subi	r22, 0xFF	; 255
 d62:	7f 4f       	sbci	r23, 0xFF	; 255
 d64:	8f 4f       	sbci	r24, 0xFF	; 255
 d66:	9f 4f       	sbci	r25, 0xFF	; 255
 d68:	08 95       	ret

00000d6a <__mulsi3>:
 d6a:	62 9f       	mul	r22, r18
 d6c:	d0 01       	movw	r26, r0
 d6e:	73 9f       	mul	r23, r19
 d70:	f0 01       	movw	r30, r0
 d72:	82 9f       	mul	r24, r18
 d74:	e0 0d       	add	r30, r0
 d76:	f1 1d       	adc	r31, r1
 d78:	64 9f       	mul	r22, r20
 d7a:	e0 0d       	add	r30, r0
 d7c:	f1 1d       	adc	r31, r1
 d7e:	92 9f       	mul	r25, r18
 d80:	f0 0d       	add	r31, r0
 d82:	83 9f       	mul	r24, r19
 d84:	f0 0d       	add	r31, r0
 d86:	74 9f       	mul	r23, r20
 d88:	f0 0d       	add	r31, r0
 d8a:	65 9f       	mul	r22, r21
 d8c:	f0 0d       	add	r31, r0
 d8e:	99 27       	eor	r25, r25
 d90:	72 9f       	mul	r23, r18
 d92:	b0 0d       	add	r27, r0
 d94:	e1 1d       	adc	r30, r1
 d96:	f9 1f       	adc	r31, r25
 d98:	63 9f       	mul	r22, r19
 d9a:	b0 0d       	add	r27, r0
 d9c:	e1 1d       	adc	r30, r1
 d9e:	f9 1f       	adc	r31, r25
 da0:	bd 01       	movw	r22, r26
 da2:	cf 01       	movw	r24, r30
 da4:	11 24       	eor	r1, r1
 da6:	08 95       	ret

00000da8 <__udivmodsi4>:
 da8:	a1 e2       	ldi	r26, 0x21	; 33
 daa:	1a 2e       	mov	r1, r26
 dac:	aa 1b       	sub	r26, r26
 dae:	bb 1b       	sub	r27, r27
 db0:	fd 01       	movw	r30, r26
 db2:	0d c0       	rjmp	.+26     	; 0xdce <__udivmodsi4_ep>

00000db4 <__udivmodsi4_loop>:
 db4:	aa 1f       	adc	r26, r26
 db6:	bb 1f       	adc	r27, r27
 db8:	ee 1f       	adc	r30, r30
 dba:	ff 1f       	adc	r31, r31
 dbc:	a2 17       	cp	r26, r18
 dbe:	b3 07       	cpc	r27, r19
 dc0:	e4 07       	cpc	r30, r20
 dc2:	f5 07       	cpc	r31, r21
 dc4:	20 f0       	brcs	.+8      	; 0xdce <__udivmodsi4_ep>
 dc6:	a2 1b       	sub	r26, r18
 dc8:	b3 0b       	sbc	r27, r19
 dca:	e4 0b       	sbc	r30, r20
 dcc:	f5 0b       	sbc	r31, r21

00000dce <__udivmodsi4_ep>:
 dce:	66 1f       	adc	r22, r22
 dd0:	77 1f       	adc	r23, r23
 dd2:	88 1f       	adc	r24, r24
 dd4:	99 1f       	adc	r25, r25
 dd6:	1a 94       	dec	r1
 dd8:	69 f7       	brne	.-38     	; 0xdb4 <__udivmodsi4_loop>
 dda:	60 95       	com	r22
 ddc:	70 95       	com	r23
 dde:	80 95       	com	r24
 de0:	90 95       	com	r25
 de2:	9b 01       	movw	r18, r22
 de4:	ac 01       	movw	r20, r24
 de6:	bd 01       	movw	r22, r26
 de8:	cf 01       	movw	r24, r30
 dea:	08 95       	ret

00000dec <_exit>:
 dec:	f8 94       	cli

00000dee <__stop_program>:
 dee:	ff cf       	rjmp	.-2      	; 0xdee <__stop_program>
