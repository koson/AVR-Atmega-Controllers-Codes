
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800200  00000ba6  00000c1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ba6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080021a  00000bc0  00000c34  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000015b  00000000  00000000  00000c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a98  00000000  00000000  00000daf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002b6  00000000  00000000  00001847  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000083b  00000000  00000000  00001afd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  00002338  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001cd  00000000  00000000  00002458  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004c5  00000000  00000000  00002625  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00002aea  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	e6 ea       	ldi	r30, 0xA6	; 166
  f8:	fb e0       	ldi	r31, 0x0B	; 11
  fa:	02 c0       	rjmp	.+4      	; 0x100 <.do_copy_data_start>

000000fc <.do_copy_data_loop>:
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0

00000100 <.do_copy_data_start>:
 100:	aa 31       	cpi	r26, 0x1A	; 26
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <.do_copy_data_loop>

00000106 <__do_clear_bss>:
 106:	12 e0       	ldi	r17, 0x02	; 2
 108:	aa e1       	ldi	r26, 0x1A	; 26
 10a:	b2 e0       	ldi	r27, 0x02	; 2
 10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
 10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
 110:	a2 32       	cpi	r26, 0x22	; 34
 112:	b1 07       	cpc	r27, r17
 114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
 116:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <main>
 11a:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <_exit>

0000011e <__bad_interrupt>:
 11e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000122 <ports_init>:
#define TOGGLEBIT(x,b)  x^=b;


/************************************************/
void ports_init(void)
{
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	87 b9       	out	0x07, r24	; 7
DDRC=0XFF;
DDRB=0XFF;
 126:	84 b9       	out	0x04, r24	; 4
DDRD=0XFF;
 128:	8a b9       	out	0x0a, r24	; 10
DDRA=0XFF;
 12a:	81 b9       	out	0x01, r24	; 1
DDRG=0XFF;
 12c:	83 bb       	out	0x13, r24	; 19
DDRH=0XFF;
 12e:	80 93 01 01 	sts	0x0101, r24
DDRK=0XFF;
 132:	80 93 07 01 	sts	0x0107, r24
}
 136:	08 95       	ret

00000138 <toggleE>:
	//WaitMs(1);
}


void toggleE(void)
{
 138:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 13a:	83 e3       	ldi	r24, 0x33	; 51
 13c:	97 e0       	ldi	r25, 0x07	; 7
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <toggleE+0x6>
SETBIT(PORTE,BIT(0));
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
 142:	70 98       	cbi	0x0e, 0	; 14
}
 144:	08 95       	ret

00000146 <dely_ns>:

void dely_ns(unsigned char tim)
{
 146:	20 91 1a 02 	lds	r18, 0x021A
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <dely_ns+0xc>
	for(j=0;j<tim;j++)
 14e:	9f 5f       	subi	r25, 0xFF	; 255
 150:	2a e0       	ldi	r18, 0x0A	; 10
 152:	98 17       	cp	r25, r24
 154:	e0 f3       	brcs	.-8      	; 0x14e <dely_ns+0x8>
 156:	20 93 1a 02 	sts	0x021A, r18
 15a:	90 93 1b 02 	sts	0x021B, r25
	{
		for(k=0;k<10;k++)
		{};
	}
}
 15e:	08 95       	ret

00000160 <lcd_cmd>:

void lcd_cmd(unsigned char ch)
{
 160:	a5 98       	cbi	0x14, 5	; 20
	int temp;
	CLEARBIT(PORTG,BIT(5));
	CLEARBIT(PORTE,BIT(0));
 162:	70 98       	cbi	0x0e, 0	; 14
					/*PORTA = (ch & 0xF0);			// Send twice because ATMEGA is too fast 
  					PORTA = (ch & 0xF0); 			// for the LCD display !
  					PORTA = ch & 0xF0;
   					PORTA = ch & 0xF0;*/

	temp= ch & 0b11000000; // '10'000000
 164:	48 2f       	mov	r20, r24
 166:	50 e0       	ldi	r21, 0x00	; 0
	PORTE=temp;
 168:	9a 01       	movw	r18, r20
 16a:	20 7c       	andi	r18, 0xC0	; 192
 16c:	30 70       	andi	r19, 0x00	; 0
 16e:	2e b9       	out	0x0e, r18	; 14
	temp=(ch >> 3) & 0b00000110; // 00000'11'0
	PORTE= PORTE | temp;
 170:	9e b1       	in	r25, 0x0e	; 14
 172:	86 95       	lsr	r24
 174:	86 95       	lsr	r24
 176:	86 95       	lsr	r24
 178:	86 70       	andi	r24, 0x06	; 6
 17a:	98 2b       	or	r25, r24
 17c:	9e b9       	out	0x0e, r25	; 14
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 17e:	68 e1       	ldi	r22, 0x18	; 24
 180:	86 2f       	mov	r24, r22
 182:	8a 95       	dec	r24
 184:	f1 f7       	brne	.-4      	; 0x182 <lcd_cmd+0x22>
}


void toggleE(void)
{
SETBIT(PORTE,BIT(0));
 186:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 188:	23 e3       	ldi	r18, 0x33	; 51
 18a:	37 e0       	ldi	r19, 0x07	; 7
 18c:	c9 01       	movw	r24, r18
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd_cmd+0x2e>
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
 192:	70 98       	cbi	0x0e, 0	; 14
	temp=(ch >> 3) & 0b00000110; // 00000'11'0
	PORTE= PORTE | temp;
	_delay_us(5);
	toggleE();
   // Extract lower nibble
	SETBIT(PORTG,BIT(5));
 194:	a5 9a       	sbi	0x14, 5	; 20
   	CLEARBIT(PORTG,BIT(5));
 196:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 198:	70 98       	cbi	0x0e, 0	; 14
   					/*PORTA = ((ch << 4) & 0xF0); 	// Send twice because ATMEGA is too fast 
   					PORTA = ((ch << 4) & 0xF0);	// for the LCD display !
   					PORTA = (ch << 4) & 0xF0;
   					PORTA = (ch << 4) & 0xF0;*/
	temp=(ch << 4) & 0b11000000; // '10'000000
	PORTE=temp;
 19a:	ca 01       	movw	r24, r20
 19c:	74 e0       	ldi	r23, 0x04	; 4
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	7a 95       	dec	r23
 1a4:	e1 f7       	brne	.-8      	; 0x19e <lcd_cmd+0x3e>
 1a6:	80 7c       	andi	r24, 0xC0	; 192
 1a8:	90 70       	andi	r25, 0x00	; 0
 1aa:	8e b9       	out	0x0e, r24	; 14
	temp=(ch << 1) & 0b00000110; // 00000'01'0 
	PORTE= PORTE | temp;
 1ac:	8e b1       	in	r24, 0x0e	; 14
 1ae:	44 0f       	add	r20, r20
 1b0:	55 1f       	adc	r21, r21
 1b2:	46 70       	andi	r20, 0x06	; 6
 1b4:	50 70       	andi	r21, 0x00	; 0
 1b6:	84 2b       	or	r24, r20
 1b8:	8e b9       	out	0x0e, r24	; 14
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1ba:	6a 95       	dec	r22
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_cmd+0x5a>
}


void toggleE(void)
{
SETBIT(PORTE,BIT(0));
 1be:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1c0:	c9 01       	movw	r24, r18
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <lcd_cmd+0x62>
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
 1c6:	70 98       	cbi	0x0e, 0	; 14
	PORTE=temp;
	temp=(ch << 1) & 0b00000110; // 00000'01'0 
	PORTE= PORTE | temp;
	_delay_us(5);
	toggleE();
   	PORTE = 0x00;
 1c8:	1e b8       	out	0x0e, r1	; 14
 1ca:	2a e0       	ldi	r18, 0x0A	; 10
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	08 c0       	rjmp	.+16     	; 0x1e0 <lcd_cmd+0x80>
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	90 e0       	ldi	r25, 0x00	; 0
	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 1d4:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 1d6:	01 96       	adiw	r24, 0x01	; 1
 1d8:	4c e0       	ldi	r20, 0x0C	; 12
 1da:	8c 3c       	cpi	r24, 0xCC	; 204
 1dc:	94 07       	cpc	r25, r20
 1de:	d1 f7       	brne	.-12     	; 0x1d4 <lcd_cmd+0x74>
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 1e0:	21 50       	subi	r18, 0x01	; 1
 1e2:	30 40       	sbci	r19, 0x00	; 0
 1e4:	8f ef       	ldi	r24, 0xFF	; 255
 1e6:	2f 3f       	cpi	r18, 0xFF	; 255
 1e8:	38 07       	cpc	r19, r24
 1ea:	91 f7       	brne	.-28     	; 0x1d0 <lcd_cmd+0x70>
	toggleE();
   	PORTE = 0x00;
   	WaitMs(10);


}
 1ec:	08 95       	ret

000001ee <lcd_init>:
void lcd_gotoxy2(unsigned char pos);
void lcd_exit(void);
void WaitMs(unsigned int ms);

void lcd_init(void)	//init the lcd
{	
 1ee:	8f ef       	ldi	r24, 0xFF	; 255
 1f0:	8d b9       	out	0x0d, r24	; 13
	DDRE=0xFF;
	//DDRC=0x80;
	DDRG=0xFF;
 1f2:	83 bb       	out	0x13, r24	; 19
 1f4:	2f e0       	ldi	r18, 0x0F	; 15
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	08 c0       	rjmp	.+16     	; 0x20a <lcd_init+0x1c>
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	90 e0       	ldi	r25, 0x00	; 0
	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 1fe:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	4c e0       	ldi	r20, 0x0C	; 12
 204:	8c 3c       	cpi	r24, 0xCC	; 204
 206:	94 07       	cpc	r25, r20
 208:	d1 f7       	brne	.-12     	; 0x1fe <lcd_init+0x10>
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 20a:	21 50       	subi	r18, 0x01	; 1
 20c:	30 40       	sbci	r19, 0x00	; 0
 20e:	8f ef       	ldi	r24, 0xFF	; 255
 210:	2f 3f       	cpi	r18, 0xFF	; 255
 212:	38 07       	cpc	r19, r24
 214:	91 f7       	brne	.-28     	; 0x1fa <lcd_init+0xc>
{	
	DDRE=0xFF;
	//DDRC=0x80;
	DDRG=0xFF;
	WaitMs(15);
	CLEARBIT(PORTG,BIT(5));
 216:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 218:	70 98       	cbi	0x0e, 0	; 14
	PORTE=0x00;
 21a:	1e b8       	out	0x0e, r1	; 14
	lcd_cmd(0x20);		//data is 8-bit length
 21c:	80 e2       	ldi	r24, 0x20	; 32
 21e:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_cmd>
 222:	21 e0       	ldi	r18, 0x01	; 1
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	08 c0       	rjmp	.+16     	; 0x238 <lcd_init+0x4a>
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	90 e0       	ldi	r25, 0x00	; 0
	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 22c:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 22e:	01 96       	adiw	r24, 0x01	; 1
 230:	4c e0       	ldi	r20, 0x0C	; 12
 232:	8c 3c       	cpi	r24, 0xCC	; 204
 234:	94 07       	cpc	r25, r20
 236:	d1 f7       	brne	.-12     	; 0x22c <lcd_init+0x3e>
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 238:	21 50       	subi	r18, 0x01	; 1
 23a:	30 40       	sbci	r19, 0x00	; 0
 23c:	8f ef       	ldi	r24, 0xFF	; 255
 23e:	2f 3f       	cpi	r18, 0xFF	; 255
 240:	38 07       	cpc	r19, r24
 242:	91 f7       	brne	.-28     	; 0x228 <lcd_init+0x3a>
	CLEARBIT(PORTG,BIT(5));
	CLEARBIT(PORTE,BIT(0));
	PORTE=0x00;
	lcd_cmd(0x20);		//data is 8-bit length
	WaitMs(1);
	lcd_cmd(0x20);		//data is 8-bit length
 244:	80 e2       	ldi	r24, 0x20	; 32
 246:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_cmd>
 24a:	21 e0       	ldi	r18, 0x01	; 1
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	08 c0       	rjmp	.+16     	; 0x260 <lcd_init+0x72>
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	90 e0       	ldi	r25, 0x00	; 0
	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 254:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 256:	01 96       	adiw	r24, 0x01	; 1
 258:	4c e0       	ldi	r20, 0x0C	; 12
 25a:	8c 3c       	cpi	r24, 0xCC	; 204
 25c:	94 07       	cpc	r25, r20
 25e:	d1 f7       	brne	.-12     	; 0x254 <lcd_init+0x66>
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 260:	21 50       	subi	r18, 0x01	; 1
 262:	30 40       	sbci	r19, 0x00	; 0
 264:	8f ef       	ldi	r24, 0xFF	; 255
 266:	2f 3f       	cpi	r18, 0xFF	; 255
 268:	38 07       	cpc	r19, r24
 26a:	91 f7       	brne	.-28     	; 0x250 <lcd_init+0x62>
	PORTE=0x00;
	lcd_cmd(0x20);		//data is 8-bit length
	WaitMs(1);
	lcd_cmd(0x20);		//data is 8-bit length
	WaitMs(1);
	lcd_cmd(0x20);		//data is 8-bit length
 26c:	80 e2       	ldi	r24, 0x20	; 32
 26e:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_cmd>
 272:	21 e0       	ldi	r18, 0x01	; 1
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	08 c0       	rjmp	.+16     	; 0x288 <lcd_init+0x9a>
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	90 e0       	ldi	r25, 0x00	; 0
	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 27c:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 27e:	01 96       	adiw	r24, 0x01	; 1
 280:	4c e0       	ldi	r20, 0x0C	; 12
 282:	8c 3c       	cpi	r24, 0xCC	; 204
 284:	94 07       	cpc	r25, r20
 286:	d1 f7       	brne	.-12     	; 0x27c <lcd_init+0x8e>
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 288:	21 50       	subi	r18, 0x01	; 1
 28a:	30 40       	sbci	r19, 0x00	; 0
 28c:	8f ef       	ldi	r24, 0xFF	; 255
 28e:	2f 3f       	cpi	r18, 0xFF	; 255
 290:	38 07       	cpc	r19, r24
 292:	91 f7       	brne	.-28     	; 0x278 <lcd_init+0x8a>
	WaitMs(1);
	lcd_cmd(0x20);		//data is 8-bit length
	WaitMs(1);
	lcd_cmd(0x20);		//data is 8-bit length
	WaitMs(1);
	lcd_cmd(0x28);		//sets character font
 294:	88 e2       	ldi	r24, 0x28	; 40
 296:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_cmd>
 29a:	21 e0       	ldi	r18, 0x01	; 1
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	08 c0       	rjmp	.+16     	; 0x2b0 <lcd_init+0xc2>
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	90 e0       	ldi	r25, 0x00	; 0
	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 2a4:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 2a6:	01 96       	adiw	r24, 0x01	; 1
 2a8:	4c e0       	ldi	r20, 0x0C	; 12
 2aa:	8c 3c       	cpi	r24, 0xCC	; 204
 2ac:	94 07       	cpc	r25, r20
 2ae:	d1 f7       	brne	.-12     	; 0x2a4 <lcd_init+0xb6>
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 2b0:	21 50       	subi	r18, 0x01	; 1
 2b2:	30 40       	sbci	r19, 0x00	; 0
 2b4:	8f ef       	ldi	r24, 0xFF	; 255
 2b6:	2f 3f       	cpi	r18, 0xFF	; 255
 2b8:	38 07       	cpc	r19, r24
 2ba:	91 f7       	brne	.-28     	; 0x2a0 <lcd_init+0xb2>
	WaitMs(1);
	lcd_cmd(0x20);		//data is 8-bit length
	WaitMs(1);
	lcd_cmd(0x28);		//sets character font
	WaitMs(1);
	lcd_cmd(0x0E);		//display off(d,c,b=0) 08
 2bc:	8e e0       	ldi	r24, 0x0E	; 14
 2be:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_cmd>
 2c2:	21 e0       	ldi	r18, 0x01	; 1
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	08 c0       	rjmp	.+16     	; 0x2d8 <lcd_init+0xea>
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	90 e0       	ldi	r25, 0x00	; 0
	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 2cc:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 2ce:	01 96       	adiw	r24, 0x01	; 1
 2d0:	4c e0       	ldi	r20, 0x0C	; 12
 2d2:	8c 3c       	cpi	r24, 0xCC	; 204
 2d4:	94 07       	cpc	r25, r20
 2d6:	d1 f7       	brne	.-12     	; 0x2cc <lcd_init+0xde>
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 2d8:	21 50       	subi	r18, 0x01	; 1
 2da:	30 40       	sbci	r19, 0x00	; 0
 2dc:	8f ef       	ldi	r24, 0xFF	; 255
 2de:	2f 3f       	cpi	r18, 0xFF	; 255
 2e0:	38 07       	cpc	r19, r24
 2e2:	91 f7       	brne	.-28     	; 0x2c8 <lcd_init+0xda>
	WaitMs(1);
	lcd_cmd(0x28);		//sets character font
	WaitMs(1);
	lcd_cmd(0x0E);		//display off(d,c,b=0) 08
	WaitMs(1);
	lcd_cmd(0x01);		//clears the data
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_cmd>
 2ea:	21 e0       	ldi	r18, 0x01	; 1
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	08 c0       	rjmp	.+16     	; 0x300 <lcd_init+0x112>
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	90 e0       	ldi	r25, 0x00	; 0
	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 2f4:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 2f6:	01 96       	adiw	r24, 0x01	; 1
 2f8:	4c e0       	ldi	r20, 0x0C	; 12
 2fa:	8c 3c       	cpi	r24, 0xCC	; 204
 2fc:	94 07       	cpc	r25, r20
 2fe:	d1 f7       	brne	.-12     	; 0x2f4 <lcd_init+0x106>
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 300:	21 50       	subi	r18, 0x01	; 1
 302:	30 40       	sbci	r19, 0x00	; 0
 304:	8f ef       	ldi	r24, 0xFF	; 255
 306:	2f 3f       	cpi	r18, 0xFF	; 255
 308:	38 07       	cpc	r19, r24
 30a:	91 f7       	brne	.-28     	; 0x2f0 <lcd_init+0x102>
	WaitMs(1);
	lcd_cmd(0x01);		//clears the data
	WaitMs(1);
	//lcd_cmd(0x02);		//home
	//WaitMs(1);
	lcd_cmd(0x6);		//entry mode--increment
 30c:	86 e0       	ldi	r24, 0x06	; 6
 30e:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_cmd>
 312:	21 e0       	ldi	r18, 0x01	; 1
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	08 c0       	rjmp	.+16     	; 0x328 <lcd_init+0x13a>
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	90 e0       	ldi	r25, 0x00	; 0
	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 31c:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 31e:	01 96       	adiw	r24, 0x01	; 1
 320:	4c e0       	ldi	r20, 0x0C	; 12
 322:	8c 3c       	cpi	r24, 0xCC	; 204
 324:	94 07       	cpc	r25, r20
 326:	d1 f7       	brne	.-12     	; 0x31c <lcd_init+0x12e>
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 328:	21 50       	subi	r18, 0x01	; 1
 32a:	30 40       	sbci	r19, 0x00	; 0
 32c:	8f ef       	ldi	r24, 0xFF	; 255
 32e:	2f 3f       	cpi	r18, 0xFF	; 255
 330:	38 07       	cpc	r19, r24
 332:	91 f7       	brne	.-28     	; 0x318 <lcd_init+0x12a>
	//WaitMs(1);
	lcd_cmd(0x6);		//entry mode--increment
	WaitMs(1);
	//lcd_cmd(0x0C);		//display--on,cursor--on.blinking--on
	//WaitMs(1);
}
 334:	08 95       	ret

00000336 <lcd_char>:

}


void lcd_char(unsigned char data)
{	
 336:	48 2f       	mov	r20, r24
 338:	2f e0       	ldi	r18, 0x0F	; 15
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	08 c0       	rjmp	.+16     	; 0x34e <lcd_char+0x18>
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	90 e0       	ldi	r25, 0x00	; 0
	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 342:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 344:	01 96       	adiw	r24, 0x01	; 1
 346:	5c e0       	ldi	r21, 0x0C	; 12
 348:	8c 3c       	cpi	r24, 0xCC	; 204
 34a:	95 07       	cpc	r25, r21
 34c:	d1 f7       	brne	.-12     	; 0x342 <lcd_char+0xc>
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 34e:	21 50       	subi	r18, 0x01	; 1
 350:	30 40       	sbci	r19, 0x00	; 0
 352:	8f ef       	ldi	r24, 0xFF	; 255
 354:	2f 3f       	cpi	r18, 0xFF	; 255
 356:	38 07       	cpc	r19, r24
 358:	91 f7       	brne	.-28     	; 0x33e <lcd_char+0x8>

void lcd_char(unsigned char data)
{	
	int temp;
	WaitMs(15);
	SETBIT(PORTG,BIT(5));
 35a:	a5 9a       	sbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 35c:	70 98       	cbi	0x0e, 0	; 14
	temp= (data & 0b11000000); // '10'000000
 35e:	24 2f       	mov	r18, r20
 360:	30 e0       	ldi	r19, 0x00	; 0
	PORTE=temp;
 362:	c9 01       	movw	r24, r18
 364:	80 7c       	andi	r24, 0xC0	; 192
 366:	90 70       	andi	r25, 0x00	; 0
 368:	8e b9       	out	0x0e, r24	; 14
	temp=(data>>3) & 0b00000110; // 00000'11'0
	PORTE= PORTE | temp;
 36a:	8e b1       	in	r24, 0x0e	; 14
 36c:	46 95       	lsr	r20
 36e:	46 95       	lsr	r20
 370:	46 95       	lsr	r20
 372:	46 70       	andi	r20, 0x06	; 6
 374:	84 2b       	or	r24, r20
 376:	8e b9       	out	0x0e, r24	; 14
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 378:	68 e1       	ldi	r22, 0x18	; 24
 37a:	86 2f       	mov	r24, r22
 37c:	8a 95       	dec	r24
 37e:	f1 f7       	brne	.-4      	; 0x37c <lcd_char+0x46>
}


void toggleE(void)
{
SETBIT(PORTE,BIT(0));
 380:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 382:	43 e3       	ldi	r20, 0x33	; 51
 384:	57 e0       	ldi	r21, 0x07	; 7
 386:	ca 01       	movw	r24, r20
 388:	01 97       	sbiw	r24, 0x01	; 1
 38a:	f1 f7       	brne	.-4      	; 0x388 <lcd_char+0x52>
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
 38c:	70 98       	cbi	0x0e, 0	; 14
	toggleE();				// '10'000'11'0 (first nibble Done)
							/* PORTA = (data & 0xF0);
							PORTA = (data & 0xF0);
							PORTA = (data & 0xF0);*/

	CLEARBIT(PORTG,BIT(5));
 38e:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 390:	70 98       	cbi	0x0e, 0	; 14
	SETBIT(PORTG,BIT(5));
 392:	a5 9a       	sbi	0x14, 5	; 20
	temp=(data << 4) & 0b11000000; // '10'000000
	PORTE=temp;
 394:	c9 01       	movw	r24, r18
 396:	f4 e0       	ldi	r31, 0x04	; 4
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	fa 95       	dec	r31
 39e:	e1 f7       	brne	.-8      	; 0x398 <lcd_char+0x62>
 3a0:	80 7c       	andi	r24, 0xC0	; 192
 3a2:	90 70       	andi	r25, 0x00	; 0
 3a4:	8e b9       	out	0x0e, r24	; 14
	temp=(data << 1) & 0b00000110; // 00000'01'0 
	PORTE= PORTE | temp;
 3a6:	8e b1       	in	r24, 0x0e	; 14
 3a8:	22 0f       	add	r18, r18
 3aa:	33 1f       	adc	r19, r19
 3ac:	26 70       	andi	r18, 0x06	; 6
 3ae:	30 70       	andi	r19, 0x00	; 0
 3b0:	82 2b       	or	r24, r18
 3b2:	8e b9       	out	0x0e, r24	; 14
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 3b4:	6a 95       	dec	r22
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <lcd_char+0x7e>
}


void toggleE(void)
{
SETBIT(PORTE,BIT(0));
 3b8:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3ba:	ca 01       	movw	r24, r20
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <lcd_char+0x86>
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
 3c0:	70 98       	cbi	0x0e, 0	; 14
	_delay_us(5);
						/*PORTA = (data << 4);
						PORTA = (data << 4);
						PORTA = (data << 4);	*/					
	toggleE();
}
 3c2:	08 95       	ret

000003c4 <lcd_string>:

void lcd_string(unsigned char str[32])
{
 3c4:	cf 92       	push	r12
 3c6:	df 92       	push	r13
 3c8:	ef 92       	push	r14
 3ca:	ff 92       	push	r15
 3cc:	1f 93       	push	r17
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	7c 01       	movw	r14, r24
	int poop,bitch;
	unsigned char k=0;
	PORTA=0x01;
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	82 b9       	out	0x02, r24	; 2
	SETBIT(PORTG,BIT(5));
 3d8:	a5 9a       	sbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 3da:	70 98       	cbi	0x0e, 0	; 14
 3dc:	10 e0       	ldi	r17, 0x00	; 0
 3de:	63 e3       	ldi	r22, 0x33	; 51
 3e0:	c6 2e       	mov	r12, r22
 3e2:	67 e0       	ldi	r22, 0x07	; 7
 3e4:	d6 2e       	mov	r13, r22
 3e6:	47 c0       	rjmp	.+142    	; 0x476 <lcd_string+0xb2>
	while(str[k]!='\0')	//Till null character is encountered
		{
			if(k==16)
 3e8:	10 31       	cpi	r17, 0x10	; 16
 3ea:	19 f4       	brne	.+6      	; 0x3f2 <lcd_string+0x2e>
				lcd_cmd(LINE2);
 3ec:	80 ec       	ldi	r24, 0xC0	; 192
 3ee:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_cmd>
			SETBIT(PORTG,BIT(5));
 3f2:	a5 9a       	sbi	0x14, 5	; 20
			CLEARBIT(PORTE,BIT(0));
 3f4:	70 98       	cbi	0x0e, 0	; 14
			bitch=str[k]; //10111001
 3f6:	28 81       	ld	r18, Y
 3f8:	30 e0       	ldi	r19, 0x00	; 0
			poop= bitch & 0b11000000; // '10'000000
			PORTE=poop;
 3fa:	c9 01       	movw	r24, r18
 3fc:	80 7c       	andi	r24, 0xC0	; 192
 3fe:	90 70       	andi	r25, 0x00	; 0
 400:	8e b9       	out	0x0e, r24	; 14
			poop=(bitch>>3) & 0b00000110; // 00000'11'0
			PORTE= PORTE | poop;
 402:	4e b1       	in	r20, 0x0e	; 14
 404:	c9 01       	movw	r24, r18
 406:	53 e0       	ldi	r21, 0x03	; 3
 408:	95 95       	asr	r25
 40a:	87 95       	ror	r24
 40c:	5a 95       	dec	r21
 40e:	e1 f7       	brne	.-8      	; 0x408 <lcd_string+0x44>
 410:	86 70       	andi	r24, 0x06	; 6
 412:	90 70       	andi	r25, 0x00	; 0
 414:	48 2b       	or	r20, r24
 416:	4e b9       	out	0x0e, r20	; 14
}


void toggleE(void)
{
SETBIT(PORTE,BIT(0));
 418:	70 9a       	sbi	0x0e, 0	; 14
 41a:	c6 01       	movw	r24, r12
 41c:	01 97       	sbiw	r24, 0x01	; 1
 41e:	f1 f7       	brne	.-4      	; 0x41c <lcd_string+0x58>
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
 420:	70 98       	cbi	0x0e, 0	; 14
			PORTE=poop;
			poop=(bitch>>3) & 0b00000110; // 00000'11'0
			PORTE= PORTE | poop;
			//PORTA=((str[k])&0xF0)|0x01;
			toggleE();
			CLEARBIT(PORTG,BIT(5))
 422:	a5 98       	cbi	0x14, 5	; 20
			SETBIT(PORTG,BIT(5));
 424:	a5 9a       	sbi	0x14, 5	; 20
			CLEARBIT(PORTE,BIT(0));
 426:	70 98       	cbi	0x0e, 0	; 14
			bitch=str[k];
			poop=(bitch << 4) & 0b11000000; // '10'000000
			PORTE=poop;
 428:	c9 01       	movw	r24, r18
 42a:	b4 e0       	ldi	r27, 0x04	; 4
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	ba 95       	dec	r27
 432:	e1 f7       	brne	.-8      	; 0x42c <lcd_string+0x68>
 434:	80 7c       	andi	r24, 0xC0	; 192
 436:	90 70       	andi	r25, 0x00	; 0
 438:	8e b9       	out	0x0e, r24	; 14
			poop=(bitch << 1) & 0b00000110; // 00000'01'0 
			PORTE= PORTE | poop;
 43a:	8e b1       	in	r24, 0x0e	; 14
 43c:	22 0f       	add	r18, r18
 43e:	33 1f       	adc	r19, r19
 440:	26 70       	andi	r18, 0x06	; 6
 442:	30 70       	andi	r19, 0x00	; 0
 444:	82 2b       	or	r24, r18
 446:	8e b9       	out	0x0e, r24	; 14
}


void toggleE(void)
{
SETBIT(PORTE,BIT(0));
 448:	70 9a       	sbi	0x0e, 0	; 14
 44a:	c6 01       	movw	r24, r12
 44c:	01 97       	sbiw	r24, 0x01	; 1
 44e:	f1 f7       	brne	.-4      	; 0x44c <lcd_string+0x88>
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
 450:	70 98       	cbi	0x0e, 0	; 14
 452:	21 e0       	ldi	r18, 0x01	; 1
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	08 c0       	rjmp	.+16     	; 0x468 <lcd_string+0xa4>
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	90 e0       	ldi	r25, 0x00	; 0
	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 45c:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 45e:	01 96       	adiw	r24, 0x01	; 1
 460:	4c e0       	ldi	r20, 0x0C	; 12
 462:	8c 3c       	cpi	r24, 0xCC	; 204
 464:	94 07       	cpc	r25, r20
 466:	d1 f7       	brne	.-12     	; 0x45c <lcd_string+0x98>
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 468:	21 50       	subi	r18, 0x01	; 1
 46a:	30 40       	sbci	r19, 0x00	; 0
 46c:	8f ef       	ldi	r24, 0xFF	; 255
 46e:	2f 3f       	cpi	r18, 0xFF	; 255
 470:	38 07       	cpc	r19, r24
 472:	91 f7       	brne	.-28     	; 0x458 <lcd_string+0x94>
			PORTE=poop;
			poop=(bitch << 1) & 0b00000110; // 00000'01'0 
			PORTE= PORTE | poop;
			//PORTA=((str[k]&(0x0F))*16)|0x01;
			toggleE();
			k++;
 474:	1f 5f       	subi	r17, 0xFF	; 255
	int poop,bitch;
	unsigned char k=0;
	PORTA=0x01;
	SETBIT(PORTG,BIT(5));
	CLEARBIT(PORTE,BIT(0));
	while(str[k]!='\0')	//Till null character is encountered
 476:	e7 01       	movw	r28, r14
 478:	c1 0f       	add	r28, r17
 47a:	d1 1d       	adc	r29, r1
 47c:	88 81       	ld	r24, Y
 47e:	88 23       	and	r24, r24
 480:	09 f0       	breq	.+2      	; 0x484 <lcd_string+0xc0>
 482:	b2 cf       	rjmp	.-156    	; 0x3e8 <lcd_string+0x24>
			//PORTA=((str[k]&(0x0F))*16)|0x01;
			toggleE();
			k++;
			WaitMs(1);
		}
}
 484:	df 91       	pop	r29
 486:	cf 91       	pop	r28
 488:	1f 91       	pop	r17
 48a:	ff 90       	pop	r15
 48c:	ef 90       	pop	r14
 48e:	df 90       	pop	r13
 490:	cf 90       	pop	r12
 492:	08 95       	ret

00000494 <lcd_showvalue>:


void lcd_showvalue(unsigned long int num)
{
 494:	8f 92       	push	r8
 496:	9f 92       	push	r9
 498:	af 92       	push	r10
 49a:	bf 92       	push	r11
 49c:	cf 92       	push	r12
 49e:	df 92       	push	r13
 4a0:	ef 92       	push	r14
 4a2:	ff 92       	push	r15
 4a4:	1f 93       	push	r17
 4a6:	cf 93       	push	r28
 4a8:	df 93       	push	r29
 4aa:	4b 01       	movw	r8, r22
 4ac:	5c 01       	movw	r10, r24
	
	unsigned long int n = 0;
	int flag = 0;


	if(num%100000 == 0)
 4ae:	20 ea       	ldi	r18, 0xA0	; 160
 4b0:	36 e8       	ldi	r19, 0x86	; 134
 4b2:	41 e0       	ldi	r20, 0x01	; 1
 4b4:	50 e0       	ldi	r21, 0x00	; 0
 4b6:	0e 94 af 05 	call	0xb5e	; 0xb5e <__udivmodsi4>
 4ba:	61 15       	cp	r22, r1
 4bc:	71 05       	cpc	r23, r1
 4be:	81 05       	cpc	r24, r1
 4c0:	91 05       	cpc	r25, r1
 4c2:	19 f4       	brne	.+6      	; 0x4ca <lcd_showvalue+0x36>
 4c4:	c5 e0       	ldi	r28, 0x05	; 5
 4c6:	d0 e0       	ldi	r29, 0x00	; 0
 4c8:	41 c0       	rjmp	.+130    	; 0x54c <lcd_showvalue+0xb8>
	{
		flag = 5;
	}
	
	else if(num%10000 == 0)
 4ca:	c5 01       	movw	r24, r10
 4cc:	b4 01       	movw	r22, r8
 4ce:	20 e1       	ldi	r18, 0x10	; 16
 4d0:	37 e2       	ldi	r19, 0x27	; 39
 4d2:	40 e0       	ldi	r20, 0x00	; 0
 4d4:	50 e0       	ldi	r21, 0x00	; 0
 4d6:	0e 94 af 05 	call	0xb5e	; 0xb5e <__udivmodsi4>
 4da:	61 15       	cp	r22, r1
 4dc:	71 05       	cpc	r23, r1
 4de:	81 05       	cpc	r24, r1
 4e0:	91 05       	cpc	r25, r1
 4e2:	19 f4       	brne	.+6      	; 0x4ea <lcd_showvalue+0x56>
 4e4:	c4 e0       	ldi	r28, 0x04	; 4
 4e6:	d0 e0       	ldi	r29, 0x00	; 0
 4e8:	31 c0       	rjmp	.+98     	; 0x54c <lcd_showvalue+0xb8>
	{
		flag = 4;
	}

	else if(num%1000 == 0) 
 4ea:	c5 01       	movw	r24, r10
 4ec:	b4 01       	movw	r22, r8
 4ee:	28 ee       	ldi	r18, 0xE8	; 232
 4f0:	33 e0       	ldi	r19, 0x03	; 3
 4f2:	40 e0       	ldi	r20, 0x00	; 0
 4f4:	50 e0       	ldi	r21, 0x00	; 0
 4f6:	0e 94 af 05 	call	0xb5e	; 0xb5e <__udivmodsi4>
 4fa:	61 15       	cp	r22, r1
 4fc:	71 05       	cpc	r23, r1
 4fe:	81 05       	cpc	r24, r1
 500:	91 05       	cpc	r25, r1
 502:	19 f4       	brne	.+6      	; 0x50a <lcd_showvalue+0x76>
 504:	c3 e0       	ldi	r28, 0x03	; 3
 506:	d0 e0       	ldi	r29, 0x00	; 0
 508:	21 c0       	rjmp	.+66     	; 0x54c <lcd_showvalue+0xb8>
	{
		flag = 3;
	}

	else if(num%100 == 0) 
 50a:	c5 01       	movw	r24, r10
 50c:	b4 01       	movw	r22, r8
 50e:	24 e6       	ldi	r18, 0x64	; 100
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	40 e0       	ldi	r20, 0x00	; 0
 514:	50 e0       	ldi	r21, 0x00	; 0
 516:	0e 94 af 05 	call	0xb5e	; 0xb5e <__udivmodsi4>
 51a:	61 15       	cp	r22, r1
 51c:	71 05       	cpc	r23, r1
 51e:	81 05       	cpc	r24, r1
 520:	91 05       	cpc	r25, r1
 522:	19 f4       	brne	.+6      	; 0x52a <lcd_showvalue+0x96>
 524:	c2 e0       	ldi	r28, 0x02	; 2
 526:	d0 e0       	ldi	r29, 0x00	; 0
 528:	11 c0       	rjmp	.+34     	; 0x54c <lcd_showvalue+0xb8>
 52a:	c0 e0       	ldi	r28, 0x00	; 0
 52c:	d0 e0       	ldi	r29, 0x00	; 0
 52e:	c5 01       	movw	r24, r10
 530:	b4 01       	movw	r22, r8
 532:	2a e0       	ldi	r18, 0x0A	; 10
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	40 e0       	ldi	r20, 0x00	; 0
 538:	50 e0       	ldi	r21, 0x00	; 0
 53a:	0e 94 af 05 	call	0xb5e	; 0xb5e <__udivmodsi4>
 53e:	61 15       	cp	r22, r1
 540:	71 05       	cpc	r23, r1
 542:	81 05       	cpc	r24, r1
 544:	91 05       	cpc	r25, r1
 546:	11 f4       	brne	.+4      	; 0x54c <lcd_showvalue+0xb8>
 548:	c1 e0       	ldi	r28, 0x01	; 1
 54a:	d0 e0       	ldi	r29, 0x00	; 0
 54c:	cc 24       	eor	r12, r12
 54e:	dd 24       	eor	r13, r13
 550:	76 01       	movw	r14, r12
 552:	23 c0       	rjmp	.+70     	; 0x59a <lcd_showvalue+0x106>


	while(num!=0)
	{
	
			H = num%10;
 554:	c5 01       	movw	r24, r10
 556:	b4 01       	movw	r22, r8
 558:	2a e0       	ldi	r18, 0x0A	; 10
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	40 e0       	ldi	r20, 0x00	; 0
 55e:	50 e0       	ldi	r21, 0x00	; 0
 560:	0e 94 af 05 	call	0xb5e	; 0xb5e <__udivmodsi4>
 564:	16 2f       	mov	r17, r22
			num = num/10;
 566:	c5 01       	movw	r24, r10
 568:	b4 01       	movw	r22, r8
 56a:	2a e0       	ldi	r18, 0x0A	; 10
 56c:	30 e0       	ldi	r19, 0x00	; 0
 56e:	40 e0       	ldi	r20, 0x00	; 0
 570:	50 e0       	ldi	r21, 0x00	; 0
 572:	0e 94 af 05 	call	0xb5e	; 0xb5e <__udivmodsi4>
 576:	c9 01       	movw	r24, r18
 578:	da 01       	movw	r26, r20
 57a:	4c 01       	movw	r8, r24
 57c:	5d 01       	movw	r10, r26
			n = (n*10)+H;
 57e:	c7 01       	movw	r24, r14
 580:	b6 01       	movw	r22, r12
 582:	2a e0       	ldi	r18, 0x0A	; 10
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	40 e0       	ldi	r20, 0x00	; 0
 588:	50 e0       	ldi	r21, 0x00	; 0
 58a:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__mulsi3>
 58e:	6b 01       	movw	r12, r22
 590:	7c 01       	movw	r14, r24
 592:	c1 0e       	add	r12, r17
 594:	d1 1c       	adc	r13, r1
 596:	e1 1c       	adc	r14, r1
 598:	f1 1c       	adc	r15, r1
		flag = 0;
	}



	while(num!=0)
 59a:	81 14       	cp	r8, r1
 59c:	91 04       	cpc	r9, r1
 59e:	a1 04       	cpc	r10, r1
 5a0:	b1 04       	cpc	r11, r1
 5a2:	c1 f6       	brne	.-80     	; 0x554 <lcd_showvalue+0xc0>
 5a4:	19 c0       	rjmp	.+50     	; 0x5d8 <lcd_showvalue+0x144>
	}
	
	while(n!=0)
	{
	
			H = n%10;
 5a6:	c7 01       	movw	r24, r14
 5a8:	b6 01       	movw	r22, r12
 5aa:	2a e0       	ldi	r18, 0x0A	; 10
 5ac:	30 e0       	ldi	r19, 0x00	; 0
 5ae:	40 e0       	ldi	r20, 0x00	; 0
 5b0:	50 e0       	ldi	r21, 0x00	; 0
 5b2:	0e 94 af 05 	call	0xb5e	; 0xb5e <__udivmodsi4>
 5b6:	16 2f       	mov	r17, r22
			n = n/10;
 5b8:	c7 01       	movw	r24, r14
 5ba:	b6 01       	movw	r22, r12
 5bc:	2a e0       	ldi	r18, 0x0A	; 10
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	40 e0       	ldi	r20, 0x00	; 0
 5c2:	50 e0       	ldi	r21, 0x00	; 0
 5c4:	0e 94 af 05 	call	0xb5e	; 0xb5e <__udivmodsi4>
 5c8:	c9 01       	movw	r24, r18
 5ca:	da 01       	movw	r26, r20
 5cc:	6c 01       	movw	r12, r24
 5ce:	7d 01       	movw	r14, r26
			lcd_char(H+48);
 5d0:	81 2f       	mov	r24, r17
 5d2:	80 5d       	subi	r24, 0xD0	; 208
 5d4:	0e 94 9b 01 	call	0x336	; 0x336 <lcd_char>
			num = num/10;
			n = (n*10)+H;

	}
	
	while(n!=0)
 5d8:	c1 14       	cp	r12, r1
 5da:	d1 04       	cpc	r13, r1
 5dc:	e1 04       	cpc	r14, r1
 5de:	f1 04       	cpc	r15, r1
 5e0:	11 f7       	brne	.-60     	; 0x5a6 <lcd_showvalue+0x112>
 5e2:	04 c0       	rjmp	.+8      	; 0x5ec <lcd_showvalue+0x158>
	}
	
	
	while(flag > 0)
	{
		lcd_char(48);
 5e4:	80 e3       	ldi	r24, 0x30	; 48
 5e6:	0e 94 9b 01 	call	0x336	; 0x336 <lcd_char>
		flag--;
 5ea:	21 97       	sbiw	r28, 0x01	; 1
			lcd_char(H+48);

	}
	
	
	while(flag > 0)
 5ec:	20 97       	sbiw	r28, 0x00	; 0
 5ee:	d1 f7       	brne	.-12     	; 0x5e4 <lcd_showvalue+0x150>
	{
		lcd_char(48);
		flag--;
	}	

}
 5f0:	df 91       	pop	r29
 5f2:	cf 91       	pop	r28
 5f4:	1f 91       	pop	r17
 5f6:	ff 90       	pop	r15
 5f8:	ef 90       	pop	r14
 5fa:	df 90       	pop	r13
 5fc:	cf 90       	pop	r12
 5fe:	bf 90       	pop	r11
 600:	af 90       	pop	r10
 602:	9f 90       	pop	r9
 604:	8f 90       	pop	r8
 606:	08 95       	ret

00000608 <lcd_gotoxy1>:
	lcd_showvalue(l);

}

void lcd_gotoxy1(unsigned char pos)
{
 608:	80 58       	subi	r24, 0x80	; 128
 60a:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_cmd>
	lcd_cmd(LINE1+pos);
}
 60e:	08 95       	ret

00000610 <lcd_gotoxy2>:

void lcd_gotoxy2(unsigned char pos)
{
 610:	80 54       	subi	r24, 0x40	; 64
 612:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_cmd>
	lcd_cmd(LINE2+pos);
}
 616:	08 95       	ret

00000618 <lcd_showvalueh>:

void lcd_showvalueh(unsigned int num)	//prints the decimal 3digit value of num
{
 618:	ef 92       	push	r14
 61a:	ff 92       	push	r15
 61c:	0f 93       	push	r16
 61e:	1f 93       	push	r17
 620:	8c 01       	movw	r16, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
 622:	64 e6       	ldi	r22, 0x64	; 100
 624:	70 e0       	ldi	r23, 0x00	; 0
 626:	0e 94 9b 05 	call	0xb36	; 0xb36 <__udivmodhi4>
 62a:	46 2f       	mov	r20, r22
	T=(num - (H*100))/10;
 62c:	26 2f       	mov	r18, r22
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	8c e9       	ldi	r24, 0x9C	; 156
 632:	9f ef       	ldi	r25, 0xFF	; 255
 634:	28 9f       	mul	r18, r24
 636:	70 01       	movw	r14, r0
 638:	29 9f       	mul	r18, r25
 63a:	f0 0c       	add	r15, r0
 63c:	38 9f       	mul	r19, r24
 63e:	f0 0c       	add	r15, r0
 640:	11 24       	eor	r1, r1
 642:	c7 01       	movw	r24, r14
 644:	80 0f       	add	r24, r16
 646:	91 1f       	adc	r25, r17
 648:	6a e0       	ldi	r22, 0x0A	; 10
 64a:	70 e0       	ldi	r23, 0x00	; 0
 64c:	0e 94 9b 05 	call	0xb36	; 0xb36 <__udivmodhi4>
 650:	16 2f       	mov	r17, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+48);
 652:	84 2f       	mov	r24, r20
 654:	80 5d       	subi	r24, 0xD0	; 208
 656:	0e 94 9b 01 	call	0x336	; 0x336 <lcd_char>
	lcd_char(T+48);
 65a:	81 2f       	mov	r24, r17
 65c:	80 5d       	subi	r24, 0xD0	; 208
 65e:	0e 94 9b 01 	call	0x336	; 0x336 <lcd_char>
	lcd_char(O+48);
 662:	00 5d       	subi	r16, 0xD0	; 208
 664:	0e 0d       	add	r16, r14
 666:	86 ef       	ldi	r24, 0xF6	; 246
 668:	9f ef       	ldi	r25, 0xFF	; 255
 66a:	18 9f       	mul	r17, r24
 66c:	60 2d       	mov	r22, r0
 66e:	11 24       	eor	r1, r1
 670:	86 2f       	mov	r24, r22
 672:	80 0f       	add	r24, r16
 674:	0e 94 9b 01 	call	0x336	; 0x336 <lcd_char>
}
 678:	1f 91       	pop	r17
 67a:	0f 91       	pop	r16
 67c:	ff 90       	pop	r15
 67e:	ef 90       	pop	r14
 680:	08 95       	ret

00000682 <lcd_exit>:
		

void lcd_exit(void)
{
 682:	80 91 1c 02 	lds	r24, 0x021C
 686:	82 b9       	out	0x02, r24	; 2
	PORTA=save;
}
 688:	08 95       	ret

0000068a <WaitMs>:

/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
 68a:	0a c0       	rjmp	.+20     	; 0x6a0 <WaitMs+0x16>
	int i;

	while (ms-- > 0)
 68c:	20 e0       	ldi	r18, 0x00	; 0
 68e:	30 e0       	ldi	r19, 0x00	; 0
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 690:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 692:	2f 5f       	subi	r18, 0xFF	; 255
 694:	3f 4f       	sbci	r19, 0xFF	; 255
 696:	4c e0       	ldi	r20, 0x0C	; 12
 698:	2c 3c       	cpi	r18, 0xCC	; 204
 69a:	34 07       	cpc	r19, r20
 69c:	c9 f7       	brne	.-14     	; 0x690 <WaitMs+0x6>
 69e:	01 97       	sbiw	r24, 0x01	; 1
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 6a0:	00 97       	sbiw	r24, 0x00	; 0
 6a2:	a1 f7       	brne	.-24     	; 0x68c <WaitMs+0x2>
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
	}
}
 6a4:	08 95       	ret

000006a6 <pwm_init>:
#include <avr/interrupt.h>
#include "PORT.h"
#include "LCD640.h"

int pwm_init()
{
 6a6:	8f ef       	ldi	r24, 0xFF	; 255
 6a8:	8d b9       	out	0x0d, r24	; 13
	DDRE=0XFF;
	TCNT3=0;
 6aa:	10 92 95 00 	sts	0x0095, r1
 6ae:	10 92 94 00 	sts	0x0094, r1
	TCCR3A=0XAA;
 6b2:	8a ea       	ldi	r24, 0xAA	; 170
 6b4:	80 93 90 00 	sts	0x0090, r24
	TCCR3B=0X11;
 6b8:	81 e1       	ldi	r24, 0x11	; 17
 6ba:	80 93 91 00 	sts	0x0091, r24
	TCCR3C=0X00;
 6be:	10 92 92 00 	sts	0x0092, r1
	ICR3=737;
 6c2:	81 ee       	ldi	r24, 0xE1	; 225
 6c4:	92 e0       	ldi	r25, 0x02	; 2
 6c6:	90 93 97 00 	sts	0x0097, r25
 6ca:	80 93 96 00 	sts	0x0096, r24
}
 6ce:	08 95       	ret

000006d0 <counter1_init>:


int counter1_init()
{
 6d0:	87 e0       	ldi	r24, 0x07	; 7
 6d2:	80 93 81 00 	sts	0x0081, r24

TCCR1B=0X07;


}
 6d6:	08 95       	ret

000006d8 <main>:


int main()
{
 6d8:	cf 93       	push	r28
 6da:	df 93       	push	r29
DDRD=0X00;
 6dc:	1a b8       	out	0x0a, r1	; 10


int counter1_init()
{

TCCR1B=0X07;
 6de:	87 e0       	ldi	r24, 0x07	; 7
 6e0:	80 93 81 00 	sts	0x0081, r24
#include "PORT.h"
#include "LCD640.h"

int pwm_init()
{
	DDRE=0XFF;
 6e4:	8f ef       	ldi	r24, 0xFF	; 255
 6e6:	8d b9       	out	0x0d, r24	; 13
	TCNT3=0;
 6e8:	10 92 95 00 	sts	0x0095, r1
 6ec:	10 92 94 00 	sts	0x0094, r1
	TCCR3A=0XAA;
 6f0:	8a ea       	ldi	r24, 0xAA	; 170
 6f2:	80 93 90 00 	sts	0x0090, r24
	TCCR3B=0X11;
 6f6:	81 e1       	ldi	r24, 0x11	; 17
 6f8:	80 93 91 00 	sts	0x0091, r24
	TCCR3C=0X00;
 6fc:	10 92 92 00 	sts	0x0092, r1
	ICR3=737;
 700:	81 ee       	ldi	r24, 0xE1	; 225
 702:	92 e0       	ldi	r25, 0x02	; 2
 704:	90 93 97 00 	sts	0x0097, r25
 708:	80 93 96 00 	sts	0x0096, r24
int main()
{
DDRD=0X00;
counter1_init();
pwm_init();
lcd_init();
 70c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_init>
CLEARBIT(PORTH,BIT(6));
CLEARBIT(PORTH,BIT(7));
}
else
{
OCR3A=300;
 710:	cc e2       	ldi	r28, 0x2C	; 44
 712:	d1 e0       	ldi	r29, 0x01	; 1
counter1_init();
pwm_init();
lcd_init();
while(1)
{
lcd_gotoxy1(0);
 714:	80 e0       	ldi	r24, 0x00	; 0
 716:	0e 94 04 03 	call	0x608	; 0x608 <lcd_gotoxy1>
lcd_string("TCNT1H=");
 71a:	80 e0       	ldi	r24, 0x00	; 0
 71c:	92 e0       	ldi	r25, 0x02	; 2
 71e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_string>
lcd_showvalue(TCNT1H);
 722:	60 91 85 00 	lds	r22, 0x0085
 726:	70 e0       	ldi	r23, 0x00	; 0
 728:	80 e0       	ldi	r24, 0x00	; 0
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	0e 94 4a 02 	call	0x494	; 0x494 <lcd_showvalue>
lcd_gotoxy2(0);
 730:	80 e0       	ldi	r24, 0x00	; 0
 732:	0e 94 08 03 	call	0x610	; 0x610 <lcd_gotoxy2>
lcd_string("TCNT1L=");
 736:	88 e0       	ldi	r24, 0x08	; 8
 738:	92 e0       	ldi	r25, 0x02	; 2
 73a:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_string>
lcd_showvalue(TCNT1L);
 73e:	60 91 84 00 	lds	r22, 0x0084
 742:	70 e0       	ldi	r23, 0x00	; 0
 744:	80 e0       	ldi	r24, 0x00	; 0
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	0e 94 4a 02 	call	0x494	; 0x494 <lcd_showvalue>

if(TCNT1>=400)
 74c:	80 91 84 00 	lds	r24, 0x0084
 750:	90 91 85 00 	lds	r25, 0x0085
 754:	80 59       	subi	r24, 0x90	; 144
 756:	91 40       	sbci	r25, 0x01	; 1
 758:	88 f0       	brcs	.+34     	; 0x77c <main+0xa4>
{
OCR3A=0;
 75a:	10 92 99 00 	sts	0x0099, r1
 75e:	10 92 98 00 	sts	0x0098, r1
OCR3B=0;
 762:	10 92 9b 00 	sts	0x009B, r1
 766:	10 92 9a 00 	sts	0x009A, r1
CLEARBIT(PORTH,BIT(6));
 76a:	80 91 02 01 	lds	r24, 0x0102
 76e:	8f 7b       	andi	r24, 0xBF	; 191
 770:	80 93 02 01 	sts	0x0102, r24
CLEARBIT(PORTH,BIT(7));
 774:	80 91 02 01 	lds	r24, 0x0102
 778:	8f 77       	andi	r24, 0x7F	; 127
 77a:	10 c0       	rjmp	.+32     	; 0x79c <main+0xc4>
}
else
{
OCR3A=300;
 77c:	d0 93 99 00 	sts	0x0099, r29
 780:	c0 93 98 00 	sts	0x0098, r28
OCR3B=300;
 784:	d0 93 9b 00 	sts	0x009B, r29
 788:	c0 93 9a 00 	sts	0x009A, r28
SETBIT(PORTH,BIT(6));
 78c:	80 91 02 01 	lds	r24, 0x0102
 790:	80 64       	ori	r24, 0x40	; 64
 792:	80 93 02 01 	sts	0x0102, r24
SETBIT(PORTH,BIT(7));
 796:	80 91 02 01 	lds	r24, 0x0102
 79a:	80 68       	ori	r24, 0x80	; 128
 79c:	80 93 02 01 	sts	0x0102, r24
 7a0:	b9 cf       	rjmp	.-142    	; 0x714 <main+0x3c>

000007a2 <lcd_showvaluef>:

}


void lcd_showvaluef(float num)
{
 7a2:	ef 92       	push	r14
 7a4:	ff 92       	push	r15
 7a6:	0f 93       	push	r16
 7a8:	1f 93       	push	r17
 7aa:	df 93       	push	r29
 7ac:	cf 93       	push	r28
 7ae:	00 d0       	rcall	.+0      	; 0x7b0 <lcd_showvaluef+0xe>
 7b0:	00 d0       	rcall	.+0      	; 0x7b2 <lcd_showvaluef+0x10>
 7b2:	cd b7       	in	r28, 0x3d	; 61
 7b4:	de b7       	in	r29, 0x3e	; 62
 7b6:	7b 01       	movw	r14, r22
 7b8:	8c 01       	movw	r16, r24
	unsigned long int l;
	double fraction,integer;

	l = (unsigned long int)num;

	lcd_showvalue(l);
 7ba:	0e 94 04 04 	call	0x808	; 0x808 <__fixunssfsi>
 7be:	0e 94 4a 02 	call	0x494	; 0x494 <lcd_showvalue>

	fraction = modf((double)num,&integer);
 7c2:	ae 01       	movw	r20, r28
 7c4:	4f 5f       	subi	r20, 0xFF	; 255
 7c6:	5f 4f       	sbci	r21, 0xFF	; 255
 7c8:	c8 01       	movw	r24, r16
 7ca:	b7 01       	movw	r22, r14
 7cc:	0e 94 59 04 	call	0x8b2	; 0x8b2 <modf>
 7d0:	7b 01       	movw	r14, r22
 7d2:	8c 01       	movw	r16, r24

	l = (unsigned long int)(fraction * 100000);

	lcd_char('.');
 7d4:	8e e2       	ldi	r24, 0x2E	; 46
 7d6:	0e 94 9b 01 	call	0x336	; 0x336 <lcd_char>

	lcd_showvalue(l);
 7da:	20 e0       	ldi	r18, 0x00	; 0
 7dc:	30 e5       	ldi	r19, 0x50	; 80
 7de:	43 ec       	ldi	r20, 0xC3	; 195
 7e0:	57 e4       	ldi	r21, 0x47	; 71
 7e2:	c8 01       	movw	r24, r16
 7e4:	b7 01       	movw	r22, r14
 7e6:	0e 94 8c 04 	call	0x918	; 0x918 <__mulsf3>
 7ea:	0e 94 04 04 	call	0x808	; 0x808 <__fixunssfsi>
 7ee:	0e 94 4a 02 	call	0x494	; 0x494 <lcd_showvalue>

}
 7f2:	0f 90       	pop	r0
 7f4:	0f 90       	pop	r0
 7f6:	0f 90       	pop	r0
 7f8:	0f 90       	pop	r0
 7fa:	cf 91       	pop	r28
 7fc:	df 91       	pop	r29
 7fe:	1f 91       	pop	r17
 800:	0f 91       	pop	r16
 802:	ff 90       	pop	r15
 804:	ef 90       	pop	r14
 806:	08 95       	ret

00000808 <__fixunssfsi>:
 808:	33 d0       	rcall	.+102    	; 0x870 <__fp_splitA>
 80a:	88 f0       	brcs	.+34     	; 0x82e <__fixunssfsi+0x26>
 80c:	9f 57       	subi	r25, 0x7F	; 127
 80e:	90 f0       	brcs	.+36     	; 0x834 <__fixunssfsi+0x2c>
 810:	b9 2f       	mov	r27, r25
 812:	99 27       	eor	r25, r25
 814:	b7 51       	subi	r27, 0x17	; 23
 816:	a0 f0       	brcs	.+40     	; 0x840 <__fixunssfsi+0x38>
 818:	d1 f0       	breq	.+52     	; 0x84e <__fixunssfsi+0x46>
 81a:	66 0f       	add	r22, r22
 81c:	77 1f       	adc	r23, r23
 81e:	88 1f       	adc	r24, r24
 820:	99 1f       	adc	r25, r25
 822:	1a f0       	brmi	.+6      	; 0x82a <__fixunssfsi+0x22>
 824:	ba 95       	dec	r27
 826:	c9 f7       	brne	.-14     	; 0x81a <__fixunssfsi+0x12>
 828:	12 c0       	rjmp	.+36     	; 0x84e <__fixunssfsi+0x46>
 82a:	b1 30       	cpi	r27, 0x01	; 1
 82c:	81 f0       	breq	.+32     	; 0x84e <__fixunssfsi+0x46>
 82e:	3a d0       	rcall	.+116    	; 0x8a4 <__fp_zero>
 830:	b1 e0       	ldi	r27, 0x01	; 1
 832:	08 95       	ret
 834:	37 c0       	rjmp	.+110    	; 0x8a4 <__fp_zero>
 836:	67 2f       	mov	r22, r23
 838:	78 2f       	mov	r23, r24
 83a:	88 27       	eor	r24, r24
 83c:	b8 5f       	subi	r27, 0xF8	; 248
 83e:	39 f0       	breq	.+14     	; 0x84e <__fixunssfsi+0x46>
 840:	b9 3f       	cpi	r27, 0xF9	; 249
 842:	cc f3       	brlt	.-14     	; 0x836 <__fixunssfsi+0x2e>
 844:	86 95       	lsr	r24
 846:	77 95       	ror	r23
 848:	67 95       	ror	r22
 84a:	b3 95       	inc	r27
 84c:	d9 f7       	brne	.-10     	; 0x844 <__fixunssfsi+0x3c>
 84e:	3e f4       	brtc	.+14     	; 0x85e <__fixunssfsi+0x56>
 850:	90 95       	com	r25
 852:	80 95       	com	r24
 854:	70 95       	com	r23
 856:	61 95       	neg	r22
 858:	7f 4f       	sbci	r23, 0xFF	; 255
 85a:	8f 4f       	sbci	r24, 0xFF	; 255
 85c:	9f 4f       	sbci	r25, 0xFF	; 255
 85e:	08 95       	ret

00000860 <__fp_split3>:
 860:	57 fd       	sbrc	r21, 7
 862:	90 58       	subi	r25, 0x80	; 128
 864:	44 0f       	add	r20, r20
 866:	55 1f       	adc	r21, r21
 868:	59 f0       	breq	.+22     	; 0x880 <__fp_splitA+0x10>
 86a:	5f 3f       	cpi	r21, 0xFF	; 255
 86c:	71 f0       	breq	.+28     	; 0x88a <__fp_splitA+0x1a>
 86e:	47 95       	ror	r20

00000870 <__fp_splitA>:
 870:	88 0f       	add	r24, r24
 872:	97 fb       	bst	r25, 7
 874:	99 1f       	adc	r25, r25
 876:	61 f0       	breq	.+24     	; 0x890 <__fp_splitA+0x20>
 878:	9f 3f       	cpi	r25, 0xFF	; 255
 87a:	79 f0       	breq	.+30     	; 0x89a <__fp_splitA+0x2a>
 87c:	87 95       	ror	r24
 87e:	08 95       	ret
 880:	12 16       	cp	r1, r18
 882:	13 06       	cpc	r1, r19
 884:	14 06       	cpc	r1, r20
 886:	55 1f       	adc	r21, r21
 888:	f2 cf       	rjmp	.-28     	; 0x86e <__fp_split3+0xe>
 88a:	46 95       	lsr	r20
 88c:	f1 df       	rcall	.-30     	; 0x870 <__fp_splitA>
 88e:	08 c0       	rjmp	.+16     	; 0x8a0 <__fp_splitA+0x30>
 890:	16 16       	cp	r1, r22
 892:	17 06       	cpc	r1, r23
 894:	18 06       	cpc	r1, r24
 896:	99 1f       	adc	r25, r25
 898:	f1 cf       	rjmp	.-30     	; 0x87c <__fp_splitA+0xc>
 89a:	86 95       	lsr	r24
 89c:	71 05       	cpc	r23, r1
 89e:	61 05       	cpc	r22, r1
 8a0:	08 94       	sec
 8a2:	08 95       	ret

000008a4 <__fp_zero>:
 8a4:	e8 94       	clt

000008a6 <__fp_szero>:
 8a6:	bb 27       	eor	r27, r27
 8a8:	66 27       	eor	r22, r22
 8aa:	77 27       	eor	r23, r23
 8ac:	cb 01       	movw	r24, r22
 8ae:	97 f9       	bld	r25, 7
 8b0:	08 95       	ret

000008b2 <modf>:
 8b2:	fa 01       	movw	r30, r20
 8b4:	dc 01       	movw	r26, r24
 8b6:	aa 0f       	add	r26, r26
 8b8:	bb 1f       	adc	r27, r27
 8ba:	9b 01       	movw	r18, r22
 8bc:	ac 01       	movw	r20, r24
 8be:	bf 57       	subi	r27, 0x7F	; 127
 8c0:	28 f4       	brcc	.+10     	; 0x8cc <modf+0x1a>
 8c2:	22 27       	eor	r18, r18
 8c4:	33 27       	eor	r19, r19
 8c6:	44 27       	eor	r20, r20
 8c8:	50 78       	andi	r21, 0x80	; 128
 8ca:	1f c0       	rjmp	.+62     	; 0x90a <modf+0x58>
 8cc:	b7 51       	subi	r27, 0x17	; 23
 8ce:	88 f4       	brcc	.+34     	; 0x8f2 <modf+0x40>
 8d0:	ab 2f       	mov	r26, r27
 8d2:	00 24       	eor	r0, r0
 8d4:	46 95       	lsr	r20
 8d6:	37 95       	ror	r19
 8d8:	27 95       	ror	r18
 8da:	01 1c       	adc	r0, r1
 8dc:	a3 95       	inc	r26
 8de:	d2 f3       	brmi	.-12     	; 0x8d4 <modf+0x22>
 8e0:	00 20       	and	r0, r0
 8e2:	69 f0       	breq	.+26     	; 0x8fe <modf+0x4c>
 8e4:	22 0f       	add	r18, r18
 8e6:	33 1f       	adc	r19, r19
 8e8:	44 1f       	adc	r20, r20
 8ea:	b3 95       	inc	r27
 8ec:	da f3       	brmi	.-10     	; 0x8e4 <modf+0x32>
 8ee:	0d d0       	rcall	.+26     	; 0x90a <modf+0x58>
 8f0:	76 c0       	rjmp	.+236    	; 0x9de <__subsf3>
 8f2:	61 30       	cpi	r22, 0x01	; 1
 8f4:	71 05       	cpc	r23, r1
 8f6:	a0 e8       	ldi	r26, 0x80	; 128
 8f8:	8a 07       	cpc	r24, r26
 8fa:	b9 46       	sbci	r27, 0x69	; 105
 8fc:	30 f4       	brcc	.+12     	; 0x90a <modf+0x58>
 8fe:	9b 01       	movw	r18, r22
 900:	ac 01       	movw	r20, r24
 902:	66 27       	eor	r22, r22
 904:	77 27       	eor	r23, r23
 906:	88 27       	eor	r24, r24
 908:	90 78       	andi	r25, 0x80	; 128
 90a:	30 96       	adiw	r30, 0x00	; 0
 90c:	21 f0       	breq	.+8      	; 0x916 <modf+0x64>
 90e:	20 83       	st	Z, r18
 910:	31 83       	std	Z+1, r19	; 0x01
 912:	42 83       	std	Z+2, r20	; 0x02
 914:	53 83       	std	Z+3, r21	; 0x03
 916:	08 95       	ret

00000918 <__mulsf3>:
 918:	0b d0       	rcall	.+22     	; 0x930 <__mulsf3x>
 91a:	dd c0       	rjmp	.+442    	; 0xad6 <__fp_round>
 91c:	ce d0       	rcall	.+412    	; 0xaba <__fp_pscA>
 91e:	28 f0       	brcs	.+10     	; 0x92a <__mulsf3+0x12>
 920:	d3 d0       	rcall	.+422    	; 0xac8 <__fp_pscB>
 922:	18 f0       	brcs	.+6      	; 0x92a <__mulsf3+0x12>
 924:	95 23       	and	r25, r21
 926:	09 f0       	breq	.+2      	; 0x92a <__mulsf3+0x12>
 928:	bf c0       	rjmp	.+382    	; 0xaa8 <__fp_inf>
 92a:	c4 c0       	rjmp	.+392    	; 0xab4 <__fp_nan>
 92c:	11 24       	eor	r1, r1
 92e:	bb cf       	rjmp	.-138    	; 0x8a6 <__fp_szero>

00000930 <__mulsf3x>:
 930:	97 df       	rcall	.-210    	; 0x860 <__fp_split3>
 932:	a0 f3       	brcs	.-24     	; 0x91c <__mulsf3+0x4>

00000934 <__mulsf3_pse>:
 934:	95 9f       	mul	r25, r21
 936:	d1 f3       	breq	.-12     	; 0x92c <__mulsf3+0x14>
 938:	95 0f       	add	r25, r21
 93a:	50 e0       	ldi	r21, 0x00	; 0
 93c:	55 1f       	adc	r21, r21
 93e:	62 9f       	mul	r22, r18
 940:	f0 01       	movw	r30, r0
 942:	72 9f       	mul	r23, r18
 944:	bb 27       	eor	r27, r27
 946:	f0 0d       	add	r31, r0
 948:	b1 1d       	adc	r27, r1
 94a:	63 9f       	mul	r22, r19
 94c:	aa 27       	eor	r26, r26
 94e:	f0 0d       	add	r31, r0
 950:	b1 1d       	adc	r27, r1
 952:	aa 1f       	adc	r26, r26
 954:	64 9f       	mul	r22, r20
 956:	66 27       	eor	r22, r22
 958:	b0 0d       	add	r27, r0
 95a:	a1 1d       	adc	r26, r1
 95c:	66 1f       	adc	r22, r22
 95e:	82 9f       	mul	r24, r18
 960:	22 27       	eor	r18, r18
 962:	b0 0d       	add	r27, r0
 964:	a1 1d       	adc	r26, r1
 966:	62 1f       	adc	r22, r18
 968:	73 9f       	mul	r23, r19
 96a:	b0 0d       	add	r27, r0
 96c:	a1 1d       	adc	r26, r1
 96e:	62 1f       	adc	r22, r18
 970:	83 9f       	mul	r24, r19
 972:	a0 0d       	add	r26, r0
 974:	61 1d       	adc	r22, r1
 976:	22 1f       	adc	r18, r18
 978:	74 9f       	mul	r23, r20
 97a:	33 27       	eor	r19, r19
 97c:	a0 0d       	add	r26, r0
 97e:	61 1d       	adc	r22, r1
 980:	23 1f       	adc	r18, r19
 982:	84 9f       	mul	r24, r20
 984:	60 0d       	add	r22, r0
 986:	21 1d       	adc	r18, r1
 988:	82 2f       	mov	r24, r18
 98a:	76 2f       	mov	r23, r22
 98c:	6a 2f       	mov	r22, r26
 98e:	11 24       	eor	r1, r1
 990:	9f 57       	subi	r25, 0x7F	; 127
 992:	50 40       	sbci	r21, 0x00	; 0
 994:	8a f0       	brmi	.+34     	; 0x9b8 <__mulsf3_pse+0x84>
 996:	e1 f0       	breq	.+56     	; 0x9d0 <__mulsf3_pse+0x9c>
 998:	88 23       	and	r24, r24
 99a:	4a f0       	brmi	.+18     	; 0x9ae <__mulsf3_pse+0x7a>
 99c:	ee 0f       	add	r30, r30
 99e:	ff 1f       	adc	r31, r31
 9a0:	bb 1f       	adc	r27, r27
 9a2:	66 1f       	adc	r22, r22
 9a4:	77 1f       	adc	r23, r23
 9a6:	88 1f       	adc	r24, r24
 9a8:	91 50       	subi	r25, 0x01	; 1
 9aa:	50 40       	sbci	r21, 0x00	; 0
 9ac:	a9 f7       	brne	.-22     	; 0x998 <__mulsf3_pse+0x64>
 9ae:	9e 3f       	cpi	r25, 0xFE	; 254
 9b0:	51 05       	cpc	r21, r1
 9b2:	70 f0       	brcs	.+28     	; 0x9d0 <__mulsf3_pse+0x9c>
 9b4:	79 c0       	rjmp	.+242    	; 0xaa8 <__fp_inf>
 9b6:	77 cf       	rjmp	.-274    	; 0x8a6 <__fp_szero>
 9b8:	5f 3f       	cpi	r21, 0xFF	; 255
 9ba:	ec f3       	brlt	.-6      	; 0x9b6 <__mulsf3_pse+0x82>
 9bc:	98 3e       	cpi	r25, 0xE8	; 232
 9be:	dc f3       	brlt	.-10     	; 0x9b6 <__mulsf3_pse+0x82>
 9c0:	86 95       	lsr	r24
 9c2:	77 95       	ror	r23
 9c4:	67 95       	ror	r22
 9c6:	b7 95       	ror	r27
 9c8:	f7 95       	ror	r31
 9ca:	e7 95       	ror	r30
 9cc:	9f 5f       	subi	r25, 0xFF	; 255
 9ce:	c1 f7       	brne	.-16     	; 0x9c0 <__mulsf3_pse+0x8c>
 9d0:	fe 2b       	or	r31, r30
 9d2:	88 0f       	add	r24, r24
 9d4:	91 1d       	adc	r25, r1
 9d6:	96 95       	lsr	r25
 9d8:	87 95       	ror	r24
 9da:	97 f9       	bld	r25, 7
 9dc:	08 95       	ret

000009de <__subsf3>:
 9de:	50 58       	subi	r21, 0x80	; 128

000009e0 <__addsf3>:
 9e0:	bb 27       	eor	r27, r27
 9e2:	aa 27       	eor	r26, r26
 9e4:	0e d0       	rcall	.+28     	; 0xa02 <__addsf3x>
 9e6:	77 c0       	rjmp	.+238    	; 0xad6 <__fp_round>
 9e8:	68 d0       	rcall	.+208    	; 0xaba <__fp_pscA>
 9ea:	30 f0       	brcs	.+12     	; 0x9f8 <__addsf3+0x18>
 9ec:	6d d0       	rcall	.+218    	; 0xac8 <__fp_pscB>
 9ee:	20 f0       	brcs	.+8      	; 0x9f8 <__addsf3+0x18>
 9f0:	31 f4       	brne	.+12     	; 0x9fe <__addsf3+0x1e>
 9f2:	9f 3f       	cpi	r25, 0xFF	; 255
 9f4:	11 f4       	brne	.+4      	; 0x9fa <__addsf3+0x1a>
 9f6:	1e f4       	brtc	.+6      	; 0x9fe <__addsf3+0x1e>
 9f8:	5d c0       	rjmp	.+186    	; 0xab4 <__fp_nan>
 9fa:	0e f4       	brtc	.+2      	; 0x9fe <__addsf3+0x1e>
 9fc:	e0 95       	com	r30
 9fe:	e7 fb       	bst	r30, 7
 a00:	53 c0       	rjmp	.+166    	; 0xaa8 <__fp_inf>

00000a02 <__addsf3x>:
 a02:	e9 2f       	mov	r30, r25
 a04:	2d df       	rcall	.-422    	; 0x860 <__fp_split3>
 a06:	80 f3       	brcs	.-32     	; 0x9e8 <__addsf3+0x8>
 a08:	ba 17       	cp	r27, r26
 a0a:	62 07       	cpc	r22, r18
 a0c:	73 07       	cpc	r23, r19
 a0e:	84 07       	cpc	r24, r20
 a10:	95 07       	cpc	r25, r21
 a12:	18 f0       	brcs	.+6      	; 0xa1a <__addsf3x+0x18>
 a14:	71 f4       	brne	.+28     	; 0xa32 <__addsf3x+0x30>
 a16:	9e f5       	brtc	.+102    	; 0xa7e <__addsf3x+0x7c>
 a18:	45 cf       	rjmp	.-374    	; 0x8a4 <__fp_zero>
 a1a:	0e f4       	brtc	.+2      	; 0xa1e <__addsf3x+0x1c>
 a1c:	e0 95       	com	r30
 a1e:	0b 2e       	mov	r0, r27
 a20:	ba 2f       	mov	r27, r26
 a22:	a0 2d       	mov	r26, r0
 a24:	0b 01       	movw	r0, r22
 a26:	b9 01       	movw	r22, r18
 a28:	90 01       	movw	r18, r0
 a2a:	0c 01       	movw	r0, r24
 a2c:	ca 01       	movw	r24, r20
 a2e:	a0 01       	movw	r20, r0
 a30:	11 24       	eor	r1, r1
 a32:	ff 27       	eor	r31, r31
 a34:	59 1b       	sub	r21, r25
 a36:	99 f0       	breq	.+38     	; 0xa5e <__addsf3x+0x5c>
 a38:	59 3f       	cpi	r21, 0xF9	; 249
 a3a:	50 f4       	brcc	.+20     	; 0xa50 <__addsf3x+0x4e>
 a3c:	50 3e       	cpi	r21, 0xE0	; 224
 a3e:	68 f1       	brcs	.+90     	; 0xa9a <__addsf3x+0x98>
 a40:	1a 16       	cp	r1, r26
 a42:	f0 40       	sbci	r31, 0x00	; 0
 a44:	a2 2f       	mov	r26, r18
 a46:	23 2f       	mov	r18, r19
 a48:	34 2f       	mov	r19, r20
 a4a:	44 27       	eor	r20, r20
 a4c:	58 5f       	subi	r21, 0xF8	; 248
 a4e:	f3 cf       	rjmp	.-26     	; 0xa36 <__addsf3x+0x34>
 a50:	46 95       	lsr	r20
 a52:	37 95       	ror	r19
 a54:	27 95       	ror	r18
 a56:	a7 95       	ror	r26
 a58:	f0 40       	sbci	r31, 0x00	; 0
 a5a:	53 95       	inc	r21
 a5c:	c9 f7       	brne	.-14     	; 0xa50 <__addsf3x+0x4e>
 a5e:	7e f4       	brtc	.+30     	; 0xa7e <__addsf3x+0x7c>
 a60:	1f 16       	cp	r1, r31
 a62:	ba 0b       	sbc	r27, r26
 a64:	62 0b       	sbc	r22, r18
 a66:	73 0b       	sbc	r23, r19
 a68:	84 0b       	sbc	r24, r20
 a6a:	ba f0       	brmi	.+46     	; 0xa9a <__addsf3x+0x98>
 a6c:	91 50       	subi	r25, 0x01	; 1
 a6e:	a1 f0       	breq	.+40     	; 0xa98 <__addsf3x+0x96>
 a70:	ff 0f       	add	r31, r31
 a72:	bb 1f       	adc	r27, r27
 a74:	66 1f       	adc	r22, r22
 a76:	77 1f       	adc	r23, r23
 a78:	88 1f       	adc	r24, r24
 a7a:	c2 f7       	brpl	.-16     	; 0xa6c <__addsf3x+0x6a>
 a7c:	0e c0       	rjmp	.+28     	; 0xa9a <__addsf3x+0x98>
 a7e:	ba 0f       	add	r27, r26
 a80:	62 1f       	adc	r22, r18
 a82:	73 1f       	adc	r23, r19
 a84:	84 1f       	adc	r24, r20
 a86:	48 f4       	brcc	.+18     	; 0xa9a <__addsf3x+0x98>
 a88:	87 95       	ror	r24
 a8a:	77 95       	ror	r23
 a8c:	67 95       	ror	r22
 a8e:	b7 95       	ror	r27
 a90:	f7 95       	ror	r31
 a92:	9e 3f       	cpi	r25, 0xFE	; 254
 a94:	08 f0       	brcs	.+2      	; 0xa98 <__addsf3x+0x96>
 a96:	b3 cf       	rjmp	.-154    	; 0x9fe <__addsf3+0x1e>
 a98:	93 95       	inc	r25
 a9a:	88 0f       	add	r24, r24
 a9c:	08 f0       	brcs	.+2      	; 0xaa0 <__addsf3x+0x9e>
 a9e:	99 27       	eor	r25, r25
 aa0:	ee 0f       	add	r30, r30
 aa2:	97 95       	ror	r25
 aa4:	87 95       	ror	r24
 aa6:	08 95       	ret

00000aa8 <__fp_inf>:
 aa8:	97 f9       	bld	r25, 7
 aaa:	9f 67       	ori	r25, 0x7F	; 127
 aac:	80 e8       	ldi	r24, 0x80	; 128
 aae:	70 e0       	ldi	r23, 0x00	; 0
 ab0:	60 e0       	ldi	r22, 0x00	; 0
 ab2:	08 95       	ret

00000ab4 <__fp_nan>:
 ab4:	9f ef       	ldi	r25, 0xFF	; 255
 ab6:	80 ec       	ldi	r24, 0xC0	; 192
 ab8:	08 95       	ret

00000aba <__fp_pscA>:
 aba:	00 24       	eor	r0, r0
 abc:	0a 94       	dec	r0
 abe:	16 16       	cp	r1, r22
 ac0:	17 06       	cpc	r1, r23
 ac2:	18 06       	cpc	r1, r24
 ac4:	09 06       	cpc	r0, r25
 ac6:	08 95       	ret

00000ac8 <__fp_pscB>:
 ac8:	00 24       	eor	r0, r0
 aca:	0a 94       	dec	r0
 acc:	12 16       	cp	r1, r18
 ace:	13 06       	cpc	r1, r19
 ad0:	14 06       	cpc	r1, r20
 ad2:	05 06       	cpc	r0, r21
 ad4:	08 95       	ret

00000ad6 <__fp_round>:
 ad6:	09 2e       	mov	r0, r25
 ad8:	03 94       	inc	r0
 ada:	00 0c       	add	r0, r0
 adc:	11 f4       	brne	.+4      	; 0xae2 <__fp_round+0xc>
 ade:	88 23       	and	r24, r24
 ae0:	52 f0       	brmi	.+20     	; 0xaf6 <__fp_round+0x20>
 ae2:	bb 0f       	add	r27, r27
 ae4:	40 f4       	brcc	.+16     	; 0xaf6 <__fp_round+0x20>
 ae6:	bf 2b       	or	r27, r31
 ae8:	11 f4       	brne	.+4      	; 0xaee <__fp_round+0x18>
 aea:	60 ff       	sbrs	r22, 0
 aec:	04 c0       	rjmp	.+8      	; 0xaf6 <__fp_round+0x20>
 aee:	6f 5f       	subi	r22, 0xFF	; 255
 af0:	7f 4f       	sbci	r23, 0xFF	; 255
 af2:	8f 4f       	sbci	r24, 0xFF	; 255
 af4:	9f 4f       	sbci	r25, 0xFF	; 255
 af6:	08 95       	ret

00000af8 <__mulsi3>:
 af8:	62 9f       	mul	r22, r18
 afa:	d0 01       	movw	r26, r0
 afc:	73 9f       	mul	r23, r19
 afe:	f0 01       	movw	r30, r0
 b00:	82 9f       	mul	r24, r18
 b02:	e0 0d       	add	r30, r0
 b04:	f1 1d       	adc	r31, r1
 b06:	64 9f       	mul	r22, r20
 b08:	e0 0d       	add	r30, r0
 b0a:	f1 1d       	adc	r31, r1
 b0c:	92 9f       	mul	r25, r18
 b0e:	f0 0d       	add	r31, r0
 b10:	83 9f       	mul	r24, r19
 b12:	f0 0d       	add	r31, r0
 b14:	74 9f       	mul	r23, r20
 b16:	f0 0d       	add	r31, r0
 b18:	65 9f       	mul	r22, r21
 b1a:	f0 0d       	add	r31, r0
 b1c:	99 27       	eor	r25, r25
 b1e:	72 9f       	mul	r23, r18
 b20:	b0 0d       	add	r27, r0
 b22:	e1 1d       	adc	r30, r1
 b24:	f9 1f       	adc	r31, r25
 b26:	63 9f       	mul	r22, r19
 b28:	b0 0d       	add	r27, r0
 b2a:	e1 1d       	adc	r30, r1
 b2c:	f9 1f       	adc	r31, r25
 b2e:	bd 01       	movw	r22, r26
 b30:	cf 01       	movw	r24, r30
 b32:	11 24       	eor	r1, r1
 b34:	08 95       	ret

00000b36 <__udivmodhi4>:
 b36:	aa 1b       	sub	r26, r26
 b38:	bb 1b       	sub	r27, r27
 b3a:	51 e1       	ldi	r21, 0x11	; 17
 b3c:	07 c0       	rjmp	.+14     	; 0xb4c <__udivmodhi4_ep>

00000b3e <__udivmodhi4_loop>:
 b3e:	aa 1f       	adc	r26, r26
 b40:	bb 1f       	adc	r27, r27
 b42:	a6 17       	cp	r26, r22
 b44:	b7 07       	cpc	r27, r23
 b46:	10 f0       	brcs	.+4      	; 0xb4c <__udivmodhi4_ep>
 b48:	a6 1b       	sub	r26, r22
 b4a:	b7 0b       	sbc	r27, r23

00000b4c <__udivmodhi4_ep>:
 b4c:	88 1f       	adc	r24, r24
 b4e:	99 1f       	adc	r25, r25
 b50:	5a 95       	dec	r21
 b52:	a9 f7       	brne	.-22     	; 0xb3e <__udivmodhi4_loop>
 b54:	80 95       	com	r24
 b56:	90 95       	com	r25
 b58:	bc 01       	movw	r22, r24
 b5a:	cd 01       	movw	r24, r26
 b5c:	08 95       	ret

00000b5e <__udivmodsi4>:
 b5e:	a1 e2       	ldi	r26, 0x21	; 33
 b60:	1a 2e       	mov	r1, r26
 b62:	aa 1b       	sub	r26, r26
 b64:	bb 1b       	sub	r27, r27
 b66:	fd 01       	movw	r30, r26
 b68:	0d c0       	rjmp	.+26     	; 0xb84 <__udivmodsi4_ep>

00000b6a <__udivmodsi4_loop>:
 b6a:	aa 1f       	adc	r26, r26
 b6c:	bb 1f       	adc	r27, r27
 b6e:	ee 1f       	adc	r30, r30
 b70:	ff 1f       	adc	r31, r31
 b72:	a2 17       	cp	r26, r18
 b74:	b3 07       	cpc	r27, r19
 b76:	e4 07       	cpc	r30, r20
 b78:	f5 07       	cpc	r31, r21
 b7a:	20 f0       	brcs	.+8      	; 0xb84 <__udivmodsi4_ep>
 b7c:	a2 1b       	sub	r26, r18
 b7e:	b3 0b       	sbc	r27, r19
 b80:	e4 0b       	sbc	r30, r20
 b82:	f5 0b       	sbc	r31, r21

00000b84 <__udivmodsi4_ep>:
 b84:	66 1f       	adc	r22, r22
 b86:	77 1f       	adc	r23, r23
 b88:	88 1f       	adc	r24, r24
 b8a:	99 1f       	adc	r25, r25
 b8c:	1a 94       	dec	r1
 b8e:	69 f7       	brne	.-38     	; 0xb6a <__udivmodsi4_loop>
 b90:	60 95       	com	r22
 b92:	70 95       	com	r23
 b94:	80 95       	com	r24
 b96:	90 95       	com	r25
 b98:	9b 01       	movw	r18, r22
 b9a:	ac 01       	movw	r20, r24
 b9c:	bd 01       	movw	r22, r26
 b9e:	cf 01       	movw	r24, r30
 ba0:	08 95       	ret

00000ba2 <_exit>:
 ba2:	f8 94       	cli

00000ba4 <__stop_program>:
 ba4:	ff cf       	rjmp	.-2      	; 0xba4 <__stop_program>
