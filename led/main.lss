
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800200  0000124e  000012e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000124e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cd  00800216  00800216  000012f8  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003a8  00000000  00000000  00001318  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001087  00000000  00000000  000016c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000374  00000000  00000000  00002747  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ec0  00000000  00000000  00002abb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000250  00000000  00000000  0000397c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000460  00000000  00000000  00003bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000599  00000000  00000000  0000402c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000045c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      9c:	0c 94 02 04 	jmp	0x804	; 0x804 <__vector_39>
      a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	12 e0       	ldi	r17, 0x02	; 2
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b2 e0       	ldi	r27, 0x02	; 2
      f6:	ee e4       	ldi	r30, 0x4E	; 78
      f8:	f2 e1       	ldi	r31, 0x12	; 18
      fa:	02 c0       	rjmp	.+4      	; 0x100 <.do_copy_data_start>

000000fc <.do_copy_data_loop>:
      fc:	05 90       	lpm	r0, Z+
      fe:	0d 92       	st	X+, r0

00000100 <.do_copy_data_start>:
     100:	a6 31       	cpi	r26, 0x16	; 22
     102:	b1 07       	cpc	r27, r17
     104:	d9 f7       	brne	.-10     	; 0xfc <.do_copy_data_loop>

00000106 <__do_clear_bss>:
     106:	12 e0       	ldi	r17, 0x02	; 2
     108:	a6 e1       	ldi	r26, 0x16	; 22
     10a:	b2 e0       	ldi	r27, 0x02	; 2
     10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
     10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
     110:	a3 3e       	cpi	r26, 0xE3	; 227
     112:	b1 07       	cpc	r27, r17
     114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
     116:	0e 94 a0 06 	call	0xd40	; 0xd40 <main>
     11a:	0c 94 25 09 	jmp	0x124a	; 0x124a <_exit>

0000011e <__bad_interrupt>:
     11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <WaitMs>:

unsigned char ch[10] = {'0','1','2','3','4','5','6','7','8','9'};
unsigned char tenthousand=0,thousand=0,hundred=0,ten=0,one=0;

void WaitMs(unsigned int ms)
{
     122:	0a c0       	rjmp	.+20     	; 0x138 <WaitMs+0x16>
	int i;
	while (ms-- > 0)
     124:	20 e0       	ldi	r18, 0x00	; 0
     126:	30 e0       	ldi	r19, 0x00	; 0
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
     128:	00 00       	nop
	int i;
	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
     12a:	2f 5f       	subi	r18, 0xFF	; 255
     12c:	3f 4f       	sbci	r19, 0xFF	; 255
     12e:	4c e0       	ldi	r20, 0x0C	; 12
     130:	2c 3c       	cpi	r18, 0xCC	; 204
     132:	34 07       	cpc	r19, r20
     134:	c9 f7       	brne	.-14     	; 0x128 <WaitMs+0x6>
     136:	01 97       	sbiw	r24, 0x01	; 1
unsigned char tenthousand=0,thousand=0,hundred=0,ten=0,one=0;

void WaitMs(unsigned int ms)
{
	int i;
	while (ms-- > 0)
     138:	00 97       	sbiw	r24, 0x00	; 0
     13a:	a1 f7       	brne	.-24     	; 0x124 <WaitMs+0x2>
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
	}
}
     13c:	08 95       	ret

0000013e <toggleE>:

void toggleE(void)
{
	SETBIT(PORTE,BIT(0));
     13e:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     140:	83 e3       	ldi	r24, 0x33	; 51
     142:	97 e0       	ldi	r25, 0x07	; 7
     144:	01 97       	sbiw	r24, 0x01	; 1
     146:	f1 f7       	brne	.-4      	; 0x144 <toggleE+0x6>
	_delay_us(500);
	CLEARBIT(PORTE,BIT(0));
     148:	70 98       	cbi	0x0e, 0	; 14
}
     14a:	08 95       	ret

0000014c <CheckTemp>:

void CheckTemp(uint8_t temp)
{
     14c:	df 93       	push	r29
     14e:	cf 93       	push	r28
     150:	0f 92       	push	r0
     152:	cd b7       	in	r28, 0x3d	; 61
     154:	de b7       	in	r29, 0x3e	; 62
     156:	89 83       	std	Y+1, r24	; 0x01
	if (bit_is_set(temp, 7))
     158:	fe 01       	movw	r30, r28
     15a:	31 96       	adiw	r30, 0x01	; 1
     15c:	89 81       	ldd	r24, Y+1	; 0x01
     15e:	87 ff       	sbrs	r24, 7
     160:	02 c0       	rjmp	.+4      	; 0x166 <CheckTemp+0x1a>
	{
		SETBIT(PORTE, BIT(7))
     162:	77 9a       	sbi	0x0e, 7	; 14
     164:	01 c0       	rjmp	.+2      	; 0x168 <CheckTemp+0x1c>
	}
	else
	{
		CLEARBIT(PORTE, BIT(7))
     166:	77 98       	cbi	0x0e, 7	; 14
	}
	
	if (bit_is_set(temp, 6))
     168:	80 81       	ld	r24, Z
     16a:	86 ff       	sbrs	r24, 6
     16c:	02 c0       	rjmp	.+4      	; 0x172 <CheckTemp+0x26>
	{
		SETBIT(PORTE, BIT(6))
     16e:	76 9a       	sbi	0x0e, 6	; 14
     170:	01 c0       	rjmp	.+2      	; 0x174 <CheckTemp+0x28>
	}
	else
	{
		CLEARBIT(PORTE, BIT(6))
     172:	76 98       	cbi	0x0e, 6	; 14
	}
	if (bit_is_set(temp, 1))
     174:	80 81       	ld	r24, Z
     176:	81 ff       	sbrs	r24, 1
     178:	02 c0       	rjmp	.+4      	; 0x17e <CheckTemp+0x32>
	{
		SETBIT(PORTE, BIT(1))
     17a:	71 9a       	sbi	0x0e, 1	; 14
     17c:	01 c0       	rjmp	.+2      	; 0x180 <CheckTemp+0x34>
	}
	else
	{
		CLEARBIT(PORTE, BIT(1))
     17e:	71 98       	cbi	0x0e, 1	; 14
	}
	
	if (bit_is_set(temp, 2))
     180:	80 81       	ld	r24, Z
     182:	82 ff       	sbrs	r24, 2
     184:	02 c0       	rjmp	.+4      	; 0x18a <CheckTemp+0x3e>
	{
		SETBIT(PORTE, BIT(2))
     186:	72 9a       	sbi	0x0e, 2	; 14
     188:	01 c0       	rjmp	.+2      	; 0x18c <CheckTemp+0x40>
	}
	else
	{
		CLEARBIT(PORTE, BIT(2))
     18a:	72 98       	cbi	0x0e, 2	; 14
	}
	
	if (bit_is_set(temp, 0))
     18c:	80 81       	ld	r24, Z
     18e:	80 ff       	sbrs	r24, 0
     190:	02 c0       	rjmp	.+4      	; 0x196 <CheckTemp+0x4a>
	{
		SETBIT(PORTE, BIT(0))
     192:	70 9a       	sbi	0x0e, 0	; 14
     194:	01 c0       	rjmp	.+2      	; 0x198 <CheckTemp+0x4c>
	}
	else
	{
		CLEARBIT(PORTE, BIT(0))
     196:	70 98       	cbi	0x0e, 0	; 14
	}
}
     198:	0f 90       	pop	r0
     19a:	cf 91       	pop	r28
     19c:	df 91       	pop	r29
     19e:	08 95       	ret

000001a0 <lcd_cmd>:

void lcd_cmd(unsigned char ch)
{
     1a0:	df 92       	push	r13
     1a2:	ef 92       	push	r14
     1a4:	ff 92       	push	r15
     1a6:	0f 93       	push	r16
     1a8:	1f 93       	push	r17
     1aa:	08 2f       	mov	r16, r24
	int temp;
	CLEARBIT(PORTG,BIT(5));
     1ac:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
     1ae:	70 98       	cbi	0x0e, 0	; 14

	temp= ch & 0b11000000; // '10'000000
     1b0:	e8 2e       	mov	r14, r24
     1b2:	ff 24       	eor	r15, r15
	CheckTemp(temp);	
     1b4:	80 7c       	andi	r24, 0xC0	; 192
     1b6:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
	//PORTE=temp;
	
	temp=(ch >> 3) & 0b00000110; // 00000'11'0
     1ba:	06 95       	lsr	r16
     1bc:	06 95       	lsr	r16
     1be:	06 95       	lsr	r16
     1c0:	10 e0       	ldi	r17, 0x00	; 0
     1c2:	06 70       	andi	r16, 0x06	; 6
     1c4:	10 70       	andi	r17, 0x00	; 0
	temp = PORTE | temp;
     1c6:	8e b1       	in	r24, 0x0e	; 14
	
	CheckTemp(temp);
     1c8:	80 2b       	or	r24, r16
     1ca:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     1ce:	38 e1       	ldi	r19, 0x18	; 24
     1d0:	d3 2e       	mov	r13, r19
     1d2:	8d 2d       	mov	r24, r13
     1d4:	8a 95       	dec	r24
     1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_cmd+0x34>
	}
}

void toggleE(void)
{
	SETBIT(PORTE,BIT(0));
     1d8:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1da:	03 e3       	ldi	r16, 0x33	; 51
     1dc:	17 e0       	ldi	r17, 0x07	; 7
     1de:	c8 01       	movw	r24, r16
     1e0:	01 97       	sbiw	r24, 0x01	; 1
     1e2:	f1 f7       	brne	.-4      	; 0x1e0 <lcd_cmd+0x40>
	_delay_us(500);
	CLEARBIT(PORTE,BIT(0));
     1e4:	70 98       	cbi	0x0e, 0	; 14
	CheckTemp(temp);
	_delay_us(5);
	
	toggleE();
   // Extract lower nibble
	SETBIT(PORTG,BIT(5));
     1e6:	a5 9a       	sbi	0x14, 5	; 20
   	CLEARBIT(PORTG,BIT(5));
     1e8:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
     1ea:	70 98       	cbi	0x0e, 0	; 14

	temp=(ch << 4) & 0b11000000; // '10'000000
	CheckTemp(temp);
     1ec:	c7 01       	movw	r24, r14
     1ee:	24 e0       	ldi	r18, 0x04	; 4
     1f0:	88 0f       	add	r24, r24
     1f2:	99 1f       	adc	r25, r25
     1f4:	2a 95       	dec	r18
     1f6:	e1 f7       	brne	.-8      	; 0x1f0 <lcd_cmd+0x50>
     1f8:	80 7c       	andi	r24, 0xC0	; 192
     1fa:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
	temp=(ch << 1) & 0b00000110; // 00000'01'0 
     1fe:	ee 0c       	add	r14, r14
     200:	ff 1c       	adc	r15, r15
     202:	86 e0       	ldi	r24, 0x06	; 6
     204:	e8 22       	and	r14, r24
     206:	ff 24       	eor	r15, r15
	temp= PORTE | temp;
     208:	8e b1       	in	r24, 0x0e	; 14
	CheckTemp(temp);
     20a:	8e 29       	or	r24, r14
     20c:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     210:	da 94       	dec	r13
     212:	f1 f7       	brne	.-4      	; 0x210 <lcd_cmd+0x70>
	}
}

void toggleE(void)
{
	SETBIT(PORTE,BIT(0));
     214:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     216:	c8 01       	movw	r24, r16
     218:	01 97       	sbiw	r24, 0x01	; 1
     21a:	f1 f7       	brne	.-4      	; 0x218 <lcd_cmd+0x78>
	_delay_us(500);
	CLEARBIT(PORTE,BIT(0));
     21c:	70 98       	cbi	0x0e, 0	; 14
	temp= PORTE | temp;
	CheckTemp(temp);
	_delay_us(5);
	toggleE();
   	//PORTE = 0x00;
	CLEARBIT(PORTE,BIT(0));			//Enable
     21e:	70 98       	cbi	0x0e, 0	; 14
	CLEARBIT(PORTE,BIT(1));
     220:	71 98       	cbi	0x0e, 1	; 14
	CLEARBIT(PORTE,BIT(2));
     222:	72 98       	cbi	0x0e, 2	; 14
	CLEARBIT(PORTE,BIT(6));
     224:	76 98       	cbi	0x0e, 6	; 14
	CLEARBIT(PORTE,BIT(7));
     226:	77 98       	cbi	0x0e, 7	; 14
   	WaitMs(10);
     228:	8a e0       	ldi	r24, 0x0A	; 10
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
}
     230:	1f 91       	pop	r17
     232:	0f 91       	pop	r16
     234:	ff 90       	pop	r15
     236:	ef 90       	pop	r14
     238:	df 90       	pop	r13
     23a:	08 95       	ret

0000023c <lcd_init>:

void lcd_init(void)
{
	DDRE |= (1<<0) | (1<<1) | (1<<2) | (1<<6) | (1<<7);
     23c:	8d b1       	in	r24, 0x0d	; 13
     23e:	87 6c       	ori	r24, 0xC7	; 199
     240:	8d b9       	out	0x0d, r24	; 13
	DDRG |= (1<<5);
     242:	9d 9a       	sbi	0x13, 5	; 19
	WaitMs(15);
     244:	8f e0       	ldi	r24, 0x0F	; 15
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
	CLEARBIT(PORTG,BIT(5));			//RS
     24c:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));			//Enable
     24e:	70 98       	cbi	0x0e, 0	; 14
	CLEARBIT(PORTE,BIT(1));
     250:	71 98       	cbi	0x0e, 1	; 14
	CLEARBIT(PORTE,BIT(2));
     252:	72 98       	cbi	0x0e, 2	; 14
	CLEARBIT(PORTE,BIT(6));
     254:	76 98       	cbi	0x0e, 6	; 14
	CLEARBIT(PORTE,BIT(7));
     256:	77 98       	cbi	0x0e, 7	; 14
	lcd_cmd(0x20);		//data is 8-bit length
     258:	80 e2       	ldi	r24, 0x20	; 32
     25a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
	WaitMs(1);
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
	lcd_cmd(0x20);		//data is 8-bit length
     266:	80 e2       	ldi	r24, 0x20	; 32
     268:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
	WaitMs(1);
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
	lcd_cmd(0x20);		//data is 8-bit length
     274:	80 e2       	ldi	r24, 0x20	; 32
     276:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
	WaitMs(1);
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
	lcd_cmd(0x28);		//sets character font
     282:	88 e2       	ldi	r24, 0x28	; 40
     284:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
	WaitMs(1);
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
	lcd_cmd(0x0E);		//display off(d,c,b=0) 08
     290:	8e e0       	ldi	r24, 0x0E	; 14
     292:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
	WaitMs(1);
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
	lcd_cmd(0x01);		//clears the data
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
	WaitMs(1);
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
	lcd_cmd(0x6);		//entry mode--increment
     2ac:	86 e0       	ldi	r24, 0x06	; 6
     2ae:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
	WaitMs(1);
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
}
     2ba:	08 95       	ret

000002bc <lcd_char>:

void lcd_char(unsigned char data)
{	
     2bc:	df 92       	push	r13
     2be:	ef 92       	push	r14
     2c0:	ff 92       	push	r15
     2c2:	0f 93       	push	r16
     2c4:	1f 93       	push	r17
     2c6:	08 2f       	mov	r16, r24
	int temp;
	WaitMs(15);
     2c8:	8f e0       	ldi	r24, 0x0F	; 15
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
	SETBIT(PORTG,BIT(5));
     2d0:	a5 9a       	sbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
     2d2:	70 98       	cbi	0x0e, 0	; 14
	temp= (data & 0b11000000); // '10'000000
     2d4:	e0 2e       	mov	r14, r16
     2d6:	ff 24       	eor	r15, r15
	CheckTemp(temp);
     2d8:	80 2f       	mov	r24, r16
     2da:	80 7c       	andi	r24, 0xC0	; 192
     2dc:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
	temp=(data>>3) & 0b00000110; // 00000'11'0
     2e0:	06 95       	lsr	r16
     2e2:	06 95       	lsr	r16
     2e4:	06 95       	lsr	r16
     2e6:	10 e0       	ldi	r17, 0x00	; 0
     2e8:	06 70       	andi	r16, 0x06	; 6
     2ea:	10 70       	andi	r17, 0x00	; 0
	temp = PORTE | temp;
     2ec:	8e b1       	in	r24, 0x0e	; 14
	CheckTemp(temp);
     2ee:	80 2b       	or	r24, r16
     2f0:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2f4:	68 e1       	ldi	r22, 0x18	; 24
     2f6:	d6 2e       	mov	r13, r22
     2f8:	8d 2d       	mov	r24, r13
     2fa:	8a 95       	dec	r24
     2fc:	f1 f7       	brne	.-4      	; 0x2fa <lcd_char+0x3e>
	}
}

void toggleE(void)
{
	SETBIT(PORTE,BIT(0));
     2fe:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     300:	03 e3       	ldi	r16, 0x33	; 51
     302:	17 e0       	ldi	r17, 0x07	; 7
     304:	c8 01       	movw	r24, r16
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	f1 f7       	brne	.-4      	; 0x306 <lcd_char+0x4a>
	_delay_us(500);
	CLEARBIT(PORTE,BIT(0));
     30a:	70 98       	cbi	0x0e, 0	; 14
	temp = PORTE | temp;
	CheckTemp(temp);
	_delay_us(5);
	toggleE();	
	
	CLEARBIT(PORTG,BIT(5));
     30c:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
     30e:	70 98       	cbi	0x0e, 0	; 14
	SETBIT(PORTG,BIT(5));
     310:	a5 9a       	sbi	0x14, 5	; 20
	temp=(data << 4) & 0b11000000; // '10'000000
	CheckTemp(temp);
     312:	c7 01       	movw	r24, r14
     314:	54 e0       	ldi	r21, 0x04	; 4
     316:	88 0f       	add	r24, r24
     318:	99 1f       	adc	r25, r25
     31a:	5a 95       	dec	r21
     31c:	e1 f7       	brne	.-8      	; 0x316 <lcd_char+0x5a>
     31e:	80 7c       	andi	r24, 0xC0	; 192
     320:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
	temp=(data << 1) & 0b00000110; // 00000'01'0 
     324:	ee 0c       	add	r14, r14
     326:	ff 1c       	adc	r15, r15
     328:	86 e0       	ldi	r24, 0x06	; 6
     32a:	e8 22       	and	r14, r24
     32c:	ff 24       	eor	r15, r15
	temp = PORTE | temp;
     32e:	8e b1       	in	r24, 0x0e	; 14
	CheckTemp(temp);
     330:	8e 29       	or	r24, r14
     332:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     336:	da 94       	dec	r13
     338:	f1 f7       	brne	.-4      	; 0x336 <lcd_char+0x7a>
	}
}

void toggleE(void)
{
	SETBIT(PORTE,BIT(0));
     33a:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     33c:	c8 01       	movw	r24, r16
     33e:	01 97       	sbiw	r24, 0x01	; 1
     340:	f1 f7       	brne	.-4      	; 0x33e <lcd_char+0x82>
	_delay_us(500);
	CLEARBIT(PORTE,BIT(0));
     342:	70 98       	cbi	0x0e, 0	; 14
	temp=(data << 1) & 0b00000110; // 00000'01'0 
	temp = PORTE | temp;
	CheckTemp(temp);
	_delay_us(5);				
	toggleE();
}
     344:	1f 91       	pop	r17
     346:	0f 91       	pop	r16
     348:	ff 90       	pop	r15
     34a:	ef 90       	pop	r14
     34c:	df 90       	pop	r13
     34e:	08 95       	ret

00000350 <lcd_string>:

void lcd_string(unsigned char str[32])
{
     350:	af 92       	push	r10
     352:	bf 92       	push	r11
     354:	cf 92       	push	r12
     356:	df 92       	push	r13
     358:	ff 92       	push	r15
     35a:	0f 93       	push	r16
     35c:	1f 93       	push	r17
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	6c 01       	movw	r12, r24
	int poop,bitch;
	unsigned char k=0;
	SETBIT(PORTG,BIT(5));
     364:	a5 9a       	sbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
     366:	70 98       	cbi	0x0e, 0	; 14
     368:	ff 24       	eor	r15, r15
     36a:	a3 e3       	ldi	r26, 0x33	; 51
     36c:	aa 2e       	mov	r10, r26
     36e:	a7 e0       	ldi	r26, 0x07	; 7
     370:	ba 2e       	mov	r11, r26
     372:	3e c0       	rjmp	.+124    	; 0x3f0 <lcd_string+0xa0>
	while(str[k]!='\0')	//Till null character is encountered
	{
		if(k==16)
     374:	80 e1       	ldi	r24, 0x10	; 16
     376:	f8 16       	cp	r15, r24
     378:	19 f4       	brne	.+6      	; 0x380 <lcd_string+0x30>
		lcd_cmd(LINE2);
     37a:	80 ec       	ldi	r24, 0xC0	; 192
     37c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
		SETBIT(PORTG,BIT(5));
     380:	a5 9a       	sbi	0x14, 5	; 20
		CLEARBIT(PORTE,BIT(0));
     382:	70 98       	cbi	0x0e, 0	; 14
		bitch=str[k]; //10111001
     384:	08 81       	ld	r16, Y
     386:	10 e0       	ldi	r17, 0x00	; 0
		poop= bitch & 0b11000000; // '10'000000
		CheckTemp(poop);
     388:	80 2f       	mov	r24, r16
     38a:	80 7c       	andi	r24, 0xC0	; 192
     38c:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
		//PORTE=poop;
		poop=(bitch>>3) & 0b00000110; // 00000'11'0
     390:	f3 e0       	ldi	r31, 0x03	; 3
     392:	15 95       	asr	r17
     394:	07 95       	ror	r16
     396:	fa 95       	dec	r31
     398:	e1 f7       	brne	.-8      	; 0x392 <lcd_string+0x42>
     39a:	06 70       	andi	r16, 0x06	; 6
     39c:	10 70       	andi	r17, 0x00	; 0
		poop = PORTE | poop;
     39e:	8e b1       	in	r24, 0x0e	; 14
		CheckTemp(poop);
     3a0:	80 2b       	or	r24, r16
     3a2:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
	}
}

void toggleE(void)
{
	SETBIT(PORTE,BIT(0));
     3a6:	70 9a       	sbi	0x0e, 0	; 14
     3a8:	c5 01       	movw	r24, r10
     3aa:	01 97       	sbiw	r24, 0x01	; 1
     3ac:	f1 f7       	brne	.-4      	; 0x3aa <lcd_string+0x5a>
	_delay_us(500);
	CLEARBIT(PORTE,BIT(0));
     3ae:	70 98       	cbi	0x0e, 0	; 14
		poop=(bitch>>3) & 0b00000110; // 00000'11'0
		poop = PORTE | poop;
		CheckTemp(poop);
		
		toggleE();
		CLEARBIT(PORTG,BIT(5))
     3b0:	a5 98       	cbi	0x14, 5	; 20
		SETBIT(PORTG,BIT(5));
     3b2:	a5 9a       	sbi	0x14, 5	; 20
		CLEARBIT(PORTE,BIT(0));
     3b4:	70 98       	cbi	0x0e, 0	; 14
		bitch=str[k];
     3b6:	08 81       	ld	r16, Y
     3b8:	10 e0       	ldi	r17, 0x00	; 0
		poop=(bitch << 4) & 0b11000000; // '10'000000
		CheckTemp(poop);
     3ba:	c8 01       	movw	r24, r16
     3bc:	e4 e0       	ldi	r30, 0x04	; 4
     3be:	88 0f       	add	r24, r24
     3c0:	99 1f       	adc	r25, r25
     3c2:	ea 95       	dec	r30
     3c4:	e1 f7       	brne	.-8      	; 0x3be <lcd_string+0x6e>
     3c6:	80 7c       	andi	r24, 0xC0	; 192
     3c8:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
		poop=(bitch << 1) & 0b00000110; // 00000'01'0
     3cc:	00 0f       	add	r16, r16
     3ce:	11 1f       	adc	r17, r17
     3d0:	06 70       	andi	r16, 0x06	; 6
     3d2:	10 70       	andi	r17, 0x00	; 0
		poop = PORTE | poop;
     3d4:	8e b1       	in	r24, 0x0e	; 14
		CheckTemp(poop);
     3d6:	80 2b       	or	r24, r16
     3d8:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
	}
}

void toggleE(void)
{
	SETBIT(PORTE,BIT(0));
     3dc:	70 9a       	sbi	0x0e, 0	; 14
     3de:	c5 01       	movw	r24, r10
     3e0:	01 97       	sbiw	r24, 0x01	; 1
     3e2:	f1 f7       	brne	.-4      	; 0x3e0 <lcd_string+0x90>
	_delay_us(500);
	CLEARBIT(PORTE,BIT(0));
     3e4:	70 98       	cbi	0x0e, 0	; 14
		CheckTemp(poop);
		poop=(bitch << 1) & 0b00000110; // 00000'01'0
		poop = PORTE | poop;
		CheckTemp(poop);
		toggleE();
		k++;
     3e6:	f3 94       	inc	r15
		WaitMs(1);
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
{
	int poop,bitch;
	unsigned char k=0;
	SETBIT(PORTG,BIT(5));
	CLEARBIT(PORTE,BIT(0));
	while(str[k]!='\0')	//Till null character is encountered
     3f0:	e6 01       	movw	r28, r12
     3f2:	cf 0d       	add	r28, r15
     3f4:	d1 1d       	adc	r29, r1
     3f6:	88 81       	ld	r24, Y
     3f8:	88 23       	and	r24, r24
     3fa:	09 f0       	breq	.+2      	; 0x3fe <lcd_string+0xae>
     3fc:	bb cf       	rjmp	.-138    	; 0x374 <lcd_string+0x24>
		CheckTemp(poop);
		toggleE();
		k++;
		WaitMs(1);
	}
}
     3fe:	df 91       	pop	r29
     400:	cf 91       	pop	r28
     402:	1f 91       	pop	r17
     404:	0f 91       	pop	r16
     406:	ff 90       	pop	r15
     408:	df 90       	pop	r13
     40a:	cf 90       	pop	r12
     40c:	bf 90       	pop	r11
     40e:	af 90       	pop	r10
     410:	08 95       	ret

00000412 <lcd_showvalue>:

void lcd_showvalue(long int num)
{
     412:	8f 92       	push	r8
     414:	9f 92       	push	r9
     416:	af 92       	push	r10
     418:	bf 92       	push	r11
     41a:	cf 92       	push	r12
     41c:	df 92       	push	r13
     41e:	ef 92       	push	r14
     420:	ff 92       	push	r15
     422:	1f 93       	push	r17
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	6b 01       	movw	r12, r22
     42a:	7c 01       	movw	r14, r24
	if (num < 0)
     42c:	97 ff       	sbrs	r25, 7
     42e:	0b c0       	rjmp	.+22     	; 0x446 <lcd_showvalue+0x34>
	{
		lcd_char('-');
     430:	8d e2       	ldi	r24, 0x2D	; 45
     432:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_char>
		num = -num;
     436:	f0 94       	com	r15
     438:	e0 94       	com	r14
     43a:	d0 94       	com	r13
     43c:	c0 94       	com	r12
     43e:	c1 1c       	adc	r12, r1
     440:	d1 1c       	adc	r13, r1
     442:	e1 1c       	adc	r14, r1
     444:	f1 1c       	adc	r15, r1
	
	unsigned long int n = 0;
	int flag = 0;


	if(num%100000 == 0)
     446:	c7 01       	movw	r24, r14
     448:	b6 01       	movw	r22, r12
     44a:	20 ea       	ldi	r18, 0xA0	; 160
     44c:	36 e8       	ldi	r19, 0x86	; 134
     44e:	41 e0       	ldi	r20, 0x01	; 1
     450:	50 e0       	ldi	r21, 0x00	; 0
     452:	0e 94 0a 09 	call	0x1214	; 0x1214 <__divmodsi4>
     456:	61 15       	cp	r22, r1
     458:	71 05       	cpc	r23, r1
     45a:	81 05       	cpc	r24, r1
     45c:	91 05       	cpc	r25, r1
     45e:	19 f4       	brne	.+6      	; 0x466 <lcd_showvalue+0x54>
     460:	c5 e0       	ldi	r28, 0x05	; 5
     462:	d0 e0       	ldi	r29, 0x00	; 0
     464:	41 c0       	rjmp	.+130    	; 0x4e8 <lcd_showvalue+0xd6>
	{
		flag = 5;
	}
	
	else if(num%10000 == 0)
     466:	c7 01       	movw	r24, r14
     468:	b6 01       	movw	r22, r12
     46a:	20 e1       	ldi	r18, 0x10	; 16
     46c:	37 e2       	ldi	r19, 0x27	; 39
     46e:	40 e0       	ldi	r20, 0x00	; 0
     470:	50 e0       	ldi	r21, 0x00	; 0
     472:	0e 94 0a 09 	call	0x1214	; 0x1214 <__divmodsi4>
     476:	61 15       	cp	r22, r1
     478:	71 05       	cpc	r23, r1
     47a:	81 05       	cpc	r24, r1
     47c:	91 05       	cpc	r25, r1
     47e:	19 f4       	brne	.+6      	; 0x486 <lcd_showvalue+0x74>
     480:	c4 e0       	ldi	r28, 0x04	; 4
     482:	d0 e0       	ldi	r29, 0x00	; 0
     484:	31 c0       	rjmp	.+98     	; 0x4e8 <lcd_showvalue+0xd6>
	{
		flag = 4;
	}

	else if(num%1000 == 0)
     486:	c7 01       	movw	r24, r14
     488:	b6 01       	movw	r22, r12
     48a:	28 ee       	ldi	r18, 0xE8	; 232
     48c:	33 e0       	ldi	r19, 0x03	; 3
     48e:	40 e0       	ldi	r20, 0x00	; 0
     490:	50 e0       	ldi	r21, 0x00	; 0
     492:	0e 94 0a 09 	call	0x1214	; 0x1214 <__divmodsi4>
     496:	61 15       	cp	r22, r1
     498:	71 05       	cpc	r23, r1
     49a:	81 05       	cpc	r24, r1
     49c:	91 05       	cpc	r25, r1
     49e:	19 f4       	brne	.+6      	; 0x4a6 <lcd_showvalue+0x94>
     4a0:	c3 e0       	ldi	r28, 0x03	; 3
     4a2:	d0 e0       	ldi	r29, 0x00	; 0
     4a4:	21 c0       	rjmp	.+66     	; 0x4e8 <lcd_showvalue+0xd6>
	{
		flag = 3;
	}

	else if(num%100 == 0)
     4a6:	c7 01       	movw	r24, r14
     4a8:	b6 01       	movw	r22, r12
     4aa:	24 e6       	ldi	r18, 0x64	; 100
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	40 e0       	ldi	r20, 0x00	; 0
     4b0:	50 e0       	ldi	r21, 0x00	; 0
     4b2:	0e 94 0a 09 	call	0x1214	; 0x1214 <__divmodsi4>
     4b6:	61 15       	cp	r22, r1
     4b8:	71 05       	cpc	r23, r1
     4ba:	81 05       	cpc	r24, r1
     4bc:	91 05       	cpc	r25, r1
     4be:	19 f4       	brne	.+6      	; 0x4c6 <lcd_showvalue+0xb4>
     4c0:	c2 e0       	ldi	r28, 0x02	; 2
     4c2:	d0 e0       	ldi	r29, 0x00	; 0
     4c4:	11 c0       	rjmp	.+34     	; 0x4e8 <lcd_showvalue+0xd6>
     4c6:	c0 e0       	ldi	r28, 0x00	; 0
     4c8:	d0 e0       	ldi	r29, 0x00	; 0
     4ca:	c7 01       	movw	r24, r14
     4cc:	b6 01       	movw	r22, r12
     4ce:	2a e0       	ldi	r18, 0x0A	; 10
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	0e 94 0a 09 	call	0x1214	; 0x1214 <__divmodsi4>
     4da:	61 15       	cp	r22, r1
     4dc:	71 05       	cpc	r23, r1
     4de:	81 05       	cpc	r24, r1
     4e0:	91 05       	cpc	r25, r1
     4e2:	11 f4       	brne	.+4      	; 0x4e8 <lcd_showvalue+0xd6>
     4e4:	c1 e0       	ldi	r28, 0x01	; 1
     4e6:	d0 e0       	ldi	r29, 0x00	; 0
     4e8:	88 24       	eor	r8, r8
     4ea:	99 24       	eor	r9, r9
     4ec:	54 01       	movw	r10, r8
     4ee:	23 c0       	rjmp	.+70     	; 0x536 <lcd_showvalue+0x124>


	while(num!=0)
	{
		
		H = num%10;
     4f0:	c7 01       	movw	r24, r14
     4f2:	b6 01       	movw	r22, r12
     4f4:	2a e0       	ldi	r18, 0x0A	; 10
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	40 e0       	ldi	r20, 0x00	; 0
     4fa:	50 e0       	ldi	r21, 0x00	; 0
     4fc:	0e 94 0a 09 	call	0x1214	; 0x1214 <__divmodsi4>
     500:	16 2f       	mov	r17, r22
		num = num/10;
     502:	c7 01       	movw	r24, r14
     504:	b6 01       	movw	r22, r12
     506:	2a e0       	ldi	r18, 0x0A	; 10
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	40 e0       	ldi	r20, 0x00	; 0
     50c:	50 e0       	ldi	r21, 0x00	; 0
     50e:	0e 94 0a 09 	call	0x1214	; 0x1214 <__divmodsi4>
     512:	c9 01       	movw	r24, r18
     514:	da 01       	movw	r26, r20
     516:	6c 01       	movw	r12, r24
     518:	7d 01       	movw	r14, r26
		n = (n*10)+H;
     51a:	c5 01       	movw	r24, r10
     51c:	b4 01       	movw	r22, r8
     51e:	2a e0       	ldi	r18, 0x0A	; 10
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	40 e0       	ldi	r20, 0x00	; 0
     524:	50 e0       	ldi	r21, 0x00	; 0
     526:	0e 94 b5 08 	call	0x116a	; 0x116a <__mulsi3>
     52a:	4b 01       	movw	r8, r22
     52c:	5c 01       	movw	r10, r24
     52e:	81 0e       	add	r8, r17
     530:	91 1c       	adc	r9, r1
     532:	a1 1c       	adc	r10, r1
     534:	b1 1c       	adc	r11, r1
		flag = 0;
	}



	while(num!=0)
     536:	c1 14       	cp	r12, r1
     538:	d1 04       	cpc	r13, r1
     53a:	e1 04       	cpc	r14, r1
     53c:	f1 04       	cpc	r15, r1
     53e:	c1 f6       	brne	.-80     	; 0x4f0 <lcd_showvalue+0xde>
     540:	19 c0       	rjmp	.+50     	; 0x574 <lcd_showvalue+0x162>
	}
	
	while(n!=0)
	{
		
		H = n%10;
     542:	c5 01       	movw	r24, r10
     544:	b4 01       	movw	r22, r8
     546:	2a e0       	ldi	r18, 0x0A	; 10
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	40 e0       	ldi	r20, 0x00	; 0
     54c:	50 e0       	ldi	r21, 0x00	; 0
     54e:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <__udivmodsi4>
     552:	16 2f       	mov	r17, r22
		n = n/10;
     554:	c5 01       	movw	r24, r10
     556:	b4 01       	movw	r22, r8
     558:	2a e0       	ldi	r18, 0x0A	; 10
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	40 e0       	ldi	r20, 0x00	; 0
     55e:	50 e0       	ldi	r21, 0x00	; 0
     560:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <__udivmodsi4>
     564:	c9 01       	movw	r24, r18
     566:	da 01       	movw	r26, r20
     568:	4c 01       	movw	r8, r24
     56a:	5d 01       	movw	r10, r26
		lcd_char(H+48);
     56c:	81 2f       	mov	r24, r17
     56e:	80 5d       	subi	r24, 0xD0	; 208
     570:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_char>
		num = num/10;
		n = (n*10)+H;

	}
	
	while(n!=0)
     574:	81 14       	cp	r8, r1
     576:	91 04       	cpc	r9, r1
     578:	a1 04       	cpc	r10, r1
     57a:	b1 04       	cpc	r11, r1
     57c:	11 f7       	brne	.-60     	; 0x542 <lcd_showvalue+0x130>
     57e:	04 c0       	rjmp	.+8      	; 0x588 <lcd_showvalue+0x176>
	}
	
	
	while(flag > 0)
	{
		lcd_char(48);
     580:	80 e3       	ldi	r24, 0x30	; 48
     582:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_char>
		flag--;
     586:	21 97       	sbiw	r28, 0x01	; 1
		lcd_char(H+48);

	}
	
	
	while(flag > 0)
     588:	20 97       	sbiw	r28, 0x00	; 0
     58a:	d1 f7       	brne	.-12     	; 0x580 <lcd_showvalue+0x16e>
	{
		lcd_char(48);
		flag--;
	}

}
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	1f 91       	pop	r17
     592:	ff 90       	pop	r15
     594:	ef 90       	pop	r14
     596:	df 90       	pop	r13
     598:	cf 90       	pop	r12
     59a:	bf 90       	pop	r11
     59c:	af 90       	pop	r10
     59e:	9f 90       	pop	r9
     5a0:	8f 90       	pop	r8
     5a2:	08 95       	ret

000005a4 <lcd_gotoxy1>:

}

void lcd_gotoxy1(unsigned char pos)
{
	lcd_cmd(LINE1+pos);
     5a4:	80 58       	subi	r24, 0x80	; 128
     5a6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
}
     5aa:	08 95       	ret

000005ac <lcd_gotoxy2>:

void lcd_gotoxy2(unsigned char pos)
{
	lcd_cmd(LINE2+pos);
     5ac:	80 54       	subi	r24, 0x40	; 64
     5ae:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
}
     5b2:	08 95       	ret

000005b4 <lcd_showvalueh>:

void lcd_showvalueh(unsigned int num)	//prints the decimal 3digit value of num
{
     5b4:	ef 92       	push	r14
     5b6:	ff 92       	push	r15
     5b8:	0f 93       	push	r16
     5ba:	1f 93       	push	r17
     5bc:	8c 01       	movw	r16, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
     5be:	64 e6       	ldi	r22, 0x64	; 100
     5c0:	70 e0       	ldi	r23, 0x00	; 0
     5c2:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__udivmodhi4>
     5c6:	46 2f       	mov	r20, r22
	T=(num - (H*100))/10;
     5c8:	26 2f       	mov	r18, r22
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	8c e9       	ldi	r24, 0x9C	; 156
     5ce:	9f ef       	ldi	r25, 0xFF	; 255
     5d0:	28 9f       	mul	r18, r24
     5d2:	70 01       	movw	r14, r0
     5d4:	29 9f       	mul	r18, r25
     5d6:	f0 0c       	add	r15, r0
     5d8:	38 9f       	mul	r19, r24
     5da:	f0 0c       	add	r15, r0
     5dc:	11 24       	eor	r1, r1
     5de:	c7 01       	movw	r24, r14
     5e0:	80 0f       	add	r24, r16
     5e2:	91 1f       	adc	r25, r17
     5e4:	6a e0       	ldi	r22, 0x0A	; 10
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__udivmodhi4>
     5ec:	16 2f       	mov	r17, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+48);
     5ee:	84 2f       	mov	r24, r20
     5f0:	80 5d       	subi	r24, 0xD0	; 208
     5f2:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_char>
	lcd_char(T+48);
     5f6:	81 2f       	mov	r24, r17
     5f8:	80 5d       	subi	r24, 0xD0	; 208
     5fa:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_char>
	lcd_char(O+48);
     5fe:	00 5d       	subi	r16, 0xD0	; 208
     600:	0e 0d       	add	r16, r14
     602:	86 ef       	ldi	r24, 0xF6	; 246
     604:	9f ef       	ldi	r25, 0xFF	; 255
     606:	18 9f       	mul	r17, r24
     608:	60 2d       	mov	r22, r0
     60a:	11 24       	eor	r1, r1
     60c:	86 2f       	mov	r24, r22
     60e:	80 0f       	add	r24, r16
     610:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_char>
}
     614:	1f 91       	pop	r17
     616:	0f 91       	pop	r16
     618:	ff 90       	pop	r15
     61a:	ef 90       	pop	r14
     61c:	08 95       	ret

0000061e <twi_init>:
     61e:	10 92 23 02 	sts	0x0223, r1
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	80 93 25 02 	sts	0x0225, r24
     628:	10 92 26 02 	sts	0x0226, r1
     62c:	59 9a       	sbi	0x0b, 1	; 11
     62e:	58 9a       	sbi	0x0b, 0	; 11
     630:	e9 eb       	ldi	r30, 0xB9	; 185
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	80 81       	ld	r24, Z
     636:	8e 7f       	andi	r24, 0xFE	; 254
     638:	80 83       	st	Z, r24
     63a:	80 81       	ld	r24, Z
     63c:	8d 7f       	andi	r24, 0xFD	; 253
     63e:	80 83       	st	Z, r24
     640:	8a e0       	ldi	r24, 0x0A	; 10
     642:	80 93 b8 00 	sts	0x00B8, r24
     646:	85 e4       	ldi	r24, 0x45	; 69
     648:	80 93 bc 00 	sts	0x00BC, r24
     64c:	08 95       	ret

0000064e <twi_setAddress>:
     64e:	88 0f       	add	r24, r24
     650:	80 93 ba 00 	sts	0x00BA, r24
     654:	08 95       	ret

00000656 <twi_readFrom>:
     656:	38 2f       	mov	r19, r24
     658:	41 32       	cpi	r20, 0x21	; 33
     65a:	10 f0       	brcs	.+4      	; 0x660 <twi_readFrom+0xa>
     65c:	40 e0       	ldi	r20, 0x00	; 0
     65e:	3e c0       	rjmp	.+124    	; 0x6dc <twi_readFrom+0x86>
     660:	80 91 23 02 	lds	r24, 0x0223
     664:	88 23       	and	r24, r24
     666:	e1 f7       	brne	.-8      	; 0x660 <twi_readFrom+0xa>
     668:	91 e0       	ldi	r25, 0x01	; 1
     66a:	90 93 23 02 	sts	0x0223, r25
     66e:	20 93 25 02 	sts	0x0225, r18
     672:	8f ef       	ldi	r24, 0xFF	; 255
     674:	80 93 90 02 	sts	0x0290, r24
     678:	10 92 4b 02 	sts	0x024B, r1
     67c:	41 50       	subi	r20, 0x01	; 1
     67e:	40 93 4c 02 	sts	0x024C, r20
     682:	4f 5f       	subi	r20, 0xFF	; 255
     684:	90 93 24 02 	sts	0x0224, r25
     688:	80 91 24 02 	lds	r24, 0x0224
     68c:	33 0f       	add	r19, r19
     68e:	83 2b       	or	r24, r19
     690:	80 93 24 02 	sts	0x0224, r24
     694:	80 91 26 02 	lds	r24, 0x0226
     698:	81 30       	cpi	r24, 0x01	; 1
     69a:	41 f4       	brne	.+16     	; 0x6ac <twi_readFrom+0x56>
     69c:	10 92 26 02 	sts	0x0226, r1
     6a0:	80 91 24 02 	lds	r24, 0x0224
     6a4:	80 93 bb 00 	sts	0x00BB, r24
     6a8:	85 ec       	ldi	r24, 0xC5	; 197
     6aa:	01 c0       	rjmp	.+2      	; 0x6ae <twi_readFrom+0x58>
     6ac:	85 ee       	ldi	r24, 0xE5	; 229
     6ae:	80 93 bc 00 	sts	0x00BC, r24
     6b2:	80 91 4b 02 	lds	r24, 0x024B
     6b6:	84 17       	cp	r24, r20
     6b8:	10 f4       	brcc	.+4      	; 0x6be <twi_readFrom+0x68>
     6ba:	40 91 4b 02 	lds	r20, 0x024B
     6be:	20 e0       	ldi	r18, 0x00	; 0
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	0a c0       	rjmp	.+20     	; 0x6d8 <twi_readFrom+0x82>
     6c4:	fb 01       	movw	r30, r22
     6c6:	e2 0f       	add	r30, r18
     6c8:	f3 1f       	adc	r31, r19
     6ca:	d9 01       	movw	r26, r18
     6cc:	a5 5d       	subi	r26, 0xD5	; 213
     6ce:	bd 4f       	sbci	r27, 0xFD	; 253
     6d0:	8c 91       	ld	r24, X
     6d2:	80 83       	st	Z, r24
     6d4:	2f 5f       	subi	r18, 0xFF	; 255
     6d6:	3f 4f       	sbci	r19, 0xFF	; 255
     6d8:	24 17       	cp	r18, r20
     6da:	a0 f3       	brcs	.-24     	; 0x6c4 <twi_readFrom+0x6e>
     6dc:	84 2f       	mov	r24, r20
     6de:	08 95       	ret

000006e0 <twi_writeTo>:
     6e0:	0f 93       	push	r16
     6e2:	1f 93       	push	r17
     6e4:	58 2f       	mov	r21, r24
     6e6:	12 2f       	mov	r17, r18
     6e8:	41 32       	cpi	r20, 0x21	; 33
     6ea:	10 f0       	brcs	.+4      	; 0x6f0 <twi_writeTo+0x10>
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	4a c0       	rjmp	.+148    	; 0x784 <twi_writeTo+0xa4>
     6f0:	80 91 23 02 	lds	r24, 0x0223
     6f4:	88 23       	and	r24, r24
     6f6:	e1 f7       	brne	.-8      	; 0x6f0 <twi_writeTo+0x10>
     6f8:	82 e0       	ldi	r24, 0x02	; 2
     6fa:	80 93 23 02 	sts	0x0223, r24
     6fe:	00 93 25 02 	sts	0x0225, r16
     702:	8f ef       	ldi	r24, 0xFF	; 255
     704:	80 93 90 02 	sts	0x0290, r24
     708:	10 92 4b 02 	sts	0x024B, r1
     70c:	40 93 4c 02 	sts	0x024C, r20
     710:	ab e2       	ldi	r26, 0x2B	; 43
     712:	b2 e0       	ldi	r27, 0x02	; 2
     714:	fb 01       	movw	r30, r22
     716:	02 c0       	rjmp	.+4      	; 0x71c <twi_writeTo+0x3c>
     718:	81 91       	ld	r24, Z+
     71a:	8d 93       	st	X+, r24
     71c:	8e 2f       	mov	r24, r30
     71e:	86 1b       	sub	r24, r22
     720:	84 17       	cp	r24, r20
     722:	d0 f3       	brcs	.-12     	; 0x718 <twi_writeTo+0x38>
     724:	10 92 24 02 	sts	0x0224, r1
     728:	80 91 24 02 	lds	r24, 0x0224
     72c:	55 0f       	add	r21, r21
     72e:	85 2b       	or	r24, r21
     730:	80 93 24 02 	sts	0x0224, r24
     734:	80 91 26 02 	lds	r24, 0x0226
     738:	81 30       	cpi	r24, 0x01	; 1
     73a:	41 f4       	brne	.+16     	; 0x74c <twi_writeTo+0x6c>
     73c:	10 92 26 02 	sts	0x0226, r1
     740:	80 91 24 02 	lds	r24, 0x0224
     744:	80 93 bb 00 	sts	0x00BB, r24
     748:	85 ec       	ldi	r24, 0xC5	; 197
     74a:	01 c0       	rjmp	.+2      	; 0x74e <twi_writeTo+0x6e>
     74c:	85 ee       	ldi	r24, 0xE5	; 229
     74e:	80 93 bc 00 	sts	0x00BC, r24
     752:	11 23       	and	r17, r17
     754:	21 f0       	breq	.+8      	; 0x75e <twi_writeTo+0x7e>
     756:	80 91 23 02 	lds	r24, 0x0223
     75a:	82 30       	cpi	r24, 0x02	; 2
     75c:	e1 f3       	breq	.-8      	; 0x756 <twi_writeTo+0x76>
     75e:	80 91 90 02 	lds	r24, 0x0290
     762:	8f 3f       	cpi	r24, 0xFF	; 255
     764:	11 f4       	brne	.+4      	; 0x76a <twi_writeTo+0x8a>
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	0d c0       	rjmp	.+26     	; 0x784 <twi_writeTo+0xa4>
     76a:	80 91 90 02 	lds	r24, 0x0290
     76e:	80 32       	cpi	r24, 0x20	; 32
     770:	11 f4       	brne	.+4      	; 0x776 <twi_writeTo+0x96>
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	07 c0       	rjmp	.+14     	; 0x784 <twi_writeTo+0xa4>
     776:	80 91 90 02 	lds	r24, 0x0290
     77a:	80 33       	cpi	r24, 0x30	; 48
     77c:	11 f0       	breq	.+4      	; 0x782 <twi_writeTo+0xa2>
     77e:	84 e0       	ldi	r24, 0x04	; 4
     780:	01 c0       	rjmp	.+2      	; 0x784 <twi_writeTo+0xa4>
     782:	83 e0       	ldi	r24, 0x03	; 3
     784:	1f 91       	pop	r17
     786:	0f 91       	pop	r16
     788:	08 95       	ret

0000078a <twi_transmit>:
     78a:	48 2f       	mov	r20, r24
     78c:	61 32       	cpi	r22, 0x21	; 33
     78e:	10 f0       	brcs	.+4      	; 0x794 <twi_transmit+0xa>
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	08 95       	ret
     794:	80 91 23 02 	lds	r24, 0x0223
     798:	84 30       	cpi	r24, 0x04	; 4
     79a:	11 f0       	breq	.+4      	; 0x7a0 <twi_transmit+0x16>
     79c:	82 e0       	ldi	r24, 0x02	; 2
     79e:	08 95       	ret
     7a0:	60 93 6e 02 	sts	0x026E, r22
     7a4:	ad e4       	ldi	r26, 0x4D	; 77
     7a6:	b2 e0       	ldi	r27, 0x02	; 2
     7a8:	84 2f       	mov	r24, r20
     7aa:	9c 01       	movw	r18, r24
     7ac:	f9 01       	movw	r30, r18
     7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <twi_transmit+0x2a>
     7b0:	81 91       	ld	r24, Z+
     7b2:	8d 93       	st	X+, r24
     7b4:	8e 2f       	mov	r24, r30
     7b6:	84 1b       	sub	r24, r20
     7b8:	86 17       	cp	r24, r22
     7ba:	d0 f3       	brcs	.-12     	; 0x7b0 <twi_transmit+0x26>
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	08 95       	ret

000007c0 <twi_attachSlaveRxEvent>:
     7c0:	90 93 2a 02 	sts	0x022A, r25
     7c4:	80 93 29 02 	sts	0x0229, r24
     7c8:	08 95       	ret

000007ca <twi_attachSlaveTxEvent>:
     7ca:	90 93 28 02 	sts	0x0228, r25
     7ce:	80 93 27 02 	sts	0x0227, r24
     7d2:	08 95       	ret

000007d4 <twi_reply>:
     7d4:	88 23       	and	r24, r24
     7d6:	11 f0       	breq	.+4      	; 0x7dc <twi_reply+0x8>
     7d8:	85 ec       	ldi	r24, 0xC5	; 197
     7da:	01 c0       	rjmp	.+2      	; 0x7de <twi_reply+0xa>
     7dc:	85 e8       	ldi	r24, 0x85	; 133
     7de:	80 93 bc 00 	sts	0x00BC, r24
     7e2:	08 95       	ret

000007e4 <twi_stop>:
     7e4:	85 ed       	ldi	r24, 0xD5	; 213
     7e6:	80 93 bc 00 	sts	0x00BC, r24
     7ea:	80 91 bc 00 	lds	r24, 0x00BC
     7ee:	84 fd       	sbrc	r24, 4
     7f0:	fc cf       	rjmp	.-8      	; 0x7ea <twi_stop+0x6>
     7f2:	10 92 23 02 	sts	0x0223, r1
     7f6:	08 95       	ret

000007f8 <twi_releaseBus>:
     7f8:	85 ec       	ldi	r24, 0xC5	; 197
     7fa:	80 93 bc 00 	sts	0x00BC, r24
     7fe:	10 92 23 02 	sts	0x0223, r1
     802:	08 95       	ret

00000804 <__vector_39>:
     804:	1f 92       	push	r1
     806:	0f 92       	push	r0
     808:	0f b6       	in	r0, 0x3f	; 63
     80a:	0f 92       	push	r0
     80c:	11 24       	eor	r1, r1
     80e:	2f 93       	push	r18
     810:	3f 93       	push	r19
     812:	4f 93       	push	r20
     814:	5f 93       	push	r21
     816:	6f 93       	push	r22
     818:	7f 93       	push	r23
     81a:	8f 93       	push	r24
     81c:	9f 93       	push	r25
     81e:	af 93       	push	r26
     820:	bf 93       	push	r27
     822:	ef 93       	push	r30
     824:	ff 93       	push	r31
     826:	80 91 b9 00 	lds	r24, 0x00B9
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	88 7f       	andi	r24, 0xF8	; 248
     82e:	90 70       	andi	r25, 0x00	; 0
     830:	80 36       	cpi	r24, 0x60	; 96
     832:	91 05       	cpc	r25, r1
     834:	09 f4       	brne	.+2      	; 0x838 <__vector_39+0x34>
     836:	f2 c0       	rjmp	.+484    	; 0xa1c <__vector_39+0x218>
     838:	81 36       	cpi	r24, 0x61	; 97
     83a:	91 05       	cpc	r25, r1
     83c:	cc f5       	brge	.+114    	; 0x8b0 <__vector_39+0xac>
     83e:	88 32       	cpi	r24, 0x28	; 40
     840:	91 05       	cpc	r25, r1
     842:	09 f4       	brne	.+2      	; 0x846 <__vector_39+0x42>
     844:	7b c0       	rjmp	.+246    	; 0x93c <__vector_39+0x138>
     846:	89 32       	cpi	r24, 0x29	; 41
     848:	91 05       	cpc	r25, r1
     84a:	b4 f4       	brge	.+44     	; 0x878 <__vector_39+0x74>
     84c:	80 31       	cpi	r24, 0x10	; 16
     84e:	91 05       	cpc	r25, r1
     850:	09 f4       	brne	.+2      	; 0x854 <__vector_39+0x50>
     852:	6f c0       	rjmp	.+222    	; 0x932 <__vector_39+0x12e>
     854:	81 31       	cpi	r24, 0x11	; 17
     856:	91 05       	cpc	r25, r1
     858:	3c f4       	brge	.+14     	; 0x868 <__vector_39+0x64>
     85a:	00 97       	sbiw	r24, 0x00	; 0
     85c:	09 f4       	brne	.+2      	; 0x860 <__vector_39+0x5c>
     85e:	47 c1       	rjmp	.+654    	; 0xaee <__vector_39+0x2ea>
     860:	08 97       	sbiw	r24, 0x08	; 8
     862:	09 f0       	breq	.+2      	; 0x866 <__vector_39+0x62>
     864:	4f c1       	rjmp	.+670    	; 0xb04 <__vector_39+0x300>
     866:	65 c0       	rjmp	.+202    	; 0x932 <__vector_39+0x12e>
     868:	88 31       	cpi	r24, 0x18	; 24
     86a:	91 05       	cpc	r25, r1
     86c:	09 f4       	brne	.+2      	; 0x870 <__vector_39+0x6c>
     86e:	66 c0       	rjmp	.+204    	; 0x93c <__vector_39+0x138>
     870:	80 97       	sbiw	r24, 0x20	; 32
     872:	09 f0       	breq	.+2      	; 0x876 <__vector_39+0x72>
     874:	47 c1       	rjmp	.+654    	; 0xb04 <__vector_39+0x300>
     876:	82 c0       	rjmp	.+260    	; 0x97c <__vector_39+0x178>
     878:	80 34       	cpi	r24, 0x40	; 64
     87a:	91 05       	cpc	r25, r1
     87c:	09 f4       	brne	.+2      	; 0x880 <__vector_39+0x7c>
     87e:	a4 c0       	rjmp	.+328    	; 0x9c8 <__vector_39+0x1c4>
     880:	81 34       	cpi	r24, 0x41	; 65
     882:	91 05       	cpc	r25, r1
     884:	44 f4       	brge	.+16     	; 0x896 <__vector_39+0x92>
     886:	80 33       	cpi	r24, 0x30	; 48
     888:	91 05       	cpc	r25, r1
     88a:	09 f4       	brne	.+2      	; 0x88e <__vector_39+0x8a>
     88c:	82 c0       	rjmp	.+260    	; 0x992 <__vector_39+0x18e>
     88e:	c8 97       	sbiw	r24, 0x38	; 56
     890:	09 f0       	breq	.+2      	; 0x894 <__vector_39+0x90>
     892:	38 c1       	rjmp	.+624    	; 0xb04 <__vector_39+0x300>
     894:	89 c0       	rjmp	.+274    	; 0x9a8 <__vector_39+0x1a4>
     896:	80 35       	cpi	r24, 0x50	; 80
     898:	91 05       	cpc	r25, r1
     89a:	09 f4       	brne	.+2      	; 0x89e <__vector_39+0x9a>
     89c:	89 c0       	rjmp	.+274    	; 0x9b0 <__vector_39+0x1ac>
     89e:	88 35       	cpi	r24, 0x58	; 88
     8a0:	91 05       	cpc	r25, r1
     8a2:	09 f4       	brne	.+2      	; 0x8a6 <__vector_39+0xa2>
     8a4:	96 c0       	rjmp	.+300    	; 0x9d2 <__vector_39+0x1ce>
     8a6:	88 34       	cpi	r24, 0x48	; 72
     8a8:	91 05       	cpc	r25, r1
     8aa:	09 f0       	breq	.+2      	; 0x8ae <__vector_39+0xaa>
     8ac:	2b c1       	rjmp	.+598    	; 0xb04 <__vector_39+0x300>
     8ae:	ae c0       	rjmp	.+348    	; 0xa0c <__vector_39+0x208>
     8b0:	88 39       	cpi	r24, 0x98	; 152
     8b2:	91 05       	cpc	r25, r1
     8b4:	09 f4       	brne	.+2      	; 0x8b8 <__vector_39+0xb4>
     8b6:	13 c1       	rjmp	.+550    	; 0xade <__vector_39+0x2da>
     8b8:	89 39       	cpi	r24, 0x99	; 153
     8ba:	91 05       	cpc	r25, r1
     8bc:	ec f4       	brge	.+58     	; 0x8f8 <__vector_39+0xf4>
     8be:	88 37       	cpi	r24, 0x78	; 120
     8c0:	91 05       	cpc	r25, r1
     8c2:	09 f4       	brne	.+2      	; 0x8c6 <__vector_39+0xc2>
     8c4:	ab c0       	rjmp	.+342    	; 0xa1c <__vector_39+0x218>
     8c6:	89 37       	cpi	r24, 0x79	; 121
     8c8:	91 05       	cpc	r25, r1
     8ca:	4c f4       	brge	.+18     	; 0x8de <__vector_39+0xda>
     8cc:	88 36       	cpi	r24, 0x68	; 104
     8ce:	91 05       	cpc	r25, r1
     8d0:	09 f4       	brne	.+2      	; 0x8d4 <__vector_39+0xd0>
     8d2:	a4 c0       	rjmp	.+328    	; 0xa1c <__vector_39+0x218>
     8d4:	80 37       	cpi	r24, 0x70	; 112
     8d6:	91 05       	cpc	r25, r1
     8d8:	09 f0       	breq	.+2      	; 0x8dc <__vector_39+0xd8>
     8da:	14 c1       	rjmp	.+552    	; 0xb04 <__vector_39+0x300>
     8dc:	9f c0       	rjmp	.+318    	; 0xa1c <__vector_39+0x218>
     8de:	88 38       	cpi	r24, 0x88	; 136
     8e0:	91 05       	cpc	r25, r1
     8e2:	09 f4       	brne	.+2      	; 0x8e6 <__vector_39+0xe2>
     8e4:	fc c0       	rjmp	.+504    	; 0xade <__vector_39+0x2da>
     8e6:	80 39       	cpi	r24, 0x90	; 144
     8e8:	91 05       	cpc	r25, r1
     8ea:	09 f4       	brne	.+2      	; 0x8ee <__vector_39+0xea>
     8ec:	9d c0       	rjmp	.+314    	; 0xa28 <__vector_39+0x224>
     8ee:	80 38       	cpi	r24, 0x80	; 128
     8f0:	91 05       	cpc	r25, r1
     8f2:	09 f0       	breq	.+2      	; 0x8f6 <__vector_39+0xf2>
     8f4:	07 c1       	rjmp	.+526    	; 0xb04 <__vector_39+0x300>
     8f6:	98 c0       	rjmp	.+304    	; 0xa28 <__vector_39+0x224>
     8f8:	80 3b       	cpi	r24, 0xB0	; 176
     8fa:	91 05       	cpc	r25, r1
     8fc:	09 f4       	brne	.+2      	; 0x900 <__vector_39+0xfc>
     8fe:	c6 c0       	rjmp	.+396    	; 0xa8c <__vector_39+0x288>
     900:	81 3b       	cpi	r24, 0xB1	; 177
     902:	91 05       	cpc	r25, r1
     904:	4c f4       	brge	.+18     	; 0x918 <__vector_39+0x114>
     906:	80 3a       	cpi	r24, 0xA0	; 160
     908:	91 05       	cpc	r25, r1
     90a:	09 f4       	brne	.+2      	; 0x90e <__vector_39+0x10a>
     90c:	9f c0       	rjmp	.+318    	; 0xa4c <__vector_39+0x248>
     90e:	88 3a       	cpi	r24, 0xA8	; 168
     910:	91 05       	cpc	r25, r1
     912:	09 f0       	breq	.+2      	; 0x916 <__vector_39+0x112>
     914:	f7 c0       	rjmp	.+494    	; 0xb04 <__vector_39+0x300>
     916:	ba c0       	rjmp	.+372    	; 0xa8c <__vector_39+0x288>
     918:	80 3c       	cpi	r24, 0xC0	; 192
     91a:	91 05       	cpc	r25, r1
     91c:	09 f4       	brne	.+2      	; 0x920 <__vector_39+0x11c>
     91e:	e3 c0       	rjmp	.+454    	; 0xae6 <__vector_39+0x2e2>
     920:	88 3c       	cpi	r24, 0xC8	; 200
     922:	91 05       	cpc	r25, r1
     924:	09 f4       	brne	.+2      	; 0x928 <__vector_39+0x124>
     926:	df c0       	rjmp	.+446    	; 0xae6 <__vector_39+0x2e2>
     928:	88 3b       	cpi	r24, 0xB8	; 184
     92a:	91 05       	cpc	r25, r1
     92c:	09 f0       	breq	.+2      	; 0x930 <__vector_39+0x12c>
     92e:	ea c0       	rjmp	.+468    	; 0xb04 <__vector_39+0x300>
     930:	c2 c0       	rjmp	.+388    	; 0xab6 <__vector_39+0x2b2>
     932:	80 91 24 02 	lds	r24, 0x0224
     936:	80 93 bb 00 	sts	0x00BB, r24
     93a:	cf c0       	rjmp	.+414    	; 0xada <__vector_39+0x2d6>
     93c:	90 91 4b 02 	lds	r25, 0x024B
     940:	80 91 4c 02 	lds	r24, 0x024C
     944:	98 17       	cp	r25, r24
     946:	68 f4       	brcc	.+26     	; 0x962 <__vector_39+0x15e>
     948:	90 91 4b 02 	lds	r25, 0x024B
     94c:	e9 2f       	mov	r30, r25
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	e5 5d       	subi	r30, 0xD5	; 213
     952:	fd 4f       	sbci	r31, 0xFD	; 253
     954:	80 81       	ld	r24, Z
     956:	80 93 bb 00 	sts	0x00BB, r24
     95a:	9f 5f       	subi	r25, 0xFF	; 255
     95c:	90 93 4b 02 	sts	0x024B, r25
     960:	bc c0       	rjmp	.+376    	; 0xada <__vector_39+0x2d6>
     962:	80 91 25 02 	lds	r24, 0x0225
     966:	88 23       	and	r24, r24
     968:	09 f4       	brne	.+2      	; 0x96c <__vector_39+0x168>
     96a:	4b c0       	rjmp	.+150    	; 0xa02 <__vector_39+0x1fe>
     96c:	85 ed       	ldi	r24, 0xD5	; 213
     96e:	80 93 bc 00 	sts	0x00BC, r24
     972:	80 91 bc 00 	lds	r24, 0x00BC
     976:	84 fd       	sbrc	r24, 4
     978:	fc cf       	rjmp	.-8      	; 0x972 <__vector_39+0x16e>
     97a:	c2 c0       	rjmp	.+388    	; 0xb00 <__vector_39+0x2fc>
     97c:	80 e2       	ldi	r24, 0x20	; 32
     97e:	80 93 90 02 	sts	0x0290, r24
     982:	85 ed       	ldi	r24, 0xD5	; 213
     984:	80 93 bc 00 	sts	0x00BC, r24
     988:	80 91 bc 00 	lds	r24, 0x00BC
     98c:	84 fd       	sbrc	r24, 4
     98e:	fc cf       	rjmp	.-8      	; 0x988 <__vector_39+0x184>
     990:	b7 c0       	rjmp	.+366    	; 0xb00 <__vector_39+0x2fc>
     992:	80 e3       	ldi	r24, 0x30	; 48
     994:	80 93 90 02 	sts	0x0290, r24
     998:	85 ed       	ldi	r24, 0xD5	; 213
     99a:	80 93 bc 00 	sts	0x00BC, r24
     99e:	80 91 bc 00 	lds	r24, 0x00BC
     9a2:	84 fd       	sbrc	r24, 4
     9a4:	fc cf       	rjmp	.-8      	; 0x99e <__vector_39+0x19a>
     9a6:	ac c0       	rjmp	.+344    	; 0xb00 <__vector_39+0x2fc>
     9a8:	88 e3       	ldi	r24, 0x38	; 56
     9aa:	80 93 90 02 	sts	0x0290, r24
     9ae:	9b c0       	rjmp	.+310    	; 0xae6 <__vector_39+0x2e2>
     9b0:	80 91 4b 02 	lds	r24, 0x024B
     9b4:	90 91 bb 00 	lds	r25, 0x00BB
     9b8:	e8 2f       	mov	r30, r24
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	e5 5d       	subi	r30, 0xD5	; 213
     9be:	fd 4f       	sbci	r31, 0xFD	; 253
     9c0:	90 83       	st	Z, r25
     9c2:	8f 5f       	subi	r24, 0xFF	; 255
     9c4:	80 93 4b 02 	sts	0x024B, r24
     9c8:	90 91 4b 02 	lds	r25, 0x024B
     9cc:	80 91 4c 02 	lds	r24, 0x024C
     9d0:	82 c0       	rjmp	.+260    	; 0xad6 <__vector_39+0x2d2>
     9d2:	80 91 4b 02 	lds	r24, 0x024B
     9d6:	90 91 bb 00 	lds	r25, 0x00BB
     9da:	e8 2f       	mov	r30, r24
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	e5 5d       	subi	r30, 0xD5	; 213
     9e0:	fd 4f       	sbci	r31, 0xFD	; 253
     9e2:	90 83       	st	Z, r25
     9e4:	8f 5f       	subi	r24, 0xFF	; 255
     9e6:	80 93 4b 02 	sts	0x024B, r24
     9ea:	80 91 25 02 	lds	r24, 0x0225
     9ee:	88 23       	and	r24, r24
     9f0:	41 f0       	breq	.+16     	; 0xa02 <__vector_39+0x1fe>
     9f2:	85 ed       	ldi	r24, 0xD5	; 213
     9f4:	80 93 bc 00 	sts	0x00BC, r24
     9f8:	80 91 bc 00 	lds	r24, 0x00BC
     9fc:	84 fd       	sbrc	r24, 4
     9fe:	fc cf       	rjmp	.-8      	; 0x9f8 <__vector_39+0x1f4>
     a00:	7f c0       	rjmp	.+254    	; 0xb00 <__vector_39+0x2fc>
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	80 93 26 02 	sts	0x0226, r24
     a08:	84 ea       	ldi	r24, 0xA4	; 164
     a0a:	6e c0       	rjmp	.+220    	; 0xae8 <__vector_39+0x2e4>
     a0c:	85 ed       	ldi	r24, 0xD5	; 213
     a0e:	80 93 bc 00 	sts	0x00BC, r24
     a12:	80 91 bc 00 	lds	r24, 0x00BC
     a16:	84 fd       	sbrc	r24, 4
     a18:	fc cf       	rjmp	.-8      	; 0xa12 <__vector_39+0x20e>
     a1a:	72 c0       	rjmp	.+228    	; 0xb00 <__vector_39+0x2fc>
     a1c:	83 e0       	ldi	r24, 0x03	; 3
     a1e:	80 93 23 02 	sts	0x0223, r24
     a22:	10 92 8f 02 	sts	0x028F, r1
     a26:	59 c0       	rjmp	.+178    	; 0xada <__vector_39+0x2d6>
     a28:	80 91 8f 02 	lds	r24, 0x028F
     a2c:	80 32       	cpi	r24, 0x20	; 32
     a2e:	08 f0       	brcs	.+2      	; 0xa32 <__vector_39+0x22e>
     a30:	56 c0       	rjmp	.+172    	; 0xade <__vector_39+0x2da>
     a32:	80 91 8f 02 	lds	r24, 0x028F
     a36:	90 91 bb 00 	lds	r25, 0x00BB
     a3a:	e8 2f       	mov	r30, r24
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	e1 59       	subi	r30, 0x91	; 145
     a40:	fd 4f       	sbci	r31, 0xFD	; 253
     a42:	90 83       	st	Z, r25
     a44:	8f 5f       	subi	r24, 0xFF	; 255
     a46:	80 93 8f 02 	sts	0x028F, r24
     a4a:	47 c0       	rjmp	.+142    	; 0xada <__vector_39+0x2d6>
     a4c:	80 91 8f 02 	lds	r24, 0x028F
     a50:	80 32       	cpi	r24, 0x20	; 32
     a52:	30 f4       	brcc	.+12     	; 0xa60 <__vector_39+0x25c>
     a54:	e0 91 8f 02 	lds	r30, 0x028F
     a58:	f0 e0       	ldi	r31, 0x00	; 0
     a5a:	e1 59       	subi	r30, 0x91	; 145
     a5c:	fd 4f       	sbci	r31, 0xFD	; 253
     a5e:	10 82       	st	Z, r1
     a60:	85 ed       	ldi	r24, 0xD5	; 213
     a62:	80 93 bc 00 	sts	0x00BC, r24
     a66:	80 91 bc 00 	lds	r24, 0x00BC
     a6a:	84 fd       	sbrc	r24, 4
     a6c:	fc cf       	rjmp	.-8      	; 0xa66 <__vector_39+0x262>
     a6e:	10 92 23 02 	sts	0x0223, r1
     a72:	60 91 8f 02 	lds	r22, 0x028F
     a76:	e0 91 29 02 	lds	r30, 0x0229
     a7a:	f0 91 2a 02 	lds	r31, 0x022A
     a7e:	8f e6       	ldi	r24, 0x6F	; 111
     a80:	92 e0       	ldi	r25, 0x02	; 2
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	09 95       	icall
     a86:	10 92 8f 02 	sts	0x028F, r1
     a8a:	2d c0       	rjmp	.+90     	; 0xae6 <__vector_39+0x2e2>
     a8c:	84 e0       	ldi	r24, 0x04	; 4
     a8e:	80 93 23 02 	sts	0x0223, r24
     a92:	10 92 6d 02 	sts	0x026D, r1
     a96:	10 92 6e 02 	sts	0x026E, r1
     a9a:	e0 91 27 02 	lds	r30, 0x0227
     a9e:	f0 91 28 02 	lds	r31, 0x0228
     aa2:	09 95       	icall
     aa4:	80 91 6e 02 	lds	r24, 0x026E
     aa8:	88 23       	and	r24, r24
     aaa:	29 f4       	brne	.+10     	; 0xab6 <__vector_39+0x2b2>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	80 93 6e 02 	sts	0x026E, r24
     ab2:	10 92 4d 02 	sts	0x024D, r1
     ab6:	90 91 6d 02 	lds	r25, 0x026D
     aba:	e9 2f       	mov	r30, r25
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	e3 5b       	subi	r30, 0xB3	; 179
     ac0:	fd 4f       	sbci	r31, 0xFD	; 253
     ac2:	80 81       	ld	r24, Z
     ac4:	80 93 bb 00 	sts	0x00BB, r24
     ac8:	9f 5f       	subi	r25, 0xFF	; 255
     aca:	90 93 6d 02 	sts	0x026D, r25
     ace:	90 91 6d 02 	lds	r25, 0x026D
     ad2:	80 91 6e 02 	lds	r24, 0x026E
     ad6:	98 17       	cp	r25, r24
     ad8:	10 f4       	brcc	.+4      	; 0xade <__vector_39+0x2da>
     ada:	85 ec       	ldi	r24, 0xC5	; 197
     adc:	01 c0       	rjmp	.+2      	; 0xae0 <__vector_39+0x2dc>
     ade:	85 e8       	ldi	r24, 0x85	; 133
     ae0:	80 93 bc 00 	sts	0x00BC, r24
     ae4:	0f c0       	rjmp	.+30     	; 0xb04 <__vector_39+0x300>
     ae6:	85 ec       	ldi	r24, 0xC5	; 197
     ae8:	80 93 bc 00 	sts	0x00BC, r24
     aec:	09 c0       	rjmp	.+18     	; 0xb00 <__vector_39+0x2fc>
     aee:	10 92 90 02 	sts	0x0290, r1
     af2:	85 ed       	ldi	r24, 0xD5	; 213
     af4:	80 93 bc 00 	sts	0x00BC, r24
     af8:	80 91 bc 00 	lds	r24, 0x00BC
     afc:	84 fd       	sbrc	r24, 4
     afe:	fc cf       	rjmp	.-8      	; 0xaf8 <__vector_39+0x2f4>
     b00:	10 92 23 02 	sts	0x0223, r1
     b04:	ff 91       	pop	r31
     b06:	ef 91       	pop	r30
     b08:	bf 91       	pop	r27
     b0a:	af 91       	pop	r26
     b0c:	9f 91       	pop	r25
     b0e:	8f 91       	pop	r24
     b10:	7f 91       	pop	r23
     b12:	6f 91       	pop	r22
     b14:	5f 91       	pop	r21
     b16:	4f 91       	pop	r20
     b18:	3f 91       	pop	r19
     b1a:	2f 91       	pop	r18
     b1c:	0f 90       	pop	r0
     b1e:	0f be       	out	0x3f, r0	; 63
     b20:	0f 90       	pop	r0
     b22:	1f 90       	pop	r1
     b24:	18 95       	reti

00000b26 <begin>:
uint8_t transmitting = 0;


void begin(void)
{
	rxBufferIndex = 0;
     b26:	10 92 1d 02 	sts	0x021D, r1
	rxBufferLength = 0;
     b2a:	10 92 1e 02 	sts	0x021E, r1

	txBufferIndex = 0;
     b2e:	10 92 20 02 	sts	0x0220, r1
	txBufferLength = 0;
     b32:	10 92 21 02 	sts	0x0221, r1

	twi_init();
     b36:	0e 94 0f 03 	call	0x61e	; 0x61e <twi_init>
}
     b3a:	08 95       	ret

00000b3c <beginTransmission>:

void beginTransmission(int address)
{
  // indicate that we are transmitting
  transmitting = 1;
     b3c:	91 e0       	ldi	r25, 0x01	; 1
     b3e:	90 93 22 02 	sts	0x0222, r25
  // set address of targeted slave
  txAddress = address;
     b42:	80 93 1f 02 	sts	0x021F, r24
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     b46:	10 92 20 02 	sts	0x0220, r1
  txBufferLength = 0;
     b4a:	10 92 21 02 	sts	0x0221, r1
}
     b4e:	08 95       	ret

00000b50 <endTransmission>:
  txBufferLength = 0;
  // indicate that we are done transmitting
  transmitting = 0;
  return ret;*/
  return 0;
}
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	08 95       	ret

00000b54 <requestFrom>:

uint8_t requestFrom(uint8_t address, uint8_t quantity)
{
     b54:	46 2f       	mov	r20, r22
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, true);
     b56:	61 32       	cpi	r22, 0x21	; 33
     b58:	08 f0       	brcs	.+2      	; 0xb5c <requestFrom+0x8>
     b5a:	40 e2       	ldi	r20, 0x20	; 32
     b5c:	61 ea       	ldi	r22, 0xA1	; 161
     b5e:	72 e0       	ldi	r23, 0x02	; 2
     b60:	21 e0       	ldi	r18, 0x01	; 1
     b62:	0e 94 2b 03 	call	0x656	; 0x656 <twi_readFrom>

  // set rx buffer iterator vars
  rxBufferIndex = 0;
     b66:	10 92 1d 02 	sts	0x021D, r1
  rxBufferLength = read;
     b6a:	80 93 1e 02 	sts	0x021E, r24

  return read;
}
     b6e:	08 95       	ret

00000b70 <write>:

size_t write(uint8_t data)
{
     b70:	df 93       	push	r29
     b72:	cf 93       	push	r28
     b74:	0f 92       	push	r0
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
     b7a:	89 83       	std	Y+1, r24	; 0x01
  if(transmitting){
     b7c:	80 91 22 02 	lds	r24, 0x0222
     b80:	88 23       	and	r24, r24
     b82:	a9 f0       	breq	.+42     	; 0xbae <write+0x3e>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
     b84:	80 91 21 02 	lds	r24, 0x0221
     b88:	80 32       	cpi	r24, 0x20	; 32
     b8a:	18 f0       	brcs	.+6      	; 0xb92 <write+0x22>
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	15 c0       	rjmp	.+42     	; 0xbbc <write+0x4c>
      //setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
     b92:	80 91 20 02 	lds	r24, 0x0220
     b96:	e8 2f       	mov	r30, r24
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	ef 53       	subi	r30, 0x3F	; 63
     b9c:	fd 4f       	sbci	r31, 0xFD	; 253
     b9e:	99 81       	ldd	r25, Y+1	; 0x01
     ba0:	90 83       	st	Z, r25
    ++txBufferIndex;
     ba2:	8f 5f       	subi	r24, 0xFF	; 255
     ba4:	80 93 20 02 	sts	0x0220, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
     ba8:	80 93 21 02 	sts	0x0221, r24
     bac:	05 c0       	rjmp	.+10     	; 0xbb8 <write+0x48>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     bae:	ce 01       	movw	r24, r28
     bb0:	01 96       	adiw	r24, 0x01	; 1
     bb2:	61 e0       	ldi	r22, 0x01	; 1
     bb4:	0e 94 c5 03 	call	0x78a	; 0x78a <twi_transmit>
     bb8:	21 e0       	ldi	r18, 0x01	; 1
     bba:	30 e0       	ldi	r19, 0x00	; 0
  }
  return 1;
}
     bbc:	c9 01       	movw	r24, r18
     bbe:	0f 90       	pop	r0
     bc0:	cf 91       	pop	r28
     bc2:	df 91       	pop	r29
     bc4:	08 95       	ret

00000bc6 <available>:

int available(void)
{
     bc6:	20 91 1e 02 	lds	r18, 0x021E
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	80 91 1d 02 	lds	r24, 0x021D
     bd0:	28 1b       	sub	r18, r24
     bd2:	31 09       	sbc	r19, r1
  return rxBufferLength - rxBufferIndex;
}
     bd4:	c9 01       	movw	r24, r18
     bd6:	08 95       	ret

00000bd8 <read>:
int read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     bd8:	40 91 1d 02 	lds	r20, 0x021D
     bdc:	80 91 1e 02 	lds	r24, 0x021E
     be0:	48 17       	cp	r20, r24
     be2:	18 f0       	brcs	.+6      	; 0xbea <read+0x12>
     be4:	2f ef       	ldi	r18, 0xFF	; 255
     be6:	3f ef       	ldi	r19, 0xFF	; 255
     be8:	0a c0       	rjmp	.+20     	; 0xbfe <read+0x26>
    value = rxBuffer[rxBufferIndex];
     bea:	e4 2f       	mov	r30, r20
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	ef 55       	subi	r30, 0x5F	; 95
     bf0:	fd 4f       	sbci	r31, 0xFD	; 253
     bf2:	80 81       	ld	r24, Z
     bf4:	28 2f       	mov	r18, r24
     bf6:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
     bf8:	4f 5f       	subi	r20, 0xFF	; 255
     bfa:	40 93 1d 02 	sts	0x021D, r20
  }

  return value;
}
     bfe:	c9 01       	movw	r24, r18
     c00:	08 95       	ret

00000c02 <peek>:

int peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
     c02:	e0 91 1d 02 	lds	r30, 0x021D
     c06:	80 91 1e 02 	lds	r24, 0x021E
     c0a:	e8 17       	cp	r30, r24
     c0c:	18 f0       	brcs	.+6      	; 0xc14 <peek+0x12>
     c0e:	ef ef       	ldi	r30, 0xFF	; 255
     c10:	ff ef       	ldi	r31, 0xFF	; 255
     c12:	06 c0       	rjmp	.+12     	; 0xc20 <peek+0x1e>
    value = rxBuffer[rxBufferIndex];
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	ef 55       	subi	r30, 0x5F	; 95
     c18:	fd 4f       	sbci	r31, 0xFD	; 253
     c1a:	80 81       	ld	r24, Z
     c1c:	e8 2f       	mov	r30, r24
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
  }

  return value;
}
     c20:	cf 01       	movw	r24, r30
     c22:	08 95       	ret

00000c24 <writeTo>:
	ADXL345_Yaxis = (((int)_buff[3]) << 8) | _buff[2];
	ADXL345_Zaxis = (((int)_buff[5]) << 8) | _buff[4];
}

void writeTo(uint8_t address, uint8_t val) 
{
     c24:	1f 93       	push	r17
     c26:	16 2f       	mov	r17, r22
}

void beginTransmission(int address)
{
  // indicate that we are transmitting
  transmitting = 1;
     c28:	91 e0       	ldi	r25, 0x01	; 1
     c2a:	90 93 22 02 	sts	0x0222, r25
  // set address of targeted slave
  txAddress = address;
     c2e:	93 e5       	ldi	r25, 0x53	; 83
     c30:	90 93 1f 02 	sts	0x021F, r25
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     c34:	10 92 20 02 	sts	0x0220, r1
  txBufferLength = 0;
     c38:	10 92 21 02 	sts	0x0221, r1
	beginTransmission(DEVICE); // start transmission to device 
	write(address);             // send register address
     c3c:	0e 94 b8 05 	call	0xb70	; 0xb70 <write>
	write(val);                 // send value to write
     c40:	81 2f       	mov	r24, r17
     c42:	0e 94 b8 05 	call	0xb70	; 0xb70 <write>
	endTransmission();         // end transmission
}
     c46:	1f 91       	pop	r17
     c48:	08 95       	ret

00000c4a <ADXL345_init>:
void writeTo(uint8_t address, uint8_t val);
void readFrom(uint8_t address, int num, uint8_t _buff[]);

void ADXL345_init(void)
{
	writeTo(DATA_FORMAT, 0x01);
     c4a:	80 91 0e 02 	lds	r24, 0x020E
     c4e:	61 e0       	ldi	r22, 0x01	; 1
     c50:	0e 94 12 06 	call	0xc24	; 0xc24 <writeTo>
	writeTo(POWER_CTL, 0x08);
     c54:	80 91 0d 02 	lds	r24, 0x020D
     c58:	68 e0       	ldi	r22, 0x08	; 8
     c5a:	0e 94 12 06 	call	0xc24	; 0xc24 <writeTo>
}
     c5e:	08 95       	ret

00000c60 <readFrom>:
	write(val);                 // send value to write
	endTransmission();         // end transmission
}

void readFrom(uint8_t address, int num, uint8_t _buff[]) 
{
     c60:	df 92       	push	r13
     c62:	ef 92       	push	r14
     c64:	ff 92       	push	r15
     c66:	0f 93       	push	r16
     c68:	1f 93       	push	r17
     c6a:	f6 2e       	mov	r15, r22
     c6c:	e4 2e       	mov	r14, r20
     c6e:	d5 2e       	mov	r13, r21
}

void beginTransmission(int address)
{
  // indicate that we are transmitting
  transmitting = 1;
     c70:	01 e0       	ldi	r16, 0x01	; 1
     c72:	00 93 22 02 	sts	0x0222, r16
  // set address of targeted slave
  txAddress = address;
     c76:	13 e5       	ldi	r17, 0x53	; 83
     c78:	10 93 1f 02 	sts	0x021F, r17
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     c7c:	10 92 20 02 	sts	0x0220, r1
  txBufferLength = 0;
     c80:	10 92 21 02 	sts	0x0221, r1
	beginTransmission(DEVICE); // start transmission to device 
	write(address);             // sends address to read from
     c84:	0e 94 b8 05 	call	0xb70	; 0xb70 <write>
}

void beginTransmission(int address)
{
  // indicate that we are transmitting
  transmitting = 1;
     c88:	00 93 22 02 	sts	0x0222, r16
  // set address of targeted slave
  txAddress = address;
     c8c:	10 93 1f 02 	sts	0x021F, r17
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     c90:	10 92 20 02 	sts	0x0220, r1
  txBufferLength = 0;
     c94:	10 92 21 02 	sts	0x0221, r1
	endTransmission();         // end transmission
	
	beginTransmission(DEVICE); // start transmission to device
	requestFrom(DEVICE, num);    // request 6 bytes from device
     c98:	83 e5       	ldi	r24, 0x53	; 83
     c9a:	6f 2d       	mov	r22, r15
     c9c:	0e 94 aa 05 	call	0xb54	; 0xb54 <requestFrom>
     ca0:	2e 2d       	mov	r18, r14
     ca2:	3d 2d       	mov	r19, r13
     ca4:	c9 01       	movw	r24, r18
     ca6:	dc 01       	movw	r26, r24
     ca8:	0f c0       	rjmp	.+30     	; 0xcc8 <readFrom+0x68>
int read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     caa:	98 17       	cp	r25, r24
     cac:	18 f0       	brcs	.+6      	; 0xcb4 <readFrom+0x54>
     cae:	2f ef       	ldi	r18, 0xFF	; 255
     cb0:	3f ef       	ldi	r19, 0xFF	; 255
     cb2:	09 c0       	rjmp	.+18     	; 0xcc6 <readFrom+0x66>
    value = rxBuffer[rxBufferIndex];
     cb4:	e9 2f       	mov	r30, r25
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	ef 55       	subi	r30, 0x5F	; 95
     cba:	fd 4f       	sbci	r31, 0xFD	; 253
     cbc:	80 81       	ld	r24, Z
     cbe:	28 2f       	mov	r18, r24
    ++rxBufferIndex;
     cc0:	9f 5f       	subi	r25, 0xFF	; 255
     cc2:	90 93 1d 02 	sts	0x021D, r25
	
	
	int i = 0;
	while(available())         // device may send less than requested (abnormal)
	{ 
		_buff[i] = read();    // receive a byte
     cc6:	2d 93       	st	X+, r18
  return 1;
}

int available(void)
{
  return rxBufferLength - rxBufferIndex;
     cc8:	80 91 1e 02 	lds	r24, 0x021E
     ccc:	90 91 1d 02 	lds	r25, 0x021D
	beginTransmission(DEVICE); // start transmission to device
	requestFrom(DEVICE, num);    // request 6 bytes from device
	
	
	int i = 0;
	while(available())         // device may send less than requested (abnormal)
     cd0:	89 17       	cp	r24, r25
     cd2:	59 f7       	brne	.-42     	; 0xcaa <readFrom+0x4a>
	{ 
		_buff[i] = read();    // receive a byte
		i++;
	}
	endTransmission();         // end transmission
     cd4:	1f 91       	pop	r17
     cd6:	0f 91       	pop	r16
     cd8:	ff 90       	pop	r15
     cda:	ef 90       	pop	r14
     cdc:	df 90       	pop	r13
     cde:	08 95       	ret

00000ce0 <readAccel>:
}

void readAccel(void) 
{
	uint8_t howManyBytesToRead = 6;
	readFrom( DATAX0, howManyBytesToRead, _buff); //read the acceleration data from the ADXL345
     ce0:	80 91 0f 02 	lds	r24, 0x020F
     ce4:	66 e0       	ldi	r22, 0x06	; 6
     ce6:	70 e0       	ldi	r23, 0x00	; 0
     ce8:	45 e9       	ldi	r20, 0x95	; 149
     cea:	52 e0       	ldi	r21, 0x02	; 2
     cec:	0e 94 30 06 	call	0xc60	; 0xc60 <readFrom>

	// each axis reading comes in 10 bit resolution, ie 2 bytes.  Least Significat Byte first!!
	// thus we are converting both bytes in to one int
	ADXL345_Xaxis = (((int)_buff[1]) << 8) | _buff[0];   
     cf0:	90 91 97 02 	lds	r25, 0x0297
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	20 91 95 02 	lds	r18, 0x0295
     cfa:	30 91 96 02 	lds	r19, 0x0296
     cfe:	82 2b       	or	r24, r18
     d00:	93 2b       	or	r25, r19
     d02:	90 93 e2 02 	sts	0x02E2, r25
     d06:	80 93 e1 02 	sts	0x02E1, r24
	ADXL345_Yaxis = (((int)_buff[3]) << 8) | _buff[2];
     d0a:	90 91 9b 02 	lds	r25, 0x029B
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	20 91 99 02 	lds	r18, 0x0299
     d14:	30 91 9a 02 	lds	r19, 0x029A
     d18:	82 2b       	or	r24, r18
     d1a:	93 2b       	or	r25, r19
     d1c:	90 93 94 02 	sts	0x0294, r25
     d20:	80 93 93 02 	sts	0x0293, r24
	ADXL345_Zaxis = (((int)_buff[5]) << 8) | _buff[4];
     d24:	90 91 9f 02 	lds	r25, 0x029F
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	20 91 9d 02 	lds	r18, 0x029D
     d2e:	30 91 9e 02 	lds	r19, 0x029E
     d32:	82 2b       	or	r24, r18
     d34:	93 2b       	or	r25, r19
     d36:	90 93 92 02 	sts	0x0292, r25
     d3a:	80 93 91 02 	sts	0x0291, r24
}
     d3e:	08 95       	ret

00000d40 <main>:
#include <util/delay.h>
#include "LCD_640.h"
#include "ADXL345\ADXL345.h"

int main(void)
{	
     d40:	88 e8       	ldi	r24, 0x88	; 136
     d42:	93 e1       	ldi	r25, 0x13	; 19
     d44:	20 e7       	ldi	r18, 0x70	; 112
     d46:	31 e0       	ldi	r19, 0x01	; 1
     d48:	f9 01       	movw	r30, r18
     d4a:	31 97       	sbiw	r30, 0x01	; 1
     d4c:	f1 f7       	brne	.-4      	; 0xd4a <main+0xa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d4e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d50:	d9 f7       	brne	.-10     	; 0xd48 <main+0x8>
	_delay_ms(500);
	lcd_init();
     d52:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_init>
	begin();
     d56:	0e 94 93 05 	call	0xb26	; 0xb26 <begin>
	lcd_gotoxy1(0);
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_gotoxy1>
	lcd_string("X:");
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	92 e0       	ldi	r25, 0x02	; 2
     d64:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_string>
	while(1)
	{
		readAccel();
     d68:	0e 94 70 06 	call	0xce0	; 0xce0 <readAccel>
		lcd_gotoxy1(3);
     d6c:	83 e0       	ldi	r24, 0x03	; 3
     d6e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_gotoxy1>
		lcd_showvalue(ADXL345_Xaxis);
     d72:	60 91 e1 02 	lds	r22, 0x02E1
     d76:	70 91 e2 02 	lds	r23, 0x02E2
     d7a:	88 27       	eor	r24, r24
     d7c:	77 fd       	sbrc	r23, 7
     d7e:	80 95       	com	r24
     d80:	98 2f       	mov	r25, r24
     d82:	0e 94 09 02 	call	0x412	; 0x412 <lcd_showvalue>
		lcd_gotoxy2(3);
     d86:	83 e0       	ldi	r24, 0x03	; 3
     d88:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_gotoxy2>
		lcd_showvalue(ADXL345_Yaxis);
     d8c:	60 91 93 02 	lds	r22, 0x0293
     d90:	70 91 94 02 	lds	r23, 0x0294
     d94:	88 27       	eor	r24, r24
     d96:	77 fd       	sbrc	r23, 7
     d98:	80 95       	com	r24
     d9a:	98 2f       	mov	r25, r24
     d9c:	0e 94 09 02 	call	0x412	; 0x412 <lcd_showvalue>
     da0:	e3 cf       	rjmp	.-58     	; 0xd68 <main+0x28>

00000da2 <lcd_showvaluef>:
	}

}

void lcd_showvaluef(float num)
{
     da2:	ef 92       	push	r14
     da4:	ff 92       	push	r15
     da6:	0f 93       	push	r16
     da8:	1f 93       	push	r17
     daa:	df 93       	push	r29
     dac:	cf 93       	push	r28
     dae:	00 d0       	rcall	.+0      	; 0xdb0 <lcd_showvaluef+0xe>
     db0:	00 d0       	rcall	.+0      	; 0xdb2 <lcd_showvaluef+0x10>
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
     db6:	7b 01       	movw	r14, r22
     db8:	8c 01       	movw	r16, r24
	if (num < 0)
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	40 e0       	ldi	r20, 0x00	; 0
     dc0:	50 e0       	ldi	r21, 0x00	; 0
     dc2:	0e 94 15 07 	call	0xe2a	; 0xe2a <__cmpsf2>
     dc6:	88 23       	and	r24, r24
     dc8:	3c f4       	brge	.+14     	; 0xdd8 <lcd_showvaluef+0x36>
	{
		lcd_char('-');
     dca:	8d e2       	ldi	r24, 0x2D	; 45
     dcc:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_char>
		num = -num;
     dd0:	17 fb       	bst	r17, 7
     dd2:	10 95       	com	r17
     dd4:	17 f9       	bld	r17, 7
     dd6:	10 95       	com	r17
	unsigned long int l;
	double fraction,integer;

	l = (unsigned long int)num;

	lcd_showvalue(l);
     dd8:	c8 01       	movw	r24, r16
     dda:	b7 01       	movw	r22, r14
     ddc:	0e 94 19 07 	call	0xe32	; 0xe32 <__fixunssfsi>
     de0:	0e 94 09 02 	call	0x412	; 0x412 <lcd_showvalue>

	fraction = modf((double)num,&integer);
     de4:	c8 01       	movw	r24, r16
     de6:	b7 01       	movw	r22, r14
     de8:	ae 01       	movw	r20, r28
     dea:	4f 5f       	subi	r20, 0xFF	; 255
     dec:	5f 4f       	sbci	r21, 0xFF	; 255
     dee:	0e 94 92 07 	call	0xf24	; 0xf24 <modf>
     df2:	7b 01       	movw	r14, r22
     df4:	8c 01       	movw	r16, r24

	l = (unsigned long int)(fraction * 100000);

	lcd_char('.');
     df6:	8e e2       	ldi	r24, 0x2E	; 46
     df8:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_char>

	lcd_showvalue(l);
     dfc:	c8 01       	movw	r24, r16
     dfe:	b7 01       	movw	r22, r14
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	30 e5       	ldi	r19, 0x50	; 80
     e04:	43 ec       	ldi	r20, 0xC3	; 195
     e06:	57 e4       	ldi	r21, 0x47	; 71
     e08:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__mulsf3>
     e0c:	0e 94 19 07 	call	0xe32	; 0xe32 <__fixunssfsi>
     e10:	0e 94 09 02 	call	0x412	; 0x412 <lcd_showvalue>

}
     e14:	0f 90       	pop	r0
     e16:	0f 90       	pop	r0
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	cf 91       	pop	r28
     e1e:	df 91       	pop	r29
     e20:	1f 91       	pop	r17
     e22:	0f 91       	pop	r16
     e24:	ff 90       	pop	r15
     e26:	ef 90       	pop	r14
     e28:	08 95       	ret

00000e2a <__cmpsf2>:
     e2a:	2f d0       	rcall	.+94     	; 0xe8a <__fp_cmp>
     e2c:	08 f4       	brcc	.+2      	; 0xe30 <__cmpsf2+0x6>
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	08 95       	ret

00000e32 <__fixunssfsi>:
     e32:	57 d0       	rcall	.+174    	; 0xee2 <__fp_splitA>
     e34:	88 f0       	brcs	.+34     	; 0xe58 <__fixunssfsi+0x26>
     e36:	9f 57       	subi	r25, 0x7F	; 127
     e38:	90 f0       	brcs	.+36     	; 0xe5e <__fixunssfsi+0x2c>
     e3a:	b9 2f       	mov	r27, r25
     e3c:	99 27       	eor	r25, r25
     e3e:	b7 51       	subi	r27, 0x17	; 23
     e40:	a0 f0       	brcs	.+40     	; 0xe6a <__fixunssfsi+0x38>
     e42:	d1 f0       	breq	.+52     	; 0xe78 <__fixunssfsi+0x46>
     e44:	66 0f       	add	r22, r22
     e46:	77 1f       	adc	r23, r23
     e48:	88 1f       	adc	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	1a f0       	brmi	.+6      	; 0xe54 <__fixunssfsi+0x22>
     e4e:	ba 95       	dec	r27
     e50:	c9 f7       	brne	.-14     	; 0xe44 <__fixunssfsi+0x12>
     e52:	12 c0       	rjmp	.+36     	; 0xe78 <__fixunssfsi+0x46>
     e54:	b1 30       	cpi	r27, 0x01	; 1
     e56:	81 f0       	breq	.+32     	; 0xe78 <__fixunssfsi+0x46>
     e58:	5e d0       	rcall	.+188    	; 0xf16 <__fp_zero>
     e5a:	b1 e0       	ldi	r27, 0x01	; 1
     e5c:	08 95       	ret
     e5e:	5b c0       	rjmp	.+182    	; 0xf16 <__fp_zero>
     e60:	67 2f       	mov	r22, r23
     e62:	78 2f       	mov	r23, r24
     e64:	88 27       	eor	r24, r24
     e66:	b8 5f       	subi	r27, 0xF8	; 248
     e68:	39 f0       	breq	.+14     	; 0xe78 <__fixunssfsi+0x46>
     e6a:	b9 3f       	cpi	r27, 0xF9	; 249
     e6c:	cc f3       	brlt	.-14     	; 0xe60 <__fixunssfsi+0x2e>
     e6e:	86 95       	lsr	r24
     e70:	77 95       	ror	r23
     e72:	67 95       	ror	r22
     e74:	b3 95       	inc	r27
     e76:	d9 f7       	brne	.-10     	; 0xe6e <__fixunssfsi+0x3c>
     e78:	3e f4       	brtc	.+14     	; 0xe88 <__fixunssfsi+0x56>
     e7a:	90 95       	com	r25
     e7c:	80 95       	com	r24
     e7e:	70 95       	com	r23
     e80:	61 95       	neg	r22
     e82:	7f 4f       	sbci	r23, 0xFF	; 255
     e84:	8f 4f       	sbci	r24, 0xFF	; 255
     e86:	9f 4f       	sbci	r25, 0xFF	; 255
     e88:	08 95       	ret

00000e8a <__fp_cmp>:
     e8a:	99 0f       	add	r25, r25
     e8c:	00 08       	sbc	r0, r0
     e8e:	55 0f       	add	r21, r21
     e90:	aa 0b       	sbc	r26, r26
     e92:	e0 e8       	ldi	r30, 0x80	; 128
     e94:	fe ef       	ldi	r31, 0xFE	; 254
     e96:	16 16       	cp	r1, r22
     e98:	17 06       	cpc	r1, r23
     e9a:	e8 07       	cpc	r30, r24
     e9c:	f9 07       	cpc	r31, r25
     e9e:	c0 f0       	brcs	.+48     	; 0xed0 <__fp_cmp+0x46>
     ea0:	12 16       	cp	r1, r18
     ea2:	13 06       	cpc	r1, r19
     ea4:	e4 07       	cpc	r30, r20
     ea6:	f5 07       	cpc	r31, r21
     ea8:	98 f0       	brcs	.+38     	; 0xed0 <__fp_cmp+0x46>
     eaa:	62 1b       	sub	r22, r18
     eac:	73 0b       	sbc	r23, r19
     eae:	84 0b       	sbc	r24, r20
     eb0:	95 0b       	sbc	r25, r21
     eb2:	39 f4       	brne	.+14     	; 0xec2 <__fp_cmp+0x38>
     eb4:	0a 26       	eor	r0, r26
     eb6:	61 f0       	breq	.+24     	; 0xed0 <__fp_cmp+0x46>
     eb8:	23 2b       	or	r18, r19
     eba:	24 2b       	or	r18, r20
     ebc:	25 2b       	or	r18, r21
     ebe:	21 f4       	brne	.+8      	; 0xec8 <__fp_cmp+0x3e>
     ec0:	08 95       	ret
     ec2:	0a 26       	eor	r0, r26
     ec4:	09 f4       	brne	.+2      	; 0xec8 <__fp_cmp+0x3e>
     ec6:	a1 40       	sbci	r26, 0x01	; 1
     ec8:	a6 95       	lsr	r26
     eca:	8f ef       	ldi	r24, 0xFF	; 255
     ecc:	81 1d       	adc	r24, r1
     ece:	81 1d       	adc	r24, r1
     ed0:	08 95       	ret

00000ed2 <__fp_split3>:
     ed2:	57 fd       	sbrc	r21, 7
     ed4:	90 58       	subi	r25, 0x80	; 128
     ed6:	44 0f       	add	r20, r20
     ed8:	55 1f       	adc	r21, r21
     eda:	59 f0       	breq	.+22     	; 0xef2 <__fp_splitA+0x10>
     edc:	5f 3f       	cpi	r21, 0xFF	; 255
     ede:	71 f0       	breq	.+28     	; 0xefc <__fp_splitA+0x1a>
     ee0:	47 95       	ror	r20

00000ee2 <__fp_splitA>:
     ee2:	88 0f       	add	r24, r24
     ee4:	97 fb       	bst	r25, 7
     ee6:	99 1f       	adc	r25, r25
     ee8:	61 f0       	breq	.+24     	; 0xf02 <__fp_splitA+0x20>
     eea:	9f 3f       	cpi	r25, 0xFF	; 255
     eec:	79 f0       	breq	.+30     	; 0xf0c <__fp_splitA+0x2a>
     eee:	87 95       	ror	r24
     ef0:	08 95       	ret
     ef2:	12 16       	cp	r1, r18
     ef4:	13 06       	cpc	r1, r19
     ef6:	14 06       	cpc	r1, r20
     ef8:	55 1f       	adc	r21, r21
     efa:	f2 cf       	rjmp	.-28     	; 0xee0 <__fp_split3+0xe>
     efc:	46 95       	lsr	r20
     efe:	f1 df       	rcall	.-30     	; 0xee2 <__fp_splitA>
     f00:	08 c0       	rjmp	.+16     	; 0xf12 <__fp_splitA+0x30>
     f02:	16 16       	cp	r1, r22
     f04:	17 06       	cpc	r1, r23
     f06:	18 06       	cpc	r1, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	f1 cf       	rjmp	.-30     	; 0xeee <__fp_splitA+0xc>
     f0c:	86 95       	lsr	r24
     f0e:	71 05       	cpc	r23, r1
     f10:	61 05       	cpc	r22, r1
     f12:	08 94       	sec
     f14:	08 95       	ret

00000f16 <__fp_zero>:
     f16:	e8 94       	clt

00000f18 <__fp_szero>:
     f18:	bb 27       	eor	r27, r27
     f1a:	66 27       	eor	r22, r22
     f1c:	77 27       	eor	r23, r23
     f1e:	cb 01       	movw	r24, r22
     f20:	97 f9       	bld	r25, 7
     f22:	08 95       	ret

00000f24 <modf>:
     f24:	fa 01       	movw	r30, r20
     f26:	dc 01       	movw	r26, r24
     f28:	aa 0f       	add	r26, r26
     f2a:	bb 1f       	adc	r27, r27
     f2c:	9b 01       	movw	r18, r22
     f2e:	ac 01       	movw	r20, r24
     f30:	bf 57       	subi	r27, 0x7F	; 127
     f32:	28 f4       	brcc	.+10     	; 0xf3e <modf+0x1a>
     f34:	22 27       	eor	r18, r18
     f36:	33 27       	eor	r19, r19
     f38:	44 27       	eor	r20, r20
     f3a:	50 78       	andi	r21, 0x80	; 128
     f3c:	1f c0       	rjmp	.+62     	; 0xf7c <modf+0x58>
     f3e:	b7 51       	subi	r27, 0x17	; 23
     f40:	88 f4       	brcc	.+34     	; 0xf64 <modf+0x40>
     f42:	ab 2f       	mov	r26, r27
     f44:	00 24       	eor	r0, r0
     f46:	46 95       	lsr	r20
     f48:	37 95       	ror	r19
     f4a:	27 95       	ror	r18
     f4c:	01 1c       	adc	r0, r1
     f4e:	a3 95       	inc	r26
     f50:	d2 f3       	brmi	.-12     	; 0xf46 <modf+0x22>
     f52:	00 20       	and	r0, r0
     f54:	69 f0       	breq	.+26     	; 0xf70 <modf+0x4c>
     f56:	22 0f       	add	r18, r18
     f58:	33 1f       	adc	r19, r19
     f5a:	44 1f       	adc	r20, r20
     f5c:	b3 95       	inc	r27
     f5e:	da f3       	brmi	.-10     	; 0xf56 <modf+0x32>
     f60:	0d d0       	rcall	.+26     	; 0xf7c <modf+0x58>
     f62:	76 c0       	rjmp	.+236    	; 0x1050 <__subsf3>
     f64:	61 30       	cpi	r22, 0x01	; 1
     f66:	71 05       	cpc	r23, r1
     f68:	a0 e8       	ldi	r26, 0x80	; 128
     f6a:	8a 07       	cpc	r24, r26
     f6c:	b9 46       	sbci	r27, 0x69	; 105
     f6e:	30 f4       	brcc	.+12     	; 0xf7c <modf+0x58>
     f70:	9b 01       	movw	r18, r22
     f72:	ac 01       	movw	r20, r24
     f74:	66 27       	eor	r22, r22
     f76:	77 27       	eor	r23, r23
     f78:	88 27       	eor	r24, r24
     f7a:	90 78       	andi	r25, 0x80	; 128
     f7c:	30 96       	adiw	r30, 0x00	; 0
     f7e:	21 f0       	breq	.+8      	; 0xf88 <modf+0x64>
     f80:	20 83       	st	Z, r18
     f82:	31 83       	std	Z+1, r19	; 0x01
     f84:	42 83       	std	Z+2, r20	; 0x02
     f86:	53 83       	std	Z+3, r21	; 0x03
     f88:	08 95       	ret

00000f8a <__mulsf3>:
     f8a:	0b d0       	rcall	.+22     	; 0xfa2 <__mulsf3x>
     f8c:	dd c0       	rjmp	.+442    	; 0x1148 <__fp_round>
     f8e:	ce d0       	rcall	.+412    	; 0x112c <__fp_pscA>
     f90:	28 f0       	brcs	.+10     	; 0xf9c <__mulsf3+0x12>
     f92:	d3 d0       	rcall	.+422    	; 0x113a <__fp_pscB>
     f94:	18 f0       	brcs	.+6      	; 0xf9c <__mulsf3+0x12>
     f96:	95 23       	and	r25, r21
     f98:	09 f0       	breq	.+2      	; 0xf9c <__mulsf3+0x12>
     f9a:	bf c0       	rjmp	.+382    	; 0x111a <__fp_inf>
     f9c:	c4 c0       	rjmp	.+392    	; 0x1126 <__fp_nan>
     f9e:	11 24       	eor	r1, r1
     fa0:	bb cf       	rjmp	.-138    	; 0xf18 <__fp_szero>

00000fa2 <__mulsf3x>:
     fa2:	97 df       	rcall	.-210    	; 0xed2 <__fp_split3>
     fa4:	a0 f3       	brcs	.-24     	; 0xf8e <__mulsf3+0x4>

00000fa6 <__mulsf3_pse>:
     fa6:	95 9f       	mul	r25, r21
     fa8:	d1 f3       	breq	.-12     	; 0xf9e <__mulsf3+0x14>
     faa:	95 0f       	add	r25, r21
     fac:	50 e0       	ldi	r21, 0x00	; 0
     fae:	55 1f       	adc	r21, r21
     fb0:	62 9f       	mul	r22, r18
     fb2:	f0 01       	movw	r30, r0
     fb4:	72 9f       	mul	r23, r18
     fb6:	bb 27       	eor	r27, r27
     fb8:	f0 0d       	add	r31, r0
     fba:	b1 1d       	adc	r27, r1
     fbc:	63 9f       	mul	r22, r19
     fbe:	aa 27       	eor	r26, r26
     fc0:	f0 0d       	add	r31, r0
     fc2:	b1 1d       	adc	r27, r1
     fc4:	aa 1f       	adc	r26, r26
     fc6:	64 9f       	mul	r22, r20
     fc8:	66 27       	eor	r22, r22
     fca:	b0 0d       	add	r27, r0
     fcc:	a1 1d       	adc	r26, r1
     fce:	66 1f       	adc	r22, r22
     fd0:	82 9f       	mul	r24, r18
     fd2:	22 27       	eor	r18, r18
     fd4:	b0 0d       	add	r27, r0
     fd6:	a1 1d       	adc	r26, r1
     fd8:	62 1f       	adc	r22, r18
     fda:	73 9f       	mul	r23, r19
     fdc:	b0 0d       	add	r27, r0
     fde:	a1 1d       	adc	r26, r1
     fe0:	62 1f       	adc	r22, r18
     fe2:	83 9f       	mul	r24, r19
     fe4:	a0 0d       	add	r26, r0
     fe6:	61 1d       	adc	r22, r1
     fe8:	22 1f       	adc	r18, r18
     fea:	74 9f       	mul	r23, r20
     fec:	33 27       	eor	r19, r19
     fee:	a0 0d       	add	r26, r0
     ff0:	61 1d       	adc	r22, r1
     ff2:	23 1f       	adc	r18, r19
     ff4:	84 9f       	mul	r24, r20
     ff6:	60 0d       	add	r22, r0
     ff8:	21 1d       	adc	r18, r1
     ffa:	82 2f       	mov	r24, r18
     ffc:	76 2f       	mov	r23, r22
     ffe:	6a 2f       	mov	r22, r26
    1000:	11 24       	eor	r1, r1
    1002:	9f 57       	subi	r25, 0x7F	; 127
    1004:	50 40       	sbci	r21, 0x00	; 0
    1006:	8a f0       	brmi	.+34     	; 0x102a <__mulsf3_pse+0x84>
    1008:	e1 f0       	breq	.+56     	; 0x1042 <__mulsf3_pse+0x9c>
    100a:	88 23       	and	r24, r24
    100c:	4a f0       	brmi	.+18     	; 0x1020 <__mulsf3_pse+0x7a>
    100e:	ee 0f       	add	r30, r30
    1010:	ff 1f       	adc	r31, r31
    1012:	bb 1f       	adc	r27, r27
    1014:	66 1f       	adc	r22, r22
    1016:	77 1f       	adc	r23, r23
    1018:	88 1f       	adc	r24, r24
    101a:	91 50       	subi	r25, 0x01	; 1
    101c:	50 40       	sbci	r21, 0x00	; 0
    101e:	a9 f7       	brne	.-22     	; 0x100a <__mulsf3_pse+0x64>
    1020:	9e 3f       	cpi	r25, 0xFE	; 254
    1022:	51 05       	cpc	r21, r1
    1024:	70 f0       	brcs	.+28     	; 0x1042 <__mulsf3_pse+0x9c>
    1026:	79 c0       	rjmp	.+242    	; 0x111a <__fp_inf>
    1028:	77 cf       	rjmp	.-274    	; 0xf18 <__fp_szero>
    102a:	5f 3f       	cpi	r21, 0xFF	; 255
    102c:	ec f3       	brlt	.-6      	; 0x1028 <__mulsf3_pse+0x82>
    102e:	98 3e       	cpi	r25, 0xE8	; 232
    1030:	dc f3       	brlt	.-10     	; 0x1028 <__mulsf3_pse+0x82>
    1032:	86 95       	lsr	r24
    1034:	77 95       	ror	r23
    1036:	67 95       	ror	r22
    1038:	b7 95       	ror	r27
    103a:	f7 95       	ror	r31
    103c:	e7 95       	ror	r30
    103e:	9f 5f       	subi	r25, 0xFF	; 255
    1040:	c1 f7       	brne	.-16     	; 0x1032 <__mulsf3_pse+0x8c>
    1042:	fe 2b       	or	r31, r30
    1044:	88 0f       	add	r24, r24
    1046:	91 1d       	adc	r25, r1
    1048:	96 95       	lsr	r25
    104a:	87 95       	ror	r24
    104c:	97 f9       	bld	r25, 7
    104e:	08 95       	ret

00001050 <__subsf3>:
    1050:	50 58       	subi	r21, 0x80	; 128

00001052 <__addsf3>:
    1052:	bb 27       	eor	r27, r27
    1054:	aa 27       	eor	r26, r26
    1056:	0e d0       	rcall	.+28     	; 0x1074 <__addsf3x>
    1058:	77 c0       	rjmp	.+238    	; 0x1148 <__fp_round>
    105a:	68 d0       	rcall	.+208    	; 0x112c <__fp_pscA>
    105c:	30 f0       	brcs	.+12     	; 0x106a <__addsf3+0x18>
    105e:	6d d0       	rcall	.+218    	; 0x113a <__fp_pscB>
    1060:	20 f0       	brcs	.+8      	; 0x106a <__addsf3+0x18>
    1062:	31 f4       	brne	.+12     	; 0x1070 <__addsf3+0x1e>
    1064:	9f 3f       	cpi	r25, 0xFF	; 255
    1066:	11 f4       	brne	.+4      	; 0x106c <__addsf3+0x1a>
    1068:	1e f4       	brtc	.+6      	; 0x1070 <__addsf3+0x1e>
    106a:	5d c0       	rjmp	.+186    	; 0x1126 <__fp_nan>
    106c:	0e f4       	brtc	.+2      	; 0x1070 <__addsf3+0x1e>
    106e:	e0 95       	com	r30
    1070:	e7 fb       	bst	r30, 7
    1072:	53 c0       	rjmp	.+166    	; 0x111a <__fp_inf>

00001074 <__addsf3x>:
    1074:	e9 2f       	mov	r30, r25
    1076:	2d df       	rcall	.-422    	; 0xed2 <__fp_split3>
    1078:	80 f3       	brcs	.-32     	; 0x105a <__addsf3+0x8>
    107a:	ba 17       	cp	r27, r26
    107c:	62 07       	cpc	r22, r18
    107e:	73 07       	cpc	r23, r19
    1080:	84 07       	cpc	r24, r20
    1082:	95 07       	cpc	r25, r21
    1084:	18 f0       	brcs	.+6      	; 0x108c <__addsf3x+0x18>
    1086:	71 f4       	brne	.+28     	; 0x10a4 <__addsf3x+0x30>
    1088:	9e f5       	brtc	.+102    	; 0x10f0 <__addsf3x+0x7c>
    108a:	45 cf       	rjmp	.-374    	; 0xf16 <__fp_zero>
    108c:	0e f4       	brtc	.+2      	; 0x1090 <__addsf3x+0x1c>
    108e:	e0 95       	com	r30
    1090:	0b 2e       	mov	r0, r27
    1092:	ba 2f       	mov	r27, r26
    1094:	a0 2d       	mov	r26, r0
    1096:	0b 01       	movw	r0, r22
    1098:	b9 01       	movw	r22, r18
    109a:	90 01       	movw	r18, r0
    109c:	0c 01       	movw	r0, r24
    109e:	ca 01       	movw	r24, r20
    10a0:	a0 01       	movw	r20, r0
    10a2:	11 24       	eor	r1, r1
    10a4:	ff 27       	eor	r31, r31
    10a6:	59 1b       	sub	r21, r25
    10a8:	99 f0       	breq	.+38     	; 0x10d0 <__addsf3x+0x5c>
    10aa:	59 3f       	cpi	r21, 0xF9	; 249
    10ac:	50 f4       	brcc	.+20     	; 0x10c2 <__addsf3x+0x4e>
    10ae:	50 3e       	cpi	r21, 0xE0	; 224
    10b0:	68 f1       	brcs	.+90     	; 0x110c <__addsf3x+0x98>
    10b2:	1a 16       	cp	r1, r26
    10b4:	f0 40       	sbci	r31, 0x00	; 0
    10b6:	a2 2f       	mov	r26, r18
    10b8:	23 2f       	mov	r18, r19
    10ba:	34 2f       	mov	r19, r20
    10bc:	44 27       	eor	r20, r20
    10be:	58 5f       	subi	r21, 0xF8	; 248
    10c0:	f3 cf       	rjmp	.-26     	; 0x10a8 <__addsf3x+0x34>
    10c2:	46 95       	lsr	r20
    10c4:	37 95       	ror	r19
    10c6:	27 95       	ror	r18
    10c8:	a7 95       	ror	r26
    10ca:	f0 40       	sbci	r31, 0x00	; 0
    10cc:	53 95       	inc	r21
    10ce:	c9 f7       	brne	.-14     	; 0x10c2 <__addsf3x+0x4e>
    10d0:	7e f4       	brtc	.+30     	; 0x10f0 <__addsf3x+0x7c>
    10d2:	1f 16       	cp	r1, r31
    10d4:	ba 0b       	sbc	r27, r26
    10d6:	62 0b       	sbc	r22, r18
    10d8:	73 0b       	sbc	r23, r19
    10da:	84 0b       	sbc	r24, r20
    10dc:	ba f0       	brmi	.+46     	; 0x110c <__addsf3x+0x98>
    10de:	91 50       	subi	r25, 0x01	; 1
    10e0:	a1 f0       	breq	.+40     	; 0x110a <__addsf3x+0x96>
    10e2:	ff 0f       	add	r31, r31
    10e4:	bb 1f       	adc	r27, r27
    10e6:	66 1f       	adc	r22, r22
    10e8:	77 1f       	adc	r23, r23
    10ea:	88 1f       	adc	r24, r24
    10ec:	c2 f7       	brpl	.-16     	; 0x10de <__addsf3x+0x6a>
    10ee:	0e c0       	rjmp	.+28     	; 0x110c <__addsf3x+0x98>
    10f0:	ba 0f       	add	r27, r26
    10f2:	62 1f       	adc	r22, r18
    10f4:	73 1f       	adc	r23, r19
    10f6:	84 1f       	adc	r24, r20
    10f8:	48 f4       	brcc	.+18     	; 0x110c <__addsf3x+0x98>
    10fa:	87 95       	ror	r24
    10fc:	77 95       	ror	r23
    10fe:	67 95       	ror	r22
    1100:	b7 95       	ror	r27
    1102:	f7 95       	ror	r31
    1104:	9e 3f       	cpi	r25, 0xFE	; 254
    1106:	08 f0       	brcs	.+2      	; 0x110a <__addsf3x+0x96>
    1108:	b3 cf       	rjmp	.-154    	; 0x1070 <__addsf3+0x1e>
    110a:	93 95       	inc	r25
    110c:	88 0f       	add	r24, r24
    110e:	08 f0       	brcs	.+2      	; 0x1112 <__addsf3x+0x9e>
    1110:	99 27       	eor	r25, r25
    1112:	ee 0f       	add	r30, r30
    1114:	97 95       	ror	r25
    1116:	87 95       	ror	r24
    1118:	08 95       	ret

0000111a <__fp_inf>:
    111a:	97 f9       	bld	r25, 7
    111c:	9f 67       	ori	r25, 0x7F	; 127
    111e:	80 e8       	ldi	r24, 0x80	; 128
    1120:	70 e0       	ldi	r23, 0x00	; 0
    1122:	60 e0       	ldi	r22, 0x00	; 0
    1124:	08 95       	ret

00001126 <__fp_nan>:
    1126:	9f ef       	ldi	r25, 0xFF	; 255
    1128:	80 ec       	ldi	r24, 0xC0	; 192
    112a:	08 95       	ret

0000112c <__fp_pscA>:
    112c:	00 24       	eor	r0, r0
    112e:	0a 94       	dec	r0
    1130:	16 16       	cp	r1, r22
    1132:	17 06       	cpc	r1, r23
    1134:	18 06       	cpc	r1, r24
    1136:	09 06       	cpc	r0, r25
    1138:	08 95       	ret

0000113a <__fp_pscB>:
    113a:	00 24       	eor	r0, r0
    113c:	0a 94       	dec	r0
    113e:	12 16       	cp	r1, r18
    1140:	13 06       	cpc	r1, r19
    1142:	14 06       	cpc	r1, r20
    1144:	05 06       	cpc	r0, r21
    1146:	08 95       	ret

00001148 <__fp_round>:
    1148:	09 2e       	mov	r0, r25
    114a:	03 94       	inc	r0
    114c:	00 0c       	add	r0, r0
    114e:	11 f4       	brne	.+4      	; 0x1154 <__fp_round+0xc>
    1150:	88 23       	and	r24, r24
    1152:	52 f0       	brmi	.+20     	; 0x1168 <__fp_round+0x20>
    1154:	bb 0f       	add	r27, r27
    1156:	40 f4       	brcc	.+16     	; 0x1168 <__fp_round+0x20>
    1158:	bf 2b       	or	r27, r31
    115a:	11 f4       	brne	.+4      	; 0x1160 <__fp_round+0x18>
    115c:	60 ff       	sbrs	r22, 0
    115e:	04 c0       	rjmp	.+8      	; 0x1168 <__fp_round+0x20>
    1160:	6f 5f       	subi	r22, 0xFF	; 255
    1162:	7f 4f       	sbci	r23, 0xFF	; 255
    1164:	8f 4f       	sbci	r24, 0xFF	; 255
    1166:	9f 4f       	sbci	r25, 0xFF	; 255
    1168:	08 95       	ret

0000116a <__mulsi3>:
    116a:	62 9f       	mul	r22, r18
    116c:	d0 01       	movw	r26, r0
    116e:	73 9f       	mul	r23, r19
    1170:	f0 01       	movw	r30, r0
    1172:	82 9f       	mul	r24, r18
    1174:	e0 0d       	add	r30, r0
    1176:	f1 1d       	adc	r31, r1
    1178:	64 9f       	mul	r22, r20
    117a:	e0 0d       	add	r30, r0
    117c:	f1 1d       	adc	r31, r1
    117e:	92 9f       	mul	r25, r18
    1180:	f0 0d       	add	r31, r0
    1182:	83 9f       	mul	r24, r19
    1184:	f0 0d       	add	r31, r0
    1186:	74 9f       	mul	r23, r20
    1188:	f0 0d       	add	r31, r0
    118a:	65 9f       	mul	r22, r21
    118c:	f0 0d       	add	r31, r0
    118e:	99 27       	eor	r25, r25
    1190:	72 9f       	mul	r23, r18
    1192:	b0 0d       	add	r27, r0
    1194:	e1 1d       	adc	r30, r1
    1196:	f9 1f       	adc	r31, r25
    1198:	63 9f       	mul	r22, r19
    119a:	b0 0d       	add	r27, r0
    119c:	e1 1d       	adc	r30, r1
    119e:	f9 1f       	adc	r31, r25
    11a0:	bd 01       	movw	r22, r26
    11a2:	cf 01       	movw	r24, r30
    11a4:	11 24       	eor	r1, r1
    11a6:	08 95       	ret

000011a8 <__udivmodhi4>:
    11a8:	aa 1b       	sub	r26, r26
    11aa:	bb 1b       	sub	r27, r27
    11ac:	51 e1       	ldi	r21, 0x11	; 17
    11ae:	07 c0       	rjmp	.+14     	; 0x11be <__udivmodhi4_ep>

000011b0 <__udivmodhi4_loop>:
    11b0:	aa 1f       	adc	r26, r26
    11b2:	bb 1f       	adc	r27, r27
    11b4:	a6 17       	cp	r26, r22
    11b6:	b7 07       	cpc	r27, r23
    11b8:	10 f0       	brcs	.+4      	; 0x11be <__udivmodhi4_ep>
    11ba:	a6 1b       	sub	r26, r22
    11bc:	b7 0b       	sbc	r27, r23

000011be <__udivmodhi4_ep>:
    11be:	88 1f       	adc	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	5a 95       	dec	r21
    11c4:	a9 f7       	brne	.-22     	; 0x11b0 <__udivmodhi4_loop>
    11c6:	80 95       	com	r24
    11c8:	90 95       	com	r25
    11ca:	bc 01       	movw	r22, r24
    11cc:	cd 01       	movw	r24, r26
    11ce:	08 95       	ret

000011d0 <__udivmodsi4>:
    11d0:	a1 e2       	ldi	r26, 0x21	; 33
    11d2:	1a 2e       	mov	r1, r26
    11d4:	aa 1b       	sub	r26, r26
    11d6:	bb 1b       	sub	r27, r27
    11d8:	fd 01       	movw	r30, r26
    11da:	0d c0       	rjmp	.+26     	; 0x11f6 <__udivmodsi4_ep>

000011dc <__udivmodsi4_loop>:
    11dc:	aa 1f       	adc	r26, r26
    11de:	bb 1f       	adc	r27, r27
    11e0:	ee 1f       	adc	r30, r30
    11e2:	ff 1f       	adc	r31, r31
    11e4:	a2 17       	cp	r26, r18
    11e6:	b3 07       	cpc	r27, r19
    11e8:	e4 07       	cpc	r30, r20
    11ea:	f5 07       	cpc	r31, r21
    11ec:	20 f0       	brcs	.+8      	; 0x11f6 <__udivmodsi4_ep>
    11ee:	a2 1b       	sub	r26, r18
    11f0:	b3 0b       	sbc	r27, r19
    11f2:	e4 0b       	sbc	r30, r20
    11f4:	f5 0b       	sbc	r31, r21

000011f6 <__udivmodsi4_ep>:
    11f6:	66 1f       	adc	r22, r22
    11f8:	77 1f       	adc	r23, r23
    11fa:	88 1f       	adc	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	1a 94       	dec	r1
    1200:	69 f7       	brne	.-38     	; 0x11dc <__udivmodsi4_loop>
    1202:	60 95       	com	r22
    1204:	70 95       	com	r23
    1206:	80 95       	com	r24
    1208:	90 95       	com	r25
    120a:	9b 01       	movw	r18, r22
    120c:	ac 01       	movw	r20, r24
    120e:	bd 01       	movw	r22, r26
    1210:	cf 01       	movw	r24, r30
    1212:	08 95       	ret

00001214 <__divmodsi4>:
    1214:	97 fb       	bst	r25, 7
    1216:	09 2e       	mov	r0, r25
    1218:	05 26       	eor	r0, r21
    121a:	0e d0       	rcall	.+28     	; 0x1238 <__divmodsi4_neg1>
    121c:	57 fd       	sbrc	r21, 7
    121e:	04 d0       	rcall	.+8      	; 0x1228 <__divmodsi4_neg2>
    1220:	d7 df       	rcall	.-82     	; 0x11d0 <__udivmodsi4>
    1222:	0a d0       	rcall	.+20     	; 0x1238 <__divmodsi4_neg1>
    1224:	00 1c       	adc	r0, r0
    1226:	38 f4       	brcc	.+14     	; 0x1236 <__divmodsi4_exit>

00001228 <__divmodsi4_neg2>:
    1228:	50 95       	com	r21
    122a:	40 95       	com	r20
    122c:	30 95       	com	r19
    122e:	21 95       	neg	r18
    1230:	3f 4f       	sbci	r19, 0xFF	; 255
    1232:	4f 4f       	sbci	r20, 0xFF	; 255
    1234:	5f 4f       	sbci	r21, 0xFF	; 255

00001236 <__divmodsi4_exit>:
    1236:	08 95       	ret

00001238 <__divmodsi4_neg1>:
    1238:	f6 f7       	brtc	.-4      	; 0x1236 <__divmodsi4_exit>
    123a:	90 95       	com	r25
    123c:	80 95       	com	r24
    123e:	70 95       	com	r23
    1240:	61 95       	neg	r22
    1242:	7f 4f       	sbci	r23, 0xFF	; 255
    1244:	8f 4f       	sbci	r24, 0xFF	; 255
    1246:	9f 4f       	sbci	r25, 0xFF	; 255
    1248:	08 95       	ret

0000124a <_exit>:
    124a:	f8 94       	cli

0000124c <__stop_program>:
    124c:	ff cf       	rjmp	.-2      	; 0x124c <__stop_program>
