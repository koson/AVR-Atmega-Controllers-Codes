
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000268  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000268  000002dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080006a  00000272  000002e6  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000002e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000011b  00000000  00000000  00000306  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000384  00000000  00000000  00000421  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000176  00000000  00000000  000007a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d7  00000000  00000000  0000091b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00000bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000010c  00000000  00000000  00000cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010d  00000000  00000000  00000de0  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e6       	ldi	r30, 0x68	; 104
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 10 01 	call	0x220	; 0x220 <main>
  8a:	0c 94 32 01 	jmp	0x264	; 0x264 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <ports_init>:
#define TOGGLEBIT(x,b)  x^=b;


/************************************************/
void ports_init(void)
{
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	84 bb       	out	0x14, r24	; 20
DDRC=0XFF;
DDRB=0XFF;
  96:	87 bb       	out	0x17, r24	; 23
DDRD=0XFF;
  98:	81 bb       	out	0x11, r24	; 17
DDRA=0XFF;
  9a:	8a bb       	out	0x1a, r24	; 26
}
  9c:	08 95       	ret

0000009e <toggleE>:
	lcd_cmd(0x06);
	lcd_cmd(LINE1);	
}

void toggleE(void)
{
  9e:	c1 9a       	sbi	0x18, 1	; 24
CLEARBIT(PORTB,BIT(1));
}

void WaitMs(unsigned int ms)
{
	for(j=0;j<ms;j++)
  a0:	88 ec       	ldi	r24, 0xC8	; 200
  a2:	80 93 6a 00 	sts	0x006A, r24
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	80 93 6b 00 	sts	0x006B, r24

void toggleE(void)
{
SETBIT(PORTB,BIT(1));
WaitMs(1);
CLEARBIT(PORTB,BIT(1));
  ac:	c1 98       	cbi	0x18, 1	; 24
}
  ae:	08 95       	ret

000000b0 <WaitMs>:

void WaitMs(unsigned int ms)
{
  b0:	ac 01       	movw	r20, r24
  b2:	30 91 6a 00 	lds	r19, 0x006A
  b6:	20 e0       	ldi	r18, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <WaitMs+0xe>
	for(j=0;j<ms;j++)
  ba:	2f 5f       	subi	r18, 0xFF	; 255
  bc:	38 ec       	ldi	r19, 0xC8	; 200
  be:	82 2f       	mov	r24, r18
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	84 17       	cp	r24, r20
  c4:	95 07       	cpc	r25, r21
  c6:	c8 f3       	brcs	.-14     	; 0xba <WaitMs+0xa>
  c8:	30 93 6a 00 	sts	0x006A, r19
  cc:	20 93 6b 00 	sts	0x006B, r18
	{
		for(k=0;k<200;k++)
		{};
	}
}
  d0:	08 95       	ret

000000d2 <lcd_cmd>:

void lcd_cmd(unsigned char cmd)
{   
  d2:	20 91 6a 00 	lds	r18, 0x006A
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <lcd_cmd+0xc>
  da:	9f 5f       	subi	r25, 0xFF	; 255
  dc:	28 ec       	ldi	r18, 0xC8	; 200
CLEARBIT(PORTB,BIT(1));
}

void WaitMs(unsigned int ms)
{
	for(j=0;j<ms;j++)
  de:	92 30       	cpi	r25, 0x02	; 2
  e0:	e0 f3       	brcs	.-8      	; 0xda <lcd_cmd+0x8>
  e2:	20 93 6a 00 	sts	0x006A, r18
  e6:	90 93 6b 00 	sts	0x006B, r25
}

void lcd_cmd(unsigned char cmd)
{   
    WaitMs(2);
	CLEARBIT(PORTB,BIT(0));
  ea:	c0 98       	cbi	0x18, 0	; 24
	PORTA=cmd;			
  ec:	8b bb       	out	0x1b, r24	; 27
	toggleE();
  ee:	0e 94 4f 00 	call	0x9e	; 0x9e <toggleE>
}
  f2:	08 95       	ret

000000f4 <lcd_init>:
void lcd_gotoxy2(unsigned char pos);
void lcd_exit(void);
void WaitMs(unsigned int ms);

void lcd_init(void)	//init the lcd
{	
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	8a bb       	out	0x1a, r24	; 26
	DDRA=0xFF;
	DDRB=0xFF;
  f8:	87 bb       	out	0x17, r24	; 23
  fa:	90 91 6a 00 	lds	r25, 0x006A
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <lcd_init+0x12>
 102:	8f 5f       	subi	r24, 0xFF	; 255
 104:	98 ec       	ldi	r25, 0xC8	; 200
CLEARBIT(PORTB,BIT(1));
}

void WaitMs(unsigned int ms)
{
	for(j=0;j<ms;j++)
 106:	8f 30       	cpi	r24, 0x0F	; 15
 108:	e0 f3       	brcs	.-8      	; 0x102 <lcd_init+0xe>
 10a:	90 93 6a 00 	sts	0x006A, r25
 10e:	80 93 6b 00 	sts	0x006B, r24
{	
	DDRA=0xFF;
	DDRB=0xFF;
	//DDRG=0xFF;
	WaitMs(15);
	CLEARBIT(PORTB,BIT(0));
 112:	c0 98       	cbi	0x18, 0	; 24
	lcd_cmd(0x38);
 114:	88 e3       	ldi	r24, 0x38	; 56
 116:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_cmd>
	lcd_cmd(0x0E);
 11a:	8e e0       	ldi	r24, 0x0E	; 14
 11c:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_cmd>
	lcd_cmd(0x01);
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_cmd>
	lcd_cmd(0x06);
 126:	86 e0       	ldi	r24, 0x06	; 6
 128:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_cmd>
	lcd_cmd(LINE1);	
 12c:	80 e8       	ldi	r24, 0x80	; 128
 12e:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_cmd>
}
 132:	08 95       	ret

00000134 <lcd_char>:
	PORTA=cmd;			
	toggleE();
}

void lcd_char(unsigned char single)
{
 134:	98 ec       	ldi	r25, 0xC8	; 200
 136:	90 93 6a 00 	sts	0x006A, r25
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	90 93 6b 00 	sts	0x006B, r25
    WaitMs(1);
	SETBIT(PORTB,BIT(0));	
 140:	c0 9a       	sbi	0x18, 0	; 24
	PORTA=single;						
 142:	8b bb       	out	0x1b, r24	; 27
	toggleE();
 144:	0e 94 4f 00 	call	0x9e	; 0x9e <toggleE>
}
 148:	08 95       	ret

0000014a <lcd_string>:

void lcd_string(unsigned char str[32])
{
 14a:	ef 92       	push	r14
 14c:	ff 92       	push	r15
 14e:	1f 93       	push	r17
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	7c 01       	movw	r14, r24
	unsigned char k=0;
	SETBIT(PORTB,BIT(0));
 156:	c0 9a       	sbi	0x18, 0	; 24
 158:	10 e0       	ldi	r17, 0x00	; 0
 15a:	10 c0       	rjmp	.+32     	; 0x17c <lcd_string+0x32>
CLEARBIT(PORTB,BIT(1));
}

void WaitMs(unsigned int ms)
{
	for(j=0;j<ms;j++)
 15c:	88 ec       	ldi	r24, 0xC8	; 200
 15e:	80 93 6a 00 	sts	0x006A, r24
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	80 93 6b 00 	sts	0x006B, r24
	unsigned char k=0;
	SETBIT(PORTB,BIT(0));
	//CLEARBIT(PORTG,BIT(2));
	while(str[k]!='\0')	//Till null character is encountered
		{   WaitMs(1);
			if(k==16)
 168:	10 31       	cpi	r17, 0x10	; 16
 16a:	19 f4       	brne	.+6      	; 0x172 <lcd_string+0x28>
				lcd_cmd(LINE2);
 16c:	80 ec       	ldi	r24, 0xC0	; 192
 16e:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_cmd>
			PORTA=str[k];
 172:	88 81       	ld	r24, Y
 174:	8b bb       	out	0x1b, r24	; 27
			toggleE();
 176:	0e 94 4f 00 	call	0x9e	; 0x9e <toggleE>
			k++;
 17a:	1f 5f       	subi	r17, 0xFF	; 255
void lcd_string(unsigned char str[32])
{
	unsigned char k=0;
	SETBIT(PORTB,BIT(0));
	//CLEARBIT(PORTG,BIT(2));
	while(str[k]!='\0')	//Till null character is encountered
 17c:	e7 01       	movw	r28, r14
 17e:	c1 0f       	add	r28, r17
 180:	d1 1d       	adc	r29, r1
 182:	88 81       	ld	r24, Y
 184:	88 23       	and	r24, r24
 186:	51 f7       	brne	.-44     	; 0x15c <lcd_string+0x12>
				lcd_cmd(LINE2);
			PORTA=str[k];
			toggleE();
			k++;
		}
}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	ff 90       	pop	r15
 190:	ef 90       	pop	r14
 192:	08 95       	ret

00000194 <lcd_showvalue>:


void lcd_showvalue(unsigned int num)	//prints the decimal 3digit value of num
{
 194:	ef 92       	push	r14
 196:	ff 92       	push	r15
 198:	0f 93       	push	r16
 19a:	1f 93       	push	r17
 19c:	8c 01       	movw	r16, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
 19e:	64 e6       	ldi	r22, 0x64	; 100
 1a0:	70 e0       	ldi	r23, 0x00	; 0
 1a2:	0e 94 1e 01 	call	0x23c	; 0x23c <__udivmodhi4>
 1a6:	46 2f       	mov	r20, r22
	T=(num - (H*100))/10;
 1a8:	26 2f       	mov	r18, r22
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	8c e9       	ldi	r24, 0x9C	; 156
 1ae:	9f ef       	ldi	r25, 0xFF	; 255
 1b0:	28 9f       	mul	r18, r24
 1b2:	70 01       	movw	r14, r0
 1b4:	29 9f       	mul	r18, r25
 1b6:	f0 0c       	add	r15, r0
 1b8:	38 9f       	mul	r19, r24
 1ba:	f0 0c       	add	r15, r0
 1bc:	11 24       	eor	r1, r1
 1be:	c7 01       	movw	r24, r14
 1c0:	80 0f       	add	r24, r16
 1c2:	91 1f       	adc	r25, r17
 1c4:	6a e0       	ldi	r22, 0x0A	; 10
 1c6:	70 e0       	ldi	r23, 0x00	; 0
 1c8:	0e 94 1e 01 	call	0x23c	; 0x23c <__udivmodhi4>
 1cc:	16 2f       	mov	r17, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+48);
 1ce:	84 2f       	mov	r24, r20
 1d0:	80 5d       	subi	r24, 0xD0	; 208
 1d2:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_char>
	lcd_char(T+48);
 1d6:	81 2f       	mov	r24, r17
 1d8:	80 5d       	subi	r24, 0xD0	; 208
 1da:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_char>
	lcd_char(O+48);
 1de:	00 5d       	subi	r16, 0xD0	; 208
 1e0:	0e 0d       	add	r16, r14
 1e2:	86 ef       	ldi	r24, 0xF6	; 246
 1e4:	9f ef       	ldi	r25, 0xFF	; 255
 1e6:	18 9f       	mul	r17, r24
 1e8:	60 2d       	mov	r22, r0
 1ea:	11 24       	eor	r1, r1
 1ec:	86 2f       	mov	r24, r22
 1ee:	80 0f       	add	r24, r16
 1f0:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_char>
}
 1f4:	1f 91       	pop	r17
 1f6:	0f 91       	pop	r16
 1f8:	ff 90       	pop	r15
 1fa:	ef 90       	pop	r14
 1fc:	08 95       	ret

000001fe <lcd_gotoxy1>:

void lcd_gotoxy1(unsigned char pos)
{
 1fe:	80 58       	subi	r24, 0x80	; 128
 200:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_cmd>
	lcd_cmd(LINE1+pos);
}
 204:	08 95       	ret

00000206 <lcd_gotoxy2>:


void lcd_gotoxy2(unsigned char pos)
{
 206:	80 54       	subi	r24, 0x40	; 64
 208:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_cmd>
	lcd_cmd(LINE2+pos);
}
 20c:	08 95       	ret

0000020e <recieve_data>:
#include "PORT.h"
#include "LCD.h"
//16SLAVE

char recieve_data()
{
 20e:	77 9b       	sbis	0x0e, 7	; 14
 210:	fe cf       	rjmp	.-4      	; 0x20e <recieve_data>
	//_delay_ms(20);
	while(!(CHECKBIT(SPSR,BIT(7))))
	{
	;
	}
	return SPDR;
 212:	8f b1       	in	r24, 0x0f	; 15
}
 214:	08 95       	ret

00000216 <spi_init>:



int spi_init(void)
{
 216:	80 e4       	ldi	r24, 0x40	; 64
 218:	8d b9       	out	0x0d, r24	; 13

SPCR=0X40;
return 0;
}
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	08 95       	ret

00000220 <main>:

int main (void)
{
 220:	8f e2       	ldi	r24, 0x2F	; 47
 222:	87 bb       	out	0x17, r24	; 23

char data;

	DDRB=0X2F;	
	DDRA=0XFF;
 224:	8f ef       	ldi	r24, 0xFF	; 255
 226:	8a bb       	out	0x1a, r24	; 26


int spi_init(void)
{

SPCR=0X40;
 228:	80 e4       	ldi	r24, 0x40	; 64
 22a:	8d b9       	out	0x0d, r24	; 13
char data;

	DDRB=0X2F;	
	DDRA=0XFF;
	spi_init();
	lcd_init();
 22c:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_init>
//16SLAVE

char recieve_data()
{
	//_delay_ms(20);
	while(!(CHECKBIT(SPSR,BIT(7))))
 230:	77 9b       	sbis	0x0e, 7	; 14
 232:	fe cf       	rjmp	.-4      	; 0x230 <main+0x10>
	{
	;
	}
	return SPDR;
 234:	8f b1       	in	r24, 0x0f	; 15
	lcd_init();
	while(1)
	{
	    		
		data=recieve_data();
		lcd_char(data);
 236:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_char>
 23a:	fa cf       	rjmp	.-12     	; 0x230 <main+0x10>

0000023c <__udivmodhi4>:
 23c:	aa 1b       	sub	r26, r26
 23e:	bb 1b       	sub	r27, r27
 240:	51 e1       	ldi	r21, 0x11	; 17
 242:	07 c0       	rjmp	.+14     	; 0x252 <__udivmodhi4_ep>

00000244 <__udivmodhi4_loop>:
 244:	aa 1f       	adc	r26, r26
 246:	bb 1f       	adc	r27, r27
 248:	a6 17       	cp	r26, r22
 24a:	b7 07       	cpc	r27, r23
 24c:	10 f0       	brcs	.+4      	; 0x252 <__udivmodhi4_ep>
 24e:	a6 1b       	sub	r26, r22
 250:	b7 0b       	sbc	r27, r23

00000252 <__udivmodhi4_ep>:
 252:	88 1f       	adc	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	5a 95       	dec	r21
 258:	a9 f7       	brne	.-22     	; 0x244 <__udivmodhi4_loop>
 25a:	80 95       	com	r24
 25c:	90 95       	com	r25
 25e:	bc 01       	movw	r22, r24
 260:	cd 01       	movw	r24, r26
 262:	08 95       	ret

00000264 <_exit>:
 264:	f8 94       	cli

00000266 <__stop_program>:
 266:	ff cf       	rjmp	.-2      	; 0x266 <__stop_program>
