
Auto_Alpha.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800200  000010c6  0000115a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800222  00800222  0000117c  2**0
                  ALLOC
  3 .stab         00001b30  00000000  00000000  0000117c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000057e  00000000  00000000  00002cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00003230  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f85  00000000  00000000  000032f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000030d  00000000  00000000  00004275  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007bb  00000000  00000000  00004582  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000032c  00000000  00000000  00004d40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000033c  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000864  00000000  00000000  000053a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	12 e0       	ldi	r17, 0x02	; 2
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b2 e0       	ldi	r27, 0x02	; 2
      f6:	e6 ec       	ldi	r30, 0xC6	; 198
      f8:	f0 e1       	ldi	r31, 0x10	; 16
      fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
      fc:	05 90       	lpm	r0, Z+
      fe:	0d 92       	st	X+, r0
     100:	a2 32       	cpi	r26, 0x22	; 34
     102:	b1 07       	cpc	r27, r17
     104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
     106:	12 e0       	ldi	r17, 0x02	; 2
     108:	a2 e2       	ldi	r26, 0x22	; 34
     10a:	b2 e0       	ldi	r27, 0x02	; 2
     10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
     10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
     110:	aa 32       	cpi	r26, 0x2A	; 42
     112:	b1 07       	cpc	r27, r17
     114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
     116:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <main>
     11a:	0c 94 61 08 	jmp	0x10c2	; 0x10c2 <_exit>

0000011e <__bad_interrupt>:
     11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <toggleE>:
}


void toggleE(void)
{
SETBIT(PORTE,BIT(0));
     122:	70 9a       	sbi	0x0e, 0	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     124:	83 e3       	ldi	r24, 0x33	; 51
     126:	97 e0       	ldi	r25, 0x07	; 7
     128:	01 97       	sbiw	r24, 0x01	; 1
     12a:	f1 f7       	brne	.-4      	; 0x128 <toggleE+0x6>
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
     12c:	70 98       	cbi	0x0e, 0	; 14
}
     12e:	08 95       	ret

00000130 <dely_ns>:

void dely_ns(unsigned char tim)
{
	for(j=0;j<tim;j++)
     130:	10 92 28 02 	sts	0x0228, r1
     134:	88 23       	and	r24, r24
     136:	49 f0       	breq	.+18     	; 0x14a <dely_ns+0x1a>
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	9f 5f       	subi	r25, 0xFF	; 255
     13c:	98 17       	cp	r25, r24
     13e:	e9 f7       	brne	.-6      	; 0x13a <dely_ns+0xa>
     140:	9a e0       	ldi	r25, 0x0A	; 10
     142:	90 93 29 02 	sts	0x0229, r25
     146:	80 93 28 02 	sts	0x0228, r24
     14a:	08 95       	ret

0000014c <lcd_exit>:
}
		

void lcd_exit(void)
{
	PORTA=save;
     14c:	80 91 27 02 	lds	r24, 0x0227
     150:	82 b9       	out	0x02, r24	; 2
}
     152:	08 95       	ret

00000154 <WaitMs>:
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
     154:	4c ec       	ldi	r20, 0xCC	; 204
     156:	5c e0       	ldi	r21, 0x0C	; 12
     158:	06 c0       	rjmp	.+12     	; 0x166 <WaitMs+0x12>
     15a:	9a 01       	movw	r18, r20
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
     15c:	00 00       	nop
     15e:	21 50       	subi	r18, 0x01	; 1
     160:	30 40       	sbci	r19, 0x00	; 0

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
     162:	e1 f7       	brne	.-8      	; 0x15c <WaitMs+0x8>
     164:	01 97       	sbiw	r24, 0x01	; 1
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
     166:	00 97       	sbiw	r24, 0x00	; 0
     168:	c1 f7       	brne	.-16     	; 0x15a <WaitMs+0x6>
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
	}
}
     16a:	08 95       	ret

0000016c <lcd_char>:

}


void lcd_char(unsigned char data)
{	
     16c:	1f 93       	push	r17
     16e:	cf 93       	push	r28
     170:	df 93       	push	r29
     172:	18 2f       	mov	r17, r24
	int temp;
	WaitMs(15);
     174:	8f e0       	ldi	r24, 0x0F	; 15
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	0e 94 aa 00 	call	0x154	; 0x154 <WaitMs>
	SETBIT(PORTG,BIT(5));
     17c:	a5 9a       	sbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
     17e:	70 98       	cbi	0x0e, 0	; 14
	temp= (data & 0b11000000); // '10'000000
     180:	c1 2f       	mov	r28, r17
     182:	d0 e0       	ldi	r29, 0x00	; 0
     184:	ce 01       	movw	r24, r28
     186:	80 7c       	andi	r24, 0xC0	; 192
     188:	90 70       	andi	r25, 0x00	; 0
	PORTE=temp;
     18a:	8e b9       	out	0x0e, r24	; 14
	temp=(data>>3) & 0b00000110; // 00000'11'0
	PORTE= PORTE | temp;
     18c:	8e b1       	in	r24, 0x0e	; 14
	WaitMs(15);
	SETBIT(PORTG,BIT(5));
	CLEARBIT(PORTE,BIT(0));
	temp= (data & 0b11000000); // '10'000000
	PORTE=temp;
	temp=(data>>3) & 0b00000110; // 00000'11'0
     18e:	16 95       	lsr	r17
     190:	16 95       	lsr	r17
     192:	16 95       	lsr	r17
     194:	16 70       	andi	r17, 0x06	; 6
	PORTE= PORTE | temp;
     196:	18 2b       	or	r17, r24
     198:	1e b9       	out	0x0e, r17	; 14
     19a:	88 e1       	ldi	r24, 0x18	; 24
     19c:	8a 95       	dec	r24
     19e:	f1 f7       	brne	.-4      	; 0x19c <lcd_char+0x30>
     1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <lcd_char+0x36>
	_delay_us(5);
	toggleE();				// '10'000'11'0 (first nibble Done)
     1a2:	0e 94 91 00 	call	0x122	; 0x122 <toggleE>
							/* PORTA = (data & 0xF0);
							PORTA = (data & 0xF0);
							PORTA = (data & 0xF0);*/

	CLEARBIT(PORTG,BIT(5));
     1a6:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
     1a8:	70 98       	cbi	0x0e, 0	; 14
	SETBIT(PORTG,BIT(5));
     1aa:	a5 9a       	sbi	0x14, 5	; 20
	temp=(data << 4) & 0b11000000; // '10'000000
     1ac:	ce 01       	movw	r24, r28
     1ae:	82 95       	swap	r24
     1b0:	92 95       	swap	r25
     1b2:	90 7f       	andi	r25, 0xF0	; 240
     1b4:	98 27       	eor	r25, r24
     1b6:	80 7f       	andi	r24, 0xF0	; 240
     1b8:	98 27       	eor	r25, r24
     1ba:	80 7c       	andi	r24, 0xC0	; 192
     1bc:	90 70       	andi	r25, 0x00	; 0
	PORTE=temp;
     1be:	8e b9       	out	0x0e, r24	; 14
	temp=(data << 1) & 0b00000110; // 00000'01'0 
	PORTE= PORTE | temp;
     1c0:	8e b1       	in	r24, 0x0e	; 14
	CLEARBIT(PORTG,BIT(5));
	CLEARBIT(PORTE,BIT(0));
	SETBIT(PORTG,BIT(5));
	temp=(data << 4) & 0b11000000; // '10'000000
	PORTE=temp;
	temp=(data << 1) & 0b00000110; // 00000'01'0 
     1c2:	cc 0f       	add	r28, r28
     1c4:	dd 1f       	adc	r29, r29
     1c6:	c6 70       	andi	r28, 0x06	; 6
     1c8:	d0 70       	andi	r29, 0x00	; 0
	PORTE= PORTE | temp;
     1ca:	c8 2b       	or	r28, r24
     1cc:	ce b9       	out	0x0e, r28	; 14
     1ce:	88 e1       	ldi	r24, 0x18	; 24
     1d0:	8a 95       	dec	r24
     1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcd_char+0x64>
     1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <lcd_char+0x6a>
	_delay_us(5);
						/*PORTA = (data << 4);
						PORTA = (data << 4);
						PORTA = (data << 4);	*/					
	toggleE();
     1d6:	0e 94 91 00 	call	0x122	; 0x122 <toggleE>
}
     1da:	df 91       	pop	r29
     1dc:	cf 91       	pop	r28
     1de:	1f 91       	pop	r17
     1e0:	08 95       	ret

000001e2 <lcd_showvalue>:
		}
}


void lcd_showvalue(unsigned long int num)
{
     1e2:	4f 92       	push	r4
     1e4:	5f 92       	push	r5
     1e6:	6f 92       	push	r6
     1e8:	7f 92       	push	r7
     1ea:	8f 92       	push	r8
     1ec:	9f 92       	push	r9
     1ee:	af 92       	push	r10
     1f0:	bf 92       	push	r11
     1f2:	cf 92       	push	r12
     1f4:	df 92       	push	r13
     1f6:	ef 92       	push	r14
     1f8:	ff 92       	push	r15
     1fa:	0f 93       	push	r16
     1fc:	1f 93       	push	r17
     1fe:	cf 93       	push	r28
     200:	df 93       	push	r29
     202:	00 d0       	rcall	.+0      	; 0x204 <lcd_showvalue+0x22>
     204:	00 d0       	rcall	.+0      	; 0x206 <lcd_showvalue+0x24>
     206:	cd b7       	in	r28, 0x3d	; 61
     208:	de b7       	in	r29, 0x3e	; 62
     20a:	4b 01       	movw	r8, r22
     20c:	5c 01       	movw	r10, r24
	
	unsigned long int n = 0;
	int flag = 0;


	if(num%100000 == 0)
     20e:	20 ea       	ldi	r18, 0xA0	; 160
     210:	36 e8       	ldi	r19, 0x86	; 134
     212:	41 e0       	ldi	r20, 0x01	; 1
     214:	50 e0       	ldi	r21, 0x00	; 0
     216:	0e 94 3f 08 	call	0x107e	; 0x107e <__udivmodsi4>
     21a:	dc 01       	movw	r26, r24
     21c:	cb 01       	movw	r24, r22
     21e:	00 97       	sbiw	r24, 0x00	; 0
     220:	a1 05       	cpc	r26, r1
     222:	b1 05       	cpc	r27, r1
     224:	09 f4       	brne	.+2      	; 0x228 <lcd_showvalue+0x46>
     226:	3d c0       	rjmp	.+122    	; 0x2a2 <lcd_showvalue+0xc0>
	{
		flag = 5;
	}
	
	else if(num%10000 == 0)
     228:	c5 01       	movw	r24, r10
     22a:	b4 01       	movw	r22, r8
     22c:	20 e1       	ldi	r18, 0x10	; 16
     22e:	37 e2       	ldi	r19, 0x27	; 39
     230:	40 e0       	ldi	r20, 0x00	; 0
     232:	50 e0       	ldi	r21, 0x00	; 0
     234:	0e 94 3f 08 	call	0x107e	; 0x107e <__udivmodsi4>
     238:	dc 01       	movw	r26, r24
     23a:	cb 01       	movw	r24, r22
     23c:	00 97       	sbiw	r24, 0x00	; 0
     23e:	a1 05       	cpc	r26, r1
     240:	b1 05       	cpc	r27, r1
     242:	91 f1       	breq	.+100    	; 0x2a8 <lcd_showvalue+0xc6>
	{
		flag = 4;
	}

	else if(num%1000 == 0) 
     244:	c5 01       	movw	r24, r10
     246:	b4 01       	movw	r22, r8
     248:	28 ee       	ldi	r18, 0xE8	; 232
     24a:	33 e0       	ldi	r19, 0x03	; 3
     24c:	40 e0       	ldi	r20, 0x00	; 0
     24e:	50 e0       	ldi	r21, 0x00	; 0
     250:	0e 94 3f 08 	call	0x107e	; 0x107e <__udivmodsi4>
     254:	dc 01       	movw	r26, r24
     256:	cb 01       	movw	r24, r22
     258:	00 97       	sbiw	r24, 0x00	; 0
     25a:	a1 05       	cpc	r26, r1
     25c:	b1 05       	cpc	r27, r1
     25e:	39 f1       	breq	.+78     	; 0x2ae <lcd_showvalue+0xcc>
	{
		flag = 3;
	}

	else if(num%100 == 0) 
     260:	c5 01       	movw	r24, r10
     262:	b4 01       	movw	r22, r8
     264:	24 e6       	ldi	r18, 0x64	; 100
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	40 e0       	ldi	r20, 0x00	; 0
     26a:	50 e0       	ldi	r21, 0x00	; 0
     26c:	0e 94 3f 08 	call	0x107e	; 0x107e <__udivmodsi4>
     270:	dc 01       	movw	r26, r24
     272:	cb 01       	movw	r24, r22
     274:	00 97       	sbiw	r24, 0x00	; 0
     276:	a1 05       	cpc	r26, r1
     278:	b1 05       	cpc	r27, r1
     27a:	e1 f0       	breq	.+56     	; 0x2b4 <lcd_showvalue+0xd2>
	{
		flag = 2;
	}

	else if(num%10 == 0) 
     27c:	c5 01       	movw	r24, r10
     27e:	b4 01       	movw	r22, r8
     280:	2a e0       	ldi	r18, 0x0A	; 10
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	40 e0       	ldi	r20, 0x00	; 0
     286:	50 e0       	ldi	r21, 0x00	; 0
     288:	0e 94 3f 08 	call	0x107e	; 0x107e <__udivmodsi4>
     28c:	dc 01       	movw	r26, r24
     28e:	cb 01       	movw	r24, r22
		flag = 5;
	}
	
	else if(num%10000 == 0)
	{
		flag = 4;
     290:	01 e0       	ldi	r16, 0x01	; 1
     292:	10 e0       	ldi	r17, 0x00	; 0
     294:	00 97       	sbiw	r24, 0x00	; 0
     296:	a1 05       	cpc	r26, r1
     298:	b1 05       	cpc	r27, r1
     29a:	71 f0       	breq	.+28     	; 0x2b8 <lcd_showvalue+0xd6>
     29c:	00 e0       	ldi	r16, 0x00	; 0
     29e:	10 e0       	ldi	r17, 0x00	; 0
     2a0:	0b c0       	rjmp	.+22     	; 0x2b8 <lcd_showvalue+0xd6>
	int flag = 0;


	if(num%100000 == 0)
	{
		flag = 5;
     2a2:	05 e0       	ldi	r16, 0x05	; 5
     2a4:	10 e0       	ldi	r17, 0x00	; 0
     2a6:	08 c0       	rjmp	.+16     	; 0x2b8 <lcd_showvalue+0xd6>
	}
	
	else if(num%10000 == 0)
	{
		flag = 4;
     2a8:	04 e0       	ldi	r16, 0x04	; 4
     2aa:	10 e0       	ldi	r17, 0x00	; 0
     2ac:	05 c0       	rjmp	.+10     	; 0x2b8 <lcd_showvalue+0xd6>
	}

	else if(num%1000 == 0) 
	{
		flag = 3;
     2ae:	03 e0       	ldi	r16, 0x03	; 3
     2b0:	10 e0       	ldi	r17, 0x00	; 0
     2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <lcd_showvalue+0xd6>
	}

	else if(num%100 == 0) 
	{
		flag = 2;
     2b4:	02 e0       	ldi	r16, 0x02	; 2
     2b6:	10 e0       	ldi	r17, 0x00	; 0
		flag = 0;
	}



	while(num!=0)
     2b8:	81 14       	cp	r8, r1
     2ba:	91 04       	cpc	r9, r1
     2bc:	a1 04       	cpc	r10, r1
     2be:	b1 04       	cpc	r11, r1
     2c0:	09 f4       	brne	.+2      	; 0x2c4 <lcd_showvalue+0xe2>
     2c2:	52 c0       	rjmp	.+164    	; 0x368 <lcd_showvalue+0x186>
     2c4:	cc 24       	eor	r12, r12
     2c6:	dd 24       	eor	r13, r13
     2c8:	76 01       	movw	r14, r12
	{
	
			H = num%10;
     2ca:	0f 2e       	mov	r0, r31
     2cc:	fa e0       	ldi	r31, 0x0A	; 10
     2ce:	4f 2e       	mov	r4, r31
     2d0:	f0 e0       	ldi	r31, 0x00	; 0
     2d2:	5f 2e       	mov	r5, r31
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	6f 2e       	mov	r6, r31
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	7f 2e       	mov	r7, r31
     2dc:	f0 2d       	mov	r31, r0
     2de:	c5 01       	movw	r24, r10
     2e0:	b4 01       	movw	r22, r8
     2e2:	a3 01       	movw	r20, r6
     2e4:	92 01       	movw	r18, r4
     2e6:	0e 94 3f 08 	call	0x107e	; 0x107e <__udivmodsi4>
     2ea:	69 83       	std	Y+1, r22	; 0x01
     2ec:	7a 83       	std	Y+2, r23	; 0x02
     2ee:	8b 83       	std	Y+3, r24	; 0x03
     2f0:	9c 83       	std	Y+4, r25	; 0x04
			num = num/10;
     2f2:	82 2e       	mov	r8, r18
     2f4:	93 2e       	mov	r9, r19
     2f6:	a4 2e       	mov	r10, r20
     2f8:	b5 2e       	mov	r11, r21
			n = (n*10)+H;
     2fa:	c7 01       	movw	r24, r14
     2fc:	b6 01       	movw	r22, r12
     2fe:	a3 01       	movw	r20, r6
     300:	92 01       	movw	r18, r4
     302:	0e 94 20 08 	call	0x1040	; 0x1040 <__mulsi3>
     306:	6b 01       	movw	r12, r22
     308:	7c 01       	movw	r14, r24
     30a:	89 81       	ldd	r24, Y+1	; 0x01
     30c:	9a 81       	ldd	r25, Y+2	; 0x02
     30e:	ab 81       	ldd	r26, Y+3	; 0x03
     310:	bc 81       	ldd	r27, Y+4	; 0x04
     312:	c8 0e       	add	r12, r24
     314:	d9 1e       	adc	r13, r25
     316:	ea 1e       	adc	r14, r26
     318:	fb 1e       	adc	r15, r27
		flag = 0;
	}



	while(num!=0)
     31a:	81 14       	cp	r8, r1
     31c:	91 04       	cpc	r9, r1
     31e:	a1 04       	cpc	r10, r1
     320:	b1 04       	cpc	r11, r1
     322:	e9 f6       	brne	.-70     	; 0x2de <lcd_showvalue+0xfc>
			num = num/10;
			n = (n*10)+H;

	}
	
	while(n!=0)
     324:	c1 14       	cp	r12, r1
     326:	d1 04       	cpc	r13, r1
     328:	e1 04       	cpc	r14, r1
     32a:	f1 04       	cpc	r15, r1
     32c:	e9 f0       	breq	.+58     	; 0x368 <lcd_showvalue+0x186>
	{
	
			H = n%10;
     32e:	0f 2e       	mov	r0, r31
     330:	fa e0       	ldi	r31, 0x0A	; 10
     332:	8f 2e       	mov	r8, r31
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	9f 2e       	mov	r9, r31
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	af 2e       	mov	r10, r31
     33c:	f0 e0       	ldi	r31, 0x00	; 0
     33e:	bf 2e       	mov	r11, r31
     340:	f0 2d       	mov	r31, r0
     342:	c7 01       	movw	r24, r14
     344:	b6 01       	movw	r22, r12
     346:	a5 01       	movw	r20, r10
     348:	94 01       	movw	r18, r8
     34a:	0e 94 3f 08 	call	0x107e	; 0x107e <__udivmodsi4>
			n = n/10;
     34e:	c2 2e       	mov	r12, r18
     350:	d3 2e       	mov	r13, r19
     352:	e4 2e       	mov	r14, r20
     354:	f5 2e       	mov	r15, r21
			lcd_char(H+48);
     356:	86 2f       	mov	r24, r22
     358:	80 5d       	subi	r24, 0xD0	; 208
     35a:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_char>
			num = num/10;
			n = (n*10)+H;

	}
	
	while(n!=0)
     35e:	c1 14       	cp	r12, r1
     360:	d1 04       	cpc	r13, r1
     362:	e1 04       	cpc	r14, r1
     364:	f1 04       	cpc	r15, r1
     366:	69 f7       	brne	.-38     	; 0x342 <lcd_showvalue+0x160>
			lcd_char(H+48);

	}
	
	
	while(flag > 0)
     368:	10 16       	cp	r1, r16
     36a:	11 06       	cpc	r1, r17
     36c:	34 f4       	brge	.+12     	; 0x37a <lcd_showvalue+0x198>
	{
		lcd_char(48);
     36e:	80 e3       	ldi	r24, 0x30	; 48
     370:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_char>
		flag--;
     374:	01 50       	subi	r16, 0x01	; 1
     376:	10 40       	sbci	r17, 0x00	; 0
			lcd_char(H+48);

	}
	
	
	while(flag > 0)
     378:	d1 f7       	brne	.-12     	; 0x36e <lcd_showvalue+0x18c>
	{
		lcd_char(48);
		flag--;
	}	

}
     37a:	0f 90       	pop	r0
     37c:	0f 90       	pop	r0
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	df 91       	pop	r29
     384:	cf 91       	pop	r28
     386:	1f 91       	pop	r17
     388:	0f 91       	pop	r16
     38a:	ff 90       	pop	r15
     38c:	ef 90       	pop	r14
     38e:	df 90       	pop	r13
     390:	cf 90       	pop	r12
     392:	bf 90       	pop	r11
     394:	af 90       	pop	r10
     396:	9f 90       	pop	r9
     398:	8f 90       	pop	r8
     39a:	7f 90       	pop	r7
     39c:	6f 90       	pop	r6
     39e:	5f 90       	pop	r5
     3a0:	4f 90       	pop	r4
     3a2:	08 95       	ret

000003a4 <lcd_showvaluef>:


void lcd_showvaluef(float num)
{
     3a4:	cf 92       	push	r12
     3a6:	df 92       	push	r13
     3a8:	ef 92       	push	r14
     3aa:	ff 92       	push	r15
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
     3b0:	00 d0       	rcall	.+0      	; 0x3b2 <lcd_showvaluef+0xe>
     3b2:	00 d0       	rcall	.+0      	; 0x3b4 <lcd_showvaluef+0x10>
     3b4:	cd b7       	in	r28, 0x3d	; 61
     3b6:	de b7       	in	r29, 0x3e	; 62
     3b8:	6b 01       	movw	r12, r22
     3ba:	7c 01       	movw	r14, r24

	unsigned long int l;
	double fraction,integer;

	l = (unsigned long int)num;
     3bc:	0e 94 a8 06 	call	0xd50	; 0xd50 <__fixunssfsi>

	lcd_showvalue(l);
     3c0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_showvalue>

	fraction = modf((double)num,&integer);
     3c4:	c7 01       	movw	r24, r14
     3c6:	b6 01       	movw	r22, r12
     3c8:	ae 01       	movw	r20, r28
     3ca:	4f 5f       	subi	r20, 0xFF	; 255
     3cc:	5f 4f       	sbci	r21, 0xFF	; 255
     3ce:	0e 94 fd 06 	call	0xdfa	; 0xdfa <modf>
     3d2:	6b 01       	movw	r12, r22
     3d4:	7c 01       	movw	r14, r24

	l = (unsigned long int)(fraction * 100000);

	lcd_char('.');
     3d6:	8e e2       	ldi	r24, 0x2E	; 46
     3d8:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_char>

	lcd_showvalue(l);

	fraction = modf((double)num,&integer);

	l = (unsigned long int)(fraction * 100000);
     3dc:	c7 01       	movw	r24, r14
     3de:	b6 01       	movw	r22, r12
     3e0:	20 e0       	ldi	r18, 0x00	; 0
     3e2:	30 e5       	ldi	r19, 0x50	; 80
     3e4:	43 ec       	ldi	r20, 0xC3	; 195
     3e6:	57 e4       	ldi	r21, 0x47	; 71
     3e8:	0e 94 30 07 	call	0xe60	; 0xe60 <__mulsf3>
     3ec:	0e 94 a8 06 	call	0xd50	; 0xd50 <__fixunssfsi>

	lcd_char('.');

	lcd_showvalue(l);
     3f0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_showvalue>

}
     3f4:	0f 90       	pop	r0
     3f6:	0f 90       	pop	r0
     3f8:	0f 90       	pop	r0
     3fa:	0f 90       	pop	r0
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	ff 90       	pop	r15
     402:	ef 90       	pop	r14
     404:	df 90       	pop	r13
     406:	cf 90       	pop	r12
     408:	08 95       	ret

0000040a <lcd_cmd>:
		{};
	}
}

void lcd_cmd(unsigned char ch)
{
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
	int temp;
	CLEARBIT(PORTG,BIT(5));
     40e:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
     410:	70 98       	cbi	0x0e, 0	; 14
					/*PORTA = (ch & 0xF0);			// Send twice because ATMEGA is too fast 
  					PORTA = (ch & 0xF0); 			// for the LCD display !
  					PORTA = ch & 0xF0;
   					PORTA = ch & 0xF0;*/

	temp= ch & 0b11000000; // '10'000000
     412:	c8 2f       	mov	r28, r24
     414:	d0 e0       	ldi	r29, 0x00	; 0
     416:	9e 01       	movw	r18, r28
     418:	20 7c       	andi	r18, 0xC0	; 192
     41a:	30 70       	andi	r19, 0x00	; 0
	PORTE=temp;
     41c:	2e b9       	out	0x0e, r18	; 14
	temp=(ch >> 3) & 0b00000110; // 00000'11'0
	PORTE= PORTE | temp;
     41e:	9e b1       	in	r25, 0x0e	; 14
  					PORTA = ch & 0xF0;
   					PORTA = ch & 0xF0;*/

	temp= ch & 0b11000000; // '10'000000
	PORTE=temp;
	temp=(ch >> 3) & 0b00000110; // 00000'11'0
     420:	86 95       	lsr	r24
     422:	86 95       	lsr	r24
     424:	86 95       	lsr	r24
     426:	86 70       	andi	r24, 0x06	; 6
	PORTE= PORTE | temp;
     428:	89 2b       	or	r24, r25
     42a:	8e b9       	out	0x0e, r24	; 14
     42c:	88 e1       	ldi	r24, 0x18	; 24
     42e:	8a 95       	dec	r24
     430:	f1 f7       	brne	.-4      	; 0x42e <lcd_cmd+0x24>
     432:	00 c0       	rjmp	.+0      	; 0x434 <lcd_cmd+0x2a>
	_delay_us(5);
	toggleE();
     434:	0e 94 91 00 	call	0x122	; 0x122 <toggleE>
   // Extract lower nibble
	SETBIT(PORTG,BIT(5));
     438:	a5 9a       	sbi	0x14, 5	; 20
   	CLEARBIT(PORTG,BIT(5));
     43a:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
     43c:	70 98       	cbi	0x0e, 0	; 14
   					/*PORTA = ((ch << 4) & 0xF0); 	// Send twice because ATMEGA is too fast 
   					PORTA = ((ch << 4) & 0xF0);	// for the LCD display !
   					PORTA = (ch << 4) & 0xF0;
   					PORTA = (ch << 4) & 0xF0;*/
	temp=(ch << 4) & 0b11000000; // '10'000000
     43e:	ce 01       	movw	r24, r28
     440:	82 95       	swap	r24
     442:	92 95       	swap	r25
     444:	90 7f       	andi	r25, 0xF0	; 240
     446:	98 27       	eor	r25, r24
     448:	80 7f       	andi	r24, 0xF0	; 240
     44a:	98 27       	eor	r25, r24
     44c:	80 7c       	andi	r24, 0xC0	; 192
     44e:	90 70       	andi	r25, 0x00	; 0
	PORTE=temp;
     450:	8e b9       	out	0x0e, r24	; 14
	temp=(ch << 1) & 0b00000110; // 00000'01'0 
	PORTE= PORTE | temp;
     452:	8e b1       	in	r24, 0x0e	; 14
   					PORTA = ((ch << 4) & 0xF0);	// for the LCD display !
   					PORTA = (ch << 4) & 0xF0;
   					PORTA = (ch << 4) & 0xF0;*/
	temp=(ch << 4) & 0b11000000; // '10'000000
	PORTE=temp;
	temp=(ch << 1) & 0b00000110; // 00000'01'0 
     454:	cc 0f       	add	r28, r28
     456:	dd 1f       	adc	r29, r29
     458:	c6 70       	andi	r28, 0x06	; 6
     45a:	d0 70       	andi	r29, 0x00	; 0
	PORTE= PORTE | temp;
     45c:	c8 2b       	or	r28, r24
     45e:	ce b9       	out	0x0e, r28	; 14
     460:	88 e1       	ldi	r24, 0x18	; 24
     462:	8a 95       	dec	r24
     464:	f1 f7       	brne	.-4      	; 0x462 <lcd_cmd+0x58>
     466:	00 c0       	rjmp	.+0      	; 0x468 <lcd_cmd+0x5e>
	_delay_us(5);
	toggleE();
     468:	0e 94 91 00 	call	0x122	; 0x122 <toggleE>
   	PORTE = 0x00;
     46c:	1e b8       	out	0x0e, r1	; 14
   	WaitMs(10);
     46e:	8a e0       	ldi	r24, 0x0A	; 10
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	0e 94 aa 00 	call	0x154	; 0x154 <WaitMs>


}
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	08 95       	ret

0000047c <lcd_gotoxy2>:
	lcd_cmd(LINE1+pos);
}

void lcd_gotoxy2(unsigned char pos)
{
	lcd_cmd(LINE2+pos);
     47c:	80 54       	subi	r24, 0x40	; 64
     47e:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_cmd>
}
     482:	08 95       	ret

00000484 <lcd_gotoxy1>:

}

void lcd_gotoxy1(unsigned char pos)
{
	lcd_cmd(LINE1+pos);
     484:	80 58       	subi	r24, 0x80	; 128
     486:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_cmd>
}
     48a:	08 95       	ret

0000048c <lcd_string>:
						PORTA = (data << 4);	*/					
	toggleE();
}

void lcd_string(unsigned char str[32])
{
     48c:	ef 92       	push	r14
     48e:	ff 92       	push	r15
     490:	1f 93       	push	r17
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	7c 01       	movw	r14, r24
	int poop,bitch;
	unsigned char k=0;
	PORTA=0x01;
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	82 b9       	out	0x02, r24	; 2
	SETBIT(PORTG,BIT(5));
     49c:	a5 9a       	sbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
     49e:	70 98       	cbi	0x0e, 0	; 14
	while(str[k]!='\0')	//Till null character is encountered
     4a0:	f7 01       	movw	r30, r14
     4a2:	80 81       	ld	r24, Z
     4a4:	88 23       	and	r24, r24
     4a6:	39 f4       	brne	.+14     	; 0x4b6 <lcd_string+0x2a>
     4a8:	41 c0       	rjmp	.+130    	; 0x52c <lcd_string+0xa0>
		{
			if(k==16)
     4aa:	10 31       	cpi	r17, 0x10	; 16
     4ac:	31 f4       	brne	.+12     	; 0x4ba <lcd_string+0x2e>
				lcd_cmd(LINE2);
     4ae:	80 ec       	ldi	r24, 0xC0	; 192
     4b0:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_cmd>
     4b4:	02 c0       	rjmp	.+4      	; 0x4ba <lcd_string+0x2e>
	int poop,bitch;
	unsigned char k=0;
	PORTA=0x01;
	SETBIT(PORTG,BIT(5));
	CLEARBIT(PORTE,BIT(0));
	while(str[k]!='\0')	//Till null character is encountered
     4b6:	e7 01       	movw	r28, r14
}

void lcd_string(unsigned char str[32])
{
	int poop,bitch;
	unsigned char k=0;
     4b8:	10 e0       	ldi	r17, 0x00	; 0
	CLEARBIT(PORTE,BIT(0));
	while(str[k]!='\0')	//Till null character is encountered
		{
			if(k==16)
				lcd_cmd(LINE2);
			SETBIT(PORTG,BIT(5));
     4ba:	a5 9a       	sbi	0x14, 5	; 20
			CLEARBIT(PORTE,BIT(0));
     4bc:	70 98       	cbi	0x0e, 0	; 14
			bitch=str[k]; //10111001
     4be:	88 81       	ld	r24, Y
     4c0:	90 e0       	ldi	r25, 0x00	; 0
			poop= bitch & 0b11000000; // '10'000000
     4c2:	9c 01       	movw	r18, r24
     4c4:	20 7c       	andi	r18, 0xC0	; 192
     4c6:	30 70       	andi	r19, 0x00	; 0
			PORTE=poop;
     4c8:	2e b9       	out	0x0e, r18	; 14
			poop=(bitch>>3) & 0b00000110; // 00000'11'0
			PORTE= PORTE | poop;
     4ca:	2e b1       	in	r18, 0x0e	; 14
			SETBIT(PORTG,BIT(5));
			CLEARBIT(PORTE,BIT(0));
			bitch=str[k]; //10111001
			poop= bitch & 0b11000000; // '10'000000
			PORTE=poop;
			poop=(bitch>>3) & 0b00000110; // 00000'11'0
     4cc:	95 95       	asr	r25
     4ce:	87 95       	ror	r24
     4d0:	95 95       	asr	r25
     4d2:	87 95       	ror	r24
     4d4:	95 95       	asr	r25
     4d6:	87 95       	ror	r24
     4d8:	86 70       	andi	r24, 0x06	; 6
     4da:	90 70       	andi	r25, 0x00	; 0
			PORTE= PORTE | poop;
     4dc:	82 2b       	or	r24, r18
     4de:	8e b9       	out	0x0e, r24	; 14
			//PORTA=((str[k])&0xF0)|0x01;
			toggleE();
     4e0:	0e 94 91 00 	call	0x122	; 0x122 <toggleE>
			CLEARBIT(PORTG,BIT(5))
     4e4:	a5 98       	cbi	0x14, 5	; 20
			SETBIT(PORTG,BIT(5));
     4e6:	a5 9a       	sbi	0x14, 5	; 20
			CLEARBIT(PORTE,BIT(0));
     4e8:	70 98       	cbi	0x0e, 0	; 14
			bitch=str[k];
     4ea:	88 81       	ld	r24, Y
     4ec:	90 e0       	ldi	r25, 0x00	; 0
			poop=(bitch << 4) & 0b11000000; // '10'000000
     4ee:	9c 01       	movw	r18, r24
     4f0:	22 95       	swap	r18
     4f2:	32 95       	swap	r19
     4f4:	30 7f       	andi	r19, 0xF0	; 240
     4f6:	32 27       	eor	r19, r18
     4f8:	20 7f       	andi	r18, 0xF0	; 240
     4fa:	32 27       	eor	r19, r18
     4fc:	20 7c       	andi	r18, 0xC0	; 192
     4fe:	30 70       	andi	r19, 0x00	; 0
			PORTE=poop;
     500:	2e b9       	out	0x0e, r18	; 14
			poop=(bitch << 1) & 0b00000110; // 00000'01'0 
			PORTE= PORTE | poop;
     502:	2e b1       	in	r18, 0x0e	; 14
			SETBIT(PORTG,BIT(5));
			CLEARBIT(PORTE,BIT(0));
			bitch=str[k];
			poop=(bitch << 4) & 0b11000000; // '10'000000
			PORTE=poop;
			poop=(bitch << 1) & 0b00000110; // 00000'01'0 
     504:	88 0f       	add	r24, r24
     506:	99 1f       	adc	r25, r25
     508:	86 70       	andi	r24, 0x06	; 6
     50a:	90 70       	andi	r25, 0x00	; 0
			PORTE= PORTE | poop;
     50c:	82 2b       	or	r24, r18
     50e:	8e b9       	out	0x0e, r24	; 14
			//PORTA=((str[k]&(0x0F))*16)|0x01;
			toggleE();
     510:	0e 94 91 00 	call	0x122	; 0x122 <toggleE>
			k++;
     514:	1f 5f       	subi	r17, 0xFF	; 255
			WaitMs(1);
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0e 94 aa 00 	call	0x154	; 0x154 <WaitMs>
	int poop,bitch;
	unsigned char k=0;
	PORTA=0x01;
	SETBIT(PORTG,BIT(5));
	CLEARBIT(PORTE,BIT(0));
	while(str[k]!='\0')	//Till null character is encountered
     51e:	e7 01       	movw	r28, r14
     520:	c1 0f       	add	r28, r17
     522:	d1 1d       	adc	r29, r1
     524:	88 81       	ld	r24, Y
     526:	88 23       	and	r24, r24
     528:	09 f0       	breq	.+2      	; 0x52c <lcd_string+0xa0>
     52a:	bf cf       	rjmp	.-130    	; 0x4aa <lcd_string+0x1e>
			//PORTA=((str[k]&(0x0F))*16)|0x01;
			toggleE();
			k++;
			WaitMs(1);
		}
}
     52c:	df 91       	pop	r29
     52e:	cf 91       	pop	r28
     530:	1f 91       	pop	r17
     532:	ff 90       	pop	r15
     534:	ef 90       	pop	r14
     536:	08 95       	ret

00000538 <lcd_init>:
void lcd_exit(void);
void WaitMs(unsigned int ms);

void lcd_init(void)	//init the lcd
{	
	DDRE=0xC7;
     538:	87 ec       	ldi	r24, 0xC7	; 199
     53a:	8d b9       	out	0x0d, r24	; 13
	//DDRC=0x80;
	DDRG=0x20;
     53c:	80 e2       	ldi	r24, 0x20	; 32
     53e:	83 bb       	out	0x13, r24	; 19
	WaitMs(15);
     540:	8f e0       	ldi	r24, 0x0F	; 15
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 aa 00 	call	0x154	; 0x154 <WaitMs>
	CLEARBIT(PORTG,BIT(5));
     548:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
     54a:	70 98       	cbi	0x0e, 0	; 14
	PORTE=0x00;
     54c:	1e b8       	out	0x0e, r1	; 14
	lcd_cmd(0x20);		//data is 8-bit length
     54e:	80 e2       	ldi	r24, 0x20	; 32
     550:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_cmd>
	WaitMs(1);
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	0e 94 aa 00 	call	0x154	; 0x154 <WaitMs>
	lcd_cmd(0x20);		//data is 8-bit length
     55c:	80 e2       	ldi	r24, 0x20	; 32
     55e:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_cmd>
	WaitMs(1);
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	0e 94 aa 00 	call	0x154	; 0x154 <WaitMs>
	lcd_cmd(0x20);		//data is 8-bit length
     56a:	80 e2       	ldi	r24, 0x20	; 32
     56c:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_cmd>
	WaitMs(1);
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	0e 94 aa 00 	call	0x154	; 0x154 <WaitMs>
	lcd_cmd(0x28);		//sets character font
     578:	88 e2       	ldi	r24, 0x28	; 40
     57a:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_cmd>
	WaitMs(1);
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	0e 94 aa 00 	call	0x154	; 0x154 <WaitMs>
	lcd_cmd(0x0E);		//display off(d,c,b=0) 08
     586:	8e e0       	ldi	r24, 0x0E	; 14
     588:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_cmd>
	WaitMs(1);
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	0e 94 aa 00 	call	0x154	; 0x154 <WaitMs>
	lcd_cmd(0x01);		//clears the data
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_cmd>
	WaitMs(1);
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	0e 94 aa 00 	call	0x154	; 0x154 <WaitMs>
	//lcd_cmd(0x02);		//home
	//WaitMs(1);
	lcd_cmd(0x6);		//entry mode--increment
     5a2:	86 e0       	ldi	r24, 0x06	; 6
     5a4:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_cmd>
	WaitMs(1);
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	0e 94 aa 00 	call	0x154	; 0x154 <WaitMs>
	//lcd_cmd(0x0C);		//display--on,cursor--on.blinking--on
	//WaitMs(1);
}
     5b0:	08 95       	ret

000005b2 <PortInit>:
#define LeftNormal 375
#define RightNormal 350
/*------------------Init Functions-------------------*/
void PortInit(void)
{
	DDRE |= (1<<PE3) | (1<<PE4) | (1<<PE5);
     5b2:	8d b1       	in	r24, 0x0d	; 13
     5b4:	88 63       	ori	r24, 0x38	; 56
     5b6:	8d b9       	out	0x0d, r24	; 13
	DDRH |= (1<<PH3) | (1<<PH6) | (1<<PH7);
     5b8:	e1 e0       	ldi	r30, 0x01	; 1
     5ba:	f1 e0       	ldi	r31, 0x01	; 1
     5bc:	80 81       	ld	r24, Z
     5be:	88 6c       	ori	r24, 0xC8	; 200
     5c0:	80 83       	st	Z, r24
	DDRG |= (1<<PG3) | (1<<PG4);
     5c2:	83 b3       	in	r24, 0x13	; 19
     5c4:	88 61       	ori	r24, 0x18	; 24
     5c6:	83 bb       	out	0x13, r24	; 19
	DDRF = 0x00;
     5c8:	10 ba       	out	0x10, r1	; 16
	DDRC = 0x00;
     5ca:	17 b8       	out	0x07, r1	; 7
	SETBIT(PORTC, BIT(4));
     5cc:	44 9a       	sbi	0x08, 4	; 8
	DDRJ = 0xFF;
     5ce:	8f ef       	ldi	r24, 0xFF	; 255
     5d0:	80 93 04 01 	sts	0x0104, r24
	PORTJ = 0x00;
     5d4:	10 92 05 01 	sts	0x0105, r1
}
     5d8:	08 95       	ret

000005da <PwmInit>:

void PwmInit(void)
{
	TCCR3A = 0xA8;
     5da:	38 ea       	ldi	r19, 0xA8	; 168
     5dc:	30 93 90 00 	sts	0x0090, r19
	TCCR3B = 0x11;
     5e0:	21 e1       	ldi	r18, 0x11	; 17
     5e2:	20 93 91 00 	sts	0x0091, r18
	ICR3 = 737;
     5e6:	81 ee       	ldi	r24, 0xE1	; 225
     5e8:	92 e0       	ldi	r25, 0x02	; 2
     5ea:	90 93 97 00 	sts	0x0097, r25
     5ee:	80 93 96 00 	sts	0x0096, r24
	TCCR4A = 0xA8;
     5f2:	30 93 a0 00 	sts	0x00A0, r19
	TCCR4B = 0x11;
     5f6:	20 93 a1 00 	sts	0x00A1, r18
	ICR4 = 737;
     5fa:	90 93 a7 00 	sts	0x00A7, r25
     5fe:	80 93 a6 00 	sts	0x00A6, r24
}
     602:	08 95       	ret

00000604 <ADC_Init>:
/*--------------------------------------------------*/

/*------------------ADC Functions-------------------*/
void ADC_Init(void)
{
	ADCSRA |= (1<<ADEN);
     604:	ea e7       	ldi	r30, 0x7A	; 122
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	80 81       	ld	r24, Z
     60a:	80 68       	ori	r24, 0x80	; 128
     60c:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
     60e:	80 81       	ld	r24, Z
     610:	87 60       	ori	r24, 0x07	; 7
     612:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);	
     614:	80 81       	ld	r24, Z
     616:	80 64       	ori	r24, 0x40	; 64
     618:	80 83       	st	Z, r24
}
     61a:	08 95       	ret

0000061c <GetADCvalue>:
int GetADCvalue(int x)
{
	if (x == 0)
     61c:	00 97       	sbiw	r24, 0x00	; 0
     61e:	49 f4       	brne	.+18     	; 0x632 <GetADCvalue+0x16>
	{
		CLEARBIT(ADMUX, BIT(0));
     620:	ec e7       	ldi	r30, 0x7C	; 124
     622:	f0 e0       	ldi	r31, 0x00	; 0
     624:	80 81       	ld	r24, Z
     626:	8e 7f       	andi	r24, 0xFE	; 254
     628:	80 83       	st	Z, r24
		CLEARBIT(ADMUX, BIT(1));
     62a:	80 81       	ld	r24, Z
     62c:	8d 7f       	andi	r24, 0xFD	; 253
     62e:	80 83       	st	Z, r24
     630:	23 c0       	rjmp	.+70     	; 0x678 <GetADCvalue+0x5c>
	}
	else if (x == 1)
     632:	81 30       	cpi	r24, 0x01	; 1
     634:	91 05       	cpc	r25, r1
     636:	49 f4       	brne	.+18     	; 0x64a <GetADCvalue+0x2e>
	{
		SETBIT(ADMUX, BIT(0));
     638:	ec e7       	ldi	r30, 0x7C	; 124
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	80 81       	ld	r24, Z
     63e:	81 60       	ori	r24, 0x01	; 1
     640:	80 83       	st	Z, r24
		CLEARBIT(ADMUX, BIT(1));
     642:	80 81       	ld	r24, Z
     644:	8d 7f       	andi	r24, 0xFD	; 253
     646:	80 83       	st	Z, r24
     648:	17 c0       	rjmp	.+46     	; 0x678 <GetADCvalue+0x5c>
	}
	else if (x == 2)
     64a:	82 30       	cpi	r24, 0x02	; 2
     64c:	91 05       	cpc	r25, r1
     64e:	49 f4       	brne	.+18     	; 0x662 <GetADCvalue+0x46>
	{
		SETBIT(ADMUX, BIT(1));
     650:	ec e7       	ldi	r30, 0x7C	; 124
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	80 81       	ld	r24, Z
     656:	82 60       	ori	r24, 0x02	; 2
     658:	80 83       	st	Z, r24
		CLEARBIT(ADMUX, BIT(0));
     65a:	80 81       	ld	r24, Z
     65c:	8e 7f       	andi	r24, 0xFE	; 254
     65e:	80 83       	st	Z, r24
     660:	0b c0       	rjmp	.+22     	; 0x678 <GetADCvalue+0x5c>
	}
	else if (x == 3)
     662:	83 30       	cpi	r24, 0x03	; 3
     664:	91 05       	cpc	r25, r1
     666:	41 f4       	brne	.+16     	; 0x678 <GetADCvalue+0x5c>
	{
		SETBIT(ADMUX, BIT(1));
     668:	ec e7       	ldi	r30, 0x7C	; 124
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	80 81       	ld	r24, Z
     66e:	82 60       	ori	r24, 0x02	; 2
     670:	80 83       	st	Z, r24
		SETBIT(ADMUX, BIT(0));
     672:	80 81       	ld	r24, Z
     674:	81 60       	ori	r24, 0x01	; 1
     676:	80 83       	st	Z, r24
	}
	ADCSRA |= (1<<ADSC);	
     678:	ea e7       	ldi	r30, 0x7A	; 122
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	80 81       	ld	r24, Z
     67e:	80 64       	ori	r24, 0x40	; 64
     680:	80 83       	st	Z, r24
	while( !(ADCSRA & (1<<ADIF)));
     682:	80 81       	ld	r24, Z
     684:	84 ff       	sbrs	r24, 4
     686:	fd cf       	rjmp	.-6      	; 0x682 <GetADCvalue+0x66>
	return ADC;
     688:	80 91 78 00 	lds	r24, 0x0078
     68c:	90 91 79 00 	lds	r25, 0x0079
}
     690:	08 95       	ret

00000692 <GetSharpInput>:

int GetSharpInput(int x)
{
     692:	0f 93       	push	r16
     694:	1f 93       	push	r17
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	8c 01       	movw	r16, r24
	return ((GetADCvalue(x)+GetADCvalue(x)+GetADCvalue(x)+GetADCvalue(x))/4);
     69c:	0e 94 0e 03 	call	0x61c	; 0x61c <GetADCvalue>
     6a0:	ec 01       	movw	r28, r24
     6a2:	c8 01       	movw	r24, r16
     6a4:	0e 94 0e 03 	call	0x61c	; 0x61c <GetADCvalue>
     6a8:	c8 0f       	add	r28, r24
     6aa:	d9 1f       	adc	r29, r25
     6ac:	c8 01       	movw	r24, r16
     6ae:	0e 94 0e 03 	call	0x61c	; 0x61c <GetADCvalue>
     6b2:	c8 0f       	add	r28, r24
     6b4:	d9 1f       	adc	r29, r25
     6b6:	c8 01       	movw	r24, r16
     6b8:	0e 94 0e 03 	call	0x61c	; 0x61c <GetADCvalue>
     6bc:	c8 0f       	add	r28, r24
     6be:	d9 1f       	adc	r29, r25
     6c0:	dd 23       	and	r29, r29
     6c2:	0c f4       	brge	.+2      	; 0x6c6 <GetSharpInput+0x34>
     6c4:	23 96       	adiw	r28, 0x03	; 3
     6c6:	ce 01       	movw	r24, r28
     6c8:	95 95       	asr	r25
     6ca:	87 95       	ror	r24
     6cc:	95 95       	asr	r25
     6ce:	87 95       	ror	r24
}
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	1f 91       	pop	r17
     6d6:	0f 91       	pop	r16
     6d8:	08 95       	ret

000006da <Rail_Up>:


/*------------------Rail Functions-------------------*/
void Rail_Up(void)
{
	SETBIT(PORTG, BIT(3));
     6da:	a3 9a       	sbi	0x14, 3	; 20
	OCR3C = 737;
     6dc:	81 ee       	ldi	r24, 0xE1	; 225
     6de:	92 e0       	ldi	r25, 0x02	; 2
     6e0:	90 93 9d 00 	sts	0x009D, r25
     6e4:	80 93 9c 00 	sts	0x009C, r24
}
     6e8:	08 95       	ret

000006ea <Rail_Down>:

void Rail_Down(void)
{
	CLEARBIT(PORTG, BIT(3));
     6ea:	a3 98       	cbi	0x14, 3	; 20
	OCR3C = 737;
     6ec:	81 ee       	ldi	r24, 0xE1	; 225
     6ee:	92 e0       	ldi	r25, 0x02	; 2
     6f0:	90 93 9d 00 	sts	0x009D, r25
     6f4:	80 93 9c 00 	sts	0x009C, r24
}
     6f8:	08 95       	ret

000006fa <Rail_Stop>:

void Rail_Stop(void)
{
	TOGGLEBIT(PORTG, BIT(3));
     6fa:	94 b3       	in	r25, 0x14	; 20
     6fc:	88 e0       	ldi	r24, 0x08	; 8
     6fe:	89 27       	eor	r24, r25
     700:	84 bb       	out	0x14, r24	; 20
	OCR3C = 0;
     702:	10 92 9d 00 	sts	0x009D, r1
     706:	10 92 9c 00 	sts	0x009C, r1
}
     70a:	08 95       	ret

0000070c <PlaneUp>:
/*--------------------------------------------------*/

/*------------------Plane Functions-------------------*/
void PlaneUp(void)
{
	SETBIT(PORTG, BIT(4));
     70c:	a4 9a       	sbi	0x14, 4	; 20
	OCR4A = 737;
     70e:	81 ee       	ldi	r24, 0xE1	; 225
     710:	92 e0       	ldi	r25, 0x02	; 2
     712:	90 93 a9 00 	sts	0x00A9, r25
     716:	80 93 a8 00 	sts	0x00A8, r24
}
     71a:	08 95       	ret

0000071c <PlaneDown>:

void PlaneDown(void)
{
	CLEARBIT(PORTG, BIT(4));
     71c:	a4 98       	cbi	0x14, 4	; 20
	OCR4A = 737;
     71e:	81 ee       	ldi	r24, 0xE1	; 225
     720:	92 e0       	ldi	r25, 0x02	; 2
     722:	90 93 a9 00 	sts	0x00A9, r25
     726:	80 93 a8 00 	sts	0x00A8, r24
}
     72a:	08 95       	ret

0000072c <PlaneStop>:

void PlaneStop(void)
{
	TOGGLEBIT(PORTG, BIT(4));
     72c:	94 b3       	in	r25, 0x14	; 20
     72e:	80 e1       	ldi	r24, 0x10	; 16
     730:	89 27       	eor	r24, r25
     732:	84 bb       	out	0x14, r24	; 20
	OCR4A = 0;
     734:	10 92 a9 00 	sts	0x00A9, r1
     738:	10 92 a8 00 	sts	0x00A8, r1
}
     73c:	08 95       	ret

0000073e <Left_Motor_ClockWise>:
/*-------------Left Motor Functions-----------------*/

//ADC 1
void Left_Motor_ClockWise(int speed)
{
	SETBIT(PORTH, BIT(6));
     73e:	e2 e0       	ldi	r30, 0x02	; 2
     740:	f1 e0       	ldi	r31, 0x01	; 1
     742:	20 81       	ld	r18, Z
     744:	20 64       	ori	r18, 0x40	; 64
     746:	20 83       	st	Z, r18
	OCR3A = speed;
     748:	28 2f       	mov	r18, r24
     74a:	39 2f       	mov	r19, r25
     74c:	30 93 99 00 	sts	0x0099, r19
     750:	20 93 98 00 	sts	0x0098, r18
}
     754:	08 95       	ret

00000756 <Left_Motor_AntiClockWise>:

void Left_Motor_AntiClockWise(int speed)
{
	CLEARBIT(PORTH, BIT(6));
     756:	e2 e0       	ldi	r30, 0x02	; 2
     758:	f1 e0       	ldi	r31, 0x01	; 1
     75a:	20 81       	ld	r18, Z
     75c:	2f 7b       	andi	r18, 0xBF	; 191
     75e:	20 83       	st	Z, r18
	OCR3A = speed;
     760:	28 2f       	mov	r18, r24
     762:	39 2f       	mov	r19, r25
     764:	30 93 99 00 	sts	0x0099, r19
     768:	20 93 98 00 	sts	0x0098, r18
}
     76c:	08 95       	ret

0000076e <Left_Motor_Stop>:

void Left_Motor_Stop(void)
{
	TOGGLEBIT(PORTH, BIT(6));
     76e:	e2 e0       	ldi	r30, 0x02	; 2
     770:	f1 e0       	ldi	r31, 0x01	; 1
     772:	90 81       	ld	r25, Z
     774:	80 e4       	ldi	r24, 0x40	; 64
     776:	89 27       	eor	r24, r25
     778:	80 83       	st	Z, r24
	OCR3A = 0;
     77a:	10 92 99 00 	sts	0x0099, r1
     77e:	10 92 98 00 	sts	0x0098, r1
}
     782:	08 95       	ret

00000784 <Right_Motor_ClockWise>:
/*-------------Right Motor Functions-----------------*/

//ADC 2
void Right_Motor_ClockWise(int speed)
{
	SETBIT(PORTH, BIT(7));
     784:	e2 e0       	ldi	r30, 0x02	; 2
     786:	f1 e0       	ldi	r31, 0x01	; 1
     788:	20 81       	ld	r18, Z
     78a:	20 68       	ori	r18, 0x80	; 128
     78c:	20 83       	st	Z, r18
	OCR3B = speed;
     78e:	28 2f       	mov	r18, r24
     790:	39 2f       	mov	r19, r25
     792:	30 93 9b 00 	sts	0x009B, r19
     796:	20 93 9a 00 	sts	0x009A, r18
}
     79a:	08 95       	ret

0000079c <Right_Motor_AntiClockWise>:

void Right_Motor_AntiClockWise(int speed)
{
	CLEARBIT(PORTH, BIT(7));
     79c:	e2 e0       	ldi	r30, 0x02	; 2
     79e:	f1 e0       	ldi	r31, 0x01	; 1
     7a0:	20 81       	ld	r18, Z
     7a2:	2f 77       	andi	r18, 0x7F	; 127
     7a4:	20 83       	st	Z, r18
	OCR3B = speed;
     7a6:	28 2f       	mov	r18, r24
     7a8:	39 2f       	mov	r19, r25
     7aa:	30 93 9b 00 	sts	0x009B, r19
     7ae:	20 93 9a 00 	sts	0x009A, r18
}
     7b2:	08 95       	ret

000007b4 <Right_Motor_Stop>:

void Right_Motor_Stop(void)
{
	TOGGLEBIT(PORTH, BIT(7));
     7b4:	e2 e0       	ldi	r30, 0x02	; 2
     7b6:	f1 e0       	ldi	r31, 0x01	; 1
     7b8:	80 81       	ld	r24, Z
     7ba:	80 58       	subi	r24, 0x80	; 128
     7bc:	80 83       	st	Z, r24
	OCR3B = 0;
     7be:	10 92 9b 00 	sts	0x009B, r1
     7c2:	10 92 9a 00 	sts	0x009A, r1
}
     7c6:	08 95       	ret

000007c8 <All_Motors_stop>:
/*--------------------------------------------------*/

void All_Motors_stop(void)
{
	Rail_Stop();
     7c8:	0e 94 7d 03 	call	0x6fa	; 0x6fa <Rail_Stop>
	Left_Motor_Stop();
     7cc:	0e 94 b7 03 	call	0x76e	; 0x76e <Left_Motor_Stop>
	Right_Motor_Stop();
     7d0:	0e 94 da 03 	call	0x7b4	; 0x7b4 <Right_Motor_Stop>
}
     7d4:	08 95       	ret

000007d6 <All_Motors_Normal_Position>:

void All_Motors_Normal_Position(void)
{
	while (GetADCvalue(1) <= (LeftNormal -10))
     7d6:	04 c0       	rjmp	.+8      	; 0x7e0 <All_Motors_Normal_Position+0xa>
	{
		Left_Motor_ClockWise(300);
     7d8:	8c e2       	ldi	r24, 0x2C	; 44
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	0e 94 9f 03 	call	0x73e	; 0x73e <Left_Motor_ClockWise>
	Right_Motor_Stop();
}

void All_Motors_Normal_Position(void)
{
	while (GetADCvalue(1) <= (LeftNormal -10))
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	0e 94 0e 03 	call	0x61c	; 0x61c <GetADCvalue>
     7e8:	21 e0       	ldi	r18, 0x01	; 1
     7ea:	8e 36       	cpi	r24, 0x6E	; 110
     7ec:	92 07       	cpc	r25, r18
     7ee:	a4 f3       	brlt	.-24     	; 0x7d8 <All_Motors_Normal_Position+0x2>
	{
		Left_Motor_ClockWise(300);
		//lcd_gotoxy1(0);
		//lcd_showvalue(GetADCvalue(1));
	}
	All_Motors_stop();
     7f0:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <All_Motors_stop>
	while (GetADCvalue(1) >= (LeftNormal + 10))
     7f4:	04 c0       	rjmp	.+8      	; 0x7fe <All_Motors_Normal_Position+0x28>
	{
		Left_Motor_AntiClockWise(300);
     7f6:	8c e2       	ldi	r24, 0x2C	; 44
     7f8:	91 e0       	ldi	r25, 0x01	; 1
     7fa:	0e 94 ab 03 	call	0x756	; 0x756 <Left_Motor_AntiClockWise>
		Left_Motor_ClockWise(300);
		//lcd_gotoxy1(0);
		//lcd_showvalue(GetADCvalue(1));
	}
	All_Motors_stop();
	while (GetADCvalue(1) >= (LeftNormal + 10))
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 0e 03 	call	0x61c	; 0x61c <GetADCvalue>
     806:	21 e0       	ldi	r18, 0x01	; 1
     808:	81 38       	cpi	r24, 0x81	; 129
     80a:	92 07       	cpc	r25, r18
     80c:	a4 f7       	brge	.-24     	; 0x7f6 <All_Motors_Normal_Position+0x20>
	{
		Left_Motor_AntiClockWise(300);
		//lcd_gotoxy1(0);
		//lcd_showvalue(GetADCvalue(1));
	}
	All_Motors_stop();
     80e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <All_Motors_stop>
	while (GetADCvalue(2) <= RightNormal)
     812:	04 c0       	rjmp	.+8      	; 0x81c <All_Motors_Normal_Position+0x46>
	{
		Right_Motor_AntiClockWise(300);
     814:	8c e2       	ldi	r24, 0x2C	; 44
     816:	91 e0       	ldi	r25, 0x01	; 1
     818:	0e 94 ce 03 	call	0x79c	; 0x79c <Right_Motor_AntiClockWise>
		Left_Motor_AntiClockWise(300);
		//lcd_gotoxy1(0);
		//lcd_showvalue(GetADCvalue(1));
	}
	All_Motors_stop();
	while (GetADCvalue(2) <= RightNormal)
     81c:	82 e0       	ldi	r24, 0x02	; 2
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	0e 94 0e 03 	call	0x61c	; 0x61c <GetADCvalue>
     824:	21 e0       	ldi	r18, 0x01	; 1
     826:	8f 35       	cpi	r24, 0x5F	; 95
     828:	92 07       	cpc	r25, r18
     82a:	a4 f3       	brlt	.-24     	; 0x814 <All_Motors_Normal_Position+0x3e>
	{
		Right_Motor_AntiClockWise(300);
		//lcd_cmd(LINE2);
		//lcd_showvalue(GetADCvalue(2));
	}
	All_Motors_stop();
     82c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <All_Motors_stop>
	while (GetADCvalue(2) >= RightNormal + 10)
     830:	04 c0       	rjmp	.+8      	; 0x83a <All_Motors_Normal_Position+0x64>
	{
		Right_Motor_ClockWise(300);
     832:	8c e2       	ldi	r24, 0x2C	; 44
     834:	91 e0       	ldi	r25, 0x01	; 1
     836:	0e 94 c2 03 	call	0x784	; 0x784 <Right_Motor_ClockWise>
		Right_Motor_AntiClockWise(300);
		//lcd_cmd(LINE2);
		//lcd_showvalue(GetADCvalue(2));
	}
	All_Motors_stop();
	while (GetADCvalue(2) >= RightNormal + 10)
     83a:	82 e0       	ldi	r24, 0x02	; 2
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0e 94 0e 03 	call	0x61c	; 0x61c <GetADCvalue>
     842:	21 e0       	ldi	r18, 0x01	; 1
     844:	88 36       	cpi	r24, 0x68	; 104
     846:	92 07       	cpc	r25, r18
     848:	a4 f7       	brge	.-24     	; 0x832 <All_Motors_Normal_Position+0x5c>
	{
		Right_Motor_ClockWise(300);
		//lcd_cmd(LINE2);
		//lcd_showvalue(GetADCvalue(2));
	}
	All_Motors_stop();
     84a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <All_Motors_stop>
}
     84e:	08 95       	ret

00000850 <SeeSaw>:
#define LeftDown 890
#define RightDown	880

void SeeSaw(void)
{
	while (GetADCvalue(1) <  LeftDown)
     850:	04 c0       	rjmp	.+8      	; 0x85a <SeeSaw+0xa>
	{
		Left_Motor_ClockWise(500);
     852:	84 ef       	ldi	r24, 0xF4	; 244
     854:	91 e0       	ldi	r25, 0x01	; 1
     856:	0e 94 9f 03 	call	0x73e	; 0x73e <Left_Motor_ClockWise>
#define LeftDown 890
#define RightDown	880

void SeeSaw(void)
{
	while (GetADCvalue(1) <  LeftDown)
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	0e 94 0e 03 	call	0x61c	; 0x61c <GetADCvalue>
     862:	23 e0       	ldi	r18, 0x03	; 3
     864:	8a 37       	cpi	r24, 0x7A	; 122
     866:	92 07       	cpc	r25, r18
     868:	a4 f3       	brlt	.-24     	; 0x852 <SeeSaw+0x2>
		Left_Motor_ClockWise(500);
		//lcd_gotoxy1(0);
		//lcd_showvalue(GetADCvalue(1));
	}
	
	All_Motors_stop();
     86a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <All_Motors_stop>
	
	while (GetADCvalue(2) < RightDown)
     86e:	04 c0       	rjmp	.+8      	; 0x878 <SeeSaw+0x28>
	{
		Right_Motor_AntiClockWise(500);
     870:	84 ef       	ldi	r24, 0xF4	; 244
     872:	91 e0       	ldi	r25, 0x01	; 1
     874:	0e 94 ce 03 	call	0x79c	; 0x79c <Right_Motor_AntiClockWise>
		//lcd_showvalue(GetADCvalue(1));
	}
	
	All_Motors_stop();
	
	while (GetADCvalue(2) < RightDown)
     878:	82 e0       	ldi	r24, 0x02	; 2
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	0e 94 0e 03 	call	0x61c	; 0x61c <GetADCvalue>
     880:	23 e0       	ldi	r18, 0x03	; 3
     882:	80 37       	cpi	r24, 0x70	; 112
     884:	92 07       	cpc	r25, r18
     886:	a4 f3       	brlt	.-24     	; 0x870 <SeeSaw+0x20>
		Right_Motor_AntiClockWise(500);
		//lcd_cmd(LINE2);
		//lcd_showvalue(GetADCvalue(2));

	}
	All_Motors_stop();
     888:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <All_Motors_stop>
     88c:	08 95       	ret

0000088e <Swing>:
#define LeftUP	390
#define RightUP	395
void Swing()
{
	Rail_Up();
     88e:	0e 94 6d 03 	call	0x6da	; 0x6da <Rail_Up>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     892:	8f ef       	ldi	r24, 0xFF	; 255
     894:	9f e7       	ldi	r25, 0x7F	; 127
     896:	a1 e3       	ldi	r26, 0x31	; 49
     898:	81 50       	subi	r24, 0x01	; 1
     89a:	90 40       	sbci	r25, 0x00	; 0
     89c:	a0 40       	sbci	r26, 0x00	; 0
     89e:	e1 f7       	brne	.-8      	; 0x898 <Swing+0xa>
     8a0:	00 c0       	rjmp	.+0      	; 0x8a2 <Swing+0x14>
     8a2:	00 00       	nop
	_delay_ms(1100);
	Rail_Stop();
     8a4:	0e 94 7d 03 	call	0x6fa	; 0x6fa <Rail_Stop>
	while(GetADCvalue(1) > LeftUP)
     8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <Swing+0x24>
	{
		Left_Motor_AntiClockWise(500);
     8aa:	84 ef       	ldi	r24, 0xF4	; 244
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	0e 94 ab 03 	call	0x756	; 0x756 <Left_Motor_AntiClockWise>
void Swing()
{
	Rail_Up();
	_delay_ms(1100);
	Rail_Stop();
	while(GetADCvalue(1) > LeftUP)
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	0e 94 0e 03 	call	0x61c	; 0x61c <GetADCvalue>
     8ba:	a1 e0       	ldi	r26, 0x01	; 1
     8bc:	87 38       	cpi	r24, 0x87	; 135
     8be:	9a 07       	cpc	r25, r26
     8c0:	a4 f7       	brge	.-24     	; 0x8aa <Swing+0x1c>
	{
		Left_Motor_AntiClockWise(500);
	}
	All_Motors_stop();
     8c2:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <All_Motors_stop>
	while (GetADCvalue(2) > RightUP)
     8c6:	04 c0       	rjmp	.+8      	; 0x8d0 <Swing+0x42>
	{
		Right_Motor_ClockWise(500);
     8c8:	84 ef       	ldi	r24, 0xF4	; 244
     8ca:	91 e0       	ldi	r25, 0x01	; 1
     8cc:	0e 94 c2 03 	call	0x784	; 0x784 <Right_Motor_ClockWise>
	while(GetADCvalue(1) > LeftUP)
	{
		Left_Motor_AntiClockWise(500);
	}
	All_Motors_stop();
	while (GetADCvalue(2) > RightUP)
     8d0:	82 e0       	ldi	r24, 0x02	; 2
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	0e 94 0e 03 	call	0x61c	; 0x61c <GetADCvalue>
     8d8:	b1 e0       	ldi	r27, 0x01	; 1
     8da:	8c 38       	cpi	r24, 0x8C	; 140
     8dc:	9b 07       	cpc	r25, r27
     8de:	a4 f7       	brge	.-24     	; 0x8c8 <Swing+0x3a>
	{
		Right_Motor_ClockWise(500);
	}
	All_Motors_stop();
     8e0:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <All_Motors_stop>
}
     8e4:	08 95       	ret

000008e6 <SwingRailRetract>:
     8e6:	8f ef       	ldi	r24, 0xFF	; 255
     8e8:	9f ef       	ldi	r25, 0xFF	; 255
     8ea:	a9 e5       	ldi	r26, 0x59	; 89
     8ec:	81 50       	subi	r24, 0x01	; 1
     8ee:	90 40       	sbci	r25, 0x00	; 0
     8f0:	a0 40       	sbci	r26, 0x00	; 0
     8f2:	e1 f7       	brne	.-8      	; 0x8ec <SwingRailRetract+0x6>
     8f4:	00 c0       	rjmp	.+0      	; 0x8f6 <SwingRailRetract+0x10>
     8f6:	00 00       	nop

void SwingRailRetract(void)
{
	_delay_ms(2000);				//pick up delay
	Rail_Down();
     8f8:	0e 94 75 03 	call	0x6ea	; 0x6ea <Rail_Down>
     8fc:	8f ef       	ldi	r24, 0xFF	; 255
     8fe:	9f ef       	ldi	r25, 0xFF	; 255
     900:	ac e2       	ldi	r26, 0x2C	; 44
     902:	81 50       	subi	r24, 0x01	; 1
     904:	90 40       	sbci	r25, 0x00	; 0
     906:	a0 40       	sbci	r26, 0x00	; 0
     908:	e1 f7       	brne	.-8      	; 0x902 <SwingRailRetract+0x1c>
     90a:	00 c0       	rjmp	.+0      	; 0x90c <SwingRailRetract+0x26>
     90c:	00 00       	nop
	_delay_ms(1000);
	Rail_Stop();
     90e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <Rail_Stop>
     912:	08 95       	ret

00000914 <PoleWalk_Adjust_Initial_Value>:
#define RightInitialValue 510


void PoleWalk_Adjust_Initial_Value(void)
{
	while (GetADCvalue(2) > 650)
     914:	04 c0       	rjmp	.+8      	; 0x91e <PoleWalk_Adjust_Initial_Value+0xa>
	{
		Right_Motor_ClockWise(300);
     916:	8c e2       	ldi	r24, 0x2C	; 44
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	0e 94 c2 03 	call	0x784	; 0x784 <Right_Motor_ClockWise>
#define RightInitialValue 510


void PoleWalk_Adjust_Initial_Value(void)
{
	while (GetADCvalue(2) > 650)
     91e:	82 e0       	ldi	r24, 0x02	; 2
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	0e 94 0e 03 	call	0x61c	; 0x61c <GetADCvalue>
     926:	22 e0       	ldi	r18, 0x02	; 2
     928:	8b 38       	cpi	r24, 0x8B	; 139
     92a:	92 07       	cpc	r25, r18
     92c:	a4 f7       	brge	.-24     	; 0x916 <PoleWalk_Adjust_Initial_Value+0x2>
     92e:	04 c0       	rjmp	.+8      	; 0x938 <PoleWalk_Adjust_Initial_Value+0x24>
	{
		Right_Motor_ClockWise(300);
	}
	while (GetADCvalue(2) < 630)
	{
		Right_Motor_AntiClockWise(300);
     930:	8c e2       	ldi	r24, 0x2C	; 44
     932:	91 e0       	ldi	r25, 0x01	; 1
     934:	0e 94 ce 03 	call	0x79c	; 0x79c <Right_Motor_AntiClockWise>
{
	while (GetADCvalue(2) > 650)
	{
		Right_Motor_ClockWise(300);
	}
	while (GetADCvalue(2) < 630)
     938:	82 e0       	ldi	r24, 0x02	; 2
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	0e 94 0e 03 	call	0x61c	; 0x61c <GetADCvalue>
     940:	22 e0       	ldi	r18, 0x02	; 2
     942:	86 37       	cpi	r24, 0x76	; 118
     944:	92 07       	cpc	r25, r18
     946:	a4 f3       	brlt	.-24     	; 0x930 <PoleWalk_Adjust_Initial_Value+0x1c>
	{
		Right_Motor_AntiClockWise(300);
	}
	All_Motors_stop();
     948:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <All_Motors_stop>
}
     94c:	08 95       	ret

0000094e <PoleWalk>:


void PoleWalk(void)
{
	SETBIT(PORTJ, BIT(5));
     94e:	e5 e0       	ldi	r30, 0x05	; 5
     950:	f1 e0       	ldi	r31, 0x01	; 1
     952:	80 81       	ld	r24, Z
     954:	80 62       	ori	r24, 0x20	; 32
     956:	80 83       	st	Z, r24
     958:	8f ef       	ldi	r24, 0xFF	; 255
     95a:	9f ef       	ldi	r25, 0xFF	; 255
     95c:	ac e2       	ldi	r26, 0x2C	; 44
     95e:	81 50       	subi	r24, 0x01	; 1
     960:	90 40       	sbci	r25, 0x00	; 0
     962:	a0 40       	sbci	r26, 0x00	; 0
     964:	e1 f7       	brne	.-8      	; 0x95e <PoleWalk+0x10>
     966:	00 c0       	rjmp	.+0      	; 0x968 <PoleWalk+0x1a>
     968:	00 00       	nop
     96a:	04 c0       	rjmp	.+8      	; 0x974 <PoleWalk+0x26>
	_delay_ms(1000);
	
	
	while (GetADCvalue(1) < 1015)
	{
		Left_Motor_ClockWise(500);
     96c:	84 ef       	ldi	r24, 0xF4	; 244
     96e:	91 e0       	ldi	r25, 0x01	; 1
     970:	0e 94 9f 03 	call	0x73e	; 0x73e <Left_Motor_ClockWise>
{
	SETBIT(PORTJ, BIT(5));
	_delay_ms(1000);
	
	
	while (GetADCvalue(1) < 1015)
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0e 94 0e 03 	call	0x61c	; 0x61c <GetADCvalue>
     97c:	a3 e0       	ldi	r26, 0x03	; 3
     97e:	87 3f       	cpi	r24, 0xF7	; 247
     980:	9a 07       	cpc	r25, r26
     982:	a4 f3       	brlt	.-24     	; 0x96c <PoleWalk+0x1e>
     984:	04 c0       	rjmp	.+8      	; 0x98e <PoleWalk+0x40>
	{
		Left_Motor_ClockWise(500);
	}
	while (GetADCvalue(1) > 1020)
	{
		Left_Motor_AntiClockWise(500);
     986:	84 ef       	ldi	r24, 0xF4	; 244
     988:	91 e0       	ldi	r25, 0x01	; 1
     98a:	0e 94 ab 03 	call	0x756	; 0x756 <Left_Motor_AntiClockWise>
	
	while (GetADCvalue(1) < 1015)
	{
		Left_Motor_ClockWise(500);
	}
	while (GetADCvalue(1) > 1020)
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	0e 94 0e 03 	call	0x61c	; 0x61c <GetADCvalue>
     996:	b3 e0       	ldi	r27, 0x03	; 3
     998:	8d 3f       	cpi	r24, 0xFD	; 253
     99a:	9b 07       	cpc	r25, r27
     99c:	a4 f7       	brge	.-24     	; 0x986 <PoleWalk+0x38>
	{
		Left_Motor_AntiClockWise(500);
	}
	All_Motors_stop();
     99e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <All_Motors_stop>
	//_delay_ms(100);
	/*_____Grab Pole 2 And leave Pole 1_____*/
	
	SETBIT(PORTJ, BIT(6));
     9a2:	e5 e0       	ldi	r30, 0x05	; 5
     9a4:	f1 e0       	ldi	r31, 0x01	; 1
     9a6:	80 81       	ld	r24, Z
     9a8:	80 64       	ori	r24, 0x40	; 64
     9aa:	80 83       	st	Z, r24
     9ac:	8f ef       	ldi	r24, 0xFF	; 255
     9ae:	9f e7       	ldi	r25, 0x7F	; 127
     9b0:	a6 e1       	ldi	r26, 0x16	; 22
     9b2:	81 50       	subi	r24, 0x01	; 1
     9b4:	90 40       	sbci	r25, 0x00	; 0
     9b6:	a0 40       	sbci	r26, 0x00	; 0
     9b8:	e1 f7       	brne	.-8      	; 0x9b2 <PoleWalk+0x64>
     9ba:	00 c0       	rjmp	.+0      	; 0x9bc <PoleWalk+0x6e>
     9bc:	00 00       	nop
	_delay_ms(500);
	CLEARBIT(PORTJ, BIT(5));
     9be:	80 81       	ld	r24, Z
     9c0:	8f 7d       	andi	r24, 0xDF	; 223
     9c2:	80 83       	st	Z, r24
     9c4:	8f ef       	ldi	r24, 0xFF	; 255
     9c6:	9f e7       	ldi	r25, 0x7F	; 127
     9c8:	a4 e0       	ldi	r26, 0x04	; 4
     9ca:	81 50       	subi	r24, 0x01	; 1
     9cc:	90 40       	sbci	r25, 0x00	; 0
     9ce:	a0 40       	sbci	r26, 0x00	; 0
     9d0:	e1 f7       	brne	.-8      	; 0x9ca <PoleWalk+0x7c>
     9d2:	00 c0       	rjmp	.+0      	; 0x9d4 <PoleWalk+0x86>
     9d4:	00 00       	nop
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <PoleWalk+0x92>
	
	/*______________________________________*/
	
	while (GetADCvalue(2) > 330)
	{
		Right_Motor_ClockWise(550);
     9d8:	86 e2       	ldi	r24, 0x26	; 38
     9da:	92 e0       	ldi	r25, 0x02	; 2
     9dc:	0e 94 c2 03 	call	0x784	; 0x784 <Right_Motor_ClockWise>
	CLEARBIT(PORTJ, BIT(5));
	_delay_ms(100);
	
	/*______________________________________*/
	
	while (GetADCvalue(2) > 330)
     9e0:	82 e0       	ldi	r24, 0x02	; 2
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	0e 94 0e 03 	call	0x61c	; 0x61c <GetADCvalue>
     9e8:	a1 e0       	ldi	r26, 0x01	; 1
     9ea:	8b 34       	cpi	r24, 0x4B	; 75
     9ec:	9a 07       	cpc	r25, r26
     9ee:	a4 f7       	brge	.-24     	; 0x9d8 <PoleWalk+0x8a>
     9f0:	04 c0       	rjmp	.+8      	; 0x9fa <PoleWalk+0xac>
	{
		Right_Motor_ClockWise(550);
	}
	while (GetADCvalue(2) < 320)
	{
		Right_Motor_AntiClockWise(550);
     9f2:	86 e2       	ldi	r24, 0x26	; 38
     9f4:	92 e0       	ldi	r25, 0x02	; 2
     9f6:	0e 94 ce 03 	call	0x79c	; 0x79c <Right_Motor_AntiClockWise>
	
	while (GetADCvalue(2) > 330)
	{
		Right_Motor_ClockWise(550);
	}
	while (GetADCvalue(2) < 320)
     9fa:	82 e0       	ldi	r24, 0x02	; 2
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 0e 03 	call	0x61c	; 0x61c <GetADCvalue>
     a02:	b1 e0       	ldi	r27, 0x01	; 1
     a04:	80 34       	cpi	r24, 0x40	; 64
     a06:	9b 07       	cpc	r25, r27
     a08:	a4 f3       	brlt	.-24     	; 0x9f2 <PoleWalk+0xa4>
	{
		Right_Motor_AntiClockWise(550);
	}
	All_Motors_stop();
     a0a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <All_Motors_stop>
	
	while (GetADCvalue(1) <	340)
     a0e:	04 c0       	rjmp	.+8      	; 0xa18 <PoleWalk+0xca>
	{
		Left_Motor_ClockWise(400);
     a10:	80 e9       	ldi	r24, 0x90	; 144
     a12:	91 e0       	ldi	r25, 0x01	; 1
     a14:	0e 94 9f 03 	call	0x73e	; 0x73e <Left_Motor_ClockWise>
	{
		Right_Motor_AntiClockWise(550);
	}
	All_Motors_stop();
	
	while (GetADCvalue(1) <	340)
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	0e 94 0e 03 	call	0x61c	; 0x61c <GetADCvalue>
     a20:	21 e0       	ldi	r18, 0x01	; 1
     a22:	84 35       	cpi	r24, 0x54	; 84
     a24:	92 07       	cpc	r25, r18
     a26:	a4 f3       	brlt	.-24     	; 0xa10 <PoleWalk+0xc2>
     a28:	04 c0       	rjmp	.+8      	; 0xa32 <PoleWalk+0xe4>
		Left_Motor_ClockWise(400);
	}
	
	while (GetADCvalue(1) > 350)
	{
		Left_Motor_AntiClockWise(400);
     a2a:	80 e9       	ldi	r24, 0x90	; 144
     a2c:	91 e0       	ldi	r25, 0x01	; 1
     a2e:	0e 94 ab 03 	call	0x756	; 0x756 <Left_Motor_AntiClockWise>
	while (GetADCvalue(1) <	340)
	{
		Left_Motor_ClockWise(400);
	}
	
	while (GetADCvalue(1) > 350)
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	0e 94 0e 03 	call	0x61c	; 0x61c <GetADCvalue>
     a3a:	31 e0       	ldi	r19, 0x01	; 1
     a3c:	8f 35       	cpi	r24, 0x5F	; 95
     a3e:	93 07       	cpc	r25, r19
     a40:	a4 f7       	brge	.-24     	; 0xa2a <PoleWalk+0xdc>
	{
		Left_Motor_AntiClockWise(400);
	}
	All_Motors_stop();
     a42:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <All_Motors_stop>
	//_delay_ms(1000);
	/*_____Grab Pole 3 And leave Pole 2_____*/
	
	SETBIT(PORTJ, BIT(1));
     a46:	e5 e0       	ldi	r30, 0x05	; 5
     a48:	f1 e0       	ldi	r31, 0x01	; 1
     a4a:	80 81       	ld	r24, Z
     a4c:	82 60       	ori	r24, 0x02	; 2
     a4e:	80 83       	st	Z, r24
	SETBIT(PORTJ, BIT(1));
     a50:	80 81       	ld	r24, Z
     a52:	82 60       	ori	r24, 0x02	; 2
     a54:	80 83       	st	Z, r24
     a56:	8f ef       	ldi	r24, 0xFF	; 255
     a58:	9f e7       	ldi	r25, 0x7F	; 127
     a5a:	a6 e1       	ldi	r26, 0x16	; 22
     a5c:	81 50       	subi	r24, 0x01	; 1
     a5e:	90 40       	sbci	r25, 0x00	; 0
     a60:	a0 40       	sbci	r26, 0x00	; 0
     a62:	e1 f7       	brne	.-8      	; 0xa5c <PoleWalk+0x10e>
     a64:	00 c0       	rjmp	.+0      	; 0xa66 <PoleWalk+0x118>
     a66:	00 00       	nop
	_delay_ms(500);
	CLEARBIT(PORTJ, BIT(6));
     a68:	80 81       	ld	r24, Z
     a6a:	8f 7b       	andi	r24, 0xBF	; 191
     a6c:	80 83       	st	Z, r24
     a6e:	8f ef       	ldi	r24, 0xFF	; 255
     a70:	9f e7       	ldi	r25, 0x7F	; 127
     a72:	a4 e0       	ldi	r26, 0x04	; 4
     a74:	81 50       	subi	r24, 0x01	; 1
     a76:	90 40       	sbci	r25, 0x00	; 0
     a78:	a0 40       	sbci	r26, 0x00	; 0
     a7a:	e1 f7       	brne	.-8      	; 0xa74 <PoleWalk+0x126>
     a7c:	00 c0       	rjmp	.+0      	; 0xa7e <PoleWalk+0x130>
     a7e:	00 00       	nop
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <PoleWalk+0x13c>
	
	/*______________________________________*/
	
	while (GetADCvalue(1) < 640)
	{
		Left_Motor_ClockWise(550);
     a82:	86 e2       	ldi	r24, 0x26	; 38
     a84:	92 e0       	ldi	r25, 0x02	; 2
     a86:	0e 94 9f 03 	call	0x73e	; 0x73e <Left_Motor_ClockWise>
	CLEARBIT(PORTJ, BIT(6));
	_delay_ms(100);
	
	/*______________________________________*/
	
	while (GetADCvalue(1) < 640)
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	0e 94 0e 03 	call	0x61c	; 0x61c <GetADCvalue>
     a92:	a2 e0       	ldi	r26, 0x02	; 2
     a94:	80 38       	cpi	r24, 0x80	; 128
     a96:	9a 07       	cpc	r25, r26
     a98:	a4 f3       	brlt	.-24     	; 0xa82 <PoleWalk+0x134>
     a9a:	04 c0       	rjmp	.+8      	; 0xaa4 <PoleWalk+0x156>
	{
		Left_Motor_ClockWise(550);
	}
	while (GetADCvalue(1) > 670)
	{
		Left_Motor_AntiClockWise(550);
     a9c:	86 e2       	ldi	r24, 0x26	; 38
     a9e:	92 e0       	ldi	r25, 0x02	; 2
     aa0:	0e 94 ab 03 	call	0x756	; 0x756 <Left_Motor_AntiClockWise>
	
	while (GetADCvalue(1) < 640)
	{
		Left_Motor_ClockWise(550);
	}
	while (GetADCvalue(1) > 670)
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	0e 94 0e 03 	call	0x61c	; 0x61c <GetADCvalue>
     aac:	b2 e0       	ldi	r27, 0x02	; 2
     aae:	8f 39       	cpi	r24, 0x9F	; 159
     ab0:	9b 07       	cpc	r25, r27
     ab2:	a4 f7       	brge	.-24     	; 0xa9c <PoleWalk+0x14e>
	{
		Left_Motor_AntiClockWise(550);
	}
	All_Motors_stop();
     ab4:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <All_Motors_stop>
	
	while (GetADCvalue(2) > 980)
     ab8:	13 c0       	rjmp	.+38     	; 0xae0 <PoleWalk+0x192>
	{
		Right_Motor_ClockWise(400);
     aba:	80 e9       	ldi	r24, 0x90	; 144
     abc:	91 e0       	ldi	r25, 0x01	; 1
     abe:	0e 94 c2 03 	call	0x784	; 0x784 <Right_Motor_ClockWise>
		lcd_gotoxy1(0);
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	0e 94 42 02 	call	0x484	; 0x484 <lcd_gotoxy1>
		lcd_showvalue(GetADCvalue(2));
     ac8:	82 e0       	ldi	r24, 0x02	; 2
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	0e 94 0e 03 	call	0x61c	; 0x61c <GetADCvalue>
     ad0:	9c 01       	movw	r18, r24
     ad2:	b9 01       	movw	r22, r18
     ad4:	88 27       	eor	r24, r24
     ad6:	77 fd       	sbrc	r23, 7
     ad8:	80 95       	com	r24
     ada:	98 2f       	mov	r25, r24
     adc:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_showvalue>
	{
		Left_Motor_AntiClockWise(550);
	}
	All_Motors_stop();
	
	while (GetADCvalue(2) > 980)
     ae0:	82 e0       	ldi	r24, 0x02	; 2
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	0e 94 0e 03 	call	0x61c	; 0x61c <GetADCvalue>
     ae8:	33 e0       	ldi	r19, 0x03	; 3
     aea:	85 3d       	cpi	r24, 0xD5	; 213
     aec:	93 07       	cpc	r25, r19
     aee:	2c f7       	brge	.-54     	; 0xaba <PoleWalk+0x16c>
     af0:	13 c0       	rjmp	.+38     	; 0xb18 <PoleWalk+0x1ca>
		lcd_gotoxy1(0);
		lcd_showvalue(GetADCvalue(2));
	}
	while (GetADCvalue(2) < 958)
	{
		Right_Motor_AntiClockWise(400);
     af2:	80 e9       	ldi	r24, 0x90	; 144
     af4:	91 e0       	ldi	r25, 0x01	; 1
     af6:	0e 94 ce 03 	call	0x79c	; 0x79c <Right_Motor_AntiClockWise>
		lcd_gotoxy2(0);
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	0e 94 3e 02 	call	0x47c	; 0x47c <lcd_gotoxy2>
		lcd_showvalue(GetADCvalue(2));
     b00:	82 e0       	ldi	r24, 0x02	; 2
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	0e 94 0e 03 	call	0x61c	; 0x61c <GetADCvalue>
     b08:	dc 01       	movw	r26, r24
     b0a:	bd 01       	movw	r22, r26
     b0c:	88 27       	eor	r24, r24
     b0e:	77 fd       	sbrc	r23, 7
     b10:	80 95       	com	r24
     b12:	98 2f       	mov	r25, r24
     b14:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_showvalue>
	{
		Right_Motor_ClockWise(400);
		lcd_gotoxy1(0);
		lcd_showvalue(GetADCvalue(2));
	}
	while (GetADCvalue(2) < 958)
     b18:	82 e0       	ldi	r24, 0x02	; 2
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	0e 94 0e 03 	call	0x61c	; 0x61c <GetADCvalue>
     b20:	b3 e0       	ldi	r27, 0x03	; 3
     b22:	8e 3b       	cpi	r24, 0xBE	; 190
     b24:	9b 07       	cpc	r25, r27
     b26:	2c f3       	brlt	.-54     	; 0xaf2 <PoleWalk+0x1a4>
	{
		Right_Motor_AntiClockWise(400);
		lcd_gotoxy2(0);
		lcd_showvalue(GetADCvalue(2));
	}
	All_Motors_stop();
     b28:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <All_Motors_stop>
	//_delay_ms(1000);
	/*_____Grab Pole 4 And leave Pole 3_____*/
	
	SETBIT(PORTJ, BIT(4));
     b2c:	e5 e0       	ldi	r30, 0x05	; 5
     b2e:	f1 e0       	ldi	r31, 0x01	; 1
     b30:	80 81       	ld	r24, Z
     b32:	80 61       	ori	r24, 0x10	; 16
     b34:	80 83       	st	Z, r24
     b36:	8f ef       	ldi	r24, 0xFF	; 255
     b38:	9f e7       	ldi	r25, 0x7F	; 127
     b3a:	a6 e1       	ldi	r26, 0x16	; 22
     b3c:	81 50       	subi	r24, 0x01	; 1
     b3e:	90 40       	sbci	r25, 0x00	; 0
     b40:	a0 40       	sbci	r26, 0x00	; 0
     b42:	e1 f7       	brne	.-8      	; 0xb3c <PoleWalk+0x1ee>
     b44:	00 c0       	rjmp	.+0      	; 0xb46 <PoleWalk+0x1f8>
     b46:	00 00       	nop
	_delay_ms(500);
	CLEARBIT(PORTJ, BIT(1));
     b48:	80 81       	ld	r24, Z
     b4a:	8d 7f       	andi	r24, 0xFD	; 253
     b4c:	80 83       	st	Z, r24
     b4e:	8f ef       	ldi	r24, 0xFF	; 255
     b50:	9f e3       	ldi	r25, 0x3F	; 63
     b52:	a2 e0       	ldi	r26, 0x02	; 2
     b54:	81 50       	subi	r24, 0x01	; 1
     b56:	90 40       	sbci	r25, 0x00	; 0
     b58:	a0 40       	sbci	r26, 0x00	; 0
     b5a:	e1 f7       	brne	.-8      	; 0xb54 <PoleWalk+0x206>
     b5c:	00 c0       	rjmp	.+0      	; 0xb5e <PoleWalk+0x210>
     b5e:	00 00       	nop
     b60:	04 c0       	rjmp	.+8      	; 0xb6a <PoleWalk+0x21c>
	
	
	
	while (GetADCvalue(1) < 500)
	{
		Left_Motor_ClockWise(530);
     b62:	82 e1       	ldi	r24, 0x12	; 18
     b64:	92 e0       	ldi	r25, 0x02	; 2
     b66:	0e 94 9f 03 	call	0x73e	; 0x73e <Left_Motor_ClockWise>
	
	/*______________________________________*/
	
	
	
	while (GetADCvalue(1) < 500)
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	0e 94 0e 03 	call	0x61c	; 0x61c <GetADCvalue>
     b72:	a1 e0       	ldi	r26, 0x01	; 1
     b74:	84 3f       	cpi	r24, 0xF4	; 244
     b76:	9a 07       	cpc	r25, r26
     b78:	a4 f3       	brlt	.-24     	; 0xb62 <PoleWalk+0x214>
     b7a:	04 c0       	rjmp	.+8      	; 0xb84 <PoleWalk+0x236>
	{
		Left_Motor_ClockWise(530);
	}
	while (GetADCvalue(1) >520)
	{
		Left_Motor_AntiClockWise(530);
     b7c:	82 e1       	ldi	r24, 0x12	; 18
     b7e:	92 e0       	ldi	r25, 0x02	; 2
     b80:	0e 94 ab 03 	call	0x756	; 0x756 <Left_Motor_AntiClockWise>
	
	while (GetADCvalue(1) < 500)
	{
		Left_Motor_ClockWise(530);
	}
	while (GetADCvalue(1) >520)
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	0e 94 0e 03 	call	0x61c	; 0x61c <GetADCvalue>
     b8c:	b2 e0       	ldi	r27, 0x02	; 2
     b8e:	89 30       	cpi	r24, 0x09	; 9
     b90:	9b 07       	cpc	r25, r27
     b92:	a4 f7       	brge	.-24     	; 0xb7c <PoleWalk+0x22e>
	{
		Left_Motor_AntiClockWise(530);
	}
	All_Motors_stop();
     b94:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <All_Motors_stop>
	
	while (GetADCvalue(2) > 470)
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <PoleWalk+0x254>
	{
		Right_Motor_ClockWise(530);
     b9a:	82 e1       	ldi	r24, 0x12	; 18
     b9c:	92 e0       	ldi	r25, 0x02	; 2
     b9e:	0e 94 c2 03 	call	0x784	; 0x784 <Right_Motor_ClockWise>
	{
		Left_Motor_AntiClockWise(530);
	}
	All_Motors_stop();
	
	while (GetADCvalue(2) > 470)
     ba2:	82 e0       	ldi	r24, 0x02	; 2
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	0e 94 0e 03 	call	0x61c	; 0x61c <GetADCvalue>
     baa:	21 e0       	ldi	r18, 0x01	; 1
     bac:	87 3d       	cpi	r24, 0xD7	; 215
     bae:	92 07       	cpc	r25, r18
     bb0:	a4 f7       	brge	.-24     	; 0xb9a <PoleWalk+0x24c>
     bb2:	04 c0       	rjmp	.+8      	; 0xbbc <PoleWalk+0x26e>
	{
		Right_Motor_ClockWise(530);
	}
	while (GetADCvalue(2) < 450)
	{
		Right_Motor_AntiClockWise(530);
     bb4:	82 e1       	ldi	r24, 0x12	; 18
     bb6:	92 e0       	ldi	r25, 0x02	; 2
     bb8:	0e 94 ce 03 	call	0x79c	; 0x79c <Right_Motor_AntiClockWise>
	
	while (GetADCvalue(2) > 470)
	{
		Right_Motor_ClockWise(530);
	}
	while (GetADCvalue(2) < 450)
     bbc:	82 e0       	ldi	r24, 0x02	; 2
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	0e 94 0e 03 	call	0x61c	; 0x61c <GetADCvalue>
     bc4:	31 e0       	ldi	r19, 0x01	; 1
     bc6:	82 3c       	cpi	r24, 0xC2	; 194
     bc8:	93 07       	cpc	r25, r19
     bca:	a4 f3       	brlt	.-24     	; 0xbb4 <PoleWalk+0x266>
	{
		Right_Motor_AntiClockWise(530);
	}
	All_Motors_stop();
     bcc:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <All_Motors_stop>
     bd0:	08 95       	ret

00000bd2 <main>:

int main(void)
{
	int Task = 20;
	uint8_t Pole_Walk_Flag = 0;
	lcd_init();
     bd2:	0e 94 9c 02 	call	0x538	; 0x538 <lcd_init>
	PortInit();
     bd6:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <PortInit>
	PwmInit();
     bda:	0e 94 ed 02 	call	0x5da	; 0x5da <PwmInit>
	ADC_Init();
     bde:	0e 94 02 03 	call	0x604	; 0x604 <ADC_Init>
//#include "JungleGym.h"

int main(void)
{
	int Task = 20;
	uint8_t Pole_Walk_Flag = 0;
     be2:	10 e0       	ldi	r17, 0x00	; 0
#include "PoleWalk.h"
//#include "JungleGym.h"

int main(void)
{
	int Task = 20;
     be4:	c4 e1       	ldi	r28, 0x14	; 20
     be6:	d0 e0       	ldi	r29, 0x00	; 0
						SETBIT(PORTJ, BIT(5));
						Pole_Walk_Flag = 2;				//any random value
					}
					else if (Pole_Walk_Flag == 3)
					{
						CLEARBIT(PORTJ, BIT(4));
     be8:	0f 2e       	mov	r0, r31
     bea:	f5 e0       	ldi	r31, 0x05	; 5
     bec:	ef 2e       	mov	r14, r31
     bee:	f1 e0       	ldi	r31, 0x01	; 1
     bf0:	ff 2e       	mov	r15, r31
     bf2:	f0 2d       	mov	r31, r0
					Task = 20;
					break;
					
					case 2:
					lcd_gotoxy1(0);
					lcd_string("PoleW");
     bf4:	0f 2e       	mov	r0, r31
     bf6:	f6 e0       	ldi	r31, 0x06	; 6
     bf8:	cf 2e       	mov	r12, r31
     bfa:	f2 e0       	ldi	r31, 0x02	; 2
     bfc:	df 2e       	mov	r13, r31
     bfe:	f0 2d       	mov	r31, r0
					PoleWalk();
					Pole_Walk_Flag = 3;
     c00:	03 e0       	ldi	r16, 0x03	; 3
					Task = 80;
					break;
					
					case 4:
					lcd_gotoxy1(0);
					lcd_string("Swing");
     c02:	0f 2e       	mov	r0, r31
     c04:	fc e0       	ldi	r31, 0x0C	; 12
     c06:	af 2e       	mov	r10, r31
     c08:	f2 e0       	ldi	r31, 0x02	; 2
     c0a:	bf 2e       	mov	r11, r31
     c0c:	f0 2d       	mov	r31, r0
					Swing();
					Task = 21;				//some random value so that it dose not go into case 4 again and when gripped SwingRetract Gets Called
     c0e:	0f 2e       	mov	r0, r31
     c10:	f5 e1       	ldi	r31, 0x15	; 21
     c12:	8f 2e       	mov	r8, r31
     c14:	99 24       	eor	r9, r9
     c16:	f0 2d       	mov	r31, r0
					break;
					
					case 8:
					lcd_gotoxy1(0);
					lcd_string("Ladde");
     c18:	0f 2e       	mov	r0, r31
     c1a:	f2 e1       	ldi	r31, 0x12	; 18
     c1c:	6f 2e       	mov	r6, r31
     c1e:	f2 e0       	ldi	r31, 0x02	; 2
     c20:	7f 2e       	mov	r7, r31
     c22:	f0 2d       	mov	r31, r0
				switch(Task)
				
				{
					case 1:
					lcd_gotoxy1(0);
					lcd_string("SeeSa");
     c24:	0f 2e       	mov	r0, r31
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	4f 2e       	mov	r4, r31
     c2a:	f2 e0       	ldi	r31, 0x02	; 2
     c2c:	5f 2e       	mov	r5, r31
     c2e:	f0 2d       	mov	r31, r0
					SeeSaw();
					Task = 20;
     c30:	0f 2e       	mov	r0, r31
     c32:	f4 e1       	ldi	r31, 0x14	; 20
     c34:	2f 2e       	mov	r2, r31
     c36:	33 24       	eor	r3, r3
     c38:	f0 2d       	mov	r31, r0
			//break;
		//}
		
		while(1)
		{	
			if (bit_is_clear(PINC, 4))
     c3a:	34 99       	sbic	0x06, 4	; 6
     c3c:	46 c0       	rjmp	.+140    	; 0xcca <main+0xf8>
			{
				if (Task == 20)
     c3e:	c4 31       	cpi	r28, 0x14	; 20
     c40:	d1 05       	cpc	r29, r1
     c42:	19 f4       	brne	.+6      	; 0xc4a <main+0x78>
				{
					All_Motors_Normal_Position();
     c44:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <All_Motors_Normal_Position>
     c48:	28 c0       	rjmp	.+80     	; 0xc9a <main+0xc8>
					Task = 50;
				}
				
				if (Task == 21)
     c4a:	c5 31       	cpi	r28, 0x15	; 21
     c4c:	d1 05       	cpc	r29, r1
     c4e:	19 f4       	brne	.+6      	; 0xc56 <main+0x84>
				{
					SwingRailRetract();
     c50:	0e 94 73 04 	call	0x8e6	; 0x8e6 <SwingRailRetract>
     c54:	22 c0       	rjmp	.+68     	; 0xc9a <main+0xc8>
					Task = 50;
				}
				
				if (Task == 0)
     c56:	20 97       	sbiw	r28, 0x00	; 0
     c58:	01 f5       	brne	.+64     	; 0xc9a <main+0xc8>
				{
					if (Pole_Walk_Flag == 1)
     c5a:	11 30       	cpi	r17, 0x01	; 1
     c5c:	31 f4       	brne	.+12     	; 0xc6a <main+0x98>
					{
						SETBIT(PORTJ, BIT(5));
     c5e:	d7 01       	movw	r26, r14
     c60:	8c 91       	ld	r24, X
     c62:	80 62       	ori	r24, 0x20	; 32
     c64:	8c 93       	st	X, r24
						Pole_Walk_Flag = 2;				//any random value
     c66:	12 e0       	ldi	r17, 0x02	; 2
     c68:	18 c0       	rjmp	.+48     	; 0xc9a <main+0xc8>
					}
					else if (Pole_Walk_Flag == 3)
     c6a:	13 30       	cpi	r17, 0x03	; 3
     c6c:	b1 f4       	brne	.+44     	; 0xc9a <main+0xc8>
					{
						CLEARBIT(PORTJ, BIT(4));
     c6e:	f7 01       	movw	r30, r14
     c70:	80 81       	ld	r24, Z
     c72:	8f 7e       	andi	r24, 0xEF	; 239
     c74:	80 83       	st	Z, r24
						CLEARBIT(PORTJ, BIT(4));
     c76:	80 81       	ld	r24, Z
     c78:	8f 7e       	andi	r24, 0xEF	; 239
     c7a:	80 83       	st	Z, r24
						CLEARBIT(PORTJ, BIT(4));
     c7c:	80 81       	ld	r24, Z
     c7e:	8f 7e       	andi	r24, 0xEF	; 239
     c80:	80 83       	st	Z, r24
     c82:	8f ef       	ldi	r24, 0xFF	; 255
     c84:	9f ef       	ldi	r25, 0xFF	; 255
     c86:	ac e2       	ldi	r26, 0x2C	; 44
     c88:	81 50       	subi	r24, 0x01	; 1
     c8a:	90 40       	sbci	r25, 0x00	; 0
     c8c:	a0 40       	sbci	r26, 0x00	; 0
     c8e:	e1 f7       	brne	.-8      	; 0xc88 <main+0xb6>
     c90:	00 c0       	rjmp	.+0      	; 0xc92 <main+0xc0>
     c92:	00 00       	nop
						_delay_ms(1000);
						All_Motors_Normal_Position();
     c94:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <All_Motors_Normal_Position>
						Pole_Walk_Flag = 0;
     c98:	10 e0       	ldi	r17, 0x00	; 0
					}
				}
				
				Task = PINC & 0x0F;
     c9a:	86 b1       	in	r24, 0x06	; 6
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	ec 01       	movw	r28, r24
     ca0:	cf 70       	andi	r28, 0x0F	; 15
     ca2:	d0 70       	andi	r29, 0x00	; 0
				
				if (Task == 2)
     ca4:	c2 30       	cpi	r28, 0x02	; 2
     ca6:	d1 05       	cpc	r29, r1
     ca8:	29 f4       	brne	.+10     	; 0xcb4 <main+0xe2>
				{
					if (Pole_Walk_Flag == 0)
     caa:	11 23       	and	r17, r17
     cac:	19 f4       	brne	.+6      	; 0xcb4 <main+0xe2>
					{
						PoleWalk_Adjust_Initial_Value();
     cae:	0e 94 8a 04 	call	0x914	; 0x914 <PoleWalk_Adjust_Initial_Value>
						Pole_Walk_Flag = 1;
     cb2:	11 e0       	ldi	r17, 0x01	; 1
					}
					
				}
							
								
				lcd_gotoxy2(0);
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	0e 94 3e 02 	call	0x47c	; 0x47c <lcd_gotoxy2>
				lcd_showvalue(Task);
     cba:	be 01       	movw	r22, r28
     cbc:	88 27       	eor	r24, r24
     cbe:	77 fd       	sbrc	r23, 7
     cc0:	80 95       	com	r24
     cc2:	98 2f       	mov	r25, r24
     cc4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_showvalue>
     cc8:	b8 cf       	rjmp	.-144    	; 0xc3a <main+0x68>
     cca:	8f ef       	ldi	r24, 0xFF	; 255
     ccc:	9f ef       	ldi	r25, 0xFF	; 255
     cce:	a9 e5       	ldi	r26, 0x59	; 89
     cd0:	81 50       	subi	r24, 0x01	; 1
     cd2:	90 40       	sbci	r25, 0x00	; 0
     cd4:	a0 40       	sbci	r26, 0x00	; 0
     cd6:	e1 f7       	brne	.-8      	; 0xcd0 <main+0xfe>
     cd8:	00 c0       	rjmp	.+0      	; 0xcda <main+0x108>
     cda:	00 00       	nop
			}
			else
			{
				_delay_ms(2000);
				switch(Task)
     cdc:	c2 30       	cpi	r28, 0x02	; 2
     cde:	d1 05       	cpc	r29, r1
     ce0:	d1 f0       	breq	.+52     	; 0xd16 <main+0x144>
     ce2:	c3 30       	cpi	r28, 0x03	; 3
     ce4:	d1 05       	cpc	r29, r1
     ce6:	2c f4       	brge	.+10     	; 0xcf2 <main+0x120>
     ce8:	c1 30       	cpi	r28, 0x01	; 1
     cea:	d1 05       	cpc	r29, r1
     cec:	09 f0       	breq	.+2      	; 0xcf0 <main+0x11e>
     cee:	a5 cf       	rjmp	.-182    	; 0xc3a <main+0x68>
     cf0:	08 c0       	rjmp	.+16     	; 0xd02 <main+0x130>
     cf2:	c4 30       	cpi	r28, 0x04	; 4
     cf4:	d1 05       	cpc	r29, r1
     cf6:	d9 f0       	breq	.+54     	; 0xd2e <main+0x15c>
     cf8:	c8 30       	cpi	r28, 0x08	; 8
     cfa:	d1 05       	cpc	r29, r1
     cfc:	09 f0       	breq	.+2      	; 0xd00 <main+0x12e>
     cfe:	9d cf       	rjmp	.-198    	; 0xc3a <main+0x68>
     d00:	20 c0       	rjmp	.+64     	; 0xd42 <main+0x170>
				
				{
					case 1:
					lcd_gotoxy1(0);
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	0e 94 42 02 	call	0x484	; 0x484 <lcd_gotoxy1>
					lcd_string("SeeSa");
     d08:	c2 01       	movw	r24, r4
     d0a:	0e 94 46 02 	call	0x48c	; 0x48c <lcd_string>
					SeeSaw();
     d0e:	0e 94 28 04 	call	0x850	; 0x850 <SeeSaw>
					Task = 20;
     d12:	e1 01       	movw	r28, r2
					break;
     d14:	92 cf       	rjmp	.-220    	; 0xc3a <main+0x68>
					
					case 2:
					lcd_gotoxy1(0);
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	0e 94 42 02 	call	0x484	; 0x484 <lcd_gotoxy1>
					lcd_string("PoleW");
     d1c:	c6 01       	movw	r24, r12
     d1e:	0e 94 46 02 	call	0x48c	; 0x48c <lcd_string>
					PoleWalk();
     d22:	0e 94 a7 04 	call	0x94e	; 0x94e <PoleWalk>
					Pole_Walk_Flag = 3;
     d26:	10 2f       	mov	r17, r16
					Task = 80;
     d28:	c0 e5       	ldi	r28, 0x50	; 80
     d2a:	d0 e0       	ldi	r29, 0x00	; 0
					break;
     d2c:	86 cf       	rjmp	.-244    	; 0xc3a <main+0x68>
					
					case 4:
					lcd_gotoxy1(0);
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	0e 94 42 02 	call	0x484	; 0x484 <lcd_gotoxy1>
					lcd_string("Swing");
     d34:	c5 01       	movw	r24, r10
     d36:	0e 94 46 02 	call	0x48c	; 0x48c <lcd_string>
					Swing();
     d3a:	0e 94 47 04 	call	0x88e	; 0x88e <Swing>
					Task = 21;				//some random value so that it dose not go into case 4 again and when gripped SwingRetract Gets Called
     d3e:	e4 01       	movw	r28, r8
					break;
     d40:	7c cf       	rjmp	.-264    	; 0xc3a <main+0x68>
					
					case 8:
					lcd_gotoxy1(0);
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	0e 94 42 02 	call	0x484	; 0x484 <lcd_gotoxy1>
					lcd_string("Ladde");
     d48:	c3 01       	movw	r24, r6
     d4a:	0e 94 46 02 	call	0x48c	; 0x48c <lcd_string>
					//JungleGym();
						//ladder
					break;
     d4e:	75 cf       	rjmp	.-278    	; 0xc3a <main+0x68>

00000d50 <__fixunssfsi>:
     d50:	33 d0       	rcall	.+102    	; 0xdb8 <__fp_splitA>
     d52:	88 f0       	brcs	.+34     	; 0xd76 <__fixunssfsi+0x26>
     d54:	9f 57       	subi	r25, 0x7F	; 127
     d56:	90 f0       	brcs	.+36     	; 0xd7c <__fixunssfsi+0x2c>
     d58:	b9 2f       	mov	r27, r25
     d5a:	99 27       	eor	r25, r25
     d5c:	b7 51       	subi	r27, 0x17	; 23
     d5e:	a0 f0       	brcs	.+40     	; 0xd88 <__fixunssfsi+0x38>
     d60:	d1 f0       	breq	.+52     	; 0xd96 <__fixunssfsi+0x46>
     d62:	66 0f       	add	r22, r22
     d64:	77 1f       	adc	r23, r23
     d66:	88 1f       	adc	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	1a f0       	brmi	.+6      	; 0xd72 <__fixunssfsi+0x22>
     d6c:	ba 95       	dec	r27
     d6e:	c9 f7       	brne	.-14     	; 0xd62 <__fixunssfsi+0x12>
     d70:	12 c0       	rjmp	.+36     	; 0xd96 <__fixunssfsi+0x46>
     d72:	b1 30       	cpi	r27, 0x01	; 1
     d74:	81 f0       	breq	.+32     	; 0xd96 <__fixunssfsi+0x46>
     d76:	3a d0       	rcall	.+116    	; 0xdec <__fp_zero>
     d78:	b1 e0       	ldi	r27, 0x01	; 1
     d7a:	08 95       	ret
     d7c:	37 c0       	rjmp	.+110    	; 0xdec <__fp_zero>
     d7e:	67 2f       	mov	r22, r23
     d80:	78 2f       	mov	r23, r24
     d82:	88 27       	eor	r24, r24
     d84:	b8 5f       	subi	r27, 0xF8	; 248
     d86:	39 f0       	breq	.+14     	; 0xd96 <__fixunssfsi+0x46>
     d88:	b9 3f       	cpi	r27, 0xF9	; 249
     d8a:	cc f3       	brlt	.-14     	; 0xd7e <__fixunssfsi+0x2e>
     d8c:	86 95       	lsr	r24
     d8e:	77 95       	ror	r23
     d90:	67 95       	ror	r22
     d92:	b3 95       	inc	r27
     d94:	d9 f7       	brne	.-10     	; 0xd8c <__fixunssfsi+0x3c>
     d96:	3e f4       	brtc	.+14     	; 0xda6 <__fixunssfsi+0x56>
     d98:	90 95       	com	r25
     d9a:	80 95       	com	r24
     d9c:	70 95       	com	r23
     d9e:	61 95       	neg	r22
     da0:	7f 4f       	sbci	r23, 0xFF	; 255
     da2:	8f 4f       	sbci	r24, 0xFF	; 255
     da4:	9f 4f       	sbci	r25, 0xFF	; 255
     da6:	08 95       	ret

00000da8 <__fp_split3>:
     da8:	57 fd       	sbrc	r21, 7
     daa:	90 58       	subi	r25, 0x80	; 128
     dac:	44 0f       	add	r20, r20
     dae:	55 1f       	adc	r21, r21
     db0:	59 f0       	breq	.+22     	; 0xdc8 <__fp_splitA+0x10>
     db2:	5f 3f       	cpi	r21, 0xFF	; 255
     db4:	71 f0       	breq	.+28     	; 0xdd2 <__fp_splitA+0x1a>
     db6:	47 95       	ror	r20

00000db8 <__fp_splitA>:
     db8:	88 0f       	add	r24, r24
     dba:	97 fb       	bst	r25, 7
     dbc:	99 1f       	adc	r25, r25
     dbe:	61 f0       	breq	.+24     	; 0xdd8 <__fp_splitA+0x20>
     dc0:	9f 3f       	cpi	r25, 0xFF	; 255
     dc2:	79 f0       	breq	.+30     	; 0xde2 <__fp_splitA+0x2a>
     dc4:	87 95       	ror	r24
     dc6:	08 95       	ret
     dc8:	12 16       	cp	r1, r18
     dca:	13 06       	cpc	r1, r19
     dcc:	14 06       	cpc	r1, r20
     dce:	55 1f       	adc	r21, r21
     dd0:	f2 cf       	rjmp	.-28     	; 0xdb6 <__fp_split3+0xe>
     dd2:	46 95       	lsr	r20
     dd4:	f1 df       	rcall	.-30     	; 0xdb8 <__fp_splitA>
     dd6:	08 c0       	rjmp	.+16     	; 0xde8 <__fp_splitA+0x30>
     dd8:	16 16       	cp	r1, r22
     dda:	17 06       	cpc	r1, r23
     ddc:	18 06       	cpc	r1, r24
     dde:	99 1f       	adc	r25, r25
     de0:	f1 cf       	rjmp	.-30     	; 0xdc4 <__fp_splitA+0xc>
     de2:	86 95       	lsr	r24
     de4:	71 05       	cpc	r23, r1
     de6:	61 05       	cpc	r22, r1
     de8:	08 94       	sec
     dea:	08 95       	ret

00000dec <__fp_zero>:
     dec:	e8 94       	clt

00000dee <__fp_szero>:
     dee:	bb 27       	eor	r27, r27
     df0:	66 27       	eor	r22, r22
     df2:	77 27       	eor	r23, r23
     df4:	cb 01       	movw	r24, r22
     df6:	97 f9       	bld	r25, 7
     df8:	08 95       	ret

00000dfa <modf>:
     dfa:	fa 01       	movw	r30, r20
     dfc:	dc 01       	movw	r26, r24
     dfe:	aa 0f       	add	r26, r26
     e00:	bb 1f       	adc	r27, r27
     e02:	9b 01       	movw	r18, r22
     e04:	ac 01       	movw	r20, r24
     e06:	bf 57       	subi	r27, 0x7F	; 127
     e08:	28 f4       	brcc	.+10     	; 0xe14 <modf+0x1a>
     e0a:	22 27       	eor	r18, r18
     e0c:	33 27       	eor	r19, r19
     e0e:	44 27       	eor	r20, r20
     e10:	50 78       	andi	r21, 0x80	; 128
     e12:	1f c0       	rjmp	.+62     	; 0xe52 <modf+0x58>
     e14:	b7 51       	subi	r27, 0x17	; 23
     e16:	88 f4       	brcc	.+34     	; 0xe3a <modf+0x40>
     e18:	ab 2f       	mov	r26, r27
     e1a:	00 24       	eor	r0, r0
     e1c:	46 95       	lsr	r20
     e1e:	37 95       	ror	r19
     e20:	27 95       	ror	r18
     e22:	01 1c       	adc	r0, r1
     e24:	a3 95       	inc	r26
     e26:	d2 f3       	brmi	.-12     	; 0xe1c <modf+0x22>
     e28:	00 20       	and	r0, r0
     e2a:	69 f0       	breq	.+26     	; 0xe46 <modf+0x4c>
     e2c:	22 0f       	add	r18, r18
     e2e:	33 1f       	adc	r19, r19
     e30:	44 1f       	adc	r20, r20
     e32:	b3 95       	inc	r27
     e34:	da f3       	brmi	.-10     	; 0xe2c <modf+0x32>
     e36:	0d d0       	rcall	.+26     	; 0xe52 <modf+0x58>
     e38:	76 c0       	rjmp	.+236    	; 0xf26 <__subsf3>
     e3a:	61 30       	cpi	r22, 0x01	; 1
     e3c:	71 05       	cpc	r23, r1
     e3e:	a0 e8       	ldi	r26, 0x80	; 128
     e40:	8a 07       	cpc	r24, r26
     e42:	b9 46       	sbci	r27, 0x69	; 105
     e44:	30 f4       	brcc	.+12     	; 0xe52 <modf+0x58>
     e46:	9b 01       	movw	r18, r22
     e48:	ac 01       	movw	r20, r24
     e4a:	66 27       	eor	r22, r22
     e4c:	77 27       	eor	r23, r23
     e4e:	88 27       	eor	r24, r24
     e50:	90 78       	andi	r25, 0x80	; 128
     e52:	30 96       	adiw	r30, 0x00	; 0
     e54:	21 f0       	breq	.+8      	; 0xe5e <modf+0x64>
     e56:	20 83       	st	Z, r18
     e58:	31 83       	std	Z+1, r19	; 0x01
     e5a:	42 83       	std	Z+2, r20	; 0x02
     e5c:	53 83       	std	Z+3, r21	; 0x03
     e5e:	08 95       	ret

00000e60 <__mulsf3>:
     e60:	0b d0       	rcall	.+22     	; 0xe78 <__mulsf3x>
     e62:	dd c0       	rjmp	.+442    	; 0x101e <__fp_round>
     e64:	ce d0       	rcall	.+412    	; 0x1002 <__fp_pscA>
     e66:	28 f0       	brcs	.+10     	; 0xe72 <__mulsf3+0x12>
     e68:	d3 d0       	rcall	.+422    	; 0x1010 <__fp_pscB>
     e6a:	18 f0       	brcs	.+6      	; 0xe72 <__mulsf3+0x12>
     e6c:	95 23       	and	r25, r21
     e6e:	09 f0       	breq	.+2      	; 0xe72 <__mulsf3+0x12>
     e70:	bf c0       	rjmp	.+382    	; 0xff0 <__fp_inf>
     e72:	c4 c0       	rjmp	.+392    	; 0xffc <__fp_nan>
     e74:	11 24       	eor	r1, r1
     e76:	bb cf       	rjmp	.-138    	; 0xdee <__fp_szero>

00000e78 <__mulsf3x>:
     e78:	97 df       	rcall	.-210    	; 0xda8 <__fp_split3>
     e7a:	a0 f3       	brcs	.-24     	; 0xe64 <__mulsf3+0x4>

00000e7c <__mulsf3_pse>:
     e7c:	95 9f       	mul	r25, r21
     e7e:	d1 f3       	breq	.-12     	; 0xe74 <__mulsf3+0x14>
     e80:	95 0f       	add	r25, r21
     e82:	50 e0       	ldi	r21, 0x00	; 0
     e84:	55 1f       	adc	r21, r21
     e86:	62 9f       	mul	r22, r18
     e88:	f0 01       	movw	r30, r0
     e8a:	72 9f       	mul	r23, r18
     e8c:	bb 27       	eor	r27, r27
     e8e:	f0 0d       	add	r31, r0
     e90:	b1 1d       	adc	r27, r1
     e92:	63 9f       	mul	r22, r19
     e94:	aa 27       	eor	r26, r26
     e96:	f0 0d       	add	r31, r0
     e98:	b1 1d       	adc	r27, r1
     e9a:	aa 1f       	adc	r26, r26
     e9c:	64 9f       	mul	r22, r20
     e9e:	66 27       	eor	r22, r22
     ea0:	b0 0d       	add	r27, r0
     ea2:	a1 1d       	adc	r26, r1
     ea4:	66 1f       	adc	r22, r22
     ea6:	82 9f       	mul	r24, r18
     ea8:	22 27       	eor	r18, r18
     eaa:	b0 0d       	add	r27, r0
     eac:	a1 1d       	adc	r26, r1
     eae:	62 1f       	adc	r22, r18
     eb0:	73 9f       	mul	r23, r19
     eb2:	b0 0d       	add	r27, r0
     eb4:	a1 1d       	adc	r26, r1
     eb6:	62 1f       	adc	r22, r18
     eb8:	83 9f       	mul	r24, r19
     eba:	a0 0d       	add	r26, r0
     ebc:	61 1d       	adc	r22, r1
     ebe:	22 1f       	adc	r18, r18
     ec0:	74 9f       	mul	r23, r20
     ec2:	33 27       	eor	r19, r19
     ec4:	a0 0d       	add	r26, r0
     ec6:	61 1d       	adc	r22, r1
     ec8:	23 1f       	adc	r18, r19
     eca:	84 9f       	mul	r24, r20
     ecc:	60 0d       	add	r22, r0
     ece:	21 1d       	adc	r18, r1
     ed0:	82 2f       	mov	r24, r18
     ed2:	76 2f       	mov	r23, r22
     ed4:	6a 2f       	mov	r22, r26
     ed6:	11 24       	eor	r1, r1
     ed8:	9f 57       	subi	r25, 0x7F	; 127
     eda:	50 40       	sbci	r21, 0x00	; 0
     edc:	8a f0       	brmi	.+34     	; 0xf00 <__mulsf3_pse+0x84>
     ede:	e1 f0       	breq	.+56     	; 0xf18 <__mulsf3_pse+0x9c>
     ee0:	88 23       	and	r24, r24
     ee2:	4a f0       	brmi	.+18     	; 0xef6 <__mulsf3_pse+0x7a>
     ee4:	ee 0f       	add	r30, r30
     ee6:	ff 1f       	adc	r31, r31
     ee8:	bb 1f       	adc	r27, r27
     eea:	66 1f       	adc	r22, r22
     eec:	77 1f       	adc	r23, r23
     eee:	88 1f       	adc	r24, r24
     ef0:	91 50       	subi	r25, 0x01	; 1
     ef2:	50 40       	sbci	r21, 0x00	; 0
     ef4:	a9 f7       	brne	.-22     	; 0xee0 <__mulsf3_pse+0x64>
     ef6:	9e 3f       	cpi	r25, 0xFE	; 254
     ef8:	51 05       	cpc	r21, r1
     efa:	70 f0       	brcs	.+28     	; 0xf18 <__mulsf3_pse+0x9c>
     efc:	79 c0       	rjmp	.+242    	; 0xff0 <__fp_inf>
     efe:	77 cf       	rjmp	.-274    	; 0xdee <__fp_szero>
     f00:	5f 3f       	cpi	r21, 0xFF	; 255
     f02:	ec f3       	brlt	.-6      	; 0xefe <__mulsf3_pse+0x82>
     f04:	98 3e       	cpi	r25, 0xE8	; 232
     f06:	dc f3       	brlt	.-10     	; 0xefe <__mulsf3_pse+0x82>
     f08:	86 95       	lsr	r24
     f0a:	77 95       	ror	r23
     f0c:	67 95       	ror	r22
     f0e:	b7 95       	ror	r27
     f10:	f7 95       	ror	r31
     f12:	e7 95       	ror	r30
     f14:	9f 5f       	subi	r25, 0xFF	; 255
     f16:	c1 f7       	brne	.-16     	; 0xf08 <__mulsf3_pse+0x8c>
     f18:	fe 2b       	or	r31, r30
     f1a:	88 0f       	add	r24, r24
     f1c:	91 1d       	adc	r25, r1
     f1e:	96 95       	lsr	r25
     f20:	87 95       	ror	r24
     f22:	97 f9       	bld	r25, 7
     f24:	08 95       	ret

00000f26 <__subsf3>:
     f26:	50 58       	subi	r21, 0x80	; 128

00000f28 <__addsf3>:
     f28:	bb 27       	eor	r27, r27
     f2a:	aa 27       	eor	r26, r26
     f2c:	0e d0       	rcall	.+28     	; 0xf4a <__addsf3x>
     f2e:	77 c0       	rjmp	.+238    	; 0x101e <__fp_round>
     f30:	68 d0       	rcall	.+208    	; 0x1002 <__fp_pscA>
     f32:	30 f0       	brcs	.+12     	; 0xf40 <__addsf3+0x18>
     f34:	6d d0       	rcall	.+218    	; 0x1010 <__fp_pscB>
     f36:	20 f0       	brcs	.+8      	; 0xf40 <__addsf3+0x18>
     f38:	31 f4       	brne	.+12     	; 0xf46 <__addsf3+0x1e>
     f3a:	9f 3f       	cpi	r25, 0xFF	; 255
     f3c:	11 f4       	brne	.+4      	; 0xf42 <__addsf3+0x1a>
     f3e:	1e f4       	brtc	.+6      	; 0xf46 <__addsf3+0x1e>
     f40:	5d c0       	rjmp	.+186    	; 0xffc <__fp_nan>
     f42:	0e f4       	brtc	.+2      	; 0xf46 <__addsf3+0x1e>
     f44:	e0 95       	com	r30
     f46:	e7 fb       	bst	r30, 7
     f48:	53 c0       	rjmp	.+166    	; 0xff0 <__fp_inf>

00000f4a <__addsf3x>:
     f4a:	e9 2f       	mov	r30, r25
     f4c:	2d df       	rcall	.-422    	; 0xda8 <__fp_split3>
     f4e:	80 f3       	brcs	.-32     	; 0xf30 <__addsf3+0x8>
     f50:	ba 17       	cp	r27, r26
     f52:	62 07       	cpc	r22, r18
     f54:	73 07       	cpc	r23, r19
     f56:	84 07       	cpc	r24, r20
     f58:	95 07       	cpc	r25, r21
     f5a:	18 f0       	brcs	.+6      	; 0xf62 <__addsf3x+0x18>
     f5c:	71 f4       	brne	.+28     	; 0xf7a <__addsf3x+0x30>
     f5e:	9e f5       	brtc	.+102    	; 0xfc6 <__addsf3x+0x7c>
     f60:	45 cf       	rjmp	.-374    	; 0xdec <__fp_zero>
     f62:	0e f4       	brtc	.+2      	; 0xf66 <__addsf3x+0x1c>
     f64:	e0 95       	com	r30
     f66:	0b 2e       	mov	r0, r27
     f68:	ba 2f       	mov	r27, r26
     f6a:	a0 2d       	mov	r26, r0
     f6c:	0b 01       	movw	r0, r22
     f6e:	b9 01       	movw	r22, r18
     f70:	90 01       	movw	r18, r0
     f72:	0c 01       	movw	r0, r24
     f74:	ca 01       	movw	r24, r20
     f76:	a0 01       	movw	r20, r0
     f78:	11 24       	eor	r1, r1
     f7a:	ff 27       	eor	r31, r31
     f7c:	59 1b       	sub	r21, r25
     f7e:	99 f0       	breq	.+38     	; 0xfa6 <__addsf3x+0x5c>
     f80:	59 3f       	cpi	r21, 0xF9	; 249
     f82:	50 f4       	brcc	.+20     	; 0xf98 <__addsf3x+0x4e>
     f84:	50 3e       	cpi	r21, 0xE0	; 224
     f86:	68 f1       	brcs	.+90     	; 0xfe2 <__addsf3x+0x98>
     f88:	1a 16       	cp	r1, r26
     f8a:	f0 40       	sbci	r31, 0x00	; 0
     f8c:	a2 2f       	mov	r26, r18
     f8e:	23 2f       	mov	r18, r19
     f90:	34 2f       	mov	r19, r20
     f92:	44 27       	eor	r20, r20
     f94:	58 5f       	subi	r21, 0xF8	; 248
     f96:	f3 cf       	rjmp	.-26     	; 0xf7e <__addsf3x+0x34>
     f98:	46 95       	lsr	r20
     f9a:	37 95       	ror	r19
     f9c:	27 95       	ror	r18
     f9e:	a7 95       	ror	r26
     fa0:	f0 40       	sbci	r31, 0x00	; 0
     fa2:	53 95       	inc	r21
     fa4:	c9 f7       	brne	.-14     	; 0xf98 <__addsf3x+0x4e>
     fa6:	7e f4       	brtc	.+30     	; 0xfc6 <__addsf3x+0x7c>
     fa8:	1f 16       	cp	r1, r31
     faa:	ba 0b       	sbc	r27, r26
     fac:	62 0b       	sbc	r22, r18
     fae:	73 0b       	sbc	r23, r19
     fb0:	84 0b       	sbc	r24, r20
     fb2:	ba f0       	brmi	.+46     	; 0xfe2 <__addsf3x+0x98>
     fb4:	91 50       	subi	r25, 0x01	; 1
     fb6:	a1 f0       	breq	.+40     	; 0xfe0 <__addsf3x+0x96>
     fb8:	ff 0f       	add	r31, r31
     fba:	bb 1f       	adc	r27, r27
     fbc:	66 1f       	adc	r22, r22
     fbe:	77 1f       	adc	r23, r23
     fc0:	88 1f       	adc	r24, r24
     fc2:	c2 f7       	brpl	.-16     	; 0xfb4 <__addsf3x+0x6a>
     fc4:	0e c0       	rjmp	.+28     	; 0xfe2 <__addsf3x+0x98>
     fc6:	ba 0f       	add	r27, r26
     fc8:	62 1f       	adc	r22, r18
     fca:	73 1f       	adc	r23, r19
     fcc:	84 1f       	adc	r24, r20
     fce:	48 f4       	brcc	.+18     	; 0xfe2 <__addsf3x+0x98>
     fd0:	87 95       	ror	r24
     fd2:	77 95       	ror	r23
     fd4:	67 95       	ror	r22
     fd6:	b7 95       	ror	r27
     fd8:	f7 95       	ror	r31
     fda:	9e 3f       	cpi	r25, 0xFE	; 254
     fdc:	08 f0       	brcs	.+2      	; 0xfe0 <__addsf3x+0x96>
     fde:	b3 cf       	rjmp	.-154    	; 0xf46 <__addsf3+0x1e>
     fe0:	93 95       	inc	r25
     fe2:	88 0f       	add	r24, r24
     fe4:	08 f0       	brcs	.+2      	; 0xfe8 <__addsf3x+0x9e>
     fe6:	99 27       	eor	r25, r25
     fe8:	ee 0f       	add	r30, r30
     fea:	97 95       	ror	r25
     fec:	87 95       	ror	r24
     fee:	08 95       	ret

00000ff0 <__fp_inf>:
     ff0:	97 f9       	bld	r25, 7
     ff2:	9f 67       	ori	r25, 0x7F	; 127
     ff4:	80 e8       	ldi	r24, 0x80	; 128
     ff6:	70 e0       	ldi	r23, 0x00	; 0
     ff8:	60 e0       	ldi	r22, 0x00	; 0
     ffa:	08 95       	ret

00000ffc <__fp_nan>:
     ffc:	9f ef       	ldi	r25, 0xFF	; 255
     ffe:	80 ec       	ldi	r24, 0xC0	; 192
    1000:	08 95       	ret

00001002 <__fp_pscA>:
    1002:	00 24       	eor	r0, r0
    1004:	0a 94       	dec	r0
    1006:	16 16       	cp	r1, r22
    1008:	17 06       	cpc	r1, r23
    100a:	18 06       	cpc	r1, r24
    100c:	09 06       	cpc	r0, r25
    100e:	08 95       	ret

00001010 <__fp_pscB>:
    1010:	00 24       	eor	r0, r0
    1012:	0a 94       	dec	r0
    1014:	12 16       	cp	r1, r18
    1016:	13 06       	cpc	r1, r19
    1018:	14 06       	cpc	r1, r20
    101a:	05 06       	cpc	r0, r21
    101c:	08 95       	ret

0000101e <__fp_round>:
    101e:	09 2e       	mov	r0, r25
    1020:	03 94       	inc	r0
    1022:	00 0c       	add	r0, r0
    1024:	11 f4       	brne	.+4      	; 0x102a <__fp_round+0xc>
    1026:	88 23       	and	r24, r24
    1028:	52 f0       	brmi	.+20     	; 0x103e <__fp_round+0x20>
    102a:	bb 0f       	add	r27, r27
    102c:	40 f4       	brcc	.+16     	; 0x103e <__fp_round+0x20>
    102e:	bf 2b       	or	r27, r31
    1030:	11 f4       	brne	.+4      	; 0x1036 <__fp_round+0x18>
    1032:	60 ff       	sbrs	r22, 0
    1034:	04 c0       	rjmp	.+8      	; 0x103e <__fp_round+0x20>
    1036:	6f 5f       	subi	r22, 0xFF	; 255
    1038:	7f 4f       	sbci	r23, 0xFF	; 255
    103a:	8f 4f       	sbci	r24, 0xFF	; 255
    103c:	9f 4f       	sbci	r25, 0xFF	; 255
    103e:	08 95       	ret

00001040 <__mulsi3>:
    1040:	62 9f       	mul	r22, r18
    1042:	d0 01       	movw	r26, r0
    1044:	73 9f       	mul	r23, r19
    1046:	f0 01       	movw	r30, r0
    1048:	82 9f       	mul	r24, r18
    104a:	e0 0d       	add	r30, r0
    104c:	f1 1d       	adc	r31, r1
    104e:	64 9f       	mul	r22, r20
    1050:	e0 0d       	add	r30, r0
    1052:	f1 1d       	adc	r31, r1
    1054:	92 9f       	mul	r25, r18
    1056:	f0 0d       	add	r31, r0
    1058:	83 9f       	mul	r24, r19
    105a:	f0 0d       	add	r31, r0
    105c:	74 9f       	mul	r23, r20
    105e:	f0 0d       	add	r31, r0
    1060:	65 9f       	mul	r22, r21
    1062:	f0 0d       	add	r31, r0
    1064:	99 27       	eor	r25, r25
    1066:	72 9f       	mul	r23, r18
    1068:	b0 0d       	add	r27, r0
    106a:	e1 1d       	adc	r30, r1
    106c:	f9 1f       	adc	r31, r25
    106e:	63 9f       	mul	r22, r19
    1070:	b0 0d       	add	r27, r0
    1072:	e1 1d       	adc	r30, r1
    1074:	f9 1f       	adc	r31, r25
    1076:	bd 01       	movw	r22, r26
    1078:	cf 01       	movw	r24, r30
    107a:	11 24       	eor	r1, r1
    107c:	08 95       	ret

0000107e <__udivmodsi4>:
    107e:	a1 e2       	ldi	r26, 0x21	; 33
    1080:	1a 2e       	mov	r1, r26
    1082:	aa 1b       	sub	r26, r26
    1084:	bb 1b       	sub	r27, r27
    1086:	fd 01       	movw	r30, r26
    1088:	0d c0       	rjmp	.+26     	; 0x10a4 <__udivmodsi4_ep>

0000108a <__udivmodsi4_loop>:
    108a:	aa 1f       	adc	r26, r26
    108c:	bb 1f       	adc	r27, r27
    108e:	ee 1f       	adc	r30, r30
    1090:	ff 1f       	adc	r31, r31
    1092:	a2 17       	cp	r26, r18
    1094:	b3 07       	cpc	r27, r19
    1096:	e4 07       	cpc	r30, r20
    1098:	f5 07       	cpc	r31, r21
    109a:	20 f0       	brcs	.+8      	; 0x10a4 <__udivmodsi4_ep>
    109c:	a2 1b       	sub	r26, r18
    109e:	b3 0b       	sbc	r27, r19
    10a0:	e4 0b       	sbc	r30, r20
    10a2:	f5 0b       	sbc	r31, r21

000010a4 <__udivmodsi4_ep>:
    10a4:	66 1f       	adc	r22, r22
    10a6:	77 1f       	adc	r23, r23
    10a8:	88 1f       	adc	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	1a 94       	dec	r1
    10ae:	69 f7       	brne	.-38     	; 0x108a <__udivmodsi4_loop>
    10b0:	60 95       	com	r22
    10b2:	70 95       	com	r23
    10b4:	80 95       	com	r24
    10b6:	90 95       	com	r25
    10b8:	9b 01       	movw	r18, r22
    10ba:	ac 01       	movw	r20, r24
    10bc:	bd 01       	movw	r22, r26
    10be:	cf 01       	movw	r24, r30
    10c0:	08 95       	ret

000010c2 <_exit>:
    10c2:	f8 94       	cli

000010c4 <__stop_program>:
    10c4:	ff cf       	rjmp	.-2      	; 0x10c4 <__stop_program>
