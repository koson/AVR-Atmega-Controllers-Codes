
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000028e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000028e  00000302  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080006a  00000298  0000030c  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000012f  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000434  00000000  00000000  0000045b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001c9  00000000  00000000  0000088f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003cf  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00000e28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000017e  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010d  00000000  00000000  00001096  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e8       	ldi	r30, 0x8E	; 142
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1b 01 	call	0x236	; 0x236 <main>
  8a:	0c 94 45 01 	jmp	0x28a	; 0x28a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <toggleE>:
	lcd_cmd(0x06);
	lcd_cmd(LINE1);	
}

void toggleE(void)
{
  92:	c2 9a       	sbi	0x18, 2	; 24
CLEARBIT(PORTD,BIT(2));
}

void WaitMs(unsigned int ms)
{
	for(j=0;j<ms;j++)
  94:	88 ec       	ldi	r24, 0xC8	; 200
  96:	80 93 6a 00 	sts	0x006A, r24
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	80 93 6b 00 	sts	0x006B, r24

void toggleE(void)
{
SETBIT(PORTB,BIT(2));
WaitMs(1);
CLEARBIT(PORTD,BIT(2));
  a0:	92 98       	cbi	0x12, 2	; 18
}
  a2:	08 95       	ret

000000a4 <WaitMs>:

void WaitMs(unsigned int ms)
{
  a4:	ac 01       	movw	r20, r24
  a6:	30 91 6a 00 	lds	r19, 0x006A
  aa:	20 e0       	ldi	r18, 0x00	; 0
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <WaitMs+0xe>
	for(j=0;j<ms;j++)
  ae:	2f 5f       	subi	r18, 0xFF	; 255
  b0:	38 ec       	ldi	r19, 0xC8	; 200
  b2:	82 2f       	mov	r24, r18
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	84 17       	cp	r24, r20
  b8:	95 07       	cpc	r25, r21
  ba:	c8 f3       	brcs	.-14     	; 0xae <WaitMs+0xa>
  bc:	30 93 6a 00 	sts	0x006A, r19
  c0:	20 93 6b 00 	sts	0x006B, r18
	{
		for(k=0;k<200;k++)
		{};
	}
}
  c4:	08 95       	ret

000000c6 <lcd_cmd>:

void lcd_cmd(unsigned char cmd)
{   
  c6:	20 91 6a 00 	lds	r18, 0x006A
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <lcd_cmd+0xc>
  ce:	9f 5f       	subi	r25, 0xFF	; 255
  d0:	28 ec       	ldi	r18, 0xC8	; 200
CLEARBIT(PORTD,BIT(2));
}

void WaitMs(unsigned int ms)
{
	for(j=0;j<ms;j++)
  d2:	92 30       	cpi	r25, 0x02	; 2
  d4:	e0 f3       	brcs	.-8      	; 0xce <lcd_cmd+0x8>
  d6:	20 93 6a 00 	sts	0x006A, r18
  da:	90 93 6b 00 	sts	0x006B, r25
}

void lcd_cmd(unsigned char cmd)
{   
    WaitMs(2);
	CLEARBIT(PORTB,BIT(0));
  de:	c0 98       	cbi	0x18, 0	; 24
	PORTA=cmd;			
  e0:	8b bb       	out	0x1b, r24	; 27
	toggleE();
  e2:	0e 94 49 00 	call	0x92	; 0x92 <toggleE>
}
  e6:	08 95       	ret

000000e8 <lcd_init>:
void lcd_gotoxy2(unsigned char pos);
void lcd_exit(void);
void WaitMs(unsigned int ms);

void lcd_init(void)	//init the lcd
{	
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	8a bb       	out	0x1a, r24	; 26
	DDRA=0xFF;
	DDRB=0xFF;
  ec:	87 bb       	out	0x17, r24	; 23
  ee:	90 91 6a 00 	lds	r25, 0x006A
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <lcd_init+0x12>
  f6:	8f 5f       	subi	r24, 0xFF	; 255
  f8:	98 ec       	ldi	r25, 0xC8	; 200
CLEARBIT(PORTD,BIT(2));
}

void WaitMs(unsigned int ms)
{
	for(j=0;j<ms;j++)
  fa:	8f 30       	cpi	r24, 0x0F	; 15
  fc:	e0 f3       	brcs	.-8      	; 0xf6 <lcd_init+0xe>
  fe:	90 93 6a 00 	sts	0x006A, r25
 102:	80 93 6b 00 	sts	0x006B, r24
{	
	DDRA=0xFF;
	DDRB=0xFF;
	//DDRG=0xFF;
	WaitMs(15);
	CLEARBIT(PORTB,BIT(0));
 106:	c0 98       	cbi	0x18, 0	; 24
	lcd_cmd(0x38);
 108:	88 e3       	ldi	r24, 0x38	; 56
 10a:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_cmd>
	lcd_cmd(0x0E);
 10e:	8e e0       	ldi	r24, 0x0E	; 14
 110:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_cmd>
	lcd_cmd(0x01);
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_cmd>
	lcd_cmd(0x06);
 11a:	86 e0       	ldi	r24, 0x06	; 6
 11c:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_cmd>
	lcd_cmd(LINE1);	
 120:	80 e8       	ldi	r24, 0x80	; 128
 122:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_cmd>
}
 126:	08 95       	ret

00000128 <lcd_char>:
	PORTA=cmd;			
	toggleE();
}

void lcd_char(unsigned char single)
{
 128:	98 ec       	ldi	r25, 0xC8	; 200
 12a:	90 93 6a 00 	sts	0x006A, r25
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	90 93 6b 00 	sts	0x006B, r25
    WaitMs(1);
	SETBIT(PORTB,BIT(0));	
 134:	c0 9a       	sbi	0x18, 0	; 24
	PORTA=single;						
 136:	8b bb       	out	0x1b, r24	; 27
	toggleE();
 138:	0e 94 49 00 	call	0x92	; 0x92 <toggleE>
}
 13c:	08 95       	ret

0000013e <lcd_string>:

void lcd_string(unsigned char str[32])
{
 13e:	ef 92       	push	r14
 140:	ff 92       	push	r15
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	7c 01       	movw	r14, r24
	unsigned char k=0;
	SETBIT(PORTB,BIT(0));
 14a:	c0 9a       	sbi	0x18, 0	; 24
 14c:	10 e0       	ldi	r17, 0x00	; 0
 14e:	10 c0       	rjmp	.+32     	; 0x170 <lcd_string+0x32>
CLEARBIT(PORTD,BIT(2));
}

void WaitMs(unsigned int ms)
{
	for(j=0;j<ms;j++)
 150:	88 ec       	ldi	r24, 0xC8	; 200
 152:	80 93 6a 00 	sts	0x006A, r24
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	80 93 6b 00 	sts	0x006B, r24
	unsigned char k=0;
	SETBIT(PORTB,BIT(0));
	//CLEARBIT(PORTG,BIT(2));
	while(str[k]!='\0')	//Till null character is encountered
		{   WaitMs(1);
			if(k==16)
 15c:	10 31       	cpi	r17, 0x10	; 16
 15e:	19 f4       	brne	.+6      	; 0x166 <lcd_string+0x28>
				lcd_cmd(LINE2);
 160:	80 ec       	ldi	r24, 0xC0	; 192
 162:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_cmd>
			PORTA=str[k];
 166:	88 81       	ld	r24, Y
 168:	8b bb       	out	0x1b, r24	; 27
			toggleE();
 16a:	0e 94 49 00 	call	0x92	; 0x92 <toggleE>
			k++;
 16e:	1f 5f       	subi	r17, 0xFF	; 255
void lcd_string(unsigned char str[32])
{
	unsigned char k=0;
	SETBIT(PORTB,BIT(0));
	//CLEARBIT(PORTG,BIT(2));
	while(str[k]!='\0')	//Till null character is encountered
 170:	e7 01       	movw	r28, r14
 172:	c1 0f       	add	r28, r17
 174:	d1 1d       	adc	r29, r1
 176:	88 81       	ld	r24, Y
 178:	88 23       	and	r24, r24
 17a:	51 f7       	brne	.-44     	; 0x150 <lcd_string+0x12>
				lcd_cmd(LINE2);
			PORTA=str[k];
			toggleE();
			k++;
		}
}
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	1f 91       	pop	r17
 182:	ff 90       	pop	r15
 184:	ef 90       	pop	r14
 186:	08 95       	ret

00000188 <lcd_showvalue>:


void lcd_showvalue(unsigned int num)	//prints the decimal 3digit value of num
{
 188:	ef 92       	push	r14
 18a:	ff 92       	push	r15
 18c:	0f 93       	push	r16
 18e:	1f 93       	push	r17
 190:	8c 01       	movw	r16, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
 192:	64 e6       	ldi	r22, 0x64	; 100
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	0e 94 31 01 	call	0x262	; 0x262 <__udivmodhi4>
 19a:	46 2f       	mov	r20, r22
	T=(num - (H*100))/10;
 19c:	26 2f       	mov	r18, r22
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	8c e9       	ldi	r24, 0x9C	; 156
 1a2:	9f ef       	ldi	r25, 0xFF	; 255
 1a4:	28 9f       	mul	r18, r24
 1a6:	70 01       	movw	r14, r0
 1a8:	29 9f       	mul	r18, r25
 1aa:	f0 0c       	add	r15, r0
 1ac:	38 9f       	mul	r19, r24
 1ae:	f0 0c       	add	r15, r0
 1b0:	11 24       	eor	r1, r1
 1b2:	c7 01       	movw	r24, r14
 1b4:	80 0f       	add	r24, r16
 1b6:	91 1f       	adc	r25, r17
 1b8:	6a e0       	ldi	r22, 0x0A	; 10
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	0e 94 31 01 	call	0x262	; 0x262 <__udivmodhi4>
 1c0:	16 2f       	mov	r17, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+48);
 1c2:	84 2f       	mov	r24, r20
 1c4:	80 5d       	subi	r24, 0xD0	; 208
 1c6:	0e 94 94 00 	call	0x128	; 0x128 <lcd_char>
	lcd_char(T+48);
 1ca:	81 2f       	mov	r24, r17
 1cc:	80 5d       	subi	r24, 0xD0	; 208
 1ce:	0e 94 94 00 	call	0x128	; 0x128 <lcd_char>
	lcd_char(O+48);
 1d2:	00 5d       	subi	r16, 0xD0	; 208
 1d4:	0e 0d       	add	r16, r14
 1d6:	86 ef       	ldi	r24, 0xF6	; 246
 1d8:	9f ef       	ldi	r25, 0xFF	; 255
 1da:	18 9f       	mul	r17, r24
 1dc:	60 2d       	mov	r22, r0
 1de:	11 24       	eor	r1, r1
 1e0:	86 2f       	mov	r24, r22
 1e2:	80 0f       	add	r24, r16
 1e4:	0e 94 94 00 	call	0x128	; 0x128 <lcd_char>
}
 1e8:	1f 91       	pop	r17
 1ea:	0f 91       	pop	r16
 1ec:	ff 90       	pop	r15
 1ee:	ef 90       	pop	r14
 1f0:	08 95       	ret

000001f2 <lcd_gotoxy1>:

void lcd_gotoxy1(unsigned char pos)
{
 1f2:	80 58       	subi	r24, 0x80	; 128
 1f4:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_cmd>
	lcd_cmd(LINE1+pos);
}
 1f8:	08 95       	ret

000001fa <lcd_gotoxy2>:


void lcd_gotoxy2(unsigned char pos)
{
 1fa:	80 54       	subi	r24, 0x40	; 64
 1fc:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_cmd>
	lcd_cmd(LINE2+pos);
}
 200:	08 95       	ret

00000202 <ports_init>:
#define TOGGLEBIT(x,b)  x^=b;


/************************************************/
void ports_init(void)
{
 202:	8f ef       	ldi	r24, 0xFF	; 255
 204:	87 bb       	out	0x17, r24	; 23
//DDRC=0XFF;
DDRB=0XFF;
//DDRD=0XFF;
//DDRA=0XFF;
}
 206:	08 95       	ret

00000208 <transmit_data>:
#define CLEARBIT(x,b)  x&=~b;
#define TOGGLEBIT(x,b)  x^=b;
*/

char transmit_data(char data)
{
 208:	e0 e1       	ldi	r30, 0x10	; 16
 20a:	f7 e2       	ldi	r31, 0x27	; 39
 20c:	31 97       	sbiw	r30, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <transmit_data+0x4>
	_delay_ms(5);
	
	while(!(UCSRA & (1<<UDRE)))
 210:	5d 9b       	sbis	0x0b, 5	; 11
 212:	fe cf       	rjmp	.-4      	; 0x210 <transmit_data+0x8>
	{}
	UDR=data;
 214:	8c b9       	out	0x0c, r24	; 12
	
	//CLEARBIT(UCSRA,BIT(6));
}
 216:	08 95       	ret

00000218 <recieve_data>:


char recieve_data()
{
 218:	5f 9b       	sbis	0x0b, 7	; 11
 21a:	fe cf       	rjmp	.-4      	; 0x218 <recieve_data>
	while(!(UCSRA & (1<<RXC)))
	{}
	return UDR;
 21c:	8c b1       	in	r24, 0x0c	; 12
	CLEARBIT(UCSRA,BIT(7));
}
 21e:	08 95       	ret

00000220 <usart_init>:

int usart_init(void)
{
 220:	59 9a       	sbi	0x0b, 1	; 11


SETBIT(UCSRA,BIT(1));//DOUBLE ASYN MODE ENABLED
SETBIT(UCSRB,BIT(3));//TRANS ENABLED
 222:	53 9a       	sbi	0x0a, 3	; 10
SETBIT(UCSRB,BIT(4));//RECEP ENABLED
 224:	54 9a       	sbi	0x0a, 4	; 10
UCSRC=0X06;//PARITY DISABLED ASYNC 8 BIT
 226:	86 e0       	ldi	r24, 0x06	; 6
 228:	80 bd       	out	0x20, r24	; 32
UBRRL=103;//SET BAUD RATE TO 9600 ASYNC
 22a:	87 e6       	ldi	r24, 0x67	; 103
 22c:	89 b9       	out	0x09, r24	; 9
UBRRH=0;
 22e:	10 bc       	out	0x20, r1	; 32
return 0;
}
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	08 95       	ret

00000236 <main>:

int main (void)
{
 236:	8f ef       	ldi	r24, 0xFF	; 255
 238:	87 bb       	out	0x17, r24	; 23

char data='A',data1;

	DDRB=0XFF;	
	DDRC=0XFF;
 23a:	84 bb       	out	0x14, r24	; 20
	DDRD=0XFE;
 23c:	8e ef       	ldi	r24, 0xFE	; 254
 23e:	81 bb       	out	0x11, r24	; 17
	
	lcd_init();
 240:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_init>

int usart_init(void)
{


SETBIT(UCSRA,BIT(1));//DOUBLE ASYN MODE ENABLED
 244:	59 9a       	sbi	0x0b, 1	; 11
SETBIT(UCSRB,BIT(3));//TRANS ENABLED
 246:	53 9a       	sbi	0x0a, 3	; 10
SETBIT(UCSRB,BIT(4));//RECEP ENABLED
 248:	54 9a       	sbi	0x0a, 4	; 10
UCSRC=0X06;//PARITY DISABLED ASYNC 8 BIT
 24a:	86 e0       	ldi	r24, 0x06	; 6
 24c:	80 bd       	out	0x20, r24	; 32
UBRRL=103;//SET BAUD RATE TO 9600 ASYNC
 24e:	87 e6       	ldi	r24, 0x67	; 103
 250:	89 b9       	out	0x09, r24	; 9
UBRRH=0;
 252:	10 bc       	out	0x20, r1	; 32
	while(1)
	{
	    
			//transmit_data(data);
			//data1=recieve_data();
			lcd_gotoxy1(0);
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_gotoxy1>
			lcd_char(data);
 25a:	81 e4       	ldi	r24, 0x41	; 65
 25c:	0e 94 94 00 	call	0x128	; 0x128 <lcd_char>
 260:	f9 cf       	rjmp	.-14     	; 0x254 <main+0x1e>

00000262 <__udivmodhi4>:
 262:	aa 1b       	sub	r26, r26
 264:	bb 1b       	sub	r27, r27
 266:	51 e1       	ldi	r21, 0x11	; 17
 268:	07 c0       	rjmp	.+14     	; 0x278 <__udivmodhi4_ep>

0000026a <__udivmodhi4_loop>:
 26a:	aa 1f       	adc	r26, r26
 26c:	bb 1f       	adc	r27, r27
 26e:	a6 17       	cp	r26, r22
 270:	b7 07       	cpc	r27, r23
 272:	10 f0       	brcs	.+4      	; 0x278 <__udivmodhi4_ep>
 274:	a6 1b       	sub	r26, r22
 276:	b7 0b       	sbc	r27, r23

00000278 <__udivmodhi4_ep>:
 278:	88 1f       	adc	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	5a 95       	dec	r21
 27e:	a9 f7       	brne	.-22     	; 0x26a <__udivmodhi4_loop>
 280:	80 95       	com	r24
 282:	90 95       	com	r25
 284:	bc 01       	movw	r22, r24
 286:	cd 01       	movw	r24, r26
 288:	08 95       	ret

0000028a <_exit>:
 28a:	f8 94       	cli

0000028c <__stop_program>:
 28c:	ff cf       	rjmp	.-2      	; 0x28c <__stop_program>
