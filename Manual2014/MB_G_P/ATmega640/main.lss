
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800200  00000b52  00000be6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080021a  0080021a  00000c00  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000019d  00000000  00000000  00000c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a43  00000000  00000000  00000dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002bc  00000000  00000000  00001800  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000829  00000000  00000000  00001abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  000022e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000221  00000000  00000000  00002428  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000398  00000000  00000000  00002649  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  000029e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	e2 e5       	ldi	r30, 0x52	; 82
  f8:	fb e0       	ldi	r31, 0x0B	; 11
  fa:	02 c0       	rjmp	.+4      	; 0x100 <.do_copy_data_start>

000000fc <.do_copy_data_loop>:
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0

00000100 <.do_copy_data_start>:
 100:	aa 31       	cpi	r26, 0x1A	; 26
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <.do_copy_data_loop>

00000106 <__do_clear_bss>:
 106:	12 e0       	ldi	r17, 0x02	; 2
 108:	aa e1       	ldi	r26, 0x1A	; 26
 10a:	b2 e0       	ldi	r27, 0x02	; 2
 10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
 10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
 110:	a6 32       	cpi	r26, 0x26	; 38
 112:	b1 07       	cpc	r27, r17
 114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
 116:	0e 94 07 03 	call	0x60e	; 0x60e <main>
 11a:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <_exit>

0000011e <__bad_interrupt>:
 11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <toggleE>:
}


void toggleE(void)
{
SETBIT(PORTE,BIT(0));
 122:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 124:	83 e3       	ldi	r24, 0x33	; 51
 126:	97 e0       	ldi	r25, 0x07	; 7
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <toggleE+0x6>
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
 12c:	70 98       	cbi	0x0e, 0	; 14
}
 12e:	08 95       	ret

00000130 <dely_ns>:

void dely_ns(unsigned char tim)
{
 130:	20 91 1a 02 	lds	r18, 0x021A
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 c0       	rjmp	.+4      	; 0x13c <dely_ns+0xc>
	for(j=0;j<tim;j++)
 138:	9f 5f       	subi	r25, 0xFF	; 255
 13a:	2a e0       	ldi	r18, 0x0A	; 10
 13c:	98 17       	cp	r25, r24
 13e:	e0 f3       	brcs	.-8      	; 0x138 <dely_ns+0x8>
 140:	20 93 1a 02 	sts	0x021A, r18
 144:	90 93 1b 02 	sts	0x021B, r25
	{
		for(k=0;k<10;k++)
		{};
	}
}
 148:	08 95       	ret

0000014a <lcd_exit>:
}
		

void lcd_exit(void)
{
	PORTA=save;
 14a:	80 91 1c 02 	lds	r24, 0x021C
 14e:	82 b9       	out	0x02, r24	; 2
}
 150:	08 95       	ret

00000152 <WaitMs>:

/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
 152:	0a c0       	rjmp	.+20     	; 0x168 <WaitMs+0x16>
	int i;

	while (ms-- > 0)
 154:	20 e0       	ldi	r18, 0x00	; 0
 156:	30 e0       	ldi	r19, 0x00	; 0
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 158:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 15a:	2f 5f       	subi	r18, 0xFF	; 255
 15c:	3f 4f       	sbci	r19, 0xFF	; 255
 15e:	4c e0       	ldi	r20, 0x0C	; 12
 160:	2c 3c       	cpi	r18, 0xCC	; 204
 162:	34 07       	cpc	r19, r20
 164:	c9 f7       	brne	.-14     	; 0x158 <WaitMs+0x6>
 166:	01 97       	sbiw	r24, 0x01	; 1
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 168:	00 97       	sbiw	r24, 0x00	; 0
 16a:	a1 f7       	brne	.-24     	; 0x154 <WaitMs+0x2>
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
	}
}
 16c:	08 95       	ret

0000016e <lcd_char>:

}


void lcd_char(unsigned char data)
{	
 16e:	1f 93       	push	r17
 170:	18 2f       	mov	r17, r24
	int temp;
	WaitMs(15);
 172:	8f e0       	ldi	r24, 0x0F	; 15
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 a9 00 	call	0x152	; 0x152 <WaitMs>
	SETBIT(PORTG,BIT(5));
 17a:	a5 9a       	sbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 17c:	70 98       	cbi	0x0e, 0	; 14
	temp= (data & 0b11000000); // '10'000000
 17e:	21 2f       	mov	r18, r17
 180:	30 e0       	ldi	r19, 0x00	; 0
	PORTE=temp;
 182:	c9 01       	movw	r24, r18
 184:	80 7c       	andi	r24, 0xC0	; 192
 186:	90 70       	andi	r25, 0x00	; 0
 188:	8e b9       	out	0x0e, r24	; 14
	temp=(data>>3) & 0b00000110; // 00000'11'0
	PORTE= PORTE | temp;
 18a:	8e b1       	in	r24, 0x0e	; 14
 18c:	16 95       	lsr	r17
 18e:	16 95       	lsr	r17
 190:	16 95       	lsr	r17
 192:	16 70       	andi	r17, 0x06	; 6
 194:	81 2b       	or	r24, r17
 196:	8e b9       	out	0x0e, r24	; 14
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 198:	68 e1       	ldi	r22, 0x18	; 24
 19a:	86 2f       	mov	r24, r22
 19c:	8a 95       	dec	r24
 19e:	f1 f7       	brne	.-4      	; 0x19c <lcd_char+0x2e>
}


void toggleE(void)
{
SETBIT(PORTE,BIT(0));
 1a0:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1a2:	43 e3       	ldi	r20, 0x33	; 51
 1a4:	57 e0       	ldi	r21, 0x07	; 7
 1a6:	ca 01       	movw	r24, r20
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <lcd_char+0x3a>
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
 1ac:	70 98       	cbi	0x0e, 0	; 14
	toggleE();				// '10'000'11'0 (first nibble Done)
							/* PORTA = (data & 0xF0);
							PORTA = (data & 0xF0);
							PORTA = (data & 0xF0);*/

	CLEARBIT(PORTG,BIT(5));
 1ae:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 1b0:	70 98       	cbi	0x0e, 0	; 14
	SETBIT(PORTG,BIT(5));
 1b2:	a5 9a       	sbi	0x14, 5	; 20
	temp=(data << 4) & 0b11000000; // '10'000000
	PORTE=temp;
 1b4:	c9 01       	movw	r24, r18
 1b6:	74 e0       	ldi	r23, 0x04	; 4
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	7a 95       	dec	r23
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <lcd_char+0x4a>
 1c0:	80 7c       	andi	r24, 0xC0	; 192
 1c2:	90 70       	andi	r25, 0x00	; 0
 1c4:	8e b9       	out	0x0e, r24	; 14
	temp=(data << 1) & 0b00000110; // 00000'01'0 
	PORTE= PORTE | temp;
 1c6:	8e b1       	in	r24, 0x0e	; 14
 1c8:	22 0f       	add	r18, r18
 1ca:	33 1f       	adc	r19, r19
 1cc:	26 70       	andi	r18, 0x06	; 6
 1ce:	30 70       	andi	r19, 0x00	; 0
 1d0:	82 2b       	or	r24, r18
 1d2:	8e b9       	out	0x0e, r24	; 14
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1d4:	6a 95       	dec	r22
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_char+0x66>
}


void toggleE(void)
{
SETBIT(PORTE,BIT(0));
 1d8:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1da:	ca 01       	movw	r24, r20
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <lcd_char+0x6e>
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
 1e0:	70 98       	cbi	0x0e, 0	; 14
	_delay_us(5);
						/*PORTA = (data << 4);
						PORTA = (data << 4);
						PORTA = (data << 4);	*/					
	toggleE();
}
 1e2:	1f 91       	pop	r17
 1e4:	08 95       	ret

000001e6 <lcd_showvalueh>:
{
	lcd_cmd(LINE2+pos);
}

void lcd_showvalueh(unsigned int num)	//prints the decimal 3digit value of num
{
 1e6:	ef 92       	push	r14
 1e8:	ff 92       	push	r15
 1ea:	0f 93       	push	r16
 1ec:	1f 93       	push	r17
 1ee:	8c 01       	movw	r16, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
 1f0:	64 e6       	ldi	r22, 0x64	; 100
 1f2:	70 e0       	ldi	r23, 0x00	; 0
 1f4:	0e 94 71 05 	call	0xae2	; 0xae2 <__udivmodhi4>
 1f8:	46 2f       	mov	r20, r22
	T=(num - (H*100))/10;
 1fa:	26 2f       	mov	r18, r22
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	8c e9       	ldi	r24, 0x9C	; 156
 200:	9f ef       	ldi	r25, 0xFF	; 255
 202:	28 9f       	mul	r18, r24
 204:	70 01       	movw	r14, r0
 206:	29 9f       	mul	r18, r25
 208:	f0 0c       	add	r15, r0
 20a:	38 9f       	mul	r19, r24
 20c:	f0 0c       	add	r15, r0
 20e:	11 24       	eor	r1, r1
 210:	c7 01       	movw	r24, r14
 212:	80 0f       	add	r24, r16
 214:	91 1f       	adc	r25, r17
 216:	6a e0       	ldi	r22, 0x0A	; 10
 218:	70 e0       	ldi	r23, 0x00	; 0
 21a:	0e 94 71 05 	call	0xae2	; 0xae2 <__udivmodhi4>
 21e:	16 2f       	mov	r17, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+48);
 220:	84 2f       	mov	r24, r20
 222:	80 5d       	subi	r24, 0xD0	; 208
 224:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_char>
	lcd_char(T+48);
 228:	81 2f       	mov	r24, r17
 22a:	80 5d       	subi	r24, 0xD0	; 208
 22c:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_char>
	lcd_char(O+48);
 230:	00 5d       	subi	r16, 0xD0	; 208
 232:	0e 0d       	add	r16, r14
 234:	86 ef       	ldi	r24, 0xF6	; 246
 236:	9f ef       	ldi	r25, 0xFF	; 255
 238:	18 9f       	mul	r17, r24
 23a:	60 2d       	mov	r22, r0
 23c:	11 24       	eor	r1, r1
 23e:	86 2f       	mov	r24, r22
 240:	80 0f       	add	r24, r16
 242:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_char>
}
 246:	1f 91       	pop	r17
 248:	0f 91       	pop	r16
 24a:	ff 90       	pop	r15
 24c:	ef 90       	pop	r14
 24e:	08 95       	ret

00000250 <lcd_showvalue>:
		}
}


void lcd_showvalue(unsigned long int num)
{
 250:	8f 92       	push	r8
 252:	9f 92       	push	r9
 254:	af 92       	push	r10
 256:	bf 92       	push	r11
 258:	cf 92       	push	r12
 25a:	df 92       	push	r13
 25c:	ef 92       	push	r14
 25e:	ff 92       	push	r15
 260:	1f 93       	push	r17
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	4b 01       	movw	r8, r22
 268:	5c 01       	movw	r10, r24
	
	unsigned long int n = 0;
	int flag = 0;


	if(num%100000 == 0)
 26a:	20 ea       	ldi	r18, 0xA0	; 160
 26c:	36 e8       	ldi	r19, 0x86	; 134
 26e:	41 e0       	ldi	r20, 0x01	; 1
 270:	50 e0       	ldi	r21, 0x00	; 0
 272:	0e 94 85 05 	call	0xb0a	; 0xb0a <__udivmodsi4>
 276:	61 15       	cp	r22, r1
 278:	71 05       	cpc	r23, r1
 27a:	81 05       	cpc	r24, r1
 27c:	91 05       	cpc	r25, r1
 27e:	19 f4       	brne	.+6      	; 0x286 <lcd_showvalue+0x36>
 280:	c5 e0       	ldi	r28, 0x05	; 5
 282:	d0 e0       	ldi	r29, 0x00	; 0
 284:	41 c0       	rjmp	.+130    	; 0x308 <lcd_showvalue+0xb8>
	{
		flag = 5;
	}
	
	else if(num%10000 == 0)
 286:	c5 01       	movw	r24, r10
 288:	b4 01       	movw	r22, r8
 28a:	20 e1       	ldi	r18, 0x10	; 16
 28c:	37 e2       	ldi	r19, 0x27	; 39
 28e:	40 e0       	ldi	r20, 0x00	; 0
 290:	50 e0       	ldi	r21, 0x00	; 0
 292:	0e 94 85 05 	call	0xb0a	; 0xb0a <__udivmodsi4>
 296:	61 15       	cp	r22, r1
 298:	71 05       	cpc	r23, r1
 29a:	81 05       	cpc	r24, r1
 29c:	91 05       	cpc	r25, r1
 29e:	19 f4       	brne	.+6      	; 0x2a6 <lcd_showvalue+0x56>
 2a0:	c4 e0       	ldi	r28, 0x04	; 4
 2a2:	d0 e0       	ldi	r29, 0x00	; 0
 2a4:	31 c0       	rjmp	.+98     	; 0x308 <lcd_showvalue+0xb8>
	{
		flag = 4;
	}

	else if(num%1000 == 0) 
 2a6:	c5 01       	movw	r24, r10
 2a8:	b4 01       	movw	r22, r8
 2aa:	28 ee       	ldi	r18, 0xE8	; 232
 2ac:	33 e0       	ldi	r19, 0x03	; 3
 2ae:	40 e0       	ldi	r20, 0x00	; 0
 2b0:	50 e0       	ldi	r21, 0x00	; 0
 2b2:	0e 94 85 05 	call	0xb0a	; 0xb0a <__udivmodsi4>
 2b6:	61 15       	cp	r22, r1
 2b8:	71 05       	cpc	r23, r1
 2ba:	81 05       	cpc	r24, r1
 2bc:	91 05       	cpc	r25, r1
 2be:	19 f4       	brne	.+6      	; 0x2c6 <lcd_showvalue+0x76>
 2c0:	c3 e0       	ldi	r28, 0x03	; 3
 2c2:	d0 e0       	ldi	r29, 0x00	; 0
 2c4:	21 c0       	rjmp	.+66     	; 0x308 <lcd_showvalue+0xb8>
	{
		flag = 3;
	}

	else if(num%100 == 0) 
 2c6:	c5 01       	movw	r24, r10
 2c8:	b4 01       	movw	r22, r8
 2ca:	24 e6       	ldi	r18, 0x64	; 100
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	40 e0       	ldi	r20, 0x00	; 0
 2d0:	50 e0       	ldi	r21, 0x00	; 0
 2d2:	0e 94 85 05 	call	0xb0a	; 0xb0a <__udivmodsi4>
 2d6:	61 15       	cp	r22, r1
 2d8:	71 05       	cpc	r23, r1
 2da:	81 05       	cpc	r24, r1
 2dc:	91 05       	cpc	r25, r1
 2de:	19 f4       	brne	.+6      	; 0x2e6 <lcd_showvalue+0x96>
 2e0:	c2 e0       	ldi	r28, 0x02	; 2
 2e2:	d0 e0       	ldi	r29, 0x00	; 0
 2e4:	11 c0       	rjmp	.+34     	; 0x308 <lcd_showvalue+0xb8>
 2e6:	c0 e0       	ldi	r28, 0x00	; 0
 2e8:	d0 e0       	ldi	r29, 0x00	; 0
 2ea:	c5 01       	movw	r24, r10
 2ec:	b4 01       	movw	r22, r8
 2ee:	2a e0       	ldi	r18, 0x0A	; 10
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	40 e0       	ldi	r20, 0x00	; 0
 2f4:	50 e0       	ldi	r21, 0x00	; 0
 2f6:	0e 94 85 05 	call	0xb0a	; 0xb0a <__udivmodsi4>
 2fa:	61 15       	cp	r22, r1
 2fc:	71 05       	cpc	r23, r1
 2fe:	81 05       	cpc	r24, r1
 300:	91 05       	cpc	r25, r1
 302:	11 f4       	brne	.+4      	; 0x308 <lcd_showvalue+0xb8>
 304:	c1 e0       	ldi	r28, 0x01	; 1
 306:	d0 e0       	ldi	r29, 0x00	; 0
 308:	cc 24       	eor	r12, r12
 30a:	dd 24       	eor	r13, r13
 30c:	76 01       	movw	r14, r12
 30e:	23 c0       	rjmp	.+70     	; 0x356 <lcd_showvalue+0x106>


	while(num!=0)
	{
	
			H = num%10;
 310:	c5 01       	movw	r24, r10
 312:	b4 01       	movw	r22, r8
 314:	2a e0       	ldi	r18, 0x0A	; 10
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	40 e0       	ldi	r20, 0x00	; 0
 31a:	50 e0       	ldi	r21, 0x00	; 0
 31c:	0e 94 85 05 	call	0xb0a	; 0xb0a <__udivmodsi4>
 320:	16 2f       	mov	r17, r22
			num = num/10;
 322:	c5 01       	movw	r24, r10
 324:	b4 01       	movw	r22, r8
 326:	2a e0       	ldi	r18, 0x0A	; 10
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	40 e0       	ldi	r20, 0x00	; 0
 32c:	50 e0       	ldi	r21, 0x00	; 0
 32e:	0e 94 85 05 	call	0xb0a	; 0xb0a <__udivmodsi4>
 332:	c9 01       	movw	r24, r18
 334:	da 01       	movw	r26, r20
 336:	4c 01       	movw	r8, r24
 338:	5d 01       	movw	r10, r26
			n = (n*10)+H;
 33a:	c7 01       	movw	r24, r14
 33c:	b6 01       	movw	r22, r12
 33e:	2a e0       	ldi	r18, 0x0A	; 10
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	40 e0       	ldi	r20, 0x00	; 0
 344:	50 e0       	ldi	r21, 0x00	; 0
 346:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__mulsi3>
 34a:	6b 01       	movw	r12, r22
 34c:	7c 01       	movw	r14, r24
 34e:	c1 0e       	add	r12, r17
 350:	d1 1c       	adc	r13, r1
 352:	e1 1c       	adc	r14, r1
 354:	f1 1c       	adc	r15, r1
		flag = 0;
	}



	while(num!=0)
 356:	81 14       	cp	r8, r1
 358:	91 04       	cpc	r9, r1
 35a:	a1 04       	cpc	r10, r1
 35c:	b1 04       	cpc	r11, r1
 35e:	c1 f6       	brne	.-80     	; 0x310 <lcd_showvalue+0xc0>
 360:	19 c0       	rjmp	.+50     	; 0x394 <lcd_showvalue+0x144>
	}
	
	while(n!=0)
	{
	
			H = n%10;
 362:	c7 01       	movw	r24, r14
 364:	b6 01       	movw	r22, r12
 366:	2a e0       	ldi	r18, 0x0A	; 10
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	40 e0       	ldi	r20, 0x00	; 0
 36c:	50 e0       	ldi	r21, 0x00	; 0
 36e:	0e 94 85 05 	call	0xb0a	; 0xb0a <__udivmodsi4>
 372:	16 2f       	mov	r17, r22
			n = n/10;
 374:	c7 01       	movw	r24, r14
 376:	b6 01       	movw	r22, r12
 378:	2a e0       	ldi	r18, 0x0A	; 10
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	40 e0       	ldi	r20, 0x00	; 0
 37e:	50 e0       	ldi	r21, 0x00	; 0
 380:	0e 94 85 05 	call	0xb0a	; 0xb0a <__udivmodsi4>
 384:	c9 01       	movw	r24, r18
 386:	da 01       	movw	r26, r20
 388:	6c 01       	movw	r12, r24
 38a:	7d 01       	movw	r14, r26
			lcd_char(H+48);
 38c:	81 2f       	mov	r24, r17
 38e:	80 5d       	subi	r24, 0xD0	; 208
 390:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_char>
			num = num/10;
			n = (n*10)+H;

	}
	
	while(n!=0)
 394:	c1 14       	cp	r12, r1
 396:	d1 04       	cpc	r13, r1
 398:	e1 04       	cpc	r14, r1
 39a:	f1 04       	cpc	r15, r1
 39c:	11 f7       	brne	.-60     	; 0x362 <lcd_showvalue+0x112>
 39e:	04 c0       	rjmp	.+8      	; 0x3a8 <lcd_showvalue+0x158>
	}
	
	
	while(flag > 0)
	{
		lcd_char(48);
 3a0:	80 e3       	ldi	r24, 0x30	; 48
 3a2:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_char>
		flag--;
 3a6:	21 97       	sbiw	r28, 0x01	; 1
			lcd_char(H+48);

	}
	
	
	while(flag > 0)
 3a8:	20 97       	sbiw	r28, 0x00	; 0
 3aa:	d1 f7       	brne	.-12     	; 0x3a0 <lcd_showvalue+0x150>
	{
		lcd_char(48);
		flag--;
	}	

}
 3ac:	df 91       	pop	r29
 3ae:	cf 91       	pop	r28
 3b0:	1f 91       	pop	r17
 3b2:	ff 90       	pop	r15
 3b4:	ef 90       	pop	r14
 3b6:	df 90       	pop	r13
 3b8:	cf 90       	pop	r12
 3ba:	bf 90       	pop	r11
 3bc:	af 90       	pop	r10
 3be:	9f 90       	pop	r9
 3c0:	8f 90       	pop	r8
 3c2:	08 95       	ret

000003c4 <lcd_cmd>:
}

void lcd_cmd(unsigned char ch)
{
	int temp;
	CLEARBIT(PORTG,BIT(5));
 3c4:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 3c6:	70 98       	cbi	0x0e, 0	; 14
					/*PORTA = (ch & 0xF0);			// Send twice because ATMEGA is too fast 
  					PORTA = (ch & 0xF0); 			// for the LCD display !
  					PORTA = ch & 0xF0;
   					PORTA = ch & 0xF0;*/

	temp= ch & 0b11000000; // '10'000000
 3c8:	48 2f       	mov	r20, r24
 3ca:	50 e0       	ldi	r21, 0x00	; 0
	PORTE=temp;
 3cc:	9a 01       	movw	r18, r20
 3ce:	20 7c       	andi	r18, 0xC0	; 192
 3d0:	30 70       	andi	r19, 0x00	; 0
 3d2:	2e b9       	out	0x0e, r18	; 14
	temp=(ch >> 3) & 0b00000110; // 00000'11'0
	PORTE= PORTE | temp;
 3d4:	9e b1       	in	r25, 0x0e	; 14
 3d6:	86 95       	lsr	r24
 3d8:	86 95       	lsr	r24
 3da:	86 95       	lsr	r24
 3dc:	86 70       	andi	r24, 0x06	; 6
 3de:	98 2b       	or	r25, r24
 3e0:	9e b9       	out	0x0e, r25	; 14
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 3e2:	68 e1       	ldi	r22, 0x18	; 24
 3e4:	86 2f       	mov	r24, r22
 3e6:	8a 95       	dec	r24
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <lcd_cmd+0x22>
}


void toggleE(void)
{
SETBIT(PORTE,BIT(0));
 3ea:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3ec:	23 e3       	ldi	r18, 0x33	; 51
 3ee:	37 e0       	ldi	r19, 0x07	; 7
 3f0:	c9 01       	movw	r24, r18
 3f2:	01 97       	sbiw	r24, 0x01	; 1
 3f4:	f1 f7       	brne	.-4      	; 0x3f2 <lcd_cmd+0x2e>
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
 3f6:	70 98       	cbi	0x0e, 0	; 14
	temp=(ch >> 3) & 0b00000110; // 00000'11'0
	PORTE= PORTE | temp;
	_delay_us(5);
	toggleE();
   // Extract lower nibble
	SETBIT(PORTG,BIT(5));
 3f8:	a5 9a       	sbi	0x14, 5	; 20
   	CLEARBIT(PORTG,BIT(5));
 3fa:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 3fc:	70 98       	cbi	0x0e, 0	; 14
   					/*PORTA = ((ch << 4) & 0xF0); 	// Send twice because ATMEGA is too fast 
   					PORTA = ((ch << 4) & 0xF0);	// for the LCD display !
   					PORTA = (ch << 4) & 0xF0;
   					PORTA = (ch << 4) & 0xF0;*/
	temp=(ch << 4) & 0b11000000; // '10'000000
	PORTE=temp;
 3fe:	ca 01       	movw	r24, r20
 400:	f4 e0       	ldi	r31, 0x04	; 4
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	fa 95       	dec	r31
 408:	e1 f7       	brne	.-8      	; 0x402 <lcd_cmd+0x3e>
 40a:	80 7c       	andi	r24, 0xC0	; 192
 40c:	90 70       	andi	r25, 0x00	; 0
 40e:	8e b9       	out	0x0e, r24	; 14
	temp=(ch << 1) & 0b00000110; // 00000'01'0 
	PORTE= PORTE | temp;
 410:	8e b1       	in	r24, 0x0e	; 14
 412:	44 0f       	add	r20, r20
 414:	55 1f       	adc	r21, r21
 416:	46 70       	andi	r20, 0x06	; 6
 418:	50 70       	andi	r21, 0x00	; 0
 41a:	84 2b       	or	r24, r20
 41c:	8e b9       	out	0x0e, r24	; 14
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 41e:	6a 95       	dec	r22
 420:	f1 f7       	brne	.-4      	; 0x41e <lcd_cmd+0x5a>
}


void toggleE(void)
{
SETBIT(PORTE,BIT(0));
 422:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 424:	c9 01       	movw	r24, r18
 426:	01 97       	sbiw	r24, 0x01	; 1
 428:	f1 f7       	brne	.-4      	; 0x426 <lcd_cmd+0x62>
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
 42a:	70 98       	cbi	0x0e, 0	; 14
	PORTE=temp;
	temp=(ch << 1) & 0b00000110; // 00000'01'0 
	PORTE= PORTE | temp;
	_delay_us(5);
	toggleE();
   	PORTE = 0x00;
 42c:	1e b8       	out	0x0e, r1	; 14
   	WaitMs(10);
 42e:	8a e0       	ldi	r24, 0x0A	; 10
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 a9 00 	call	0x152	; 0x152 <WaitMs>


}
 436:	08 95       	ret

00000438 <lcd_gotoxy2>:
	lcd_cmd(LINE1+pos);
}

void lcd_gotoxy2(unsigned char pos)
{
	lcd_cmd(LINE2+pos);
 438:	80 54       	subi	r24, 0x40	; 64
 43a:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_cmd>
}
 43e:	08 95       	ret

00000440 <lcd_gotoxy1>:

}

void lcd_gotoxy1(unsigned char pos)
{
	lcd_cmd(LINE1+pos);
 440:	80 58       	subi	r24, 0x80	; 128
 442:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_cmd>
}
 446:	08 95       	ret

00000448 <lcd_string>:
						PORTA = (data << 4);	*/					
	toggleE();
}

void lcd_string(unsigned char str[32])
{
 448:	cf 92       	push	r12
 44a:	df 92       	push	r13
 44c:	ef 92       	push	r14
 44e:	ff 92       	push	r15
 450:	1f 93       	push	r17
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
 456:	7c 01       	movw	r14, r24
	int poop,bitch;
	unsigned char k=0;
	PORTA=0x01;
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	82 b9       	out	0x02, r24	; 2
	SETBIT(PORTG,BIT(5));
 45c:	a5 9a       	sbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 45e:	70 98       	cbi	0x0e, 0	; 14
 460:	10 e0       	ldi	r17, 0x00	; 0
 462:	63 e3       	ldi	r22, 0x33	; 51
 464:	c6 2e       	mov	r12, r22
 466:	67 e0       	ldi	r22, 0x07	; 7
 468:	d6 2e       	mov	r13, r22
 46a:	3a c0       	rjmp	.+116    	; 0x4e0 <lcd_string+0x98>
	while(str[k]!='\0')	//Till null character is encountered
		{
			if(k==16)
 46c:	10 31       	cpi	r17, 0x10	; 16
 46e:	19 f4       	brne	.+6      	; 0x476 <lcd_string+0x2e>
				lcd_cmd(LINE2);
 470:	80 ec       	ldi	r24, 0xC0	; 192
 472:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_cmd>
			SETBIT(PORTG,BIT(5));
 476:	a5 9a       	sbi	0x14, 5	; 20
			CLEARBIT(PORTE,BIT(0));
 478:	70 98       	cbi	0x0e, 0	; 14
			bitch=str[k]; //10111001
 47a:	28 81       	ld	r18, Y
 47c:	30 e0       	ldi	r19, 0x00	; 0
			poop= bitch & 0b11000000; // '10'000000
			PORTE=poop;
 47e:	c9 01       	movw	r24, r18
 480:	80 7c       	andi	r24, 0xC0	; 192
 482:	90 70       	andi	r25, 0x00	; 0
 484:	8e b9       	out	0x0e, r24	; 14
			poop=(bitch>>3) & 0b00000110; // 00000'11'0
			PORTE= PORTE | poop;
 486:	4e b1       	in	r20, 0x0e	; 14
 488:	c9 01       	movw	r24, r18
 48a:	53 e0       	ldi	r21, 0x03	; 3
 48c:	95 95       	asr	r25
 48e:	87 95       	ror	r24
 490:	5a 95       	dec	r21
 492:	e1 f7       	brne	.-8      	; 0x48c <lcd_string+0x44>
 494:	86 70       	andi	r24, 0x06	; 6
 496:	90 70       	andi	r25, 0x00	; 0
 498:	48 2b       	or	r20, r24
 49a:	4e b9       	out	0x0e, r20	; 14
}


void toggleE(void)
{
SETBIT(PORTE,BIT(0));
 49c:	70 9a       	sbi	0x0e, 0	; 14
 49e:	c6 01       	movw	r24, r12
 4a0:	01 97       	sbiw	r24, 0x01	; 1
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <lcd_string+0x58>
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
 4a4:	70 98       	cbi	0x0e, 0	; 14
			PORTE=poop;
			poop=(bitch>>3) & 0b00000110; // 00000'11'0
			PORTE= PORTE | poop;
			//PORTA=((str[k])&0xF0)|0x01;
			toggleE();
			CLEARBIT(PORTG,BIT(5))
 4a6:	a5 98       	cbi	0x14, 5	; 20
			SETBIT(PORTG,BIT(5));
 4a8:	a5 9a       	sbi	0x14, 5	; 20
			CLEARBIT(PORTE,BIT(0));
 4aa:	70 98       	cbi	0x0e, 0	; 14
			bitch=str[k];
			poop=(bitch << 4) & 0b11000000; // '10'000000
			PORTE=poop;
 4ac:	c9 01       	movw	r24, r18
 4ae:	b4 e0       	ldi	r27, 0x04	; 4
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	ba 95       	dec	r27
 4b6:	e1 f7       	brne	.-8      	; 0x4b0 <lcd_string+0x68>
 4b8:	80 7c       	andi	r24, 0xC0	; 192
 4ba:	90 70       	andi	r25, 0x00	; 0
 4bc:	8e b9       	out	0x0e, r24	; 14
			poop=(bitch << 1) & 0b00000110; // 00000'01'0 
			PORTE= PORTE | poop;
 4be:	8e b1       	in	r24, 0x0e	; 14
 4c0:	22 0f       	add	r18, r18
 4c2:	33 1f       	adc	r19, r19
 4c4:	26 70       	andi	r18, 0x06	; 6
 4c6:	30 70       	andi	r19, 0x00	; 0
 4c8:	82 2b       	or	r24, r18
 4ca:	8e b9       	out	0x0e, r24	; 14
}


void toggleE(void)
{
SETBIT(PORTE,BIT(0));
 4cc:	70 9a       	sbi	0x0e, 0	; 14
 4ce:	c6 01       	movw	r24, r12
 4d0:	01 97       	sbiw	r24, 0x01	; 1
 4d2:	f1 f7       	brne	.-4      	; 0x4d0 <lcd_string+0x88>
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
 4d4:	70 98       	cbi	0x0e, 0	; 14
			PORTE=poop;
			poop=(bitch << 1) & 0b00000110; // 00000'01'0 
			PORTE= PORTE | poop;
			//PORTA=((str[k]&(0x0F))*16)|0x01;
			toggleE();
			k++;
 4d6:	1f 5f       	subi	r17, 0xFF	; 255
			WaitMs(1);
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	0e 94 a9 00 	call	0x152	; 0x152 <WaitMs>
	int poop,bitch;
	unsigned char k=0;
	PORTA=0x01;
	SETBIT(PORTG,BIT(5));
	CLEARBIT(PORTE,BIT(0));
	while(str[k]!='\0')	//Till null character is encountered
 4e0:	e7 01       	movw	r28, r14
 4e2:	c1 0f       	add	r28, r17
 4e4:	d1 1d       	adc	r29, r1
 4e6:	88 81       	ld	r24, Y
 4e8:	88 23       	and	r24, r24
 4ea:	09 f0       	breq	.+2      	; 0x4ee <lcd_string+0xa6>
 4ec:	bf cf       	rjmp	.-130    	; 0x46c <lcd_string+0x24>
			//PORTA=((str[k]&(0x0F))*16)|0x01;
			toggleE();
			k++;
			WaitMs(1);
		}
}
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	1f 91       	pop	r17
 4f4:	ff 90       	pop	r15
 4f6:	ef 90       	pop	r14
 4f8:	df 90       	pop	r13
 4fa:	cf 90       	pop	r12
 4fc:	08 95       	ret

000004fe <lcd_init>:
void lcd_exit(void);
void WaitMs(unsigned int ms);

void lcd_init(void)	//init the lcd
{	
	DDRE=0xFF;
 4fe:	8f ef       	ldi	r24, 0xFF	; 255
 500:	8d b9       	out	0x0d, r24	; 13
	//DDRC=0x80;
	DDRG=0xFF;
 502:	83 bb       	out	0x13, r24	; 19
	WaitMs(15);
 504:	8f e0       	ldi	r24, 0x0F	; 15
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	0e 94 a9 00 	call	0x152	; 0x152 <WaitMs>
	CLEARBIT(PORTG,BIT(5));
 50c:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 50e:	70 98       	cbi	0x0e, 0	; 14
	PORTE=0x00;
 510:	1e b8       	out	0x0e, r1	; 14
	lcd_cmd(0x20);		//data is 8-bit length
 512:	80 e2       	ldi	r24, 0x20	; 32
 514:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_cmd>
	WaitMs(1);
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	0e 94 a9 00 	call	0x152	; 0x152 <WaitMs>
	lcd_cmd(0x20);		//data is 8-bit length
 520:	80 e2       	ldi	r24, 0x20	; 32
 522:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_cmd>
	WaitMs(1);
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	0e 94 a9 00 	call	0x152	; 0x152 <WaitMs>
	lcd_cmd(0x20);		//data is 8-bit length
 52e:	80 e2       	ldi	r24, 0x20	; 32
 530:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_cmd>
	WaitMs(1);
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	0e 94 a9 00 	call	0x152	; 0x152 <WaitMs>
	lcd_cmd(0x28);		//sets character font
 53c:	88 e2       	ldi	r24, 0x28	; 40
 53e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_cmd>
	WaitMs(1);
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	0e 94 a9 00 	call	0x152	; 0x152 <WaitMs>
	lcd_cmd(0x0E);		//display off(d,c,b=0) 08
 54a:	8e e0       	ldi	r24, 0x0E	; 14
 54c:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_cmd>
	WaitMs(1);
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	0e 94 a9 00 	call	0x152	; 0x152 <WaitMs>
	lcd_cmd(0x01);		//clears the data
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_cmd>
	WaitMs(1);
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	0e 94 a9 00 	call	0x152	; 0x152 <WaitMs>
	//lcd_cmd(0x02);		//home
	//WaitMs(1);
	lcd_cmd(0x6);		//entry mode--increment
 566:	86 e0       	ldi	r24, 0x06	; 6
 568:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_cmd>
	WaitMs(1);
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	0e 94 a9 00 	call	0x152	; 0x152 <WaitMs>
	//lcd_cmd(0x0C);		//display--on,cursor--on.blinking--on
	//WaitMs(1);
}
 574:	08 95       	ret

00000576 <port_init>:
uint16_t enc1, enc2;
void port_init()
{
//	DDRA |= (1 << PA1) | (1 << PA3) | (1 << PA4) ;
//	DDRA &= ~ (1 << PA2);
	DDRH |= (1 << PH4) | (1 << PH5);		//OC3B	//OC3A	DIRECTION BITS
 576:	e1 e0       	ldi	r30, 0x01	; 1
 578:	f1 e0       	ldi	r31, 0x01	; 1
 57a:	80 81       	ld	r24, Z
 57c:	80 63       	ori	r24, 0x30	; 48
 57e:	80 83       	st	Z, r24
	DDRL |= (1<<PL0) | (1<<PL1);	//OC3A, 3B O/P DECLARATION
 580:	ea e0       	ldi	r30, 0x0A	; 10
 582:	f1 e0       	ldi	r31, 0x01	; 1
 584:	80 81       	ld	r24, Z
 586:	83 60       	ori	r24, 0x03	; 3
 588:	80 83       	st	Z, r24
}
 58a:	08 95       	ret

0000058c <pwm_init>:

void pwm_init()
{
	TCCR4A = 0xA8;
 58c:	88 ea       	ldi	r24, 0xA8	; 168
 58e:	80 93 a0 00 	sts	0x00A0, r24
	TCCR4B = 0x11;
 592:	81 e1       	ldi	r24, 0x11	; 17
 594:	80 93 a1 00 	sts	0x00A1, r24
}
 598:	08 95       	ret

0000059a <timer_ini>:

void timer_ini()
{
	TCCR1B = 0x07;
 59a:	87 e0       	ldi	r24, 0x07	; 7
 59c:	80 93 81 00 	sts	0x0081, r24
	DDRD |= (1<<6);
 5a0:	56 9a       	sbi	0x0a, 6	; 10
}
 5a2:	08 95       	ret

000005a4 <uart_ini>:

void uart_ini()
{
	UBRR2H = (unsigned char) (UBRR_VALUE >> 8);	
 5a4:	20 91 18 02 	lds	r18, 0x0218
 5a8:	30 91 19 02 	lds	r19, 0x0219
 5ac:	83 2f       	mov	r24, r19
 5ae:	99 27       	eor	r25, r25
 5b0:	87 fd       	sbrc	r24, 7
 5b2:	9a 95       	dec	r25
 5b4:	80 93 d5 00 	sts	0x00D5, r24
	UBRR2L = (unsigned char) UBRR_VALUE;
 5b8:	20 93 d4 00 	sts	0x00D4, r18
	UCSR2B |= (1 << RXEN2) | (1 << TXEN2);
 5bc:	e1 ed       	ldi	r30, 0xD1	; 209
 5be:	f0 e0       	ldi	r31, 0x00	; 0
 5c0:	80 81       	ld	r24, Z
 5c2:	88 61       	ori	r24, 0x18	; 24
 5c4:	80 83       	st	Z, r24
	UCSR2C |= (1 << USBS2) | (1 << UCSZ12) | (1 << UCSZ02);
 5c6:	e2 ed       	ldi	r30, 0xD2	; 210
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	80 81       	ld	r24, Z
 5cc:	8c 60       	ori	r24, 0x0C	; 12
 5ce:	80 83       	st	Z, r24

}
 5d0:	08 95       	ret

000005d2 <trace_circular_curve>:
void trace_circular_curve()
{
	//outer s == 490	57.10
	//inner s == 429	50
	//pwm ratio	1.1421
	while(enc1 <= 490 && enc2<=429)
 5d2:	20 91 22 02 	lds	r18, 0x0222
 5d6:	30 91 23 02 	lds	r19, 0x0223
 5da:	80 91 24 02 	lds	r24, 0x0224
 5de:	90 91 25 02 	lds	r25, 0x0225
 5e2:	8b 5e       	subi	r24, 0xEB	; 235
 5e4:	91 40       	sbci	r25, 0x01	; 1
 5e6:	90 f4       	brcc	.+36     	; 0x60c <trace_circular_curve+0x3a>
 5e8:	09 c0       	rjmp	.+18     	; 0x5fc <trace_circular_curve+0x2a>
	{
		OCR4B = 420;
 5ea:	50 93 ab 00 	sts	0x00AB, r21
 5ee:	40 93 aa 00 	sts	0x00AA, r20
		OCR4C = 368;
 5f2:	90 93 ad 00 	sts	0x00AD, r25
 5f6:	80 93 ac 00 	sts	0x00AC, r24
 5fa:	04 c0       	rjmp	.+8      	; 0x604 <trace_circular_curve+0x32>
	//outer s == 490	57.10
	//inner s == 429	50
	//pwm ratio	1.1421
	while(enc1 <= 490 && enc2<=429)
	{
		OCR4B = 420;
 5fc:	44 ea       	ldi	r20, 0xA4	; 164
 5fe:	51 e0       	ldi	r21, 0x01	; 1
		OCR4C = 368;
 600:	80 e7       	ldi	r24, 0x70	; 112
 602:	91 e0       	ldi	r25, 0x01	; 1
void trace_circular_curve()
{
	//outer s == 490	57.10
	//inner s == 429	50
	//pwm ratio	1.1421
	while(enc1 <= 490 && enc2<=429)
 604:	61 e0       	ldi	r22, 0x01	; 1
 606:	2e 3a       	cpi	r18, 0xAE	; 174
 608:	36 07       	cpc	r19, r22
 60a:	78 f3       	brcs	.-34     	; 0x5ea <trace_circular_curve+0x18>
 60c:	08 95       	ret

0000060e <main>:
		OCR4C = 368;
	}
}

int main()
{
 60e:	0f 93       	push	r16
 610:	1f 93       	push	r17
 612:	cf 93       	push	r28
 614:	df 93       	push	r29
uint16_t enc1, enc2;
void port_init()
{
//	DDRA |= (1 << PA1) | (1 << PA3) | (1 << PA4) ;
//	DDRA &= ~ (1 << PA2);
	DDRH |= (1 << PH4) | (1 << PH5);		//OC3B	//OC3A	DIRECTION BITS
 616:	80 91 01 01 	lds	r24, 0x0101
 61a:	80 63       	ori	r24, 0x30	; 48
 61c:	80 93 01 01 	sts	0x0101, r24
	DDRL |= (1<<PL0) | (1<<PL1);	//OC3A, 3B O/P DECLARATION
 620:	80 91 0a 01 	lds	r24, 0x010A
 624:	83 60       	ori	r24, 0x03	; 3
 626:	80 93 0a 01 	sts	0x010A, r24
}

void pwm_init()
{
	TCCR4A = 0xA8;
 62a:	88 ea       	ldi	r24, 0xA8	; 168
 62c:	80 93 a0 00 	sts	0x00A0, r24
	TCCR4B = 0x11;
 630:	81 e1       	ldi	r24, 0x11	; 17
 632:	80 93 a1 00 	sts	0x00A1, r24
}

void timer_ini()
{
	TCCR1B = 0x07;
 636:	87 e0       	ldi	r24, 0x07	; 7
 638:	80 93 81 00 	sts	0x0081, r24
	DDRD |= (1<<6);
 63c:	56 9a       	sbi	0x0a, 6	; 10
{
	
	port_init();
	pwm_init();
	timer_ini();
	lcd_init();
 63e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <lcd_init>
	//for straight line this should be zero if I am guaranteed that they are moving with the same speed
	//sei();
	double kp = 0, ki = 0, kd = 0;
	int8_t acc_err = 0, prev_err = 0, inst_err;
	int bal;
	ICR4 = 737;
 642:	81 ee       	ldi	r24, 0xE1	; 225
 644:	92 e0       	ldi	r25, 0x02	; 2
 646:	90 93 a7 00 	sts	0x00A7, r25
 64a:	80 93 a6 00 	sts	0x00A6, r24
	/*PORTH |= (1 << PH4) | (1 << PH5);		//OC3B	//OC3A	DIRECTION BITS
	PORTL |= (1<<PL0) | (1<<PL1);
	*/
		lcd_cmd(0x01);
		PORTL |= (1<<PL0) | (1<<PL1);
		OCR4B = 500;
 64e:	04 ef       	ldi	r16, 0xF4	; 244
 650:	11 e0       	ldi	r17, 0x01	; 1
 652:	c0 e7       	ldi	r28, 0x70	; 112
 654:	d1 e0       	ldi	r29, 0x01	; 1
	
	while(1) {
	/*PORTH |= (1 << PH4) | (1 << PH5);		//OC3B	//OC3A	DIRECTION BITS
	PORTL |= (1<<PL0) | (1<<PL1);
	*/
		lcd_cmd(0x01);
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_cmd>
		PORTL |= (1<<PL0) | (1<<PL1);
 65c:	80 91 0b 01 	lds	r24, 0x010B
 660:	83 60       	ori	r24, 0x03	; 3
 662:	80 93 0b 01 	sts	0x010B, r24
		OCR4B = 500;
 666:	10 93 ab 00 	sts	0x00AB, r17
 66a:	00 93 aa 00 	sts	0x00AA, r16
		OCR4C = 500;
 66e:	10 93 ad 00 	sts	0x00AD, r17
 672:	00 93 ac 00 	sts	0x00AC, r16
		lcd_string("FWRD");
 676:	80 e0       	ldi	r24, 0x00	; 0
 678:	92 e0       	ldi	r25, 0x02	; 2
 67a:	0e 94 24 02 	call	0x448	; 0x448 <lcd_string>
 67e:	80 e2       	ldi	r24, 0x20	; 32
 680:	9e e4       	ldi	r25, 0x4E	; 78
 682:	fe 01       	movw	r30, r28
 684:	31 97       	sbiw	r30, 0x01	; 1
 686:	f1 f7       	brne	.-4      	; 0x684 <main+0x76>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 688:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 68a:	d9 f7       	brne	.-10     	; 0x682 <main+0x74>
		_delay_ms(2000);
		
		lcd_cmd(0x01);
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_cmd>
		PORTL &= ~(1<<PL0) ;
 692:	80 91 0b 01 	lds	r24, 0x010B
 696:	8e 7f       	andi	r24, 0xFE	; 254
 698:	80 93 0b 01 	sts	0x010B, r24
		PORTL &= ~(1<<PL1);
 69c:	80 91 0b 01 	lds	r24, 0x010B
 6a0:	8d 7f       	andi	r24, 0xFD	; 253
 6a2:	80 93 0b 01 	sts	0x010B, r24
		OCR4B = 0;
 6a6:	10 92 ab 00 	sts	0x00AB, r1
 6aa:	10 92 aa 00 	sts	0x00AA, r1
		OCR4C = 0;
 6ae:	10 92 ad 00 	sts	0x00AD, r1
 6b2:	10 92 ac 00 	sts	0x00AC, r1
		lcd_string("STOP");
 6b6:	85 e0       	ldi	r24, 0x05	; 5
 6b8:	92 e0       	ldi	r25, 0x02	; 2
 6ba:	0e 94 24 02 	call	0x448	; 0x448 <lcd_string>
 6be:	80 e2       	ldi	r24, 0x20	; 32
 6c0:	9e e4       	ldi	r25, 0x4E	; 78
 6c2:	fe 01       	movw	r30, r28
 6c4:	31 97       	sbiw	r30, 0x01	; 1
 6c6:	f1 f7       	brne	.-4      	; 0x6c4 <main+0xb6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6c8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6ca:	d9 f7       	brne	.-10     	; 0x6c2 <main+0xb4>
		_delay_ms(2000);
		
		lcd_cmd(0x01);
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_cmd>
		PORTL &= ~(1<<PL0);
 6d2:	80 91 0b 01 	lds	r24, 0x010B
 6d6:	8e 7f       	andi	r24, 0xFE	; 254
 6d8:	80 93 0b 01 	sts	0x010B, r24
		PORTL &= ~(1<<PL1);
 6dc:	80 91 0b 01 	lds	r24, 0x010B
 6e0:	8d 7f       	andi	r24, 0xFD	; 253
 6e2:	80 93 0b 01 	sts	0x010B, r24
		OCR4B = 500;
 6e6:	10 93 ab 00 	sts	0x00AB, r17
 6ea:	00 93 aa 00 	sts	0x00AA, r16
		OCR4C = 500;
 6ee:	10 93 ad 00 	sts	0x00AD, r17
 6f2:	00 93 ac 00 	sts	0x00AC, r16
		lcd_string("REV");
 6f6:	8a e0       	ldi	r24, 0x0A	; 10
 6f8:	92 e0       	ldi	r25, 0x02	; 2
 6fa:	0e 94 24 02 	call	0x448	; 0x448 <lcd_string>
 6fe:	80 e2       	ldi	r24, 0x20	; 32
 700:	9e e4       	ldi	r25, 0x4E	; 78
 702:	fe 01       	movw	r30, r28
 704:	31 97       	sbiw	r30, 0x01	; 1
 706:	f1 f7       	brne	.-4      	; 0x704 <main+0xf6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 708:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 70a:	d9 f7       	brne	.-10     	; 0x702 <main+0xf4>
		_delay_ms(2000);
		
		lcd_cmd(0x01);
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_cmd>
		PORTL |= (1<<PL1);
 712:	80 91 0b 01 	lds	r24, 0x010B
 716:	82 60       	ori	r24, 0x02	; 2
 718:	80 93 0b 01 	sts	0x010B, r24
		PORTL |= (1<<PL0);
 71c:	80 91 0b 01 	lds	r24, 0x010B
 720:	81 60       	ori	r24, 0x01	; 1
 722:	80 93 0b 01 	sts	0x010B, r24
		OCR4B = 0;
 726:	10 92 ab 00 	sts	0x00AB, r1
 72a:	10 92 aa 00 	sts	0x00AA, r1
		OCR4C = 0;
 72e:	10 92 ad 00 	sts	0x00AD, r1
 732:	10 92 ac 00 	sts	0x00AC, r1
		lcd_string("STOP");
 736:	85 e0       	ldi	r24, 0x05	; 5
 738:	92 e0       	ldi	r25, 0x02	; 2
 73a:	0e 94 24 02 	call	0x448	; 0x448 <lcd_string>
 73e:	80 e2       	ldi	r24, 0x20	; 32
 740:	9e e4       	ldi	r25, 0x4E	; 78
 742:	fe 01       	movw	r30, r28
 744:	31 97       	sbiw	r30, 0x01	; 1
 746:	f1 f7       	brne	.-4      	; 0x744 <main+0x136>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 748:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 74a:	d9 f7       	brne	.-10     	; 0x742 <main+0x134>
 74c:	84 cf       	rjmp	.-248    	; 0x656 <main+0x48>

0000074e <lcd_showvaluef>:

}


void lcd_showvaluef(float num)
{
 74e:	ef 92       	push	r14
 750:	ff 92       	push	r15
 752:	0f 93       	push	r16
 754:	1f 93       	push	r17
 756:	df 93       	push	r29
 758:	cf 93       	push	r28
 75a:	00 d0       	rcall	.+0      	; 0x75c <lcd_showvaluef+0xe>
 75c:	00 d0       	rcall	.+0      	; 0x75e <lcd_showvaluef+0x10>
 75e:	cd b7       	in	r28, 0x3d	; 61
 760:	de b7       	in	r29, 0x3e	; 62
 762:	7b 01       	movw	r14, r22
 764:	8c 01       	movw	r16, r24
	unsigned long int l;
	double fraction,integer;

	l = (unsigned long int)num;

	lcd_showvalue(l);
 766:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__fixunssfsi>
 76a:	0e 94 28 01 	call	0x250	; 0x250 <lcd_showvalue>

	fraction = modf((double)num,&integer);
 76e:	c8 01       	movw	r24, r16
 770:	b7 01       	movw	r22, r14
 772:	ae 01       	movw	r20, r28
 774:	4f 5f       	subi	r20, 0xFF	; 255
 776:	5f 4f       	sbci	r21, 0xFF	; 255
 778:	0e 94 2f 04 	call	0x85e	; 0x85e <modf>
 77c:	7b 01       	movw	r14, r22
 77e:	8c 01       	movw	r16, r24

	l = (unsigned long int)(fraction * 100000);

	lcd_char('.');
 780:	8e e2       	ldi	r24, 0x2E	; 46
 782:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_char>

	lcd_showvalue(l);
 786:	c8 01       	movw	r24, r16
 788:	b7 01       	movw	r22, r14
 78a:	20 e0       	ldi	r18, 0x00	; 0
 78c:	30 e5       	ldi	r19, 0x50	; 80
 78e:	43 ec       	ldi	r20, 0xC3	; 195
 790:	57 e4       	ldi	r21, 0x47	; 71
 792:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__mulsf3>
 796:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__fixunssfsi>
 79a:	0e 94 28 01 	call	0x250	; 0x250 <lcd_showvalue>

}
 79e:	0f 90       	pop	r0
 7a0:	0f 90       	pop	r0
 7a2:	0f 90       	pop	r0
 7a4:	0f 90       	pop	r0
 7a6:	cf 91       	pop	r28
 7a8:	df 91       	pop	r29
 7aa:	1f 91       	pop	r17
 7ac:	0f 91       	pop	r16
 7ae:	ff 90       	pop	r15
 7b0:	ef 90       	pop	r14
 7b2:	08 95       	ret

000007b4 <__fixunssfsi>:
 7b4:	33 d0       	rcall	.+102    	; 0x81c <__fp_splitA>
 7b6:	88 f0       	brcs	.+34     	; 0x7da <__fixunssfsi+0x26>
 7b8:	9f 57       	subi	r25, 0x7F	; 127
 7ba:	90 f0       	brcs	.+36     	; 0x7e0 <__fixunssfsi+0x2c>
 7bc:	b9 2f       	mov	r27, r25
 7be:	99 27       	eor	r25, r25
 7c0:	b7 51       	subi	r27, 0x17	; 23
 7c2:	a0 f0       	brcs	.+40     	; 0x7ec <__fixunssfsi+0x38>
 7c4:	d1 f0       	breq	.+52     	; 0x7fa <__fixunssfsi+0x46>
 7c6:	66 0f       	add	r22, r22
 7c8:	77 1f       	adc	r23, r23
 7ca:	88 1f       	adc	r24, r24
 7cc:	99 1f       	adc	r25, r25
 7ce:	1a f0       	brmi	.+6      	; 0x7d6 <__fixunssfsi+0x22>
 7d0:	ba 95       	dec	r27
 7d2:	c9 f7       	brne	.-14     	; 0x7c6 <__fixunssfsi+0x12>
 7d4:	12 c0       	rjmp	.+36     	; 0x7fa <__fixunssfsi+0x46>
 7d6:	b1 30       	cpi	r27, 0x01	; 1
 7d8:	81 f0       	breq	.+32     	; 0x7fa <__fixunssfsi+0x46>
 7da:	3a d0       	rcall	.+116    	; 0x850 <__fp_zero>
 7dc:	b1 e0       	ldi	r27, 0x01	; 1
 7de:	08 95       	ret
 7e0:	37 c0       	rjmp	.+110    	; 0x850 <__fp_zero>
 7e2:	67 2f       	mov	r22, r23
 7e4:	78 2f       	mov	r23, r24
 7e6:	88 27       	eor	r24, r24
 7e8:	b8 5f       	subi	r27, 0xF8	; 248
 7ea:	39 f0       	breq	.+14     	; 0x7fa <__fixunssfsi+0x46>
 7ec:	b9 3f       	cpi	r27, 0xF9	; 249
 7ee:	cc f3       	brlt	.-14     	; 0x7e2 <__fixunssfsi+0x2e>
 7f0:	86 95       	lsr	r24
 7f2:	77 95       	ror	r23
 7f4:	67 95       	ror	r22
 7f6:	b3 95       	inc	r27
 7f8:	d9 f7       	brne	.-10     	; 0x7f0 <__fixunssfsi+0x3c>
 7fa:	3e f4       	brtc	.+14     	; 0x80a <__fixunssfsi+0x56>
 7fc:	90 95       	com	r25
 7fe:	80 95       	com	r24
 800:	70 95       	com	r23
 802:	61 95       	neg	r22
 804:	7f 4f       	sbci	r23, 0xFF	; 255
 806:	8f 4f       	sbci	r24, 0xFF	; 255
 808:	9f 4f       	sbci	r25, 0xFF	; 255
 80a:	08 95       	ret

0000080c <__fp_split3>:
 80c:	57 fd       	sbrc	r21, 7
 80e:	90 58       	subi	r25, 0x80	; 128
 810:	44 0f       	add	r20, r20
 812:	55 1f       	adc	r21, r21
 814:	59 f0       	breq	.+22     	; 0x82c <__fp_splitA+0x10>
 816:	5f 3f       	cpi	r21, 0xFF	; 255
 818:	71 f0       	breq	.+28     	; 0x836 <__fp_splitA+0x1a>
 81a:	47 95       	ror	r20

0000081c <__fp_splitA>:
 81c:	88 0f       	add	r24, r24
 81e:	97 fb       	bst	r25, 7
 820:	99 1f       	adc	r25, r25
 822:	61 f0       	breq	.+24     	; 0x83c <__fp_splitA+0x20>
 824:	9f 3f       	cpi	r25, 0xFF	; 255
 826:	79 f0       	breq	.+30     	; 0x846 <__fp_splitA+0x2a>
 828:	87 95       	ror	r24
 82a:	08 95       	ret
 82c:	12 16       	cp	r1, r18
 82e:	13 06       	cpc	r1, r19
 830:	14 06       	cpc	r1, r20
 832:	55 1f       	adc	r21, r21
 834:	f2 cf       	rjmp	.-28     	; 0x81a <__fp_split3+0xe>
 836:	46 95       	lsr	r20
 838:	f1 df       	rcall	.-30     	; 0x81c <__fp_splitA>
 83a:	08 c0       	rjmp	.+16     	; 0x84c <__fp_splitA+0x30>
 83c:	16 16       	cp	r1, r22
 83e:	17 06       	cpc	r1, r23
 840:	18 06       	cpc	r1, r24
 842:	99 1f       	adc	r25, r25
 844:	f1 cf       	rjmp	.-30     	; 0x828 <__fp_splitA+0xc>
 846:	86 95       	lsr	r24
 848:	71 05       	cpc	r23, r1
 84a:	61 05       	cpc	r22, r1
 84c:	08 94       	sec
 84e:	08 95       	ret

00000850 <__fp_zero>:
 850:	e8 94       	clt

00000852 <__fp_szero>:
 852:	bb 27       	eor	r27, r27
 854:	66 27       	eor	r22, r22
 856:	77 27       	eor	r23, r23
 858:	cb 01       	movw	r24, r22
 85a:	97 f9       	bld	r25, 7
 85c:	08 95       	ret

0000085e <modf>:
 85e:	fa 01       	movw	r30, r20
 860:	dc 01       	movw	r26, r24
 862:	aa 0f       	add	r26, r26
 864:	bb 1f       	adc	r27, r27
 866:	9b 01       	movw	r18, r22
 868:	ac 01       	movw	r20, r24
 86a:	bf 57       	subi	r27, 0x7F	; 127
 86c:	28 f4       	brcc	.+10     	; 0x878 <modf+0x1a>
 86e:	22 27       	eor	r18, r18
 870:	33 27       	eor	r19, r19
 872:	44 27       	eor	r20, r20
 874:	50 78       	andi	r21, 0x80	; 128
 876:	1f c0       	rjmp	.+62     	; 0x8b6 <modf+0x58>
 878:	b7 51       	subi	r27, 0x17	; 23
 87a:	88 f4       	brcc	.+34     	; 0x89e <modf+0x40>
 87c:	ab 2f       	mov	r26, r27
 87e:	00 24       	eor	r0, r0
 880:	46 95       	lsr	r20
 882:	37 95       	ror	r19
 884:	27 95       	ror	r18
 886:	01 1c       	adc	r0, r1
 888:	a3 95       	inc	r26
 88a:	d2 f3       	brmi	.-12     	; 0x880 <modf+0x22>
 88c:	00 20       	and	r0, r0
 88e:	69 f0       	breq	.+26     	; 0x8aa <modf+0x4c>
 890:	22 0f       	add	r18, r18
 892:	33 1f       	adc	r19, r19
 894:	44 1f       	adc	r20, r20
 896:	b3 95       	inc	r27
 898:	da f3       	brmi	.-10     	; 0x890 <modf+0x32>
 89a:	0d d0       	rcall	.+26     	; 0x8b6 <modf+0x58>
 89c:	76 c0       	rjmp	.+236    	; 0x98a <__subsf3>
 89e:	61 30       	cpi	r22, 0x01	; 1
 8a0:	71 05       	cpc	r23, r1
 8a2:	a0 e8       	ldi	r26, 0x80	; 128
 8a4:	8a 07       	cpc	r24, r26
 8a6:	b9 46       	sbci	r27, 0x69	; 105
 8a8:	30 f4       	brcc	.+12     	; 0x8b6 <modf+0x58>
 8aa:	9b 01       	movw	r18, r22
 8ac:	ac 01       	movw	r20, r24
 8ae:	66 27       	eor	r22, r22
 8b0:	77 27       	eor	r23, r23
 8b2:	88 27       	eor	r24, r24
 8b4:	90 78       	andi	r25, 0x80	; 128
 8b6:	30 96       	adiw	r30, 0x00	; 0
 8b8:	21 f0       	breq	.+8      	; 0x8c2 <modf+0x64>
 8ba:	20 83       	st	Z, r18
 8bc:	31 83       	std	Z+1, r19	; 0x01
 8be:	42 83       	std	Z+2, r20	; 0x02
 8c0:	53 83       	std	Z+3, r21	; 0x03
 8c2:	08 95       	ret

000008c4 <__mulsf3>:
 8c4:	0b d0       	rcall	.+22     	; 0x8dc <__mulsf3x>
 8c6:	dd c0       	rjmp	.+442    	; 0xa82 <__fp_round>
 8c8:	ce d0       	rcall	.+412    	; 0xa66 <__fp_pscA>
 8ca:	28 f0       	brcs	.+10     	; 0x8d6 <__mulsf3+0x12>
 8cc:	d3 d0       	rcall	.+422    	; 0xa74 <__fp_pscB>
 8ce:	18 f0       	brcs	.+6      	; 0x8d6 <__mulsf3+0x12>
 8d0:	95 23       	and	r25, r21
 8d2:	09 f0       	breq	.+2      	; 0x8d6 <__mulsf3+0x12>
 8d4:	bf c0       	rjmp	.+382    	; 0xa54 <__fp_inf>
 8d6:	c4 c0       	rjmp	.+392    	; 0xa60 <__fp_nan>
 8d8:	11 24       	eor	r1, r1
 8da:	bb cf       	rjmp	.-138    	; 0x852 <__fp_szero>

000008dc <__mulsf3x>:
 8dc:	97 df       	rcall	.-210    	; 0x80c <__fp_split3>
 8de:	a0 f3       	brcs	.-24     	; 0x8c8 <__mulsf3+0x4>

000008e0 <__mulsf3_pse>:
 8e0:	95 9f       	mul	r25, r21
 8e2:	d1 f3       	breq	.-12     	; 0x8d8 <__mulsf3+0x14>
 8e4:	95 0f       	add	r25, r21
 8e6:	50 e0       	ldi	r21, 0x00	; 0
 8e8:	55 1f       	adc	r21, r21
 8ea:	62 9f       	mul	r22, r18
 8ec:	f0 01       	movw	r30, r0
 8ee:	72 9f       	mul	r23, r18
 8f0:	bb 27       	eor	r27, r27
 8f2:	f0 0d       	add	r31, r0
 8f4:	b1 1d       	adc	r27, r1
 8f6:	63 9f       	mul	r22, r19
 8f8:	aa 27       	eor	r26, r26
 8fa:	f0 0d       	add	r31, r0
 8fc:	b1 1d       	adc	r27, r1
 8fe:	aa 1f       	adc	r26, r26
 900:	64 9f       	mul	r22, r20
 902:	66 27       	eor	r22, r22
 904:	b0 0d       	add	r27, r0
 906:	a1 1d       	adc	r26, r1
 908:	66 1f       	adc	r22, r22
 90a:	82 9f       	mul	r24, r18
 90c:	22 27       	eor	r18, r18
 90e:	b0 0d       	add	r27, r0
 910:	a1 1d       	adc	r26, r1
 912:	62 1f       	adc	r22, r18
 914:	73 9f       	mul	r23, r19
 916:	b0 0d       	add	r27, r0
 918:	a1 1d       	adc	r26, r1
 91a:	62 1f       	adc	r22, r18
 91c:	83 9f       	mul	r24, r19
 91e:	a0 0d       	add	r26, r0
 920:	61 1d       	adc	r22, r1
 922:	22 1f       	adc	r18, r18
 924:	74 9f       	mul	r23, r20
 926:	33 27       	eor	r19, r19
 928:	a0 0d       	add	r26, r0
 92a:	61 1d       	adc	r22, r1
 92c:	23 1f       	adc	r18, r19
 92e:	84 9f       	mul	r24, r20
 930:	60 0d       	add	r22, r0
 932:	21 1d       	adc	r18, r1
 934:	82 2f       	mov	r24, r18
 936:	76 2f       	mov	r23, r22
 938:	6a 2f       	mov	r22, r26
 93a:	11 24       	eor	r1, r1
 93c:	9f 57       	subi	r25, 0x7F	; 127
 93e:	50 40       	sbci	r21, 0x00	; 0
 940:	8a f0       	brmi	.+34     	; 0x964 <__mulsf3_pse+0x84>
 942:	e1 f0       	breq	.+56     	; 0x97c <__mulsf3_pse+0x9c>
 944:	88 23       	and	r24, r24
 946:	4a f0       	brmi	.+18     	; 0x95a <__mulsf3_pse+0x7a>
 948:	ee 0f       	add	r30, r30
 94a:	ff 1f       	adc	r31, r31
 94c:	bb 1f       	adc	r27, r27
 94e:	66 1f       	adc	r22, r22
 950:	77 1f       	adc	r23, r23
 952:	88 1f       	adc	r24, r24
 954:	91 50       	subi	r25, 0x01	; 1
 956:	50 40       	sbci	r21, 0x00	; 0
 958:	a9 f7       	brne	.-22     	; 0x944 <__mulsf3_pse+0x64>
 95a:	9e 3f       	cpi	r25, 0xFE	; 254
 95c:	51 05       	cpc	r21, r1
 95e:	70 f0       	brcs	.+28     	; 0x97c <__mulsf3_pse+0x9c>
 960:	79 c0       	rjmp	.+242    	; 0xa54 <__fp_inf>
 962:	77 cf       	rjmp	.-274    	; 0x852 <__fp_szero>
 964:	5f 3f       	cpi	r21, 0xFF	; 255
 966:	ec f3       	brlt	.-6      	; 0x962 <__mulsf3_pse+0x82>
 968:	98 3e       	cpi	r25, 0xE8	; 232
 96a:	dc f3       	brlt	.-10     	; 0x962 <__mulsf3_pse+0x82>
 96c:	86 95       	lsr	r24
 96e:	77 95       	ror	r23
 970:	67 95       	ror	r22
 972:	b7 95       	ror	r27
 974:	f7 95       	ror	r31
 976:	e7 95       	ror	r30
 978:	9f 5f       	subi	r25, 0xFF	; 255
 97a:	c1 f7       	brne	.-16     	; 0x96c <__mulsf3_pse+0x8c>
 97c:	fe 2b       	or	r31, r30
 97e:	88 0f       	add	r24, r24
 980:	91 1d       	adc	r25, r1
 982:	96 95       	lsr	r25
 984:	87 95       	ror	r24
 986:	97 f9       	bld	r25, 7
 988:	08 95       	ret

0000098a <__subsf3>:
 98a:	50 58       	subi	r21, 0x80	; 128

0000098c <__addsf3>:
 98c:	bb 27       	eor	r27, r27
 98e:	aa 27       	eor	r26, r26
 990:	0e d0       	rcall	.+28     	; 0x9ae <__addsf3x>
 992:	77 c0       	rjmp	.+238    	; 0xa82 <__fp_round>
 994:	68 d0       	rcall	.+208    	; 0xa66 <__fp_pscA>
 996:	30 f0       	brcs	.+12     	; 0x9a4 <__addsf3+0x18>
 998:	6d d0       	rcall	.+218    	; 0xa74 <__fp_pscB>
 99a:	20 f0       	brcs	.+8      	; 0x9a4 <__addsf3+0x18>
 99c:	31 f4       	brne	.+12     	; 0x9aa <__addsf3+0x1e>
 99e:	9f 3f       	cpi	r25, 0xFF	; 255
 9a0:	11 f4       	brne	.+4      	; 0x9a6 <__addsf3+0x1a>
 9a2:	1e f4       	brtc	.+6      	; 0x9aa <__addsf3+0x1e>
 9a4:	5d c0       	rjmp	.+186    	; 0xa60 <__fp_nan>
 9a6:	0e f4       	brtc	.+2      	; 0x9aa <__addsf3+0x1e>
 9a8:	e0 95       	com	r30
 9aa:	e7 fb       	bst	r30, 7
 9ac:	53 c0       	rjmp	.+166    	; 0xa54 <__fp_inf>

000009ae <__addsf3x>:
 9ae:	e9 2f       	mov	r30, r25
 9b0:	2d df       	rcall	.-422    	; 0x80c <__fp_split3>
 9b2:	80 f3       	brcs	.-32     	; 0x994 <__addsf3+0x8>
 9b4:	ba 17       	cp	r27, r26
 9b6:	62 07       	cpc	r22, r18
 9b8:	73 07       	cpc	r23, r19
 9ba:	84 07       	cpc	r24, r20
 9bc:	95 07       	cpc	r25, r21
 9be:	18 f0       	brcs	.+6      	; 0x9c6 <__addsf3x+0x18>
 9c0:	71 f4       	brne	.+28     	; 0x9de <__addsf3x+0x30>
 9c2:	9e f5       	brtc	.+102    	; 0xa2a <__addsf3x+0x7c>
 9c4:	45 cf       	rjmp	.-374    	; 0x850 <__fp_zero>
 9c6:	0e f4       	brtc	.+2      	; 0x9ca <__addsf3x+0x1c>
 9c8:	e0 95       	com	r30
 9ca:	0b 2e       	mov	r0, r27
 9cc:	ba 2f       	mov	r27, r26
 9ce:	a0 2d       	mov	r26, r0
 9d0:	0b 01       	movw	r0, r22
 9d2:	b9 01       	movw	r22, r18
 9d4:	90 01       	movw	r18, r0
 9d6:	0c 01       	movw	r0, r24
 9d8:	ca 01       	movw	r24, r20
 9da:	a0 01       	movw	r20, r0
 9dc:	11 24       	eor	r1, r1
 9de:	ff 27       	eor	r31, r31
 9e0:	59 1b       	sub	r21, r25
 9e2:	99 f0       	breq	.+38     	; 0xa0a <__addsf3x+0x5c>
 9e4:	59 3f       	cpi	r21, 0xF9	; 249
 9e6:	50 f4       	brcc	.+20     	; 0x9fc <__addsf3x+0x4e>
 9e8:	50 3e       	cpi	r21, 0xE0	; 224
 9ea:	68 f1       	brcs	.+90     	; 0xa46 <__addsf3x+0x98>
 9ec:	1a 16       	cp	r1, r26
 9ee:	f0 40       	sbci	r31, 0x00	; 0
 9f0:	a2 2f       	mov	r26, r18
 9f2:	23 2f       	mov	r18, r19
 9f4:	34 2f       	mov	r19, r20
 9f6:	44 27       	eor	r20, r20
 9f8:	58 5f       	subi	r21, 0xF8	; 248
 9fa:	f3 cf       	rjmp	.-26     	; 0x9e2 <__addsf3x+0x34>
 9fc:	46 95       	lsr	r20
 9fe:	37 95       	ror	r19
 a00:	27 95       	ror	r18
 a02:	a7 95       	ror	r26
 a04:	f0 40       	sbci	r31, 0x00	; 0
 a06:	53 95       	inc	r21
 a08:	c9 f7       	brne	.-14     	; 0x9fc <__addsf3x+0x4e>
 a0a:	7e f4       	brtc	.+30     	; 0xa2a <__addsf3x+0x7c>
 a0c:	1f 16       	cp	r1, r31
 a0e:	ba 0b       	sbc	r27, r26
 a10:	62 0b       	sbc	r22, r18
 a12:	73 0b       	sbc	r23, r19
 a14:	84 0b       	sbc	r24, r20
 a16:	ba f0       	brmi	.+46     	; 0xa46 <__addsf3x+0x98>
 a18:	91 50       	subi	r25, 0x01	; 1
 a1a:	a1 f0       	breq	.+40     	; 0xa44 <__addsf3x+0x96>
 a1c:	ff 0f       	add	r31, r31
 a1e:	bb 1f       	adc	r27, r27
 a20:	66 1f       	adc	r22, r22
 a22:	77 1f       	adc	r23, r23
 a24:	88 1f       	adc	r24, r24
 a26:	c2 f7       	brpl	.-16     	; 0xa18 <__addsf3x+0x6a>
 a28:	0e c0       	rjmp	.+28     	; 0xa46 <__addsf3x+0x98>
 a2a:	ba 0f       	add	r27, r26
 a2c:	62 1f       	adc	r22, r18
 a2e:	73 1f       	adc	r23, r19
 a30:	84 1f       	adc	r24, r20
 a32:	48 f4       	brcc	.+18     	; 0xa46 <__addsf3x+0x98>
 a34:	87 95       	ror	r24
 a36:	77 95       	ror	r23
 a38:	67 95       	ror	r22
 a3a:	b7 95       	ror	r27
 a3c:	f7 95       	ror	r31
 a3e:	9e 3f       	cpi	r25, 0xFE	; 254
 a40:	08 f0       	brcs	.+2      	; 0xa44 <__addsf3x+0x96>
 a42:	b3 cf       	rjmp	.-154    	; 0x9aa <__addsf3+0x1e>
 a44:	93 95       	inc	r25
 a46:	88 0f       	add	r24, r24
 a48:	08 f0       	brcs	.+2      	; 0xa4c <__addsf3x+0x9e>
 a4a:	99 27       	eor	r25, r25
 a4c:	ee 0f       	add	r30, r30
 a4e:	97 95       	ror	r25
 a50:	87 95       	ror	r24
 a52:	08 95       	ret

00000a54 <__fp_inf>:
 a54:	97 f9       	bld	r25, 7
 a56:	9f 67       	ori	r25, 0x7F	; 127
 a58:	80 e8       	ldi	r24, 0x80	; 128
 a5a:	70 e0       	ldi	r23, 0x00	; 0
 a5c:	60 e0       	ldi	r22, 0x00	; 0
 a5e:	08 95       	ret

00000a60 <__fp_nan>:
 a60:	9f ef       	ldi	r25, 0xFF	; 255
 a62:	80 ec       	ldi	r24, 0xC0	; 192
 a64:	08 95       	ret

00000a66 <__fp_pscA>:
 a66:	00 24       	eor	r0, r0
 a68:	0a 94       	dec	r0
 a6a:	16 16       	cp	r1, r22
 a6c:	17 06       	cpc	r1, r23
 a6e:	18 06       	cpc	r1, r24
 a70:	09 06       	cpc	r0, r25
 a72:	08 95       	ret

00000a74 <__fp_pscB>:
 a74:	00 24       	eor	r0, r0
 a76:	0a 94       	dec	r0
 a78:	12 16       	cp	r1, r18
 a7a:	13 06       	cpc	r1, r19
 a7c:	14 06       	cpc	r1, r20
 a7e:	05 06       	cpc	r0, r21
 a80:	08 95       	ret

00000a82 <__fp_round>:
 a82:	09 2e       	mov	r0, r25
 a84:	03 94       	inc	r0
 a86:	00 0c       	add	r0, r0
 a88:	11 f4       	brne	.+4      	; 0xa8e <__fp_round+0xc>
 a8a:	88 23       	and	r24, r24
 a8c:	52 f0       	brmi	.+20     	; 0xaa2 <__fp_round+0x20>
 a8e:	bb 0f       	add	r27, r27
 a90:	40 f4       	brcc	.+16     	; 0xaa2 <__fp_round+0x20>
 a92:	bf 2b       	or	r27, r31
 a94:	11 f4       	brne	.+4      	; 0xa9a <__fp_round+0x18>
 a96:	60 ff       	sbrs	r22, 0
 a98:	04 c0       	rjmp	.+8      	; 0xaa2 <__fp_round+0x20>
 a9a:	6f 5f       	subi	r22, 0xFF	; 255
 a9c:	7f 4f       	sbci	r23, 0xFF	; 255
 a9e:	8f 4f       	sbci	r24, 0xFF	; 255
 aa0:	9f 4f       	sbci	r25, 0xFF	; 255
 aa2:	08 95       	ret

00000aa4 <__mulsi3>:
 aa4:	62 9f       	mul	r22, r18
 aa6:	d0 01       	movw	r26, r0
 aa8:	73 9f       	mul	r23, r19
 aaa:	f0 01       	movw	r30, r0
 aac:	82 9f       	mul	r24, r18
 aae:	e0 0d       	add	r30, r0
 ab0:	f1 1d       	adc	r31, r1
 ab2:	64 9f       	mul	r22, r20
 ab4:	e0 0d       	add	r30, r0
 ab6:	f1 1d       	adc	r31, r1
 ab8:	92 9f       	mul	r25, r18
 aba:	f0 0d       	add	r31, r0
 abc:	83 9f       	mul	r24, r19
 abe:	f0 0d       	add	r31, r0
 ac0:	74 9f       	mul	r23, r20
 ac2:	f0 0d       	add	r31, r0
 ac4:	65 9f       	mul	r22, r21
 ac6:	f0 0d       	add	r31, r0
 ac8:	99 27       	eor	r25, r25
 aca:	72 9f       	mul	r23, r18
 acc:	b0 0d       	add	r27, r0
 ace:	e1 1d       	adc	r30, r1
 ad0:	f9 1f       	adc	r31, r25
 ad2:	63 9f       	mul	r22, r19
 ad4:	b0 0d       	add	r27, r0
 ad6:	e1 1d       	adc	r30, r1
 ad8:	f9 1f       	adc	r31, r25
 ada:	bd 01       	movw	r22, r26
 adc:	cf 01       	movw	r24, r30
 ade:	11 24       	eor	r1, r1
 ae0:	08 95       	ret

00000ae2 <__udivmodhi4>:
 ae2:	aa 1b       	sub	r26, r26
 ae4:	bb 1b       	sub	r27, r27
 ae6:	51 e1       	ldi	r21, 0x11	; 17
 ae8:	07 c0       	rjmp	.+14     	; 0xaf8 <__udivmodhi4_ep>

00000aea <__udivmodhi4_loop>:
 aea:	aa 1f       	adc	r26, r26
 aec:	bb 1f       	adc	r27, r27
 aee:	a6 17       	cp	r26, r22
 af0:	b7 07       	cpc	r27, r23
 af2:	10 f0       	brcs	.+4      	; 0xaf8 <__udivmodhi4_ep>
 af4:	a6 1b       	sub	r26, r22
 af6:	b7 0b       	sbc	r27, r23

00000af8 <__udivmodhi4_ep>:
 af8:	88 1f       	adc	r24, r24
 afa:	99 1f       	adc	r25, r25
 afc:	5a 95       	dec	r21
 afe:	a9 f7       	brne	.-22     	; 0xaea <__udivmodhi4_loop>
 b00:	80 95       	com	r24
 b02:	90 95       	com	r25
 b04:	bc 01       	movw	r22, r24
 b06:	cd 01       	movw	r24, r26
 b08:	08 95       	ret

00000b0a <__udivmodsi4>:
 b0a:	a1 e2       	ldi	r26, 0x21	; 33
 b0c:	1a 2e       	mov	r1, r26
 b0e:	aa 1b       	sub	r26, r26
 b10:	bb 1b       	sub	r27, r27
 b12:	fd 01       	movw	r30, r26
 b14:	0d c0       	rjmp	.+26     	; 0xb30 <__udivmodsi4_ep>

00000b16 <__udivmodsi4_loop>:
 b16:	aa 1f       	adc	r26, r26
 b18:	bb 1f       	adc	r27, r27
 b1a:	ee 1f       	adc	r30, r30
 b1c:	ff 1f       	adc	r31, r31
 b1e:	a2 17       	cp	r26, r18
 b20:	b3 07       	cpc	r27, r19
 b22:	e4 07       	cpc	r30, r20
 b24:	f5 07       	cpc	r31, r21
 b26:	20 f0       	brcs	.+8      	; 0xb30 <__udivmodsi4_ep>
 b28:	a2 1b       	sub	r26, r18
 b2a:	b3 0b       	sbc	r27, r19
 b2c:	e4 0b       	sbc	r30, r20
 b2e:	f5 0b       	sbc	r31, r21

00000b30 <__udivmodsi4_ep>:
 b30:	66 1f       	adc	r22, r22
 b32:	77 1f       	adc	r23, r23
 b34:	88 1f       	adc	r24, r24
 b36:	99 1f       	adc	r25, r25
 b38:	1a 94       	dec	r1
 b3a:	69 f7       	brne	.-38     	; 0xb16 <__udivmodsi4_loop>
 b3c:	60 95       	com	r22
 b3e:	70 95       	com	r23
 b40:	80 95       	com	r24
 b42:	90 95       	com	r25
 b44:	9b 01       	movw	r18, r22
 b46:	ac 01       	movw	r20, r24
 b48:	bd 01       	movw	r22, r26
 b4a:	cf 01       	movw	r24, r30
 b4c:	08 95       	ret

00000b4e <_exit>:
 b4e:	f8 94       	cli

00000b50 <__stop_program>:
 b50:	ff cf       	rjmp	.-2      	; 0xb50 <__stop_program>
