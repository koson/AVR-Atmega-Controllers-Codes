
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000038  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001b9  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e5  00000000  00000000  00000337  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001b8  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  000005d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000e3  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000018  00000000  00000000  000006f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	36 d0       	rcall	.+108    	; 0xa0 <main>
  34:	4c c0       	rjmp	.+152    	; 0xce <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <topservo>:
#include <avr/io.h>
#include <util/delay.h>

void topservo(void)
{
	if(bit_is_clear(PINC,2))
  38:	9a 99       	sbic	0x13, 2	; 19
  3a:	0b c0       	rjmp	.+22     	; 0x52 <__SREG__+0x13>
	{
		if(OCR1A < 1100)		
  3c:	8a b5       	in	r24, 0x2a	; 42
  3e:	9b b5       	in	r25, 0x2b	; 43
  40:	8c 54       	subi	r24, 0x4C	; 76
  42:	94 40       	sbci	r25, 0x04	; 4
  44:	e8 f4       	brcc	.+58     	; 0x80 <__SREG__+0x41>
		{
			OCR1A = OCR1A++;
  46:	8a b5       	in	r24, 0x2a	; 42
  48:	9b b5       	in	r25, 0x2b	; 43
  4a:	9b bd       	out	0x2b, r25	; 43
  4c:	8a bd       	out	0x2a, r24	; 42
  4e:	01 96       	adiw	r24, 0x01	; 1
  50:	0c c0       	rjmp	.+24     	; 0x6a <__SREG__+0x2b>
			_delay_us(500);
		}
	}
	else if(bit_is_clear(PINC,3)) 
  52:	9b 99       	sbic	0x13, 3	; 19
  54:	11 c0       	rjmp	.+34     	; 0x78 <__SREG__+0x39>
	{
		if(OCR1A > 250)
  56:	8a b5       	in	r24, 0x2a	; 42
  58:	9b b5       	in	r25, 0x2b	; 43
  5a:	8b 3f       	cpi	r24, 0xFB	; 251
  5c:	91 05       	cpc	r25, r1
  5e:	80 f0       	brcs	.+32     	; 0x80 <__SREG__+0x41>
		{
			OCR1A = OCR1A--;
  60:	8a b5       	in	r24, 0x2a	; 42
  62:	9b b5       	in	r25, 0x2b	; 43
  64:	9b bd       	out	0x2b, r25	; 43
  66:	8a bd       	out	0x2a, r24	; 42
  68:	01 97       	sbiw	r24, 0x01	; 1
  6a:	9b bd       	out	0x2b, r25	; 43
  6c:	8a bd       	out	0x2a, r24	; 42
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  6e:	88 ee       	ldi	r24, 0xE8	; 232
  70:	93 e0       	ldi	r25, 0x03	; 3
  72:	01 97       	sbiw	r24, 0x01	; 1
  74:	f1 f7       	brne	.-4      	; 0x72 <__SREG__+0x33>
  76:	08 95       	ret
			_delay_us(500);
		}
	}
	else
	{
		OCR1A = OCR1A;
  78:	8a b5       	in	r24, 0x2a	; 42
  7a:	9b b5       	in	r25, 0x2b	; 43
  7c:	9b bd       	out	0x2b, r25	; 43
  7e:	8a bd       	out	0x2a, r24	; 42
  80:	08 95       	ret

00000082 <bottomservo>:
	}
}

void bottomservo(void)	
{
	if(bit_is_clear(PINC,0))
  82:	98 99       	sbic	0x13, 0	; 19
  84:	03 c0       	rjmp	.+6      	; 0x8c <bottomservo+0xa>
	{	
		/*if((OCR1B > 300) )		
		{	
			OCR1B = OCR1B--;
			_delay_us(500);
		}*/OCR1B = 690;
  86:	82 eb       	ldi	r24, 0xB2	; 178
  88:	92 e0       	ldi	r25, 0x02	; 2
  8a:	04 c0       	rjmp	.+8      	; 0x94 <bottomservo+0x12>
	}
	else if(bit_is_clear(PINC,1))
  8c:	99 99       	sbic	0x13, 1	; 19
  8e:	05 c0       	rjmp	.+10     	; 0x9a <bottomservo+0x18>
	{
		/*if(OCR1B < 1150)	
		{
			OCR1B = OCR1B++;
			_delay_us(500);
		}*/OCR1B = 9900;
  90:	8c ea       	ldi	r24, 0xAC	; 172
  92:	96 e2       	ldi	r25, 0x26	; 38
  94:	99 bd       	out	0x29, r25	; 41
  96:	88 bd       	out	0x28, r24	; 40
  98:	08 95       	ret
	}
	else
	{
		OCR1B = 0;
  9a:	19 bc       	out	0x29, r1	; 41
  9c:	18 bc       	out	0x28, r1	; 40
  9e:	08 95       	ret

000000a0 <main>:
	}
}

int main(void)
{
	DDRB = 0b00000110;
  a0:	86 e0       	ldi	r24, 0x06	; 6
  a2:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00000000;
  a4:	18 ba       	out	0x18, r1	; 24
	
	DDRC = 0b00000000;
  a6:	14 ba       	out	0x14, r1	; 20
	PORTC = 0b00111111;
  a8:	8f e3       	ldi	r24, 0x3F	; 63
  aa:	85 bb       	out	0x15, r24	; 21
	
	TCCR1A = 0b10100000;
  ac:	80 ea       	ldi	r24, 0xA0	; 160
  ae:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0b00010001;
  b0:	81 e1       	ldi	r24, 0x11	; 17
  b2:	8e bd       	out	0x2e, r24	; 46
	
	
	ICR1 =  10000;
  b4:	80 e1       	ldi	r24, 0x10	; 16
  b6:	97 e2       	ldi	r25, 0x27	; 39
  b8:	97 bd       	out	0x27, r25	; 39
  ba:	86 bd       	out	0x26, r24	; 38
	OCR1A = 620;
  bc:	8c e6       	ldi	r24, 0x6C	; 108
  be:	92 e0       	ldi	r25, 0x02	; 2
  c0:	9b bd       	out	0x2b, r25	; 43
  c2:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 0;
  c4:	19 bc       	out	0x29, r1	; 41
  c6:	18 bc       	out	0x28, r1	; 40
	//OCR1A = 1100;
	//OCR1A = 250;
	
    while(1)
    {
		bottomservo();
  c8:	dc df       	rcall	.-72     	; 0x82 <bottomservo>
		topservo();
  ca:	b6 df       	rcall	.-148    	; 0x38 <topservo>
  cc:	fd cf       	rjmp	.-6      	; 0xc8 <main+0x28>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
