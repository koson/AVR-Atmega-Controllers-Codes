
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800200  000010ba  0000114e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  0080020e  0080020e  0000115c  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000115c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000029f  00000000  00000000  0000117c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007b2  00000000  00000000  0000141b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000283  00000000  00000000  00001bcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d85  00000000  00000000  00001e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f0  00000000  00000000  00002bd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d1  00000000  00000000  00002dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003ce  00000000  00000000  00003099  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00003467  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	12 e0       	ldi	r17, 0x02	; 2
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b2 e0       	ldi	r27, 0x02	; 2
      f6:	ea eb       	ldi	r30, 0xBA	; 186
      f8:	f0 e1       	ldi	r31, 0x10	; 16
      fa:	02 c0       	rjmp	.+4      	; 0x100 <.do_copy_data_start>

000000fc <.do_copy_data_loop>:
      fc:	05 90       	lpm	r0, Z+
      fe:	0d 92       	st	X+, r0

00000100 <.do_copy_data_start>:
     100:	ae 30       	cpi	r26, 0x0E	; 14
     102:	b1 07       	cpc	r27, r17
     104:	d9 f7       	brne	.-10     	; 0xfc <.do_copy_data_loop>

00000106 <__do_clear_bss>:
     106:	12 e0       	ldi	r17, 0x02	; 2
     108:	ae e0       	ldi	r26, 0x0E	; 14
     10a:	b2 e0       	ldi	r27, 0x02	; 2
     10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
     10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
     110:	a0 32       	cpi	r26, 0x20	; 32
     112:	b1 07       	cpc	r27, r17
     114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
     116:	0e 94 cf 05 	call	0xb9e	; 0xb9e <main>
     11a:	0c 94 5b 08 	jmp	0x10b6	; 0x10b6 <_exit>

0000011e <__bad_interrupt>:
     11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <compute_duty_cycle>:

}


unsigned int compute_duty_cycle(unsigned int dc,char ix)
{
     122:	fc 01       	movw	r30, r24
	
	if (ix == '1')
     124:	61 33       	cpi	r22, 0x31	; 49
     126:	29 f4       	brne	.+10     	; 0x132 <compute_duty_cycle+0x10>
		return 	( ((ICR1 /100 ) * dc));
     128:	80 91 86 00 	lds	r24, 0x0086
     12c:	90 91 87 00 	lds	r25, 0x0087
     130:	14 c0       	rjmp	.+40     	; 0x15a <compute_duty_cycle+0x38>
	if (ix == '3')
     132:	63 33       	cpi	r22, 0x33	; 51
     134:	29 f4       	brne	.+10     	; 0x140 <compute_duty_cycle+0x1e>
		return 	( ((ICR3 /100 ) * dc));
     136:	80 91 96 00 	lds	r24, 0x0096
     13a:	90 91 97 00 	lds	r25, 0x0097
     13e:	0d c0       	rjmp	.+26     	; 0x15a <compute_duty_cycle+0x38>
	if(ix == '4')
     140:	64 33       	cpi	r22, 0x34	; 52
     142:	29 f4       	brne	.+10     	; 0x14e <compute_duty_cycle+0x2c>
		return 	( ((ICR4 /100 ) * dc));
     144:	80 91 a6 00 	lds	r24, 0x00A6
     148:	90 91 a7 00 	lds	r25, 0x00A7
     14c:	06 c0       	rjmp	.+12     	; 0x15a <compute_duty_cycle+0x38>
	if(ix == '5')
     14e:	65 33       	cpi	r22, 0x35	; 53
     150:	89 f4       	brne	.+34     	; 0x174 <compute_duty_cycle+0x52>
		return 	( ((ICR5 /100 ) * dc));
     152:	80 91 26 01 	lds	r24, 0x0126
     156:	90 91 27 01 	lds	r25, 0x0127
     15a:	64 e6       	ldi	r22, 0x64	; 100
     15c:	70 e0       	ldi	r23, 0x00	; 0
     15e:	0e 94 1d 08 	call	0x103a	; 0x103a <__udivmodhi4>
     162:	e6 9f       	mul	r30, r22
     164:	90 01       	movw	r18, r0
     166:	e7 9f       	mul	r30, r23
     168:	30 0d       	add	r19, r0
     16a:	f6 9f       	mul	r31, r22
     16c:	30 0d       	add	r19, r0
     16e:	11 24       	eor	r1, r1
}
     170:	c9 01       	movw	r24, r18
     172:	08 95       	ret
     174:	08 95       	ret

00000176 <ExecuteSeeSaw>:
	PWM('5','A',10000,100,SET);
}

void ExecuteSeeSaw(void)
{
	PORTA |= (1<<PA3);
     176:	13 9a       	sbi	0x02, 3	; 2
     178:	20 e0       	ldi	r18, 0x00	; 0
     17a:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     17c:	40 e7       	ldi	r20, 0x70	; 112
     17e:	51 e0       	ldi	r21, 0x01	; 1
	//PORTA |= (1<<PA5);
	for(int i = 0; i < 3; i++)
	{
		PORTA |= (1<<PA1);
     180:	11 9a       	sbi	0x02, 1	; 2
     182:	80 e1       	ldi	r24, 0x10	; 16
     184:	97 e2       	ldi	r25, 0x27	; 39
     186:	fa 01       	movw	r30, r20
     188:	31 97       	sbiw	r30, 0x01	; 1
     18a:	f1 f7       	brne	.-4      	; 0x188 <ExecuteSeeSaw+0x12>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     18c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     18e:	d9 f7       	brne	.-10     	; 0x186 <ExecuteSeeSaw+0x10>
		_delay_ms(1000);
		PORTA &= ~(1<<PA1);
     190:	11 98       	cbi	0x02, 1	; 2
     192:	80 e1       	ldi	r24, 0x10	; 16
     194:	97 e2       	ldi	r25, 0x27	; 39
     196:	fa 01       	movw	r30, r20
     198:	31 97       	sbiw	r30, 0x01	; 1
     19a:	f1 f7       	brne	.-4      	; 0x198 <ExecuteSeeSaw+0x22>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     19c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     19e:	d9 f7       	brne	.-10     	; 0x196 <ExecuteSeeSaw+0x20>

void ExecuteSeeSaw(void)
{
	PORTA |= (1<<PA3);
	//PORTA |= (1<<PA5);
	for(int i = 0; i < 3; i++)
     1a0:	2f 5f       	subi	r18, 0xFF	; 255
     1a2:	3f 4f       	sbci	r19, 0xFF	; 255
     1a4:	23 30       	cpi	r18, 0x03	; 3
     1a6:	31 05       	cpc	r19, r1
     1a8:	59 f7       	brne	.-42     	; 0x180 <ExecuteSeeSaw+0xa>
		PORTA |= (1<<PA1);
		_delay_ms(1000);
		PORTA &= ~(1<<PA1);
		_delay_ms(1000);
	}
	PORTA &= ~(1<<PA3);
     1aa:	13 98       	cbi	0x02, 3	; 2
	PORTA &= ~(1<<PA1);
     1ac:	11 98       	cbi	0x02, 1	; 2
	//PORTA &= ~(1<<PA5);
     1ae:	08 95       	ret

000001b0 <ADCInit>:

uint8_t EncoderStarted = 0;

void ADCInit(void)
{
	ADCSRA |= (1<<ADEN);
     1b0:	aa e7       	ldi	r26, 0x7A	; 122
     1b2:	b0 e0       	ldi	r27, 0x00	; 0
     1b4:	8c 91       	ld	r24, X
     1b6:	80 68       	ori	r24, 0x80	; 128
     1b8:	8c 93       	st	X, r24
	ADMUX |= (1<<MUX1);
     1ba:	ec e7       	ldi	r30, 0x7C	; 124
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	80 81       	ld	r24, Z
     1c0:	82 60       	ori	r24, 0x02	; 2
     1c2:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
     1c4:	8c 91       	ld	r24, X
     1c6:	87 60       	ori	r24, 0x07	; 7
     1c8:	8c 93       	st	X, r24
	ADMUX |= (1<<ADLAR);
     1ca:	80 81       	ld	r24, Z
     1cc:	80 62       	ori	r24, 0x20	; 32
     1ce:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
     1d0:	8c 91       	ld	r24, X
     1d2:	80 64       	ori	r24, 0x40	; 64
     1d4:	8c 93       	st	X, r24
}
     1d6:	08 95       	ret

000001d8 <ADCConvert>:

int ADCConvert(void)
{
	ADCSRA |= (1<<ADSC);
     1d8:	ea e7       	ldi	r30, 0x7A	; 122
     1da:	f0 e0       	ldi	r31, 0x00	; 0
     1dc:	80 81       	ld	r24, Z
     1de:	80 64       	ori	r24, 0x40	; 64
     1e0:	80 83       	st	Z, r24
	return ADCH;	
     1e2:	80 91 79 00 	lds	r24, 0x0079
}
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	08 95       	ret

000001ea <ProcessADC>:
	OCR3A = 400 - (int)(ceil(corr));
}

void ProcessADC(uint8_t analogData)
{
	speed = 20+analogData/3;
     1ea:	63 e0       	ldi	r22, 0x03	; 3
     1ec:	0e 94 11 08 	call	0x1022	; 0x1022 <__udivmodqi4>
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	44 96       	adiw	r24, 0x14	; 20
     1f4:	90 93 01 02 	sts	0x0201, r25
     1f8:	80 93 00 02 	sts	0x0200, r24
	if (speed >= 85)
     1fc:	85 35       	cpi	r24, 0x55	; 85
     1fe:	91 05       	cpc	r25, r1
     200:	34 f0       	brlt	.+12     	; 0x20e <ProcessADC+0x24>
	{
		speed = 85;
     202:	85 e5       	ldi	r24, 0x55	; 85
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	90 93 01 02 	sts	0x0201, r25
     20a:	80 93 00 02 	sts	0x0200, r24
     20e:	08 95       	ret

00000210 <ProcessPINB>:
}

void ProcessPINB( uint8_t data ) 
{
	
}
     210:	08 95       	ret

00000212 <UartReceive>:
    }
}

uint8_t UartReceive(void)
{
	while ( !( UCSR2A & (1<<RXC2)) );
     212:	80 91 d0 00 	lds	r24, 0x00D0
     216:	87 ff       	sbrs	r24, 7
     218:	fc cf       	rjmp	.-8      	; 0x212 <UartReceive>
	return UDR2;
     21a:	80 91 d6 00 	lds	r24, 0x00D6
}
     21e:	08 95       	ret

00000220 <UartInit>:

void UartInit(void)
{
//	SETBIT(DDRH,BIT(1));
//	CLEARBIT(DDRH,BIT(0));
	DDRH |= (1<<PH1);
     220:	e1 e0       	ldi	r30, 0x01	; 1
     222:	f1 e0       	ldi	r31, 0x01	; 1
     224:	80 81       	ld	r24, Z
     226:	82 60       	ori	r24, 0x02	; 2
     228:	80 83       	st	Z, r24
	DDRH &= ~(1<<PH0);
     22a:	80 81       	ld	r24, Z
     22c:	8e 7f       	andi	r24, 0xFE	; 254
     22e:	80 83       	st	Z, r24
	
	PORTH |= (1<<PH1);
     230:	e2 e0       	ldi	r30, 0x02	; 2
     232:	f1 e0       	ldi	r31, 0x01	; 1
     234:	80 81       	ld	r24, Z
     236:	82 60       	ori	r24, 0x02	; 2
     238:	80 83       	st	Z, r24
	PORTH &= ~(1<<PH0);
     23a:	80 81       	ld	r24, Z
     23c:	8e 7f       	andi	r24, 0xFE	; 254
     23e:	80 83       	st	Z, r24
	
	UCSR2B |= (1<<RXEN2) | (1<<TXEN2);
     240:	e1 ed       	ldi	r30, 0xD1	; 209
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	80 81       	ld	r24, Z
     246:	88 61       	ori	r24, 0x18	; 24
     248:	80 83       	st	Z, r24
	UCSR2C |= (1<<UCSZ20) | (1<<UCSZ21);
     24a:	e2 ed       	ldi	r30, 0xD2	; 210
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	80 81       	ld	r24, Z
     250:	86 60       	ori	r24, 0x06	; 6
     252:	80 83       	st	Z, r24
	UCSR2A |= (1<<U2X2);
     254:	e0 ed       	ldi	r30, 0xD0	; 208
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	80 81       	ld	r24, Z
     25a:	82 60       	ori	r24, 0x02	; 2
     25c:	80 83       	st	Z, r24
	
	UBRR2 = 191;
     25e:	8f eb       	ldi	r24, 0xBF	; 191
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	90 93 d5 00 	sts	0x00D5, r25
     266:	80 93 d4 00 	sts	0x00D4, r24
	
	// RX - PJ0
	// TX - PJ1
	
	// Using Channel 2 of 640 Present at PORTH
}
     26a:	08 95       	ret

0000026c <UartTransmit>:

void UartTransmit(uint8_t data)
{
     26c:	98 2f       	mov	r25, r24
	while ( !( UCSR2A & (1<<UDRE2)) );
     26e:	80 91 d0 00 	lds	r24, 0x00D0
     272:	85 ff       	sbrs	r24, 5
     274:	fc cf       	rjmp	.-8      	; 0x26e <UartTransmit+0x2>
	UDR2 = data;
     276:	90 93 d6 00 	sts	0x00D6, r25
}
     27a:	08 95       	ret

0000027c <pid>:
}



void pid(void)
{
     27c:	8f 92       	push	r8
     27e:	9f 92       	push	r9
     280:	af 92       	push	r10
     282:	bf 92       	push	r11
     284:	cf 92       	push	r12
     286:	df 92       	push	r13
     288:	ef 92       	push	r14
     28a:	ff 92       	push	r15
     28c:	0f 93       	push	r16
     28e:	1f 93       	push	r17
	//get the sensor input

	if(bit_is_set(PIN_sen, sen1))
     290:	35 9b       	sbis	0x06, 5	; 6
     292:	02 c0       	rjmp	.+4      	; 0x298 <pid+0x1c>
		err = 3;
     294:	83 e0       	ldi	r24, 0x03	; 3
     296:	03 c0       	rjmp	.+6      	; 0x29e <pid+0x22>
	else if(bit_is_set(PIN_sen, sen2))
     298:	34 9b       	sbis	0x06, 4	; 6
     29a:	04 c0       	rjmp	.+8      	; 0x2a4 <pid+0x28>
		err = 2.4;
     29c:	82 e0       	ldi	r24, 0x02	; 2
     29e:	80 93 15 02 	sts	0x0215, r24
     2a2:	0a c0       	rjmp	.+20     	; 0x2b8 <pid+0x3c>
	else if(bit_is_set(PIN_sen, sen3))
     2a4:	31 99       	sbic	0x06, 1	; 6
     2a6:	fa cf       	rjmp	.-12     	; 0x29c <pid+0x20>
		err = 2.2;
	else if(bit_is_set(PIN_sen, sen4))
     2a8:	32 99       	sbic	0x06, 2	; 6
     2aa:	f8 cf       	rjmp	.-16     	; 0x29c <pid+0x20>
		err = 2;
	else if(bit_is_set(PIN_sen, sen5))
     2ac:	33 9b       	sbis	0x06, 3	; 6
     2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <pid+0x38>
		err = 1;
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	f5 cf       	rjmp	.-22     	; 0x29e <pid+0x22>
	else
		err = -0.1;
     2b4:	10 92 15 02 	sts	0x0215, r1
	
	
	inst_err = err - prev_err;
     2b8:	80 90 15 02 	lds	r8, 0x0215
     2bc:	80 91 18 02 	lds	r24, 0x0218
     2c0:	e8 2c       	mov	r14, r8
     2c2:	e8 1a       	sub	r14, r24
     2c4:	e0 92 17 02 	sts	0x0217, r14
	corr = p*err + i*acc_err + d*inst_err;
     2c8:	90 90 16 02 	lds	r9, 0x0216
     2cc:	68 2d       	mov	r22, r8
     2ce:	70 e0       	ldi	r23, 0x00	; 0
     2d0:	88 27       	eor	r24, r24
     2d2:	77 fd       	sbrc	r23, 7
     2d4:	80 95       	com	r24
     2d6:	98 2f       	mov	r25, r24
     2d8:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <__floatsisf>
     2dc:	20 91 02 02 	lds	r18, 0x0202
     2e0:	30 91 03 02 	lds	r19, 0x0203
     2e4:	40 91 04 02 	lds	r20, 0x0204
     2e8:	50 91 05 02 	lds	r21, 0x0205
     2ec:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__mulsf3>
     2f0:	5b 01       	movw	r10, r22
     2f2:	6c 01       	movw	r12, r24
     2f4:	69 2d       	mov	r22, r9
     2f6:	70 e0       	ldi	r23, 0x00	; 0
     2f8:	88 27       	eor	r24, r24
     2fa:	77 fd       	sbrc	r23, 7
     2fc:	80 95       	com	r24
     2fe:	98 2f       	mov	r25, r24
     300:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <__floatsisf>
     304:	20 91 06 02 	lds	r18, 0x0206
     308:	30 91 07 02 	lds	r19, 0x0207
     30c:	40 91 08 02 	lds	r20, 0x0208
     310:	50 91 09 02 	lds	r21, 0x0209
     314:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__mulsf3>
     318:	9b 01       	movw	r18, r22
     31a:	ac 01       	movw	r20, r24
     31c:	c6 01       	movw	r24, r12
     31e:	b5 01       	movw	r22, r10
     320:	0e 94 38 06 	call	0xc70	; 0xc70 <__addsf3>
     324:	5b 01       	movw	r10, r22
     326:	6c 01       	movw	r12, r24
     328:	ff 24       	eor	r15, r15
     32a:	00 27       	eor	r16, r16
     32c:	f7 fc       	sbrc	r15, 7
     32e:	00 95       	com	r16
     330:	10 2f       	mov	r17, r16
     332:	c8 01       	movw	r24, r16
     334:	b7 01       	movw	r22, r14
     336:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <__floatsisf>
     33a:	20 91 0a 02 	lds	r18, 0x020A
     33e:	30 91 0b 02 	lds	r19, 0x020B
     342:	40 91 0c 02 	lds	r20, 0x020C
     346:	50 91 0d 02 	lds	r21, 0x020D
     34a:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__mulsf3>
     34e:	9b 01       	movw	r18, r22
     350:	ac 01       	movw	r20, r24
     352:	c6 01       	movw	r24, r12
     354:	b5 01       	movw	r22, r10
     356:	0e 94 38 06 	call	0xc70	; 0xc70 <__addsf3>
     35a:	9b 01       	movw	r18, r22
     35c:	ac 01       	movw	r20, r24
     35e:	20 93 19 02 	sts	0x0219, r18
     362:	30 93 1a 02 	sts	0x021A, r19
     366:	40 93 1b 02 	sts	0x021B, r20
     36a:	50 93 1c 02 	sts	0x021C, r21
	acc_err += err;
     36e:	98 0c       	add	r9, r8
     370:	90 92 16 02 	sts	0x0216, r9
	prev_err = err;
     374:	80 92 18 02 	sts	0x0218, r8

	PidStarted = 1;
     378:	21 e0       	ldi	r18, 0x01	; 1
     37a:	20 93 13 02 	sts	0x0213, r18

	CLEARBIT(PORTJ,BIT(1));		// Direction Bits Left Base
     37e:	20 91 05 01 	lds	r18, 0x0105
     382:	2d 7f       	andi	r18, 0xFD	; 253
     384:	20 93 05 01 	sts	0x0105, r18
	SETBIT(PORTJ,BIT(0));
     388:	20 91 05 01 	lds	r18, 0x0105
     38c:	21 60       	ori	r18, 0x01	; 1
     38e:	20 93 05 01 	sts	0x0105, r18
	SETBIT(PORTJ,BIT(3));		// Direction Bits Right Base
     392:	20 91 05 01 	lds	r18, 0x0105
     396:	28 60       	ori	r18, 0x08	; 8
     398:	20 93 05 01 	sts	0x0105, r18
	CLEARBIT(PORTJ,BIT(2));
     39c:	20 91 05 01 	lds	r18, 0x0105
     3a0:	2b 7f       	andi	r18, 0xFB	; 251
     3a2:	20 93 05 01 	sts	0x0105, r18
	
	OCR3B = 350 + (int)(ceil(corr));
     3a6:	26 2f       	mov	r18, r22
     3a8:	b9 01       	movw	r22, r18
     3aa:	0e 94 9c 06 	call	0xd38	; 0xd38 <ceil>
     3ae:	0e 94 af 06 	call	0xd5e	; 0xd5e <__fixsfsi>
     3b2:	62 5a       	subi	r22, 0xA2	; 162
     3b4:	7e 4f       	sbci	r23, 0xFE	; 254
     3b6:	70 93 9b 00 	sts	0x009B, r23
     3ba:	60 93 9a 00 	sts	0x009A, r22
     3be:	6e 55       	subi	r22, 0x5E	; 94
     3c0:	71 40       	sbci	r23, 0x01	; 1
	OCR3A = 400 - (int)(ceil(corr));
     3c2:	20 e9       	ldi	r18, 0x90	; 144
     3c4:	31 e0       	ldi	r19, 0x01	; 1
     3c6:	26 1b       	sub	r18, r22
     3c8:	37 0b       	sbc	r19, r23
     3ca:	30 93 99 00 	sts	0x0099, r19
     3ce:	20 93 98 00 	sts	0x0098, r18
}
     3d2:	1f 91       	pop	r17
     3d4:	0f 91       	pop	r16
     3d6:	ff 90       	pop	r15
     3d8:	ef 90       	pop	r14
     3da:	df 90       	pop	r13
     3dc:	cf 90       	pop	r12
     3de:	bf 90       	pop	r11
     3e0:	af 90       	pop	r10
     3e2:	9f 90       	pop	r9
     3e4:	8f 90       	pop	r8
     3e6:	08 95       	ret

000003e8 <PWM>:
	CLEAR = 0,SET = 1, TOGGLE = 2
}DirectionBIT;


void PWM(char SELECT1 , char SELECT2 ,unsigned int f , unsigned int dc,enum DirectionBIT bit)
{
     3e8:	bf 92       	push	r11
     3ea:	cf 92       	push	r12
     3ec:	df 92       	push	r13
     3ee:	ef 92       	push	r14
     3f0:	ff 92       	push	r15
     3f2:	0f 93       	push	r16
     3f4:	1f 93       	push	r17
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	b6 2e       	mov	r11, r22
     3fc:	6a 01       	movw	r12, r20
     3fe:	e9 01       	movw	r28, r18
	char ix;
	char cy;
	unsigned int  frequency,duty_cycle;

	ix = toupper(SELECT1);
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	0e 94 53 08 	call	0x10a6	; 0x10a6 <toupper>
     406:	18 2f       	mov	r17, r24
	cy = toupper(SELECT2);
     408:	8b 2d       	mov	r24, r11
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	0e 94 53 08 	call	0x10a6	; 0x10a6 <toupper>
     410:	b8 2e       	mov	r11, r24

	frequency = (FCLK / (2*f) );	//1 is selected as presclar
     412:	cc 0c       	add	r12, r12
     414:	dd 1c       	adc	r13, r13
     416:	ee 24       	eor	r14, r14
     418:	ff 24       	eor	r15, r15
     41a:	60 e0       	ldi	r22, 0x00	; 0
     41c:	70 e0       	ldi	r23, 0x00	; 0
     41e:	81 ee       	ldi	r24, 0xE1	; 225
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	a7 01       	movw	r20, r14
     424:	96 01       	movw	r18, r12
     426:	0e 94 31 08 	call	0x1062	; 0x1062 <__udivmodsi4>

	if(ix == '1')
     42a:	11 33       	cpi	r17, 0x31	; 49
     42c:	09 f0       	breq	.+2      	; 0x430 <PWM+0x48>
     42e:	6f c0       	rjmp	.+222    	; 0x50e <PWM+0x126>
	{

		ICR1 = frequency;
     430:	30 93 87 00 	sts	0x0087, r19
     434:	20 93 86 00 	sts	0x0086, r18
		duty_cycle = compute_duty_cycle(dc,ix);
     438:	ce 01       	movw	r24, r28
     43a:	61 e3       	ldi	r22, 0x31	; 49
     43c:	0e 94 91 00 	call	0x122	; 0x122 <compute_duty_cycle>
     440:	9c 01       	movw	r18, r24

		TCCR1A = 0xA8;
     442:	88 ea       	ldi	r24, 0xA8	; 168
     444:	80 93 80 00 	sts	0x0080, r24
		TCCR1B = 0x11;
     448:	81 e1       	ldi	r24, 0x11	; 17
     44a:	80 93 81 00 	sts	0x0081, r24

		if(cy == 'A')
     44e:	81 e4       	ldi	r24, 0x41	; 65
     450:	b8 16       	cp	r11, r24
     452:	f9 f4       	brne	.+62     	; 0x492 <PWM+0xaa>
		  {
		   SETBIT(DDRB,BIT(5));
     454:	25 9a       	sbi	0x04, 5	; 4
		   OCR1A = duty_cycle;
     456:	30 93 89 00 	sts	0x0089, r19
     45a:	20 93 88 00 	sts	0x0088, r18
		   SETBIT(DDRL,BIT(2));		   
     45e:	80 91 0a 01 	lds	r24, 0x010A
     462:	84 60       	ori	r24, 0x04	; 4
     464:	80 93 0a 01 	sts	0x010A, r24
		   if (bit == CLEAR)
     468:	00 23       	and	r16, r16
     46a:	21 f4       	brne	.+8      	; 0x474 <PWM+0x8c>
		   {
			   CLEARBIT(PORTL,BIT(2));
     46c:	80 91 0b 01 	lds	r24, 0x010B
     470:	8b 7f       	andi	r24, 0xFB	; 251
     472:	05 c0       	rjmp	.+10     	; 0x47e <PWM+0x96>
		   }
		   else if (bit == SET)
     474:	01 30       	cpi	r16, 0x01	; 1
     476:	31 f4       	brne	.+12     	; 0x484 <PWM+0x9c>
		   {
			   SETBIT(PORTL,BIT(2));
     478:	80 91 0b 01 	lds	r24, 0x010B
     47c:	84 60       	ori	r24, 0x04	; 4
     47e:	80 93 0b 01 	sts	0x010B, r24
     482:	7d c1       	rjmp	.+762    	; 0x77e <PWM+0x396>
		   }
		   else if (bit == TOGGLE)
     484:	02 30       	cpi	r16, 0x02	; 2
     486:	09 f0       	breq	.+2      	; 0x48a <PWM+0xa2>
     488:	7a c1       	rjmp	.+756    	; 0x77e <PWM+0x396>
		   {
			   TOGGLEBIT(PORTL,BIT(2));
     48a:	80 91 0b 01 	lds	r24, 0x010B
     48e:	94 e0       	ldi	r25, 0x04	; 4
     490:	1f c0       	rjmp	.+62     	; 0x4d0 <PWM+0xe8>
		   }
		  }		
		else if(cy == 'B')
     492:	82 e4       	ldi	r24, 0x42	; 66
     494:	b8 16       	cp	r11, r24
     496:	f1 f4       	brne	.+60     	; 0x4d4 <PWM+0xec>
		  {
		   SETBIT(DDRB,BIT(6));
     498:	26 9a       	sbi	0x04, 6	; 4
		   OCR1B = duty_cycle;
     49a:	30 93 8b 00 	sts	0x008B, r19
     49e:	20 93 8a 00 	sts	0x008A, r18
		   SETBIT(DDRL,BIT(6));
     4a2:	80 91 0a 01 	lds	r24, 0x010A
     4a6:	80 64       	ori	r24, 0x40	; 64
     4a8:	80 93 0a 01 	sts	0x010A, r24
		   if (bit == CLEAR)
     4ac:	00 23       	and	r16, r16
     4ae:	21 f4       	brne	.+8      	; 0x4b8 <PWM+0xd0>
		   {
			   CLEARBIT(PORTL,BIT(6));
     4b0:	80 91 0b 01 	lds	r24, 0x010B
     4b4:	8f 7b       	andi	r24, 0xBF	; 191
     4b6:	e3 cf       	rjmp	.-58     	; 0x47e <PWM+0x96>
		   }
		   else if (bit == SET)
     4b8:	01 30       	cpi	r16, 0x01	; 1
     4ba:	21 f4       	brne	.+8      	; 0x4c4 <PWM+0xdc>
		   {
			   SETBIT(PORTL,BIT(6));
     4bc:	80 91 0b 01 	lds	r24, 0x010B
     4c0:	80 64       	ori	r24, 0x40	; 64
     4c2:	dd cf       	rjmp	.-70     	; 0x47e <PWM+0x96>
		   }
		   else if (bit == TOGGLE)
     4c4:	02 30       	cpi	r16, 0x02	; 2
     4c6:	09 f0       	breq	.+2      	; 0x4ca <PWM+0xe2>
     4c8:	5a c1       	rjmp	.+692    	; 0x77e <PWM+0x396>
		   {
			   TOGGLEBIT(PORTL,BIT(6));
     4ca:	80 91 0b 01 	lds	r24, 0x010B
     4ce:	90 e4       	ldi	r25, 0x40	; 64
     4d0:	89 27       	eor	r24, r25
     4d2:	d5 cf       	rjmp	.-86     	; 0x47e <PWM+0x96>
		   }
		  }
		else
		  {
		   SETBIT(DDRB,BIT(7));
     4d4:	27 9a       	sbi	0x04, 7	; 4
		   OCR1C = duty_cycle;
     4d6:	30 93 8d 00 	sts	0x008D, r19
     4da:	20 93 8c 00 	sts	0x008C, r18
		   
		   		   SETBIT(DDRL,BIT(7));
     4de:	80 91 0a 01 	lds	r24, 0x010A
     4e2:	80 68       	ori	r24, 0x80	; 128
     4e4:	80 93 0a 01 	sts	0x010A, r24
		   		   if (bit == CLEAR)
     4e8:	00 23       	and	r16, r16
     4ea:	21 f4       	brne	.+8      	; 0x4f4 <PWM+0x10c>
		   		   {
			   		   CLEARBIT(PORTL,BIT(7));
     4ec:	80 91 0b 01 	lds	r24, 0x010B
     4f0:	8f 77       	andi	r24, 0x7F	; 127
     4f2:	c5 cf       	rjmp	.-118    	; 0x47e <PWM+0x96>
		   		   }
		   		   else if (bit == SET)
     4f4:	01 30       	cpi	r16, 0x01	; 1
     4f6:	21 f4       	brne	.+8      	; 0x500 <PWM+0x118>
		   		   {
			   		   SETBIT(PORTL,BIT(7));
     4f8:	80 91 0b 01 	lds	r24, 0x010B
     4fc:	80 68       	ori	r24, 0x80	; 128
     4fe:	bf cf       	rjmp	.-130    	; 0x47e <PWM+0x96>
		   		   }
		   		   else if (bit == TOGGLE)
     500:	02 30       	cpi	r16, 0x02	; 2
     502:	09 f0       	breq	.+2      	; 0x506 <PWM+0x11e>
     504:	3c c1       	rjmp	.+632    	; 0x77e <PWM+0x396>
		   		   {
			   		   TOGGLEBIT(PORTL,BIT(7));
     506:	80 91 0b 01 	lds	r24, 0x010B
     50a:	80 58       	subi	r24, 0x80	; 128
     50c:	b8 cf       	rjmp	.-144    	; 0x47e <PWM+0x96>
		   		   }
		  }	
	}

	if(ix == '3')
     50e:	13 33       	cpi	r17, 0x33	; 51
     510:	09 f0       	breq	.+2      	; 0x514 <PWM+0x12c>
     512:	65 c0       	rjmp	.+202    	; 0x5de <PWM+0x1f6>
	{
		TCCR3A = 0xA8;
     514:	88 ea       	ldi	r24, 0xA8	; 168
     516:	80 93 90 00 	sts	0x0090, r24
		TCCR3B = 0x11;
     51a:	81 e1       	ldi	r24, 0x11	; 17
     51c:	80 93 91 00 	sts	0x0091, r24
		
		ICR3 = frequency;
     520:	30 93 97 00 	sts	0x0097, r19
     524:	20 93 96 00 	sts	0x0096, r18
		duty_cycle = compute_duty_cycle(dc,ix);
     528:	ce 01       	movw	r24, r28
     52a:	63 e3       	ldi	r22, 0x33	; 51
     52c:	0e 94 91 00 	call	0x122	; 0x122 <compute_duty_cycle>
		
 		
		if(cy == 'A')
     530:	21 e4       	ldi	r18, 0x41	; 65
     532:	b2 16       	cp	r11, r18
     534:	01 f5       	brne	.+64     	; 0x576 <PWM+0x18e>
		  { 
			   SETBIT(DDRE,BIT(3));
     536:	6b 9a       	sbi	0x0d, 3	; 13
			   OCR3A = duty_cycle;
     538:	90 93 99 00 	sts	0x0099, r25
     53c:	80 93 98 00 	sts	0x0098, r24
			   
			   	SETBIT(DDRH,BIT(6));
     540:	80 91 01 01 	lds	r24, 0x0101
     544:	80 64       	ori	r24, 0x40	; 64
     546:	80 93 01 01 	sts	0x0101, r24
			   	if (bit == CLEAR)
     54a:	00 23       	and	r16, r16
     54c:	21 f4       	brne	.+8      	; 0x556 <PWM+0x16e>
			   	{
				   	CLEARBIT(PORTH,BIT(6));
     54e:	80 91 02 01 	lds	r24, 0x0102
     552:	8f 7b       	andi	r24, 0xBF	; 191
     554:	05 c0       	rjmp	.+10     	; 0x560 <PWM+0x178>
			   	}
			   	else if (bit == SET)
     556:	01 30       	cpi	r16, 0x01	; 1
     558:	31 f4       	brne	.+12     	; 0x566 <PWM+0x17e>
			   	{
				   	SETBIT(PORTH,BIT(6));
     55a:	80 91 02 01 	lds	r24, 0x0102
     55e:	80 64       	ori	r24, 0x40	; 64
     560:	80 93 02 01 	sts	0x0102, r24
     564:	0c c1       	rjmp	.+536    	; 0x77e <PWM+0x396>
			   	}
			   	else if (bit == TOGGLE)
     566:	02 30       	cpi	r16, 0x02	; 2
     568:	09 f0       	breq	.+2      	; 0x56c <PWM+0x184>
     56a:	09 c1       	rjmp	.+530    	; 0x77e <PWM+0x396>
			   	{
				   	TOGGLEBIT(PORTH,BIT(6));
     56c:	80 91 02 01 	lds	r24, 0x0102
     570:	90 e4       	ldi	r25, 0x40	; 64
     572:	89 27       	eor	r24, r25
     574:	f5 cf       	rjmp	.-22     	; 0x560 <PWM+0x178>
			   	}
		  }		
		else if(cy == 'B')
     576:	22 e4       	ldi	r18, 0x42	; 66
     578:	b2 16       	cp	r11, r18
     57a:	e9 f4       	brne	.+58     	; 0x5b6 <PWM+0x1ce>
		  {
			   SETBIT(DDRE,BIT(4));
     57c:	6c 9a       	sbi	0x0d, 4	; 13
			   OCR3B = duty_cycle;
     57e:	90 93 9b 00 	sts	0x009B, r25
     582:	80 93 9a 00 	sts	0x009A, r24
			   
			   	SETBIT(DDRL,BIT(7));
     586:	80 91 0a 01 	lds	r24, 0x010A
     58a:	80 68       	ori	r24, 0x80	; 128
     58c:	80 93 0a 01 	sts	0x010A, r24
			   	if (bit == CLEAR)
     590:	00 23       	and	r16, r16
     592:	21 f4       	brne	.+8      	; 0x59c <PWM+0x1b4>
			   	{
				   	CLEARBIT(PORTH,BIT(7));
     594:	80 91 02 01 	lds	r24, 0x0102
     598:	8f 77       	andi	r24, 0x7F	; 127
     59a:	e2 cf       	rjmp	.-60     	; 0x560 <PWM+0x178>
			   	}
			   	else if (bit == SET)
     59c:	01 30       	cpi	r16, 0x01	; 1
     59e:	21 f4       	brne	.+8      	; 0x5a8 <PWM+0x1c0>
			   	{
				   	SETBIT(PORTH,BIT(7));
     5a0:	80 91 02 01 	lds	r24, 0x0102
     5a4:	80 68       	ori	r24, 0x80	; 128
     5a6:	dc cf       	rjmp	.-72     	; 0x560 <PWM+0x178>
			   	}
			   	else if (bit == TOGGLE)
     5a8:	02 30       	cpi	r16, 0x02	; 2
     5aa:	09 f0       	breq	.+2      	; 0x5ae <PWM+0x1c6>
     5ac:	e8 c0       	rjmp	.+464    	; 0x77e <PWM+0x396>
			   	{
				   	TOGGLEBIT(PORTH,BIT(7));
     5ae:	80 91 02 01 	lds	r24, 0x0102
     5b2:	80 58       	subi	r24, 0x80	; 128
     5b4:	d5 cf       	rjmp	.-86     	; 0x560 <PWM+0x178>
			   	}
		  }
		else
		  {
			   SETBIT(DDRE,BIT(5));
     5b6:	6d 9a       	sbi	0x0d, 5	; 13
			   OCR3C = duty_cycle;
     5b8:	90 93 9d 00 	sts	0x009D, r25
     5bc:	80 93 9c 00 	sts	0x009C, r24
			   
		   		SETBIT(DDRG,BIT(3));
     5c0:	9b 9a       	sbi	0x13, 3	; 19
		   		if (bit == CLEAR)
     5c2:	00 23       	and	r16, r16
     5c4:	11 f4       	brne	.+4      	; 0x5ca <PWM+0x1e2>
		   		{
			   		CLEARBIT(PORTG,BIT(3));
     5c6:	a3 98       	cbi	0x14, 3	; 20
     5c8:	da c0       	rjmp	.+436    	; 0x77e <PWM+0x396>
		   		}
		   		else if (bit == SET)
     5ca:	01 30       	cpi	r16, 0x01	; 1
     5cc:	11 f4       	brne	.+4      	; 0x5d2 <PWM+0x1ea>
		   		{
			   		SETBIT(PORTG,BIT(3));
     5ce:	a3 9a       	sbi	0x14, 3	; 20
     5d0:	d6 c0       	rjmp	.+428    	; 0x77e <PWM+0x396>
		   		}
		   		else if (bit == TOGGLE)
     5d2:	02 30       	cpi	r16, 0x02	; 2
     5d4:	09 f0       	breq	.+2      	; 0x5d8 <PWM+0x1f0>
     5d6:	d3 c0       	rjmp	.+422    	; 0x77e <PWM+0x396>
		   		{
			   		TOGGLEBIT(PORTG,BIT(3));
     5d8:	84 b3       	in	r24, 0x14	; 20
     5da:	98 e0       	ldi	r25, 0x08	; 8
     5dc:	ce c0       	rjmp	.+412    	; 0x77a <PWM+0x392>
		   		}			   			   
		  }			  
	}

	if(ix == '4')
     5de:	14 33       	cpi	r17, 0x34	; 52
     5e0:	09 f0       	breq	.+2      	; 0x5e4 <PWM+0x1fc>
     5e2:	6f c0       	rjmp	.+222    	; 0x6c2 <PWM+0x2da>
	{	
		ICR4 = frequency;
     5e4:	30 93 a7 00 	sts	0x00A7, r19
     5e8:	20 93 a6 00 	sts	0x00A6, r18
		duty_cycle = compute_duty_cycle(dc,ix);		
     5ec:	ce 01       	movw	r24, r28
     5ee:	64 e3       	ldi	r22, 0x34	; 52
     5f0:	0e 94 91 00 	call	0x122	; 0x122 <compute_duty_cycle>
     5f4:	9c 01       	movw	r18, r24
 		TCCR4A = 0xA8;
     5f6:	88 ea       	ldi	r24, 0xA8	; 168
     5f8:	80 93 a0 00 	sts	0x00A0, r24
		TCCR4B = 0x11;
     5fc:	81 e1       	ldi	r24, 0x11	; 17
     5fe:	80 93 a1 00 	sts	0x00A1, r24
		if(cy == 'A')
     602:	81 e4       	ldi	r24, 0x41	; 65
     604:	b8 16       	cp	r11, r24
     606:	c1 f4       	brne	.+48     	; 0x638 <PWM+0x250>
		  { 
			SETBIT(DDRH,BIT(3));
     608:	80 91 01 01 	lds	r24, 0x0101
     60c:	88 60       	ori	r24, 0x08	; 8
     60e:	80 93 01 01 	sts	0x0101, r24
			OCR4A = duty_cycle;
     612:	30 93 a9 00 	sts	0x00A9, r19
     616:	20 93 a8 00 	sts	0x00A8, r18
			
				SETBIT(DDRG,BIT(4));
     61a:	9c 9a       	sbi	0x13, 4	; 19
				if (bit == CLEAR)
     61c:	00 23       	and	r16, r16
     61e:	11 f4       	brne	.+4      	; 0x624 <PWM+0x23c>
				{
					CLEARBIT(PORTG,BIT(4));
     620:	a4 98       	cbi	0x14, 4	; 20
     622:	ad c0       	rjmp	.+346    	; 0x77e <PWM+0x396>
				}
				else if (bit == SET)
     624:	01 30       	cpi	r16, 0x01	; 1
     626:	11 f4       	brne	.+4      	; 0x62c <PWM+0x244>
				{
					SETBIT(PORTG,BIT(4));
     628:	a4 9a       	sbi	0x14, 4	; 20
     62a:	a9 c0       	rjmp	.+338    	; 0x77e <PWM+0x396>
				}
				else if (bit == TOGGLE)
     62c:	02 30       	cpi	r16, 0x02	; 2
     62e:	09 f0       	breq	.+2      	; 0x632 <PWM+0x24a>
     630:	a6 c0       	rjmp	.+332    	; 0x77e <PWM+0x396>
				{
					TOGGLEBIT(PORTG,BIT(4));
     632:	84 b3       	in	r24, 0x14	; 20
     634:	90 e1       	ldi	r25, 0x10	; 16
     636:	a1 c0       	rjmp	.+322    	; 0x77a <PWM+0x392>
				}
		  }		
		else if(cy == 'B')
     638:	82 e4       	ldi	r24, 0x42	; 66
     63a:	b8 16       	cp	r11, r24
     63c:	09 f5       	brne	.+66     	; 0x680 <PWM+0x298>
		  {
			SETBIT(DDRH,BIT(4));
     63e:	80 91 01 01 	lds	r24, 0x0101
     642:	80 61       	ori	r24, 0x10	; 16
     644:	80 93 01 01 	sts	0x0101, r24
		   OCR4B = duty_cycle;
     648:	30 93 ab 00 	sts	0x00AB, r19
     64c:	20 93 aa 00 	sts	0x00AA, r18
		   
		   		SETBIT(DDRL,BIT(0));
     650:	80 91 0a 01 	lds	r24, 0x010A
     654:	81 60       	ori	r24, 0x01	; 1
     656:	80 93 0a 01 	sts	0x010A, r24
		   		if (bit == CLEAR)
     65a:	00 23       	and	r16, r16
     65c:	21 f4       	brne	.+8      	; 0x666 <PWM+0x27e>
		   		{
			   		CLEARBIT(PORTL,BIT(0));
     65e:	80 91 0b 01 	lds	r24, 0x010B
     662:	8e 7f       	andi	r24, 0xFE	; 254
     664:	0c cf       	rjmp	.-488    	; 0x47e <PWM+0x96>
		   		}
		   		else if (bit == SET)
     666:	01 30       	cpi	r16, 0x01	; 1
     668:	21 f4       	brne	.+8      	; 0x672 <PWM+0x28a>
		   		{
			   		SETBIT(PORTL,BIT(0));
     66a:	80 91 0b 01 	lds	r24, 0x010B
     66e:	81 60       	ori	r24, 0x01	; 1
     670:	06 cf       	rjmp	.-500    	; 0x47e <PWM+0x96>
		   		}
		   		else if (bit == TOGGLE)
     672:	02 30       	cpi	r16, 0x02	; 2
     674:	09 f0       	breq	.+2      	; 0x678 <PWM+0x290>
     676:	83 c0       	rjmp	.+262    	; 0x77e <PWM+0x396>
		   		{
			   		TOGGLEBIT(PORTL,BIT(0));
     678:	80 91 0b 01 	lds	r24, 0x010B
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	28 cf       	rjmp	.-432    	; 0x4d0 <PWM+0xe8>
		   		}
		  }
		else
		  {
			  SETBIT(DDRH,BIT(5));
     680:	80 91 01 01 	lds	r24, 0x0101
     684:	80 62       	ori	r24, 0x20	; 32
     686:	80 93 01 01 	sts	0x0101, r24
		      OCR4C = duty_cycle;
     68a:	30 93 ad 00 	sts	0x00AD, r19
     68e:	20 93 ac 00 	sts	0x00AC, r18
			  
			  	SETBIT(DDRL,BIT(1));
     692:	80 91 0a 01 	lds	r24, 0x010A
     696:	82 60       	ori	r24, 0x02	; 2
     698:	80 93 0a 01 	sts	0x010A, r24
			  	if (bit == CLEAR)
     69c:	00 23       	and	r16, r16
     69e:	21 f4       	brne	.+8      	; 0x6a8 <PWM+0x2c0>
			  	{
				  	CLEARBIT(PORTL,BIT(1));
     6a0:	80 91 0b 01 	lds	r24, 0x010B
     6a4:	8d 7f       	andi	r24, 0xFD	; 253
     6a6:	eb ce       	rjmp	.-554    	; 0x47e <PWM+0x96>
			  	}
			  	else if (bit == SET)
     6a8:	01 30       	cpi	r16, 0x01	; 1
     6aa:	21 f4       	brne	.+8      	; 0x6b4 <PWM+0x2cc>
			  	{
				  	SETBIT(PORTL,BIT(1));
     6ac:	80 91 0b 01 	lds	r24, 0x010B
     6b0:	82 60       	ori	r24, 0x02	; 2
     6b2:	e5 ce       	rjmp	.-566    	; 0x47e <PWM+0x96>
			  	}
			  	else if (bit == TOGGLE)
     6b4:	02 30       	cpi	r16, 0x02	; 2
     6b6:	09 f0       	breq	.+2      	; 0x6ba <PWM+0x2d2>
     6b8:	62 c0       	rjmp	.+196    	; 0x77e <PWM+0x396>
			  	{
				  	TOGGLEBIT(PORTL,BIT(1));
     6ba:	80 91 0b 01 	lds	r24, 0x010B
     6be:	80 27       	eor	r24, r16
     6c0:	de ce       	rjmp	.-580    	; 0x47e <PWM+0x96>
			  	}
		  }		  
	}

	if(ix == '5')
     6c2:	15 33       	cpi	r17, 0x35	; 53
     6c4:	09 f0       	breq	.+2      	; 0x6c8 <PWM+0x2e0>
     6c6:	5b c0       	rjmp	.+182    	; 0x77e <PWM+0x396>
	{
		ICR5 = frequency;
     6c8:	30 93 27 01 	sts	0x0127, r19
     6cc:	20 93 26 01 	sts	0x0126, r18
		duty_cycle = compute_duty_cycle(dc,ix);
     6d0:	ce 01       	movw	r24, r28
     6d2:	65 e3       	ldi	r22, 0x35	; 53
     6d4:	0e 94 91 00 	call	0x122	; 0x122 <compute_duty_cycle>
     6d8:	9c 01       	movw	r18, r24
 		TCCR5A = 0xA8;
     6da:	88 ea       	ldi	r24, 0xA8	; 168
     6dc:	80 93 20 01 	sts	0x0120, r24
		TCCR5B = 0x11;
     6e0:	81 e1       	ldi	r24, 0x11	; 17
     6e2:	80 93 21 01 	sts	0x0121, r24
		if(cy == 'A')
     6e6:	81 e4       	ldi	r24, 0x41	; 65
     6e8:	b8 16       	cp	r11, r24
     6ea:	b9 f4       	brne	.+46     	; 0x71a <PWM+0x332>
		  { 
			SETBIT(DDRL,BIT(3));
     6ec:	80 91 0a 01 	lds	r24, 0x010A
     6f0:	88 60       	ori	r24, 0x08	; 8
     6f2:	80 93 0a 01 	sts	0x010A, r24
		   OCR5A = duty_cycle;
     6f6:	30 93 29 01 	sts	0x0129, r19
     6fa:	20 93 28 01 	sts	0x0128, r18
		   
		   	SETBIT(DDRG,BIT(0));
     6fe:	98 9a       	sbi	0x13, 0	; 19
		   	if (bit == CLEAR)
     700:	00 23       	and	r16, r16
     702:	11 f4       	brne	.+4      	; 0x708 <PWM+0x320>
		   	{
			   	CLEARBIT(PORTG,BIT(0));
     704:	a0 98       	cbi	0x14, 0	; 20
     706:	3b c0       	rjmp	.+118    	; 0x77e <PWM+0x396>
		   	}
		   	else if (bit == SET)
     708:	01 30       	cpi	r16, 0x01	; 1
     70a:	11 f4       	brne	.+4      	; 0x710 <PWM+0x328>
		   	{
			   	SETBIT(PORTG,BIT(0));
     70c:	a0 9a       	sbi	0x14, 0	; 20
     70e:	37 c0       	rjmp	.+110    	; 0x77e <PWM+0x396>
		   	}
		   	else if (bit == TOGGLE)
     710:	02 30       	cpi	r16, 0x02	; 2
     712:	a9 f5       	brne	.+106    	; 0x77e <PWM+0x396>
		   	{
			   	TOGGLEBIT(PORTG,BIT(0));
     714:	84 b3       	in	r24, 0x14	; 20
     716:	91 e0       	ldi	r25, 0x01	; 1
     718:	30 c0       	rjmp	.+96     	; 0x77a <PWM+0x392>
		   	}
		  }		
		else if(cy == 'B')
     71a:	82 e4       	ldi	r24, 0x42	; 66
     71c:	b8 16       	cp	r11, r24
     71e:	b9 f4       	brne	.+46     	; 0x74e <PWM+0x366>
		  {
			  SETBIT(DDRL,BIT(4));
     720:	80 91 0a 01 	lds	r24, 0x010A
     724:	80 61       	ori	r24, 0x10	; 16
     726:	80 93 0a 01 	sts	0x010A, r24
		   OCR5B = duty_cycle;
     72a:	30 93 2b 01 	sts	0x012B, r19
     72e:	20 93 2a 01 	sts	0x012A, r18
		   
		   			  	SETBIT(DDRG,BIT(1));
     732:	99 9a       	sbi	0x13, 1	; 19
		   			  	if (bit == CLEAR)
     734:	00 23       	and	r16, r16
     736:	11 f4       	brne	.+4      	; 0x73c <PWM+0x354>
		   			  	{
			   			  	CLEARBIT(PORTG,BIT(1));
     738:	a1 98       	cbi	0x14, 1	; 20
     73a:	21 c0       	rjmp	.+66     	; 0x77e <PWM+0x396>
		   			  	}
		   			  	else if (bit == SET)
     73c:	01 30       	cpi	r16, 0x01	; 1
     73e:	11 f4       	brne	.+4      	; 0x744 <PWM+0x35c>
		   			  	{
			   			  	SETBIT(PORTG,BIT(1));
     740:	a1 9a       	sbi	0x14, 1	; 20
     742:	1d c0       	rjmp	.+58     	; 0x77e <PWM+0x396>
		   			  	}
		   			  	else if (bit == TOGGLE)
     744:	02 30       	cpi	r16, 0x02	; 2
     746:	d9 f4       	brne	.+54     	; 0x77e <PWM+0x396>
		   			  	{
			   			  	TOGGLEBIT(PORTG,BIT(1));
     748:	84 b3       	in	r24, 0x14	; 20
     74a:	80 27       	eor	r24, r16
     74c:	17 c0       	rjmp	.+46     	; 0x77c <PWM+0x394>
		   			  	}
		  }
		else
		  {
			  SETBIT(DDRL,BIT(5));
     74e:	80 91 0a 01 	lds	r24, 0x010A
     752:	80 62       	ori	r24, 0x20	; 32
     754:	80 93 0a 01 	sts	0x010A, r24
			  OCR5C = duty_cycle;
     758:	30 93 2d 01 	sts	0x012D, r19
     75c:	20 93 2c 01 	sts	0x012C, r18
			  
			  	SETBIT(DDRG,BIT(2));
     760:	9a 9a       	sbi	0x13, 2	; 19
			  	if (bit == CLEAR)
     762:	00 23       	and	r16, r16
     764:	11 f4       	brne	.+4      	; 0x76a <PWM+0x382>
			  	{
				  	CLEARBIT(PORTG,BIT(2));
     766:	a2 98       	cbi	0x14, 2	; 20
     768:	0a c0       	rjmp	.+20     	; 0x77e <PWM+0x396>
			  	}
			  	else if (bit == SET)
     76a:	01 30       	cpi	r16, 0x01	; 1
     76c:	11 f4       	brne	.+4      	; 0x772 <PWM+0x38a>
			  	{
				  	SETBIT(PORTG,BIT(2));
     76e:	a2 9a       	sbi	0x14, 2	; 20
     770:	06 c0       	rjmp	.+12     	; 0x77e <PWM+0x396>
			  	}
			  	else if (bit == TOGGLE)
     772:	02 30       	cpi	r16, 0x02	; 2
     774:	21 f4       	brne	.+8      	; 0x77e <PWM+0x396>
			  	{
				  	TOGGLEBIT(PORTG,BIT(2));
     776:	84 b3       	in	r24, 0x14	; 20
     778:	94 e0       	ldi	r25, 0x04	; 4
     77a:	89 27       	eor	r24, r25
     77c:	84 bb       	out	0x14, r24	; 20
			  	}
		  }	
	}

}
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	1f 91       	pop	r17
     784:	0f 91       	pop	r16
     786:	ff 90       	pop	r15
     788:	ef 90       	pop	r14
     78a:	df 90       	pop	r13
     78c:	cf 90       	pop	r12
     78e:	bf 90       	pop	r11
     790:	08 95       	ret

00000792 <Pully2Down>:
{
	PWM('5','A',10000,100,CLEAR);
}

void Pully2Down(void)
{
     792:	0f 93       	push	r16
	PWM('5','A',10000,100,SET);
     794:	85 e3       	ldi	r24, 0x35	; 53
     796:	61 e4       	ldi	r22, 0x41	; 65
     798:	40 e1       	ldi	r20, 0x10	; 16
     79a:	57 e2       	ldi	r21, 0x27	; 39
     79c:	24 e6       	ldi	r18, 0x64	; 100
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	01 e0       	ldi	r16, 0x01	; 1
     7a2:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <PWM>
}
     7a6:	0f 91       	pop	r16
     7a8:	08 95       	ret

000007aa <Pully2Up>:
{
	PWM('5','A',10000,2,CLEAR);
}

void Pully2Up(void)
{
     7aa:	0f 93       	push	r16
	PWM('5','A',10000,100,CLEAR);
     7ac:	85 e3       	ldi	r24, 0x35	; 53
     7ae:	61 e4       	ldi	r22, 0x41	; 65
     7b0:	40 e1       	ldi	r20, 0x10	; 16
     7b2:	57 e2       	ldi	r21, 0x27	; 39
     7b4:	24 e6       	ldi	r18, 0x64	; 100
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	00 e0       	ldi	r16, 0x00	; 0
     7ba:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <PWM>
}
     7be:	0f 91       	pop	r16
     7c0:	08 95       	ret

000007c2 <Pully2Stop>:
	PWM('4','B',10000,100,SET);
}


void Pully2Stop(void)
{
     7c2:	0f 93       	push	r16
	PWM('5','A',10000,2,CLEAR);
     7c4:	85 e3       	ldi	r24, 0x35	; 53
     7c6:	61 e4       	ldi	r22, 0x41	; 65
     7c8:	40 e1       	ldi	r20, 0x10	; 16
     7ca:	57 e2       	ldi	r21, 0x27	; 39
     7cc:	22 e0       	ldi	r18, 0x02	; 2
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	00 e0       	ldi	r16, 0x00	; 0
     7d2:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <PWM>
}
     7d6:	0f 91       	pop	r16
     7d8:	08 95       	ret

000007da <MainPullyDown>:
{
	PWM('4','B',10000,100,CLEAR);
}

void MainPullyDown(void)
{
     7da:	0f 93       	push	r16
	PWM('4','B',10000,100,SET);
     7dc:	84 e3       	ldi	r24, 0x34	; 52
     7de:	62 e4       	ldi	r22, 0x42	; 66
     7e0:	40 e1       	ldi	r20, 0x10	; 16
     7e2:	57 e2       	ldi	r21, 0x27	; 39
     7e4:	24 e6       	ldi	r18, 0x64	; 100
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	01 e0       	ldi	r16, 0x01	; 1
     7ea:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <PWM>
}
     7ee:	0f 91       	pop	r16
     7f0:	08 95       	ret

000007f2 <MainPullyUp>:
{
	PWM('4','B',10000,10,CLEAR);
}

void MainPullyUp(void)
{
     7f2:	0f 93       	push	r16
	PWM('4','B',10000,100,CLEAR);
     7f4:	84 e3       	ldi	r24, 0x34	; 52
     7f6:	62 e4       	ldi	r22, 0x42	; 66
     7f8:	40 e1       	ldi	r20, 0x10	; 16
     7fa:	57 e2       	ldi	r21, 0x27	; 39
     7fc:	24 e6       	ldi	r18, 0x64	; 100
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	00 e0       	ldi	r16, 0x00	; 0
     802:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <PWM>
}
     806:	0f 91       	pop	r16
     808:	08 95       	ret

0000080a <MainPullyStop>:
	PWM('3','B',10000,20,CLEAR);
}


void MainPullyStop(void)
{
     80a:	0f 93       	push	r16
	PWM('4','B',10000,10,CLEAR);
     80c:	84 e3       	ldi	r24, 0x34	; 52
     80e:	62 e4       	ldi	r22, 0x42	; 66
     810:	40 e1       	ldi	r20, 0x10	; 16
     812:	57 e2       	ldi	r21, 0x27	; 39
     814:	2a e0       	ldi	r18, 0x0A	; 10
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	00 e0       	ldi	r16, 0x00	; 0
     81a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <PWM>
}
     81e:	0f 91       	pop	r16
     820:	08 95       	ret

00000822 <RightStop>:
	CLEARBIT(PORTJ,BIT(3));
	PWM('3','B',10000,speed,CLEAR);
}

void RightStop(void)
{	
     822:	0f 93       	push	r16
	SETBIT(PORTJ,BIT(3));
     824:	e5 e0       	ldi	r30, 0x05	; 5
     826:	f1 e0       	ldi	r31, 0x01	; 1
     828:	80 81       	ld	r24, Z
     82a:	88 60       	ori	r24, 0x08	; 8
     82c:	80 83       	st	Z, r24
	CLEARBIT(PORTJ,BIT(2));
     82e:	80 81       	ld	r24, Z
     830:	8b 7f       	andi	r24, 0xFB	; 251
     832:	80 83       	st	Z, r24
	PWM('3','B',10000,20,CLEAR);
     834:	83 e3       	ldi	r24, 0x33	; 51
     836:	62 e4       	ldi	r22, 0x42	; 66
     838:	40 e1       	ldi	r20, 0x10	; 16
     83a:	57 e2       	ldi	r21, 0x27	; 39
     83c:	24 e1       	ldi	r18, 0x14	; 20
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	00 e0       	ldi	r16, 0x00	; 0
     842:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <PWM>
}
     846:	0f 91       	pop	r16
     848:	08 95       	ret

0000084a <RightRev>:
	CLEARBIT(PORTJ,BIT(2));
	PWM('3','B',10000,speed,CLEAR);
}

void RightRev(int speed)
{
     84a:	0f 93       	push	r16
     84c:	9c 01       	movw	r18, r24
	SETBIT(PORTJ,BIT(2));
     84e:	e5 e0       	ldi	r30, 0x05	; 5
     850:	f1 e0       	ldi	r31, 0x01	; 1
     852:	80 81       	ld	r24, Z
     854:	84 60       	ori	r24, 0x04	; 4
     856:	80 83       	st	Z, r24
	CLEARBIT(PORTJ,BIT(3));
     858:	80 81       	ld	r24, Z
     85a:	87 7f       	andi	r24, 0xF7	; 247
     85c:	80 83       	st	Z, r24
	PWM('3','B',10000,speed,CLEAR);
     85e:	83 e3       	ldi	r24, 0x33	; 51
     860:	62 e4       	ldi	r22, 0x42	; 66
     862:	40 e1       	ldi	r20, 0x10	; 16
     864:	57 e2       	ldi	r21, 0x27	; 39
     866:	00 e0       	ldi	r16, 0x00	; 0
     868:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <PWM>
}
     86c:	0f 91       	pop	r16
     86e:	08 95       	ret

00000870 <RightFwd>:
	PWM('3','A',10000,20,CLEAR);
}


void RightFwd(int speed)
{
     870:	0f 93       	push	r16
     872:	9c 01       	movw	r18, r24
	SETBIT(PORTJ,BIT(3));
     874:	e5 e0       	ldi	r30, 0x05	; 5
     876:	f1 e0       	ldi	r31, 0x01	; 1
     878:	80 81       	ld	r24, Z
     87a:	88 60       	ori	r24, 0x08	; 8
     87c:	80 83       	st	Z, r24
	CLEARBIT(PORTJ,BIT(2));
     87e:	80 81       	ld	r24, Z
     880:	8b 7f       	andi	r24, 0xFB	; 251
     882:	80 83       	st	Z, r24
	PWM('3','B',10000,speed,CLEAR);
     884:	83 e3       	ldi	r24, 0x33	; 51
     886:	62 e4       	ldi	r22, 0x42	; 66
     888:	40 e1       	ldi	r20, 0x10	; 16
     88a:	57 e2       	ldi	r21, 0x27	; 39
     88c:	00 e0       	ldi	r16, 0x00	; 0
     88e:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <PWM>
}
     892:	0f 91       	pop	r16
     894:	08 95       	ret

00000896 <LeftStop>:
	CLEARBIT(PORTJ,BIT(0));
	PWM('3','A',10000,speed,CLEAR);
}

void LeftStop(void)
{
     896:	0f 93       	push	r16
	SETBIT(PORTJ,BIT(0));
     898:	e5 e0       	ldi	r30, 0x05	; 5
     89a:	f1 e0       	ldi	r31, 0x01	; 1
     89c:	80 81       	ld	r24, Z
     89e:	81 60       	ori	r24, 0x01	; 1
     8a0:	80 83       	st	Z, r24
	CLEARBIT(PORTJ,BIT(1));
     8a2:	80 81       	ld	r24, Z
     8a4:	8d 7f       	andi	r24, 0xFD	; 253
     8a6:	80 83       	st	Z, r24
	PWM('3','A',10000,20,CLEAR);
     8a8:	83 e3       	ldi	r24, 0x33	; 51
     8aa:	61 e4       	ldi	r22, 0x41	; 65
     8ac:	40 e1       	ldi	r20, 0x10	; 16
     8ae:	57 e2       	ldi	r21, 0x27	; 39
     8b0:	24 e1       	ldi	r18, 0x14	; 20
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	00 e0       	ldi	r16, 0x00	; 0
     8b6:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <PWM>
}
     8ba:	0f 91       	pop	r16
     8bc:	08 95       	ret

000008be <LeftRev>:
	CLEARBIT(PORTJ,BIT(1));
	PWM('3','A',10000,speed,CLEAR);
}

void LeftRev(int speed)
{
     8be:	0f 93       	push	r16
     8c0:	9c 01       	movw	r18, r24
	SETBIT(PORTJ,BIT(1));
     8c2:	e5 e0       	ldi	r30, 0x05	; 5
     8c4:	f1 e0       	ldi	r31, 0x01	; 1
     8c6:	80 81       	ld	r24, Z
     8c8:	82 60       	ori	r24, 0x02	; 2
     8ca:	80 83       	st	Z, r24
	CLEARBIT(PORTJ,BIT(0));
     8cc:	80 81       	ld	r24, Z
     8ce:	8e 7f       	andi	r24, 0xFE	; 254
     8d0:	80 83       	st	Z, r24
	PWM('3','A',10000,speed,CLEAR);
     8d2:	83 e3       	ldi	r24, 0x33	; 51
     8d4:	61 e4       	ldi	r22, 0x41	; 65
     8d6:	40 e1       	ldi	r20, 0x10	; 16
     8d8:	57 e2       	ldi	r21, 0x27	; 39
     8da:	00 e0       	ldi	r16, 0x00	; 0
     8dc:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <PWM>
}
     8e0:	0f 91       	pop	r16
     8e2:	08 95       	ret

000008e4 <LeftFwd>:
{
	PWM('4','A',10000,s,CLEAR);
}

void LeftFwd(int speed)
{
     8e4:	0f 93       	push	r16
     8e6:	9c 01       	movw	r18, r24
	SETBIT(PORTJ,BIT(0));
     8e8:	e5 e0       	ldi	r30, 0x05	; 5
     8ea:	f1 e0       	ldi	r31, 0x01	; 1
     8ec:	80 81       	ld	r24, Z
     8ee:	81 60       	ori	r24, 0x01	; 1
     8f0:	80 83       	st	Z, r24
	CLEARBIT(PORTJ,BIT(1));
     8f2:	80 81       	ld	r24, Z
     8f4:	8d 7f       	andi	r24, 0xFD	; 253
     8f6:	80 83       	st	Z, r24
	PWM('3','A',10000,speed,CLEAR);
     8f8:	83 e3       	ldi	r24, 0x33	; 51
     8fa:	61 e4       	ldi	r22, 0x41	; 65
     8fc:	40 e1       	ldi	r20, 0x10	; 16
     8fe:	57 e2       	ldi	r21, 0x27	; 39
     900:	00 e0       	ldi	r16, 0x00	; 0
     902:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <PWM>
}
     906:	0f 91       	pop	r16
     908:	08 95       	ret

0000090a <ProcessPINA>:
{
	
}

void ProcessPINA( uint8_t data )		// PID + PNEUMATICS (data Switches)
{
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
	if ( !(CHECKBIT(data,BIT(0))) )
     90e:	c8 2f       	mov	r28, r24
     910:	80 fd       	sbrc	r24, 0
     912:	03 c0       	rjmp	.+6      	; 0x91a <ProcessPINA+0x10>
	{
		pid();
     914:	0e 94 3e 01 	call	0x27c	; 0x27c <pid>
     918:	0a c0       	rjmp	.+20     	; 0x92e <ProcessPINA+0x24>
	}
	else if ((CHECKBIT(data,BIT(0))))
	{
		if(PidStarted == 1)
     91a:	80 91 13 02 	lds	r24, 0x0213
     91e:	81 30       	cpi	r24, 0x01	; 1
     920:	31 f4       	brne	.+12     	; 0x92e <ProcessPINA+0x24>
		{
			PidStarted = 0;
     922:	10 92 13 02 	sts	0x0213, r1
			LeftStop();
     926:	0e 94 4b 04 	call	0x896	; 0x896 <LeftStop>
			RightStop();
     92a:	0e 94 11 04 	call	0x822	; 0x822 <RightStop>
		}
	}
	
	
	if ( !(CHECKBIT(data,BIT(1))))
     92e:	c1 fd       	sbrc	r28, 1
     930:	02 c0       	rjmp	.+4      	; 0x936 <ProcessPINA+0x2c>
	{
		ExecuteSeeSaw();
     932:	0e 94 bb 00 	call	0x176	; 0x176 <ExecuteSeeSaw>
	}
	
	if (!(CHECKBIT(data,BIT(2))))
     936:	c2 fd       	sbrc	r28, 2
     938:	56 c0       	rjmp	.+172    	; 0x9e6 <ProcessPINA+0xdc>
	{
		//lcd_cmd(LINE1);
		//lcd_showvalue(TCNT1);
		//lcd_string("  ");
		
		EncoderStarted = 1;
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	80 93 1d 02 	sts	0x021D, r24
		
		if(TCNT1 <= 200)
     940:	80 91 84 00 	lds	r24, 0x0084
     944:	90 91 85 00 	lds	r25, 0x0085
     948:	89 3c       	cpi	r24, 0xC9	; 201
     94a:	91 05       	cpc	r25, r1
     94c:	40 f4       	brcc	.+16     	; 0x95e <ProcessPINA+0x54>
		{
			LeftFwd(30);
     94e:	8e e1       	ldi	r24, 0x1E	; 30
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	0e 94 72 04 	call	0x8e4	; 0x8e4 <LeftFwd>
			RightFwd(30);
     956:	8e e1       	ldi	r24, 0x1E	; 30
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	0e 94 38 04 	call	0x870	; 0x870 <RightFwd>
		}
		
		if(TCNT1 >=200 && TCNT1 <= 450)
     95e:	80 91 84 00 	lds	r24, 0x0084
     962:	90 91 85 00 	lds	r25, 0x0085
     966:	88 3c       	cpi	r24, 0xC8	; 200
     968:	91 05       	cpc	r25, r1
     96a:	78 f0       	brcs	.+30     	; 0x98a <ProcessPINA+0x80>
     96c:	80 91 84 00 	lds	r24, 0x0084
     970:	90 91 85 00 	lds	r25, 0x0085
     974:	83 5c       	subi	r24, 0xC3	; 195
     976:	91 40       	sbci	r25, 0x01	; 1
     978:	40 f4       	brcc	.+16     	; 0x98a <ProcessPINA+0x80>
		{
			RightFwd(68);
     97a:	84 e4       	ldi	r24, 0x44	; 68
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	0e 94 38 04 	call	0x870	; 0x870 <RightFwd>
			LeftFwd(35);
     982:	83 e2       	ldi	r24, 0x23	; 35
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	0e 94 72 04 	call	0x8e4	; 0x8e4 <LeftFwd>
		}
		
		if(TCNT1 >= 450 && TCNT1 <= 1024)
     98a:	80 91 84 00 	lds	r24, 0x0084
     98e:	90 91 85 00 	lds	r25, 0x0085
     992:	82 5c       	subi	r24, 0xC2	; 194
     994:	91 40       	sbci	r25, 0x01	; 1
     996:	f8 f0       	brcs	.+62     	; 0x9d6 <ProcessPINA+0xcc>
     998:	80 91 84 00 	lds	r24, 0x0084
     99c:	90 91 85 00 	lds	r25, 0x0085
     9a0:	81 50       	subi	r24, 0x01	; 1
     9a2:	94 40       	sbci	r25, 0x04	; 4
     9a4:	c0 f4       	brcc	.+48     	; 0x9d6 <ProcessPINA+0xcc>
		{
			LeftFwd(44 + TCNT1/20);
     9a6:	80 91 84 00 	lds	r24, 0x0084
     9aa:	90 91 85 00 	lds	r25, 0x0085
     9ae:	64 e1       	ldi	r22, 0x14	; 20
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	0e 94 1d 08 	call	0x103a	; 0x103a <__udivmodhi4>
     9b6:	cb 01       	movw	r24, r22
     9b8:	8c 96       	adiw	r24, 0x2c	; 44
     9ba:	0e 94 72 04 	call	0x8e4	; 0x8e4 <LeftFwd>
			RightFwd(58 + TCNT1/55);
     9be:	80 91 84 00 	lds	r24, 0x0084
     9c2:	90 91 85 00 	lds	r25, 0x0085
     9c6:	67 e3       	ldi	r22, 0x37	; 55
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	0e 94 1d 08 	call	0x103a	; 0x103a <__udivmodhi4>
     9ce:	cb 01       	movw	r24, r22
     9d0:	ca 96       	adiw	r24, 0x3a	; 58
     9d2:	0e 94 38 04 	call	0x870	; 0x870 <RightFwd>
		}
	
		
		if (TCNT1 >= 1024)
     9d6:	80 91 84 00 	lds	r24, 0x0084
     9da:	90 91 85 00 	lds	r25, 0x0085
     9de:	80 50       	subi	r24, 0x00	; 0
     9e0:	94 40       	sbci	r25, 0x04	; 4
     9e2:	58 f0       	brcs	.+22     	; 0x9fa <ProcessPINA+0xf0>
     9e4:	06 c0       	rjmp	.+12     	; 0x9f2 <ProcessPINA+0xe8>
		
*/
	}
	if ((CHECKBIT(data,BIT(2))))
	{
		if (EncoderStarted == 1)
     9e6:	80 91 1d 02 	lds	r24, 0x021D
     9ea:	81 30       	cpi	r24, 0x01	; 1
     9ec:	31 f4       	brne	.+12     	; 0x9fa <ProcessPINA+0xf0>
		{
			EncoderStarted = 0;
     9ee:	10 92 1d 02 	sts	0x021D, r1
			LeftStop();
     9f2:	0e 94 4b 04 	call	0x896	; 0x896 <LeftStop>
			RightStop();
     9f6:	0e 94 11 04 	call	0x822	; 0x822 <RightStop>
		EncoderStarted = 0;
		
		
	}
*/
}
     9fa:	df 91       	pop	r29
     9fc:	cf 91       	pop	r28
     9fe:	08 95       	ret

00000a00 <ProcessPINC>:
			}
		}		
}

void ProcessPINC( uint8_t data )	// 4 DPDT
{
     a00:	1f 93       	push	r17
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	18 2f       	mov	r17, r24
	//lcd_cmd(LINE1);
	//lcd_string("PINC");
	//lcd_showvalue(data);
	//lcd_string("  ");
	//
	if( (!(CHECKBIT(data,BIT(0)))) && (CHECKBIT(data,BIT(1))) )						// LEFT MOTORS
     a08:	c8 2f       	mov	r28, r24
     a0a:	d0 e0       	ldi	r29, 0x00	; 0
     a0c:	ce 01       	movw	r24, r28
     a0e:	81 70       	andi	r24, 0x01	; 1
     a10:	90 70       	andi	r25, 0x00	; 0
     a12:	10 fd       	sbrc	r17, 0
     a14:	09 c0       	rjmp	.+18     	; 0xa28 <ProcessPINC+0x28>
     a16:	11 ff       	sbrs	r17, 1
     a18:	15 c0       	rjmp	.+42     	; 0xa44 <ProcessPINC+0x44>
	{
			LeftFwd(speed);
     a1a:	80 91 00 02 	lds	r24, 0x0200
     a1e:	90 91 01 02 	lds	r25, 0x0201
     a22:	0e 94 72 04 	call	0x8e4	; 0x8e4 <LeftFwd>
     a26:	0a c0       	rjmp	.+20     	; 0xa3c <ProcessPINC+0x3c>
			LeftStarted = 1;
			/*lcd_gotoxy1(0);
			lcd_string("LF");*/
	}
	else if ( ((CHECKBIT(data,BIT(0))) && (!(CHECKBIT(data,BIT(1))))) )
     a28:	88 23       	and	r24, r24
     a2a:	61 f0       	breq	.+24     	; 0xa44 <ProcessPINC+0x44>
     a2c:	11 fd       	sbrc	r17, 1
     a2e:	0a c0       	rjmp	.+20     	; 0xa44 <ProcessPINC+0x44>
	{
			LeftRev(speed);
     a30:	80 91 00 02 	lds	r24, 0x0200
     a34:	90 91 01 02 	lds	r25, 0x0201
     a38:	0e 94 5f 04 	call	0x8be	; 0x8be <LeftRev>
			LeftStarted = 1;/*
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	80 93 12 02 	sts	0x0212, r24
     a42:	0d c0       	rjmp	.+26     	; 0xa5e <ProcessPINC+0x5e>
			lcd_gotoxy1(0);
			lcd_string("LR");*/
	}
	else if ( ((CHECKBIT(data,BIT(0))) && (CHECKBIT(data,BIT(1)))) )
     a44:	ce 01       	movw	r24, r28
     a46:	83 70       	andi	r24, 0x03	; 3
     a48:	90 70       	andi	r25, 0x00	; 0
     a4a:	03 97       	sbiw	r24, 0x03	; 3
     a4c:	41 f4       	brne	.+16     	; 0xa5e <ProcessPINC+0x5e>
	{
		if (LeftStarted == 1)
     a4e:	80 91 12 02 	lds	r24, 0x0212
     a52:	81 30       	cpi	r24, 0x01	; 1
     a54:	21 f4       	brne	.+8      	; 0xa5e <ProcessPINC+0x5e>
		{
			LeftStop();
     a56:	0e 94 4b 04 	call	0x896	; 0x896 <LeftStop>
			LeftStarted = 0;/*
     a5a:	10 92 12 02 	sts	0x0212, r1
     a5e:	ce 01       	movw	r24, r28
     a60:	88 70       	andi	r24, 0x08	; 8
     a62:	90 70       	andi	r25, 0x00	; 0
			lcd_gotoxy1(5);
			lcd_string("LS");*/
		}		
	}	
	
	if( (!(CHECKBIT(data,BIT(2)))) && (CHECKBIT(data,BIT(3))) )						// RIGHT MOTORS
     a64:	c2 fd       	sbrc	r28, 2
     a66:	09 c0       	rjmp	.+18     	; 0xa7a <ProcessPINC+0x7a>
     a68:	89 2b       	or	r24, r25
     a6a:	d9 f0       	breq	.+54     	; 0xaa2 <ProcessPINC+0xa2>
	{
			RightRev(speed);
     a6c:	80 91 00 02 	lds	r24, 0x0200
     a70:	90 91 01 02 	lds	r25, 0x0201
     a74:	0e 94 25 04 	call	0x84a	; 0x84a <RightRev>
     a78:	08 c0       	rjmp	.+16     	; 0xa8a <ProcessPINC+0x8a>
			RightStarted = 1;/*
			lcd_gotoxy2(0);
			lcd_string("RR");*/
	}
	else if ( ((CHECKBIT(data,BIT(2))) && (!(CHECKBIT(data,BIT(3))))) )
     a7a:	89 2b       	or	r24, r25
     a7c:	51 f4       	brne	.+20     	; 0xa92 <ProcessPINC+0x92>
	{
			RightFwd(speed);
     a7e:	80 91 00 02 	lds	r24, 0x0200
     a82:	90 91 01 02 	lds	r25, 0x0201
     a86:	0e 94 38 04 	call	0x870	; 0x870 <RightFwd>
			RightStarted = 1;/*
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	80 93 11 02 	sts	0x0211, r24
     a90:	08 c0       	rjmp	.+16     	; 0xaa2 <ProcessPINC+0xa2>
			lcd_gotoxy2(0);
			lcd_string("RF");*/
	}
	else if ( ((CHECKBIT(data,BIT(2))) && (CHECKBIT(data,BIT(3)))) )
	{
		if (RightStarted == 1)
     a92:	80 91 11 02 	lds	r24, 0x0211
     a96:	81 30       	cpi	r24, 0x01	; 1
     a98:	21 f4       	brne	.+8      	; 0xaa2 <ProcessPINC+0xa2>
		{
			RightStop();
     a9a:	0e 94 11 04 	call	0x822	; 0x822 <RightStop>
			RightStarted = 0;/*
     a9e:	10 92 11 02 	sts	0x0211, r1
     aa2:	ce 01       	movw	r24, r28
     aa4:	80 72       	andi	r24, 0x20	; 32
     aa6:	90 70       	andi	r25, 0x00	; 0
			lcd_string("RS");*/
		}
	}
	
	
	if( (!(CHECKBIT(data,BIT(4)))) && (CHECKBIT(data,BIT(5))) )						// MAIN PULLY MOTORS
     aa8:	c4 fd       	sbrc	r28, 4
     aaa:	08 c0       	rjmp	.+16     	; 0xabc <ProcessPINC+0xbc>
     aac:	89 2b       	or	r24, r25
     aae:	91 f0       	breq	.+36     	; 0xad4 <ProcessPINC+0xd4>
	{
			MainPullyStarted = 1;
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	80 93 0f 02 	sts	0x020F, r24
			MainPullyUp();
     ab6:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <MainPullyUp>
     aba:	0c c0       	rjmp	.+24     	; 0xad4 <ProcessPINC+0xd4>
	}
	else if ( ((CHECKBIT(data,BIT(4))) && (!(CHECKBIT(data,BIT(5))))) )
     abc:	89 2b       	or	r24, r25
     abe:	31 f4       	brne	.+12     	; 0xacc <ProcessPINC+0xcc>
	{
			MainPullyStarted = 1;
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	80 93 0f 02 	sts	0x020F, r24
			MainPullyDown();
     ac6:	0e 94 ed 03 	call	0x7da	; 0x7da <MainPullyDown>
     aca:	04 c0       	rjmp	.+8      	; 0xad4 <ProcessPINC+0xd4>
	}
	else if ( ((CHECKBIT(data,BIT(4))) && (CHECKBIT(data,BIT(5)))) )
	{
			MainPullyStarted = 0;
     acc:	10 92 0f 02 	sts	0x020F, r1
			MainPullyStop();
     ad0:	0e 94 05 04 	call	0x80a	; 0x80a <MainPullyStop>
	}
	
	
	if( !(CHECKBIT(data,BIT(6))) && (CHECKBIT(data,BIT(7))) )						// PULLY 2 MOTORS
     ad4:	c6 fd       	sbrc	r28, 6
     ad6:	0c c0       	rjmp	.+24     	; 0xaf0 <ProcessPINC+0xf0>
     ad8:	17 ff       	sbrs	r17, 7
     ada:	1c c0       	rjmp	.+56     	; 0xb14 <ProcessPINC+0x114>
	{
		if (Pully2Started == 0)
     adc:	80 91 10 02 	lds	r24, 0x0210
     ae0:	88 23       	and	r24, r24
     ae2:	c1 f4       	brne	.+48     	; 0xb14 <ProcessPINC+0x114>
		{
			Pully2Started = 1;
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	80 93 10 02 	sts	0x0210, r24
			Pully2Up();
     aea:	0e 94 d5 03 	call	0x7aa	; 0x7aa <Pully2Up>
     aee:	12 c0       	rjmp	.+36     	; 0xb14 <ProcessPINC+0x114>
     af0:	80 91 10 02 	lds	r24, 0x0210
		}
		
	}
	else if ( ((CHECKBIT(data,BIT(6))) && !(CHECKBIT(data,BIT(7)))) )
     af4:	17 fd       	sbrc	r17, 7
     af6:	08 c0       	rjmp	.+16     	; 0xb08 <ProcessPINC+0x108>
	{
		if (Pully2Started == 0)
     af8:	88 23       	and	r24, r24
     afa:	61 f4       	brne	.+24     	; 0xb14 <ProcessPINC+0x114>
		{
			Pully2Started = 1;
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	80 93 10 02 	sts	0x0210, r24
			Pully2Down();
     b02:	0e 94 c9 03 	call	0x792	; 0x792 <Pully2Down>
     b06:	06 c0       	rjmp	.+12     	; 0xb14 <ProcessPINC+0x114>
		}		
	}
	else if ( ((CHECKBIT(data,BIT(6))) && (CHECKBIT(data,BIT(7)))) )
	{
		if (Pully2Started == 1)
     b08:	81 30       	cpi	r24, 0x01	; 1
     b0a:	21 f4       	brne	.+8      	; 0xb14 <ProcessPINC+0x114>
		{
			Pully2Stop();
     b0c:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <Pully2Stop>
			Pully2Started = 0;
     b10:	10 92 10 02 	sts	0x0210, r1
		}
	}
}
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	1f 91       	pop	r17
     b1a:	08 95       	ret

00000b1c <DiscLeft>:
{
	PWM('4','A',10000,s,SET);
}

void DiscLeft(uint8_t s)
{
     b1c:	0f 93       	push	r16
     b1e:	28 2f       	mov	r18, r24
	PWM('4','A',10000,s,CLEAR);
     b20:	84 e3       	ldi	r24, 0x34	; 52
     b22:	61 e4       	ldi	r22, 0x41	; 65
     b24:	40 e1       	ldi	r20, 0x10	; 16
     b26:	57 e2       	ldi	r21, 0x27	; 39
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	00 e0       	ldi	r16, 0x00	; 0
     b2c:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <PWM>
}
     b30:	0f 91       	pop	r16
     b32:	08 95       	ret

00000b34 <DiscRight>:
{
	PWM('4','A',10000,0,TOGGLE);
}

void DiscRight(uint8_t s)
{
     b34:	0f 93       	push	r16
     b36:	28 2f       	mov	r18, r24
	PWM('4','A',10000,s,SET);
     b38:	84 e3       	ldi	r24, 0x34	; 52
     b3a:	61 e4       	ldi	r22, 0x41	; 65
     b3c:	40 e1       	ldi	r20, 0x10	; 16
     b3e:	57 e2       	ldi	r21, 0x27	; 39
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	01 e0       	ldi	r16, 0x01	; 1
     b44:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <PWM>
}
     b48:	0f 91       	pop	r16
     b4a:	08 95       	ret

00000b4c <DiscStop>:
 *  Author: Coder Rajat
 */ 


void DiscStop(void)
{
     b4c:	0f 93       	push	r16
	PWM('4','A',10000,0,TOGGLE);
     b4e:	84 e3       	ldi	r24, 0x34	; 52
     b50:	61 e4       	ldi	r22, 0x41	; 65
     b52:	40 e1       	ldi	r20, 0x10	; 16
     b54:	57 e2       	ldi	r21, 0x27	; 39
     b56:	20 e0       	ldi	r18, 0x00	; 0
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	02 e0       	ldi	r16, 0x02	; 2
     b5c:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <PWM>
}
     b60:	0f 91       	pop	r16
     b62:	08 95       	ret

00000b64 <ProcessPIND>:
void ProcessPIND( uint8_t data )		// 1 DPDT of DISC	
{
		//lcd_cmd(LINE2);
		//lcd_showvalue(data);
		
		if( !(CHECKBIT(data,BIT(6))) && (CHECKBIT(data,BIT(7))) )						// DISC MOTORS
     b64:	86 fd       	sbrc	r24, 6
     b66:	09 c0       	rjmp	.+18     	; 0xb7a <ProcessPIND+0x16>
     b68:	87 ff       	sbrs	r24, 7
     b6a:	18 c0       	rjmp	.+48     	; 0xb9c <ProcessPIND+0x38>
		{
			DiscStarted = 1;
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	80 93 0e 02 	sts	0x020E, r24
			DiscRight(100);
     b72:	84 e6       	ldi	r24, 0x64	; 100
     b74:	0e 94 9a 05 	call	0xb34	; 0xb34 <DiscRight>
     b78:	08 95       	ret
		}
		else if ( ((CHECKBIT(data,BIT(6))) && !(CHECKBIT(data,BIT(7)))) )
     b7a:	87 fd       	sbrc	r24, 7
     b7c:	07 c0       	rjmp	.+14     	; 0xb8c <ProcessPIND+0x28>
		{
			DiscStarted = 1;
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	80 93 0e 02 	sts	0x020E, r24
			DiscLeft(100);
     b84:	84 e6       	ldi	r24, 0x64	; 100
     b86:	0e 94 8e 05 	call	0xb1c	; 0xb1c <DiscLeft>
     b8a:	08 95       	ret
		}
		else if ( ((CHECKBIT(data,BIT(6))) && (CHECKBIT(data,BIT(7)))) )
		{
			if (DiscStarted == 1)
     b8c:	80 91 0e 02 	lds	r24, 0x020E
     b90:	81 30       	cpi	r24, 0x01	; 1
     b92:	21 f4       	brne	.+8      	; 0xb9c <ProcessPIND+0x38>
			{
				DiscStop();
     b94:	0e 94 a6 05 	call	0xb4c	; 0xb4c <DiscStop>
				DiscStarted = 0;
     b98:	10 92 0e 02 	sts	0x020E, r1
     b9c:	08 95       	ret

00000b9e <main>:
	}
*/
}

int main(void)
{
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
	//lcd_init();	
	//sei();
	UartInit();
     ba8:	0e 94 10 01 	call	0x220	; 0x220 <UartInit>
	ADCInit();
     bac:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <ADCInit>

	
	DDRJ = 0xFF;		// PORT FOR MAXON DIRECTIONS
     bb0:	8f ef       	ldi	r24, 0xFF	; 255
     bb2:	80 93 04 01 	sts	0x0104, r24
	PORTJ = 0x00;
     bb6:	10 92 05 01 	sts	0x0105, r1
	
	DDRC = 0x00;		// Sensor Array	of 5 and PC0 Pencil Sensor
     bba:	17 b8       	out	0x07, r1	; 7
	PORTC = 0xFF;
     bbc:	88 b9       	out	0x08, r24	; 8
	
	DDRF |= (1<<PF0);
     bbe:	80 9a       	sbi	0x10, 0	; 16
	PORTF &= ~(1<<PF0);
     bc0:	88 98       	cbi	0x11, 0	; 17
	
	CLEARBIT(DDRD,BIT(6));		// Encoder Port Initialization
     bc2:	56 98       	cbi	0x0a, 6	; 10
	SETBIT(PIND,BIT(6));
     bc4:	4e 9a       	sbi	0x09, 6	; 9
	
	TCCR1B = 0x07;		// Timer/Counter 1 Initialization for Encoder Count
     bc6:	87 e0       	ldi	r24, 0x07	; 7
     bc8:	80 93 81 00 	sts	0x0081, r24
	TCNT1 = 0;
     bcc:	10 92 85 00 	sts	0x0085, r1
     bd0:	10 92 84 00 	sts	0x0084, r1
}

void UartTransmit(uint8_t data)
{
	while ( !( UCSR2A & (1<<UDRE2)) );
	UDR2 = data;
     bd4:	32 e3       	ldi	r19, 0x32	; 50
     bd6:	d3 2e       	mov	r13, r19
	// Using Channel 2 of 640 Present at PORTH
}

void UartTransmit(uint8_t data)
{
	while ( !( UCSR2A & (1<<UDRE2)) );
     bd8:	2c e3       	ldi	r18, 0x3C	; 60
     bda:	e2 2e       	mov	r14, r18
     bdc:	96 e4       	ldi	r25, 0x46	; 70
     bde:	f9 2e       	mov	r15, r25
     be0:	00 e5       	ldi	r16, 0x50	; 80
     be2:	1a e5       	ldi	r17, 0x5A	; 90
     be4:	80 91 d0 00 	lds	r24, 0x00D0
     be8:	85 ff       	sbrs	r24, 5
     bea:	fc cf       	rjmp	.-8      	; 0xbe4 <main+0x46>
	UDR2 = data;
     bec:	d0 92 d6 00 	sts	0x00D6, r13
    }
}

uint8_t UartReceive(void)
{
	while ( !( UCSR2A & (1<<RXC2)) );
     bf0:	80 91 d0 00 	lds	r24, 0x00D0
     bf4:	87 ff       	sbrs	r24, 7
     bf6:	fc cf       	rjmp	.-8      	; 0xbf0 <main+0x52>
	return UDR2;
     bf8:	80 91 d6 00 	lds	r24, 0x00D6
    while(1)
    {
//		lcd_gotoxy1(0);
//		lcd_showvalue(TCNT1);
		UartTransmit(50);
		ProcessPINA(UartReceive());
     bfc:	0e 94 85 04 	call	0x90a	; 0x90a <ProcessPINA>
	// Using Channel 2 of 640 Present at PORTH
}

void UartTransmit(uint8_t data)
{
	while ( !( UCSR2A & (1<<UDRE2)) );
     c00:	80 91 d0 00 	lds	r24, 0x00D0
     c04:	85 ff       	sbrs	r24, 5
     c06:	fc cf       	rjmp	.-8      	; 0xc00 <main+0x62>
	UDR2 = data;
     c08:	e0 92 d6 00 	sts	0x00D6, r14
    }
}

uint8_t UartReceive(void)
{
	while ( !( UCSR2A & (1<<RXC2)) );
     c0c:	80 91 d0 00 	lds	r24, 0x00D0
     c10:	87 ff       	sbrs	r24, 7
     c12:	fc cf       	rjmp	.-8      	; 0xc0c <main+0x6e>
	return UDR2;
     c14:	80 91 d6 00 	lds	r24, 0x00D6
	// Using Channel 2 of 640 Present at PORTH
}

void UartTransmit(uint8_t data)
{
	while ( !( UCSR2A & (1<<UDRE2)) );
     c18:	80 91 d0 00 	lds	r24, 0x00D0
     c1c:	85 ff       	sbrs	r24, 5
     c1e:	fc cf       	rjmp	.-8      	; 0xc18 <main+0x7a>
	UDR2 = data;
     c20:	f0 92 d6 00 	sts	0x00D6, r15
    }
}

uint8_t UartReceive(void)
{
	while ( !( UCSR2A & (1<<RXC2)) );
     c24:	80 91 d0 00 	lds	r24, 0x00D0
     c28:	87 ff       	sbrs	r24, 7
     c2a:	fc cf       	rjmp	.-8      	; 0xc24 <main+0x86>
	return UDR2;
     c2c:	80 91 d6 00 	lds	r24, 0x00D6
		
		UartTransmit(60);
		ProcessPINB(UartReceive());
		
		UartTransmit(70);
		ProcessPINC(UartReceive());
     c30:	0e 94 00 05 	call	0xa00	; 0xa00 <ProcessPINC>
	// Using Channel 2 of 640 Present at PORTH
}

void UartTransmit(uint8_t data)
{
	while ( !( UCSR2A & (1<<UDRE2)) );
     c34:	80 91 d0 00 	lds	r24, 0x00D0
     c38:	85 ff       	sbrs	r24, 5
     c3a:	fc cf       	rjmp	.-8      	; 0xc34 <main+0x96>
	UDR2 = data;
     c3c:	00 93 d6 00 	sts	0x00D6, r16
    }
}

uint8_t UartReceive(void)
{
	while ( !( UCSR2A & (1<<RXC2)) );
     c40:	80 91 d0 00 	lds	r24, 0x00D0
     c44:	87 ff       	sbrs	r24, 7
     c46:	fc cf       	rjmp	.-8      	; 0xc40 <main+0xa2>
	return UDR2;
     c48:	80 91 d6 00 	lds	r24, 0x00D6
		
		UartTransmit(70);
		ProcessPINC(UartReceive());
		
		UartTransmit(80);
		ProcessPIND(UartReceive());
     c4c:	0e 94 b2 05 	call	0xb64	; 0xb64 <ProcessPIND>
	// Using Channel 2 of 640 Present at PORTH
}

void UartTransmit(uint8_t data)
{
	while ( !( UCSR2A & (1<<UDRE2)) );
     c50:	80 91 d0 00 	lds	r24, 0x00D0
     c54:	85 ff       	sbrs	r24, 5
     c56:	fc cf       	rjmp	.-8      	; 0xc50 <main+0xb2>
	UDR2 = data;
     c58:	10 93 d6 00 	sts	0x00D6, r17
    }
}

uint8_t UartReceive(void)
{
	while ( !( UCSR2A & (1<<RXC2)) );
     c5c:	80 91 d0 00 	lds	r24, 0x00D0
     c60:	87 ff       	sbrs	r24, 7
     c62:	fc cf       	rjmp	.-8      	; 0xc5c <main+0xbe>
	return UDR2;
     c64:	80 91 d6 00 	lds	r24, 0x00D6
		
		UartTransmit(80);
		ProcessPIND(UartReceive());
		
		UartTransmit(90);
		ProcessADC(UartReceive());
     c68:	0e 94 f5 00 	call	0x1ea	; 0x1ea <ProcessADC>
     c6c:	bb cf       	rjmp	.-138    	; 0xbe4 <main+0x46>

00000c6e <__subsf3>:
     c6e:	50 58       	subi	r21, 0x80	; 128

00000c70 <__addsf3>:
     c70:	bb 27       	eor	r27, r27
     c72:	aa 27       	eor	r26, r26
     c74:	0e d0       	rcall	.+28     	; 0xc92 <__addsf3x>
     c76:	21 c1       	rjmp	.+578    	; 0xeba <__fp_round>
     c78:	12 d1       	rcall	.+548    	; 0xe9e <__fp_pscA>
     c7a:	30 f0       	brcs	.+12     	; 0xc88 <__addsf3+0x18>
     c7c:	17 d1       	rcall	.+558    	; 0xeac <__fp_pscB>
     c7e:	20 f0       	brcs	.+8      	; 0xc88 <__addsf3+0x18>
     c80:	31 f4       	brne	.+12     	; 0xc8e <__addsf3+0x1e>
     c82:	9f 3f       	cpi	r25, 0xFF	; 255
     c84:	11 f4       	brne	.+4      	; 0xc8a <__addsf3+0x1a>
     c86:	1e f4       	brtc	.+6      	; 0xc8e <__addsf3+0x1e>
     c88:	07 c1       	rjmp	.+526    	; 0xe98 <__fp_nan>
     c8a:	0e f4       	brtc	.+2      	; 0xc8e <__addsf3+0x1e>
     c8c:	e0 95       	com	r30
     c8e:	e7 fb       	bst	r30, 7
     c90:	d4 c0       	rjmp	.+424    	; 0xe3a <__fp_inf>

00000c92 <__addsf3x>:
     c92:	e9 2f       	mov	r30, r25
     c94:	23 d1       	rcall	.+582    	; 0xedc <__fp_split3>
     c96:	80 f3       	brcs	.-32     	; 0xc78 <__addsf3+0x8>
     c98:	ba 17       	cp	r27, r26
     c9a:	62 07       	cpc	r22, r18
     c9c:	73 07       	cpc	r23, r19
     c9e:	84 07       	cpc	r24, r20
     ca0:	95 07       	cpc	r25, r21
     ca2:	18 f0       	brcs	.+6      	; 0xcaa <__addsf3x+0x18>
     ca4:	71 f4       	brne	.+28     	; 0xcc2 <__addsf3x+0x30>
     ca6:	9e f5       	brtc	.+102    	; 0xd0e <__addsf3x+0x7c>
     ca8:	52 c1       	rjmp	.+676    	; 0xf4e <__fp_zero>
     caa:	0e f4       	brtc	.+2      	; 0xcae <__addsf3x+0x1c>
     cac:	e0 95       	com	r30
     cae:	0b 2e       	mov	r0, r27
     cb0:	ba 2f       	mov	r27, r26
     cb2:	a0 2d       	mov	r26, r0
     cb4:	0b 01       	movw	r0, r22
     cb6:	b9 01       	movw	r22, r18
     cb8:	90 01       	movw	r18, r0
     cba:	0c 01       	movw	r0, r24
     cbc:	ca 01       	movw	r24, r20
     cbe:	a0 01       	movw	r20, r0
     cc0:	11 24       	eor	r1, r1
     cc2:	ff 27       	eor	r31, r31
     cc4:	59 1b       	sub	r21, r25
     cc6:	99 f0       	breq	.+38     	; 0xcee <__addsf3x+0x5c>
     cc8:	59 3f       	cpi	r21, 0xF9	; 249
     cca:	50 f4       	brcc	.+20     	; 0xce0 <__addsf3x+0x4e>
     ccc:	50 3e       	cpi	r21, 0xE0	; 224
     cce:	68 f1       	brcs	.+90     	; 0xd2a <__addsf3x+0x98>
     cd0:	1a 16       	cp	r1, r26
     cd2:	f0 40       	sbci	r31, 0x00	; 0
     cd4:	a2 2f       	mov	r26, r18
     cd6:	23 2f       	mov	r18, r19
     cd8:	34 2f       	mov	r19, r20
     cda:	44 27       	eor	r20, r20
     cdc:	58 5f       	subi	r21, 0xF8	; 248
     cde:	f3 cf       	rjmp	.-26     	; 0xcc6 <__addsf3x+0x34>
     ce0:	46 95       	lsr	r20
     ce2:	37 95       	ror	r19
     ce4:	27 95       	ror	r18
     ce6:	a7 95       	ror	r26
     ce8:	f0 40       	sbci	r31, 0x00	; 0
     cea:	53 95       	inc	r21
     cec:	c9 f7       	brne	.-14     	; 0xce0 <__addsf3x+0x4e>
     cee:	7e f4       	brtc	.+30     	; 0xd0e <__addsf3x+0x7c>
     cf0:	1f 16       	cp	r1, r31
     cf2:	ba 0b       	sbc	r27, r26
     cf4:	62 0b       	sbc	r22, r18
     cf6:	73 0b       	sbc	r23, r19
     cf8:	84 0b       	sbc	r24, r20
     cfa:	ba f0       	brmi	.+46     	; 0xd2a <__addsf3x+0x98>
     cfc:	91 50       	subi	r25, 0x01	; 1
     cfe:	a1 f0       	breq	.+40     	; 0xd28 <__addsf3x+0x96>
     d00:	ff 0f       	add	r31, r31
     d02:	bb 1f       	adc	r27, r27
     d04:	66 1f       	adc	r22, r22
     d06:	77 1f       	adc	r23, r23
     d08:	88 1f       	adc	r24, r24
     d0a:	c2 f7       	brpl	.-16     	; 0xcfc <__addsf3x+0x6a>
     d0c:	0e c0       	rjmp	.+28     	; 0xd2a <__addsf3x+0x98>
     d0e:	ba 0f       	add	r27, r26
     d10:	62 1f       	adc	r22, r18
     d12:	73 1f       	adc	r23, r19
     d14:	84 1f       	adc	r24, r20
     d16:	48 f4       	brcc	.+18     	; 0xd2a <__addsf3x+0x98>
     d18:	87 95       	ror	r24
     d1a:	77 95       	ror	r23
     d1c:	67 95       	ror	r22
     d1e:	b7 95       	ror	r27
     d20:	f7 95       	ror	r31
     d22:	9e 3f       	cpi	r25, 0xFE	; 254
     d24:	08 f0       	brcs	.+2      	; 0xd28 <__addsf3x+0x96>
     d26:	b3 cf       	rjmp	.-154    	; 0xc8e <__addsf3+0x1e>
     d28:	93 95       	inc	r25
     d2a:	88 0f       	add	r24, r24
     d2c:	08 f0       	brcs	.+2      	; 0xd30 <__addsf3x+0x9e>
     d2e:	99 27       	eor	r25, r25
     d30:	ee 0f       	add	r30, r30
     d32:	97 95       	ror	r25
     d34:	87 95       	ror	r24
     d36:	08 95       	ret

00000d38 <ceil>:
     d38:	f3 d0       	rcall	.+486    	; 0xf20 <__fp_trunc>
     d3a:	80 f0       	brcs	.+32     	; 0xd5c <ceil+0x24>
     d3c:	9f 37       	cpi	r25, 0x7F	; 127
     d3e:	40 f4       	brcc	.+16     	; 0xd50 <ceil+0x18>
     d40:	91 11       	cpse	r25, r1
     d42:	0e f4       	brtc	.+2      	; 0xd46 <ceil+0xe>
     d44:	05 c1       	rjmp	.+522    	; 0xf50 <__fp_szero>
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	80 e8       	ldi	r24, 0x80	; 128
     d4c:	9f e3       	ldi	r25, 0x3F	; 63
     d4e:	08 95       	ret
     d50:	26 f0       	brts	.+8      	; 0xd5a <ceil+0x22>
     d52:	1b 16       	cp	r1, r27
     d54:	61 1d       	adc	r22, r1
     d56:	71 1d       	adc	r23, r1
     d58:	81 1d       	adc	r24, r1
     d5a:	75 c0       	rjmp	.+234    	; 0xe46 <__fp_mintl>
     d5c:	8f c0       	rjmp	.+286    	; 0xe7c <__fp_mpack>

00000d5e <__fixsfsi>:
     d5e:	04 d0       	rcall	.+8      	; 0xd68 <__fixunssfsi>
     d60:	68 94       	set
     d62:	b1 11       	cpse	r27, r1
     d64:	f5 c0       	rjmp	.+490    	; 0xf50 <__fp_szero>
     d66:	08 95       	ret

00000d68 <__fixunssfsi>:
     d68:	c1 d0       	rcall	.+386    	; 0xeec <__fp_splitA>
     d6a:	88 f0       	brcs	.+34     	; 0xd8e <__fixunssfsi+0x26>
     d6c:	9f 57       	subi	r25, 0x7F	; 127
     d6e:	90 f0       	brcs	.+36     	; 0xd94 <__fixunssfsi+0x2c>
     d70:	b9 2f       	mov	r27, r25
     d72:	99 27       	eor	r25, r25
     d74:	b7 51       	subi	r27, 0x17	; 23
     d76:	a0 f0       	brcs	.+40     	; 0xda0 <__fixunssfsi+0x38>
     d78:	d1 f0       	breq	.+52     	; 0xdae <__fixunssfsi+0x46>
     d7a:	66 0f       	add	r22, r22
     d7c:	77 1f       	adc	r23, r23
     d7e:	88 1f       	adc	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	1a f0       	brmi	.+6      	; 0xd8a <__fixunssfsi+0x22>
     d84:	ba 95       	dec	r27
     d86:	c9 f7       	brne	.-14     	; 0xd7a <__fixunssfsi+0x12>
     d88:	12 c0       	rjmp	.+36     	; 0xdae <__fixunssfsi+0x46>
     d8a:	b1 30       	cpi	r27, 0x01	; 1
     d8c:	81 f0       	breq	.+32     	; 0xdae <__fixunssfsi+0x46>
     d8e:	df d0       	rcall	.+446    	; 0xf4e <__fp_zero>
     d90:	b1 e0       	ldi	r27, 0x01	; 1
     d92:	08 95       	ret
     d94:	dc c0       	rjmp	.+440    	; 0xf4e <__fp_zero>
     d96:	67 2f       	mov	r22, r23
     d98:	78 2f       	mov	r23, r24
     d9a:	88 27       	eor	r24, r24
     d9c:	b8 5f       	subi	r27, 0xF8	; 248
     d9e:	39 f0       	breq	.+14     	; 0xdae <__fixunssfsi+0x46>
     da0:	b9 3f       	cpi	r27, 0xF9	; 249
     da2:	cc f3       	brlt	.-14     	; 0xd96 <__fixunssfsi+0x2e>
     da4:	86 95       	lsr	r24
     da6:	77 95       	ror	r23
     da8:	67 95       	ror	r22
     daa:	b3 95       	inc	r27
     dac:	d9 f7       	brne	.-10     	; 0xda4 <__fixunssfsi+0x3c>
     dae:	3e f4       	brtc	.+14     	; 0xdbe <__fixunssfsi+0x56>
     db0:	90 95       	com	r25
     db2:	80 95       	com	r24
     db4:	70 95       	com	r23
     db6:	61 95       	neg	r22
     db8:	7f 4f       	sbci	r23, 0xFF	; 255
     dba:	8f 4f       	sbci	r24, 0xFF	; 255
     dbc:	9f 4f       	sbci	r25, 0xFF	; 255
     dbe:	08 95       	ret

00000dc0 <__floatunsisf>:
     dc0:	e8 94       	clt
     dc2:	09 c0       	rjmp	.+18     	; 0xdd6 <__floatsisf+0x12>

00000dc4 <__floatsisf>:
     dc4:	97 fb       	bst	r25, 7
     dc6:	3e f4       	brtc	.+14     	; 0xdd6 <__floatsisf+0x12>
     dc8:	90 95       	com	r25
     dca:	80 95       	com	r24
     dcc:	70 95       	com	r23
     dce:	61 95       	neg	r22
     dd0:	7f 4f       	sbci	r23, 0xFF	; 255
     dd2:	8f 4f       	sbci	r24, 0xFF	; 255
     dd4:	9f 4f       	sbci	r25, 0xFF	; 255
     dd6:	99 23       	and	r25, r25
     dd8:	a9 f0       	breq	.+42     	; 0xe04 <__floatsisf+0x40>
     dda:	f9 2f       	mov	r31, r25
     ddc:	96 e9       	ldi	r25, 0x96	; 150
     dde:	bb 27       	eor	r27, r27
     de0:	93 95       	inc	r25
     de2:	f6 95       	lsr	r31
     de4:	87 95       	ror	r24
     de6:	77 95       	ror	r23
     de8:	67 95       	ror	r22
     dea:	b7 95       	ror	r27
     dec:	f1 11       	cpse	r31, r1
     dee:	f8 cf       	rjmp	.-16     	; 0xde0 <__floatsisf+0x1c>
     df0:	fa f4       	brpl	.+62     	; 0xe30 <__floatsisf+0x6c>
     df2:	bb 0f       	add	r27, r27
     df4:	11 f4       	brne	.+4      	; 0xdfa <__floatsisf+0x36>
     df6:	60 ff       	sbrs	r22, 0
     df8:	1b c0       	rjmp	.+54     	; 0xe30 <__floatsisf+0x6c>
     dfa:	6f 5f       	subi	r22, 0xFF	; 255
     dfc:	7f 4f       	sbci	r23, 0xFF	; 255
     dfe:	8f 4f       	sbci	r24, 0xFF	; 255
     e00:	9f 4f       	sbci	r25, 0xFF	; 255
     e02:	16 c0       	rjmp	.+44     	; 0xe30 <__floatsisf+0x6c>
     e04:	88 23       	and	r24, r24
     e06:	11 f0       	breq	.+4      	; 0xe0c <__floatsisf+0x48>
     e08:	96 e9       	ldi	r25, 0x96	; 150
     e0a:	11 c0       	rjmp	.+34     	; 0xe2e <__floatsisf+0x6a>
     e0c:	77 23       	and	r23, r23
     e0e:	21 f0       	breq	.+8      	; 0xe18 <__floatsisf+0x54>
     e10:	9e e8       	ldi	r25, 0x8E	; 142
     e12:	87 2f       	mov	r24, r23
     e14:	76 2f       	mov	r23, r22
     e16:	05 c0       	rjmp	.+10     	; 0xe22 <__floatsisf+0x5e>
     e18:	66 23       	and	r22, r22
     e1a:	71 f0       	breq	.+28     	; 0xe38 <__floatsisf+0x74>
     e1c:	96 e8       	ldi	r25, 0x86	; 134
     e1e:	86 2f       	mov	r24, r22
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	2a f0       	brmi	.+10     	; 0xe30 <__floatsisf+0x6c>
     e26:	9a 95       	dec	r25
     e28:	66 0f       	add	r22, r22
     e2a:	77 1f       	adc	r23, r23
     e2c:	88 1f       	adc	r24, r24
     e2e:	da f7       	brpl	.-10     	; 0xe26 <__floatsisf+0x62>
     e30:	88 0f       	add	r24, r24
     e32:	96 95       	lsr	r25
     e34:	87 95       	ror	r24
     e36:	97 f9       	bld	r25, 7
     e38:	08 95       	ret

00000e3a <__fp_inf>:
     e3a:	97 f9       	bld	r25, 7
     e3c:	9f 67       	ori	r25, 0x7F	; 127
     e3e:	80 e8       	ldi	r24, 0x80	; 128
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	08 95       	ret

00000e46 <__fp_mintl>:
     e46:	88 23       	and	r24, r24
     e48:	71 f4       	brne	.+28     	; 0xe66 <__fp_mintl+0x20>
     e4a:	77 23       	and	r23, r23
     e4c:	21 f0       	breq	.+8      	; 0xe56 <__fp_mintl+0x10>
     e4e:	98 50       	subi	r25, 0x08	; 8
     e50:	87 2b       	or	r24, r23
     e52:	76 2f       	mov	r23, r22
     e54:	07 c0       	rjmp	.+14     	; 0xe64 <__fp_mintl+0x1e>
     e56:	66 23       	and	r22, r22
     e58:	11 f4       	brne	.+4      	; 0xe5e <__fp_mintl+0x18>
     e5a:	99 27       	eor	r25, r25
     e5c:	0d c0       	rjmp	.+26     	; 0xe78 <__fp_mintl+0x32>
     e5e:	90 51       	subi	r25, 0x10	; 16
     e60:	86 2b       	or	r24, r22
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	2a f0       	brmi	.+10     	; 0xe72 <__fp_mintl+0x2c>
     e68:	9a 95       	dec	r25
     e6a:	66 0f       	add	r22, r22
     e6c:	77 1f       	adc	r23, r23
     e6e:	88 1f       	adc	r24, r24
     e70:	da f7       	brpl	.-10     	; 0xe68 <__fp_mintl+0x22>
     e72:	88 0f       	add	r24, r24
     e74:	96 95       	lsr	r25
     e76:	87 95       	ror	r24
     e78:	97 f9       	bld	r25, 7
     e7a:	08 95       	ret

00000e7c <__fp_mpack>:
     e7c:	9f 3f       	cpi	r25, 0xFF	; 255
     e7e:	31 f0       	breq	.+12     	; 0xe8c <__fp_mpack_finite+0xc>

00000e80 <__fp_mpack_finite>:
     e80:	91 50       	subi	r25, 0x01	; 1
     e82:	20 f4       	brcc	.+8      	; 0xe8c <__fp_mpack_finite+0xc>
     e84:	87 95       	ror	r24
     e86:	77 95       	ror	r23
     e88:	67 95       	ror	r22
     e8a:	b7 95       	ror	r27
     e8c:	88 0f       	add	r24, r24
     e8e:	91 1d       	adc	r25, r1
     e90:	96 95       	lsr	r25
     e92:	87 95       	ror	r24
     e94:	97 f9       	bld	r25, 7
     e96:	08 95       	ret

00000e98 <__fp_nan>:
     e98:	9f ef       	ldi	r25, 0xFF	; 255
     e9a:	80 ec       	ldi	r24, 0xC0	; 192
     e9c:	08 95       	ret

00000e9e <__fp_pscA>:
     e9e:	00 24       	eor	r0, r0
     ea0:	0a 94       	dec	r0
     ea2:	16 16       	cp	r1, r22
     ea4:	17 06       	cpc	r1, r23
     ea6:	18 06       	cpc	r1, r24
     ea8:	09 06       	cpc	r0, r25
     eaa:	08 95       	ret

00000eac <__fp_pscB>:
     eac:	00 24       	eor	r0, r0
     eae:	0a 94       	dec	r0
     eb0:	12 16       	cp	r1, r18
     eb2:	13 06       	cpc	r1, r19
     eb4:	14 06       	cpc	r1, r20
     eb6:	05 06       	cpc	r0, r21
     eb8:	08 95       	ret

00000eba <__fp_round>:
     eba:	09 2e       	mov	r0, r25
     ebc:	03 94       	inc	r0
     ebe:	00 0c       	add	r0, r0
     ec0:	11 f4       	brne	.+4      	; 0xec6 <__fp_round+0xc>
     ec2:	88 23       	and	r24, r24
     ec4:	52 f0       	brmi	.+20     	; 0xeda <__fp_round+0x20>
     ec6:	bb 0f       	add	r27, r27
     ec8:	40 f4       	brcc	.+16     	; 0xeda <__fp_round+0x20>
     eca:	bf 2b       	or	r27, r31
     ecc:	11 f4       	brne	.+4      	; 0xed2 <__fp_round+0x18>
     ece:	60 ff       	sbrs	r22, 0
     ed0:	04 c0       	rjmp	.+8      	; 0xeda <__fp_round+0x20>
     ed2:	6f 5f       	subi	r22, 0xFF	; 255
     ed4:	7f 4f       	sbci	r23, 0xFF	; 255
     ed6:	8f 4f       	sbci	r24, 0xFF	; 255
     ed8:	9f 4f       	sbci	r25, 0xFF	; 255
     eda:	08 95       	ret

00000edc <__fp_split3>:
     edc:	57 fd       	sbrc	r21, 7
     ede:	90 58       	subi	r25, 0x80	; 128
     ee0:	44 0f       	add	r20, r20
     ee2:	55 1f       	adc	r21, r21
     ee4:	59 f0       	breq	.+22     	; 0xefc <__fp_splitA+0x10>
     ee6:	5f 3f       	cpi	r21, 0xFF	; 255
     ee8:	71 f0       	breq	.+28     	; 0xf06 <__fp_splitA+0x1a>
     eea:	47 95       	ror	r20

00000eec <__fp_splitA>:
     eec:	88 0f       	add	r24, r24
     eee:	97 fb       	bst	r25, 7
     ef0:	99 1f       	adc	r25, r25
     ef2:	61 f0       	breq	.+24     	; 0xf0c <__fp_splitA+0x20>
     ef4:	9f 3f       	cpi	r25, 0xFF	; 255
     ef6:	79 f0       	breq	.+30     	; 0xf16 <__fp_splitA+0x2a>
     ef8:	87 95       	ror	r24
     efa:	08 95       	ret
     efc:	12 16       	cp	r1, r18
     efe:	13 06       	cpc	r1, r19
     f00:	14 06       	cpc	r1, r20
     f02:	55 1f       	adc	r21, r21
     f04:	f2 cf       	rjmp	.-28     	; 0xeea <__fp_split3+0xe>
     f06:	46 95       	lsr	r20
     f08:	f1 df       	rcall	.-30     	; 0xeec <__fp_splitA>
     f0a:	08 c0       	rjmp	.+16     	; 0xf1c <__fp_splitA+0x30>
     f0c:	16 16       	cp	r1, r22
     f0e:	17 06       	cpc	r1, r23
     f10:	18 06       	cpc	r1, r24
     f12:	99 1f       	adc	r25, r25
     f14:	f1 cf       	rjmp	.-30     	; 0xef8 <__fp_splitA+0xc>
     f16:	86 95       	lsr	r24
     f18:	71 05       	cpc	r23, r1
     f1a:	61 05       	cpc	r22, r1
     f1c:	08 94       	sec
     f1e:	08 95       	ret

00000f20 <__fp_trunc>:
     f20:	e5 df       	rcall	.-54     	; 0xeec <__fp_splitA>
     f22:	a0 f0       	brcs	.+40     	; 0xf4c <__fp_trunc+0x2c>
     f24:	be e7       	ldi	r27, 0x7E	; 126
     f26:	b9 17       	cp	r27, r25
     f28:	88 f4       	brcc	.+34     	; 0xf4c <__fp_trunc+0x2c>
     f2a:	bb 27       	eor	r27, r27
     f2c:	9f 38       	cpi	r25, 0x8F	; 143
     f2e:	60 f4       	brcc	.+24     	; 0xf48 <__fp_trunc+0x28>
     f30:	16 16       	cp	r1, r22
     f32:	b1 1d       	adc	r27, r1
     f34:	67 2f       	mov	r22, r23
     f36:	78 2f       	mov	r23, r24
     f38:	88 27       	eor	r24, r24
     f3a:	98 5f       	subi	r25, 0xF8	; 248
     f3c:	f7 cf       	rjmp	.-18     	; 0xf2c <__fp_trunc+0xc>
     f3e:	86 95       	lsr	r24
     f40:	77 95       	ror	r23
     f42:	67 95       	ror	r22
     f44:	b1 1d       	adc	r27, r1
     f46:	93 95       	inc	r25
     f48:	96 39       	cpi	r25, 0x96	; 150
     f4a:	c8 f3       	brcs	.-14     	; 0xf3e <__fp_trunc+0x1e>
     f4c:	08 95       	ret

00000f4e <__fp_zero>:
     f4e:	e8 94       	clt

00000f50 <__fp_szero>:
     f50:	bb 27       	eor	r27, r27
     f52:	66 27       	eor	r22, r22
     f54:	77 27       	eor	r23, r23
     f56:	cb 01       	movw	r24, r22
     f58:	97 f9       	bld	r25, 7
     f5a:	08 95       	ret

00000f5c <__mulsf3>:
     f5c:	0b d0       	rcall	.+22     	; 0xf74 <__mulsf3x>
     f5e:	ad cf       	rjmp	.-166    	; 0xeba <__fp_round>
     f60:	9e df       	rcall	.-196    	; 0xe9e <__fp_pscA>
     f62:	28 f0       	brcs	.+10     	; 0xf6e <__mulsf3+0x12>
     f64:	a3 df       	rcall	.-186    	; 0xeac <__fp_pscB>
     f66:	18 f0       	brcs	.+6      	; 0xf6e <__mulsf3+0x12>
     f68:	95 23       	and	r25, r21
     f6a:	09 f0       	breq	.+2      	; 0xf6e <__mulsf3+0x12>
     f6c:	66 cf       	rjmp	.-308    	; 0xe3a <__fp_inf>
     f6e:	94 cf       	rjmp	.-216    	; 0xe98 <__fp_nan>
     f70:	11 24       	eor	r1, r1
     f72:	ee cf       	rjmp	.-36     	; 0xf50 <__fp_szero>

00000f74 <__mulsf3x>:
     f74:	b3 df       	rcall	.-154    	; 0xedc <__fp_split3>
     f76:	a0 f3       	brcs	.-24     	; 0xf60 <__mulsf3+0x4>

00000f78 <__mulsf3_pse>:
     f78:	95 9f       	mul	r25, r21
     f7a:	d1 f3       	breq	.-12     	; 0xf70 <__mulsf3+0x14>
     f7c:	95 0f       	add	r25, r21
     f7e:	50 e0       	ldi	r21, 0x00	; 0
     f80:	55 1f       	adc	r21, r21
     f82:	62 9f       	mul	r22, r18
     f84:	f0 01       	movw	r30, r0
     f86:	72 9f       	mul	r23, r18
     f88:	bb 27       	eor	r27, r27
     f8a:	f0 0d       	add	r31, r0
     f8c:	b1 1d       	adc	r27, r1
     f8e:	63 9f       	mul	r22, r19
     f90:	aa 27       	eor	r26, r26
     f92:	f0 0d       	add	r31, r0
     f94:	b1 1d       	adc	r27, r1
     f96:	aa 1f       	adc	r26, r26
     f98:	64 9f       	mul	r22, r20
     f9a:	66 27       	eor	r22, r22
     f9c:	b0 0d       	add	r27, r0
     f9e:	a1 1d       	adc	r26, r1
     fa0:	66 1f       	adc	r22, r22
     fa2:	82 9f       	mul	r24, r18
     fa4:	22 27       	eor	r18, r18
     fa6:	b0 0d       	add	r27, r0
     fa8:	a1 1d       	adc	r26, r1
     faa:	62 1f       	adc	r22, r18
     fac:	73 9f       	mul	r23, r19
     fae:	b0 0d       	add	r27, r0
     fb0:	a1 1d       	adc	r26, r1
     fb2:	62 1f       	adc	r22, r18
     fb4:	83 9f       	mul	r24, r19
     fb6:	a0 0d       	add	r26, r0
     fb8:	61 1d       	adc	r22, r1
     fba:	22 1f       	adc	r18, r18
     fbc:	74 9f       	mul	r23, r20
     fbe:	33 27       	eor	r19, r19
     fc0:	a0 0d       	add	r26, r0
     fc2:	61 1d       	adc	r22, r1
     fc4:	23 1f       	adc	r18, r19
     fc6:	84 9f       	mul	r24, r20
     fc8:	60 0d       	add	r22, r0
     fca:	21 1d       	adc	r18, r1
     fcc:	82 2f       	mov	r24, r18
     fce:	76 2f       	mov	r23, r22
     fd0:	6a 2f       	mov	r22, r26
     fd2:	11 24       	eor	r1, r1
     fd4:	9f 57       	subi	r25, 0x7F	; 127
     fd6:	50 40       	sbci	r21, 0x00	; 0
     fd8:	8a f0       	brmi	.+34     	; 0xffc <__mulsf3_pse+0x84>
     fda:	e1 f0       	breq	.+56     	; 0x1014 <__mulsf3_pse+0x9c>
     fdc:	88 23       	and	r24, r24
     fde:	4a f0       	brmi	.+18     	; 0xff2 <__mulsf3_pse+0x7a>
     fe0:	ee 0f       	add	r30, r30
     fe2:	ff 1f       	adc	r31, r31
     fe4:	bb 1f       	adc	r27, r27
     fe6:	66 1f       	adc	r22, r22
     fe8:	77 1f       	adc	r23, r23
     fea:	88 1f       	adc	r24, r24
     fec:	91 50       	subi	r25, 0x01	; 1
     fee:	50 40       	sbci	r21, 0x00	; 0
     ff0:	a9 f7       	brne	.-22     	; 0xfdc <__mulsf3_pse+0x64>
     ff2:	9e 3f       	cpi	r25, 0xFE	; 254
     ff4:	51 05       	cpc	r21, r1
     ff6:	70 f0       	brcs	.+28     	; 0x1014 <__mulsf3_pse+0x9c>
     ff8:	20 cf       	rjmp	.-448    	; 0xe3a <__fp_inf>
     ffa:	aa cf       	rjmp	.-172    	; 0xf50 <__fp_szero>
     ffc:	5f 3f       	cpi	r21, 0xFF	; 255
     ffe:	ec f3       	brlt	.-6      	; 0xffa <__mulsf3_pse+0x82>
    1000:	98 3e       	cpi	r25, 0xE8	; 232
    1002:	dc f3       	brlt	.-10     	; 0xffa <__mulsf3_pse+0x82>
    1004:	86 95       	lsr	r24
    1006:	77 95       	ror	r23
    1008:	67 95       	ror	r22
    100a:	b7 95       	ror	r27
    100c:	f7 95       	ror	r31
    100e:	e7 95       	ror	r30
    1010:	9f 5f       	subi	r25, 0xFF	; 255
    1012:	c1 f7       	brne	.-16     	; 0x1004 <__mulsf3_pse+0x8c>
    1014:	fe 2b       	or	r31, r30
    1016:	88 0f       	add	r24, r24
    1018:	91 1d       	adc	r25, r1
    101a:	96 95       	lsr	r25
    101c:	87 95       	ror	r24
    101e:	97 f9       	bld	r25, 7
    1020:	08 95       	ret

00001022 <__udivmodqi4>:
    1022:	99 1b       	sub	r25, r25
    1024:	79 e0       	ldi	r23, 0x09	; 9
    1026:	04 c0       	rjmp	.+8      	; 0x1030 <__udivmodqi4_ep>

00001028 <__udivmodqi4_loop>:
    1028:	99 1f       	adc	r25, r25
    102a:	96 17       	cp	r25, r22
    102c:	08 f0       	brcs	.+2      	; 0x1030 <__udivmodqi4_ep>
    102e:	96 1b       	sub	r25, r22

00001030 <__udivmodqi4_ep>:
    1030:	88 1f       	adc	r24, r24
    1032:	7a 95       	dec	r23
    1034:	c9 f7       	brne	.-14     	; 0x1028 <__udivmodqi4_loop>
    1036:	80 95       	com	r24
    1038:	08 95       	ret

0000103a <__udivmodhi4>:
    103a:	aa 1b       	sub	r26, r26
    103c:	bb 1b       	sub	r27, r27
    103e:	51 e1       	ldi	r21, 0x11	; 17
    1040:	07 c0       	rjmp	.+14     	; 0x1050 <__udivmodhi4_ep>

00001042 <__udivmodhi4_loop>:
    1042:	aa 1f       	adc	r26, r26
    1044:	bb 1f       	adc	r27, r27
    1046:	a6 17       	cp	r26, r22
    1048:	b7 07       	cpc	r27, r23
    104a:	10 f0       	brcs	.+4      	; 0x1050 <__udivmodhi4_ep>
    104c:	a6 1b       	sub	r26, r22
    104e:	b7 0b       	sbc	r27, r23

00001050 <__udivmodhi4_ep>:
    1050:	88 1f       	adc	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	5a 95       	dec	r21
    1056:	a9 f7       	brne	.-22     	; 0x1042 <__udivmodhi4_loop>
    1058:	80 95       	com	r24
    105a:	90 95       	com	r25
    105c:	bc 01       	movw	r22, r24
    105e:	cd 01       	movw	r24, r26
    1060:	08 95       	ret

00001062 <__udivmodsi4>:
    1062:	a1 e2       	ldi	r26, 0x21	; 33
    1064:	1a 2e       	mov	r1, r26
    1066:	aa 1b       	sub	r26, r26
    1068:	bb 1b       	sub	r27, r27
    106a:	fd 01       	movw	r30, r26
    106c:	0d c0       	rjmp	.+26     	; 0x1088 <__udivmodsi4_ep>

0000106e <__udivmodsi4_loop>:
    106e:	aa 1f       	adc	r26, r26
    1070:	bb 1f       	adc	r27, r27
    1072:	ee 1f       	adc	r30, r30
    1074:	ff 1f       	adc	r31, r31
    1076:	a2 17       	cp	r26, r18
    1078:	b3 07       	cpc	r27, r19
    107a:	e4 07       	cpc	r30, r20
    107c:	f5 07       	cpc	r31, r21
    107e:	20 f0       	brcs	.+8      	; 0x1088 <__udivmodsi4_ep>
    1080:	a2 1b       	sub	r26, r18
    1082:	b3 0b       	sbc	r27, r19
    1084:	e4 0b       	sbc	r30, r20
    1086:	f5 0b       	sbc	r31, r21

00001088 <__udivmodsi4_ep>:
    1088:	66 1f       	adc	r22, r22
    108a:	77 1f       	adc	r23, r23
    108c:	88 1f       	adc	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	1a 94       	dec	r1
    1092:	69 f7       	brne	.-38     	; 0x106e <__udivmodsi4_loop>
    1094:	60 95       	com	r22
    1096:	70 95       	com	r23
    1098:	80 95       	com	r24
    109a:	90 95       	com	r25
    109c:	9b 01       	movw	r18, r22
    109e:	ac 01       	movw	r20, r24
    10a0:	bd 01       	movw	r22, r26
    10a2:	cf 01       	movw	r24, r30
    10a4:	08 95       	ret

000010a6 <toupper>:
    10a6:	91 11       	cpse	r25, r1
    10a8:	08 95       	ret
    10aa:	81 56       	subi	r24, 0x61	; 97
    10ac:	8a 51       	subi	r24, 0x1A	; 26
    10ae:	08 f4       	brcc	.+2      	; 0x10b2 <toupper+0xc>
    10b0:	80 52       	subi	r24, 0x20	; 32
    10b2:	85 58       	subi	r24, 0x85	; 133
    10b4:	08 95       	ret

000010b6 <_exit>:
    10b6:	f8 94       	cli

000010b8 <__stop_program>:
    10b8:	ff cf       	rjmp	.-2      	; 0x10b8 <__stop_program>
