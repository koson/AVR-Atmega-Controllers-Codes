
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800200  00000b08  00000b9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080020a  0080020a  00000ba6  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000126  00000000  00000000  00000bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ef  00000000  00000000  00000cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000244  00000000  00000000  000014db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000754  00000000  00000000  0000171f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00001e74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001a1  00000000  00000000  00001f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000320  00000000  00000000  00002105  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00002425  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	e8 e0       	ldi	r30, 0x08	; 8
  f8:	fb e0       	ldi	r31, 0x0B	; 11
  fa:	02 c0       	rjmp	.+4      	; 0x100 <.do_copy_data_start>

000000fc <.do_copy_data_loop>:
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0

00000100 <.do_copy_data_start>:
 100:	aa 30       	cpi	r26, 0x0A	; 10
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <.do_copy_data_loop>

00000106 <__do_clear_bss>:
 106:	12 e0       	ldi	r17, 0x02	; 2
 108:	aa e0       	ldi	r26, 0x0A	; 10
 10a:	b2 e0       	ldi	r27, 0x02	; 2
 10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
 10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
 110:	a1 31       	cpi	r26, 0x11	; 17
 112:	b1 07       	cpc	r27, r17
 114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
 116:	0e 94 24 03 	call	0x648	; 0x648 <main>
 11a:	0c 94 82 05 	jmp	0xb04	; 0xb04 <_exit>

0000011e <__bad_interrupt>:
 11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <WaitMs>:

unsigned char ch[10] = {'0','1','2','3','4','5','6','7','8','9'};
unsigned char tenthousand=0,thousand=0,hundred=0,ten=0,one=0;

void WaitMs(unsigned int ms)
{
 122:	0a c0       	rjmp	.+20     	; 0x138 <WaitMs+0x16>
	int i;
	while (ms-- > 0)
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	30 e0       	ldi	r19, 0x00	; 0
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 128:	00 00       	nop
	int i;
	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 12a:	2f 5f       	subi	r18, 0xFF	; 255
 12c:	3f 4f       	sbci	r19, 0xFF	; 255
 12e:	4c e0       	ldi	r20, 0x0C	; 12
 130:	2c 3c       	cpi	r18, 0xCC	; 204
 132:	34 07       	cpc	r19, r20
 134:	c9 f7       	brne	.-14     	; 0x128 <WaitMs+0x6>
 136:	01 97       	sbiw	r24, 0x01	; 1
unsigned char tenthousand=0,thousand=0,hundred=0,ten=0,one=0;

void WaitMs(unsigned int ms)
{
	int i;
	while (ms-- > 0)
 138:	00 97       	sbiw	r24, 0x00	; 0
 13a:	a1 f7       	brne	.-24     	; 0x124 <WaitMs+0x2>
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
	}
}
 13c:	08 95       	ret

0000013e <toggleE>:

void toggleE(void)
{
	SETBIT(PORTE,BIT(0));
 13e:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 140:	83 e3       	ldi	r24, 0x33	; 51
 142:	97 e0       	ldi	r25, 0x07	; 7
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <toggleE+0x6>
	_delay_us(500);
	CLEARBIT(PORTE,BIT(0));
 148:	70 98       	cbi	0x0e, 0	; 14
}
 14a:	08 95       	ret

0000014c <CheckTemp>:

void CheckTemp(uint8_t temp)
{
 14c:	df 93       	push	r29
 14e:	cf 93       	push	r28
 150:	0f 92       	push	r0
 152:	cd b7       	in	r28, 0x3d	; 61
 154:	de b7       	in	r29, 0x3e	; 62
 156:	89 83       	std	Y+1, r24	; 0x01
	if (bit_is_set(temp, 7))
 158:	fe 01       	movw	r30, r28
 15a:	31 96       	adiw	r30, 0x01	; 1
 15c:	89 81       	ldd	r24, Y+1	; 0x01
 15e:	87 ff       	sbrs	r24, 7
 160:	02 c0       	rjmp	.+4      	; 0x166 <CheckTemp+0x1a>
	{
		SETBIT(PORTE, BIT(7))
 162:	77 9a       	sbi	0x0e, 7	; 14
 164:	01 c0       	rjmp	.+2      	; 0x168 <CheckTemp+0x1c>
	}
	else
	{
		CLEARBIT(PORTE, BIT(7))
 166:	77 98       	cbi	0x0e, 7	; 14
	}
	
	if (bit_is_set(temp, 6))
 168:	80 81       	ld	r24, Z
 16a:	86 ff       	sbrs	r24, 6
 16c:	02 c0       	rjmp	.+4      	; 0x172 <CheckTemp+0x26>
	{
		SETBIT(PORTE, BIT(6))
 16e:	76 9a       	sbi	0x0e, 6	; 14
 170:	01 c0       	rjmp	.+2      	; 0x174 <CheckTemp+0x28>
	}
	else
	{
		CLEARBIT(PORTE, BIT(6))
 172:	76 98       	cbi	0x0e, 6	; 14
	}
	if (bit_is_set(temp, 1))
 174:	80 81       	ld	r24, Z
 176:	81 ff       	sbrs	r24, 1
 178:	02 c0       	rjmp	.+4      	; 0x17e <CheckTemp+0x32>
	{
		SETBIT(PORTE, BIT(1))
 17a:	71 9a       	sbi	0x0e, 1	; 14
 17c:	01 c0       	rjmp	.+2      	; 0x180 <CheckTemp+0x34>
	}
	else
	{
		CLEARBIT(PORTE, BIT(1))
 17e:	71 98       	cbi	0x0e, 1	; 14
	}
	
	if (bit_is_set(temp, 2))
 180:	80 81       	ld	r24, Z
 182:	82 ff       	sbrs	r24, 2
 184:	02 c0       	rjmp	.+4      	; 0x18a <CheckTemp+0x3e>
	{
		SETBIT(PORTE, BIT(2))
 186:	72 9a       	sbi	0x0e, 2	; 14
 188:	01 c0       	rjmp	.+2      	; 0x18c <CheckTemp+0x40>
	}
	else
	{
		CLEARBIT(PORTE, BIT(2))
 18a:	72 98       	cbi	0x0e, 2	; 14
	}
	
	if (bit_is_set(temp, 0))
 18c:	80 81       	ld	r24, Z
 18e:	80 ff       	sbrs	r24, 0
 190:	02 c0       	rjmp	.+4      	; 0x196 <CheckTemp+0x4a>
	{
		SETBIT(PORTE, BIT(0))
 192:	70 9a       	sbi	0x0e, 0	; 14
 194:	01 c0       	rjmp	.+2      	; 0x198 <CheckTemp+0x4c>
	}
	else
	{
		CLEARBIT(PORTE, BIT(0))
 196:	70 98       	cbi	0x0e, 0	; 14
	}
}
 198:	0f 90       	pop	r0
 19a:	cf 91       	pop	r28
 19c:	df 91       	pop	r29
 19e:	08 95       	ret

000001a0 <lcd_cmd>:

void lcd_cmd(unsigned char ch)
{
 1a0:	df 92       	push	r13
 1a2:	ef 92       	push	r14
 1a4:	ff 92       	push	r15
 1a6:	0f 93       	push	r16
 1a8:	1f 93       	push	r17
 1aa:	08 2f       	mov	r16, r24
	int temp;
	CLEARBIT(PORTG,BIT(5));
 1ac:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 1ae:	70 98       	cbi	0x0e, 0	; 14

	temp= ch & 0b11000000; // '10'000000
 1b0:	e8 2e       	mov	r14, r24
 1b2:	ff 24       	eor	r15, r15
	CheckTemp(temp);	
 1b4:	80 7c       	andi	r24, 0xC0	; 192
 1b6:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
	//PORTE=temp;
	
	temp=(ch >> 3) & 0b00000110; // 00000'11'0
 1ba:	06 95       	lsr	r16
 1bc:	06 95       	lsr	r16
 1be:	06 95       	lsr	r16
 1c0:	10 e0       	ldi	r17, 0x00	; 0
 1c2:	06 70       	andi	r16, 0x06	; 6
 1c4:	10 70       	andi	r17, 0x00	; 0
	temp = PORTE | temp;
 1c6:	8e b1       	in	r24, 0x0e	; 14
	
	CheckTemp(temp);
 1c8:	80 2b       	or	r24, r16
 1ca:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1ce:	38 e1       	ldi	r19, 0x18	; 24
 1d0:	d3 2e       	mov	r13, r19
 1d2:	8d 2d       	mov	r24, r13
 1d4:	8a 95       	dec	r24
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_cmd+0x34>
	}
}

void toggleE(void)
{
	SETBIT(PORTE,BIT(0));
 1d8:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1da:	03 e3       	ldi	r16, 0x33	; 51
 1dc:	17 e0       	ldi	r17, 0x07	; 7
 1de:	c8 01       	movw	r24, r16
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <lcd_cmd+0x40>
	_delay_us(500);
	CLEARBIT(PORTE,BIT(0));
 1e4:	70 98       	cbi	0x0e, 0	; 14
	CheckTemp(temp);
	_delay_us(5);
	
	toggleE();
   // Extract lower nibble
	SETBIT(PORTG,BIT(5));
 1e6:	a5 9a       	sbi	0x14, 5	; 20
   	CLEARBIT(PORTG,BIT(5));
 1e8:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 1ea:	70 98       	cbi	0x0e, 0	; 14

	temp=(ch << 4) & 0b11000000; // '10'000000
	CheckTemp(temp);
 1ec:	c7 01       	movw	r24, r14
 1ee:	24 e0       	ldi	r18, 0x04	; 4
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	2a 95       	dec	r18
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <lcd_cmd+0x50>
 1f8:	80 7c       	andi	r24, 0xC0	; 192
 1fa:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
	temp=(ch << 1) & 0b00000110; // 00000'01'0 
 1fe:	ee 0c       	add	r14, r14
 200:	ff 1c       	adc	r15, r15
 202:	86 e0       	ldi	r24, 0x06	; 6
 204:	e8 22       	and	r14, r24
 206:	ff 24       	eor	r15, r15
	temp= PORTE | temp;
 208:	8e b1       	in	r24, 0x0e	; 14
	CheckTemp(temp);
 20a:	8e 29       	or	r24, r14
 20c:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 210:	da 94       	dec	r13
 212:	f1 f7       	brne	.-4      	; 0x210 <lcd_cmd+0x70>
	}
}

void toggleE(void)
{
	SETBIT(PORTE,BIT(0));
 214:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 216:	c8 01       	movw	r24, r16
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <lcd_cmd+0x78>
	_delay_us(500);
	CLEARBIT(PORTE,BIT(0));
 21c:	70 98       	cbi	0x0e, 0	; 14
	temp= PORTE | temp;
	CheckTemp(temp);
	_delay_us(5);
	toggleE();
   	//PORTE = 0x00;
	CLEARBIT(PORTE,BIT(0));			//Enable
 21e:	70 98       	cbi	0x0e, 0	; 14
	CLEARBIT(PORTE,BIT(1));
 220:	71 98       	cbi	0x0e, 1	; 14
	CLEARBIT(PORTE,BIT(2));
 222:	72 98       	cbi	0x0e, 2	; 14
	CLEARBIT(PORTE,BIT(6));
 224:	76 98       	cbi	0x0e, 6	; 14
	CLEARBIT(PORTE,BIT(7));
 226:	77 98       	cbi	0x0e, 7	; 14
   	WaitMs(10);
 228:	8a e0       	ldi	r24, 0x0A	; 10
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
}
 230:	1f 91       	pop	r17
 232:	0f 91       	pop	r16
 234:	ff 90       	pop	r15
 236:	ef 90       	pop	r14
 238:	df 90       	pop	r13
 23a:	08 95       	ret

0000023c <lcd_init>:

void lcd_init(void)
{
	DDRE |= (1<<0) | (1<<1) | (1<<2) | (1<<6) | (1<<7);
 23c:	8d b1       	in	r24, 0x0d	; 13
 23e:	87 6c       	ori	r24, 0xC7	; 199
 240:	8d b9       	out	0x0d, r24	; 13
	DDRG |= (1<<5);
 242:	9d 9a       	sbi	0x13, 5	; 19
	WaitMs(15);
 244:	8f e0       	ldi	r24, 0x0F	; 15
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
	CLEARBIT(PORTG,BIT(5));			//RS
 24c:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));			//Enable
 24e:	70 98       	cbi	0x0e, 0	; 14
	CLEARBIT(PORTE,BIT(1));
 250:	71 98       	cbi	0x0e, 1	; 14
	CLEARBIT(PORTE,BIT(2));
 252:	72 98       	cbi	0x0e, 2	; 14
	CLEARBIT(PORTE,BIT(6));
 254:	76 98       	cbi	0x0e, 6	; 14
	CLEARBIT(PORTE,BIT(7));
 256:	77 98       	cbi	0x0e, 7	; 14
	lcd_cmd(0x20);		//data is 8-bit length
 258:	80 e2       	ldi	r24, 0x20	; 32
 25a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
	WaitMs(1);
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
	lcd_cmd(0x20);		//data is 8-bit length
 266:	80 e2       	ldi	r24, 0x20	; 32
 268:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
	WaitMs(1);
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
	lcd_cmd(0x20);		//data is 8-bit length
 274:	80 e2       	ldi	r24, 0x20	; 32
 276:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
	WaitMs(1);
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
	lcd_cmd(0x28);		//sets character font
 282:	88 e2       	ldi	r24, 0x28	; 40
 284:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
	WaitMs(1);
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
	lcd_cmd(0x0E);		//display off(d,c,b=0) 08
 290:	8e e0       	ldi	r24, 0x0E	; 14
 292:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
	WaitMs(1);
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
	lcd_cmd(0x01);		//clears the data
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
	WaitMs(1);
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
	lcd_cmd(0x6);		//entry mode--increment
 2ac:	86 e0       	ldi	r24, 0x06	; 6
 2ae:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
	WaitMs(1);
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
}
 2ba:	08 95       	ret

000002bc <lcd_char>:

void lcd_char(unsigned char data)
{	
 2bc:	df 92       	push	r13
 2be:	ef 92       	push	r14
 2c0:	ff 92       	push	r15
 2c2:	0f 93       	push	r16
 2c4:	1f 93       	push	r17
 2c6:	08 2f       	mov	r16, r24
	int temp;
	WaitMs(15);
 2c8:	8f e0       	ldi	r24, 0x0F	; 15
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
	SETBIT(PORTG,BIT(5));
 2d0:	a5 9a       	sbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 2d2:	70 98       	cbi	0x0e, 0	; 14
	temp= (data & 0b11000000); // '10'000000
 2d4:	e0 2e       	mov	r14, r16
 2d6:	ff 24       	eor	r15, r15
	CheckTemp(temp);
 2d8:	80 2f       	mov	r24, r16
 2da:	80 7c       	andi	r24, 0xC0	; 192
 2dc:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
	temp=(data>>3) & 0b00000110; // 00000'11'0
 2e0:	06 95       	lsr	r16
 2e2:	06 95       	lsr	r16
 2e4:	06 95       	lsr	r16
 2e6:	10 e0       	ldi	r17, 0x00	; 0
 2e8:	06 70       	andi	r16, 0x06	; 6
 2ea:	10 70       	andi	r17, 0x00	; 0
	temp = PORTE | temp;
 2ec:	8e b1       	in	r24, 0x0e	; 14
	CheckTemp(temp);
 2ee:	80 2b       	or	r24, r16
 2f0:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2f4:	68 e1       	ldi	r22, 0x18	; 24
 2f6:	d6 2e       	mov	r13, r22
 2f8:	8d 2d       	mov	r24, r13
 2fa:	8a 95       	dec	r24
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <lcd_char+0x3e>
	}
}

void toggleE(void)
{
	SETBIT(PORTE,BIT(0));
 2fe:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 300:	03 e3       	ldi	r16, 0x33	; 51
 302:	17 e0       	ldi	r17, 0x07	; 7
 304:	c8 01       	movw	r24, r16
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <lcd_char+0x4a>
	_delay_us(500);
	CLEARBIT(PORTE,BIT(0));
 30a:	70 98       	cbi	0x0e, 0	; 14
	temp = PORTE | temp;
	CheckTemp(temp);
	_delay_us(5);
	toggleE();	
	
	CLEARBIT(PORTG,BIT(5));
 30c:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 30e:	70 98       	cbi	0x0e, 0	; 14
	SETBIT(PORTG,BIT(5));
 310:	a5 9a       	sbi	0x14, 5	; 20
	temp=(data << 4) & 0b11000000; // '10'000000
	CheckTemp(temp);
 312:	c7 01       	movw	r24, r14
 314:	54 e0       	ldi	r21, 0x04	; 4
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	5a 95       	dec	r21
 31c:	e1 f7       	brne	.-8      	; 0x316 <lcd_char+0x5a>
 31e:	80 7c       	andi	r24, 0xC0	; 192
 320:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
	temp=(data << 1) & 0b00000110; // 00000'01'0 
 324:	ee 0c       	add	r14, r14
 326:	ff 1c       	adc	r15, r15
 328:	86 e0       	ldi	r24, 0x06	; 6
 32a:	e8 22       	and	r14, r24
 32c:	ff 24       	eor	r15, r15
	temp = PORTE | temp;
 32e:	8e b1       	in	r24, 0x0e	; 14
	CheckTemp(temp);
 330:	8e 29       	or	r24, r14
 332:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 336:	da 94       	dec	r13
 338:	f1 f7       	brne	.-4      	; 0x336 <lcd_char+0x7a>
	}
}

void toggleE(void)
{
	SETBIT(PORTE,BIT(0));
 33a:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 33c:	c8 01       	movw	r24, r16
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <lcd_char+0x82>
	_delay_us(500);
	CLEARBIT(PORTE,BIT(0));
 342:	70 98       	cbi	0x0e, 0	; 14
	temp=(data << 1) & 0b00000110; // 00000'01'0 
	temp = PORTE | temp;
	CheckTemp(temp);
	_delay_us(5);				
	toggleE();
}
 344:	1f 91       	pop	r17
 346:	0f 91       	pop	r16
 348:	ff 90       	pop	r15
 34a:	ef 90       	pop	r14
 34c:	df 90       	pop	r13
 34e:	08 95       	ret

00000350 <lcd_string>:

void lcd_string(unsigned char str[32])
{
 350:	af 92       	push	r10
 352:	bf 92       	push	r11
 354:	cf 92       	push	r12
 356:	df 92       	push	r13
 358:	ff 92       	push	r15
 35a:	0f 93       	push	r16
 35c:	1f 93       	push	r17
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	6c 01       	movw	r12, r24
	int poop,bitch;
	unsigned char k=0;
	SETBIT(PORTG,BIT(5));
 364:	a5 9a       	sbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 366:	70 98       	cbi	0x0e, 0	; 14
 368:	ff 24       	eor	r15, r15
 36a:	a3 e3       	ldi	r26, 0x33	; 51
 36c:	aa 2e       	mov	r10, r26
 36e:	a7 e0       	ldi	r26, 0x07	; 7
 370:	ba 2e       	mov	r11, r26
 372:	3e c0       	rjmp	.+124    	; 0x3f0 <lcd_string+0xa0>
	while(str[k]!='\0')	//Till null character is encountered
	{
		if(k==16)
 374:	80 e1       	ldi	r24, 0x10	; 16
 376:	f8 16       	cp	r15, r24
 378:	19 f4       	brne	.+6      	; 0x380 <lcd_string+0x30>
		lcd_cmd(LINE2);
 37a:	80 ec       	ldi	r24, 0xC0	; 192
 37c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
		SETBIT(PORTG,BIT(5));
 380:	a5 9a       	sbi	0x14, 5	; 20
		CLEARBIT(PORTE,BIT(0));
 382:	70 98       	cbi	0x0e, 0	; 14
		bitch=str[k]; //10111001
 384:	08 81       	ld	r16, Y
 386:	10 e0       	ldi	r17, 0x00	; 0
		poop= bitch & 0b11000000; // '10'000000
		CheckTemp(poop);
 388:	80 2f       	mov	r24, r16
 38a:	80 7c       	andi	r24, 0xC0	; 192
 38c:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
		//PORTE=poop;
		poop=(bitch>>3) & 0b00000110; // 00000'11'0
 390:	f3 e0       	ldi	r31, 0x03	; 3
 392:	15 95       	asr	r17
 394:	07 95       	ror	r16
 396:	fa 95       	dec	r31
 398:	e1 f7       	brne	.-8      	; 0x392 <lcd_string+0x42>
 39a:	06 70       	andi	r16, 0x06	; 6
 39c:	10 70       	andi	r17, 0x00	; 0
		poop = PORTE | poop;
 39e:	8e b1       	in	r24, 0x0e	; 14
		CheckTemp(poop);
 3a0:	80 2b       	or	r24, r16
 3a2:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
	}
}

void toggleE(void)
{
	SETBIT(PORTE,BIT(0));
 3a6:	70 9a       	sbi	0x0e, 0	; 14
 3a8:	c5 01       	movw	r24, r10
 3aa:	01 97       	sbiw	r24, 0x01	; 1
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <lcd_string+0x5a>
	_delay_us(500);
	CLEARBIT(PORTE,BIT(0));
 3ae:	70 98       	cbi	0x0e, 0	; 14
		poop=(bitch>>3) & 0b00000110; // 00000'11'0
		poop = PORTE | poop;
		CheckTemp(poop);
		
		toggleE();
		CLEARBIT(PORTG,BIT(5))
 3b0:	a5 98       	cbi	0x14, 5	; 20
		SETBIT(PORTG,BIT(5));
 3b2:	a5 9a       	sbi	0x14, 5	; 20
		CLEARBIT(PORTE,BIT(0));
 3b4:	70 98       	cbi	0x0e, 0	; 14
		bitch=str[k];
 3b6:	08 81       	ld	r16, Y
 3b8:	10 e0       	ldi	r17, 0x00	; 0
		poop=(bitch << 4) & 0b11000000; // '10'000000
		CheckTemp(poop);
 3ba:	c8 01       	movw	r24, r16
 3bc:	e4 e0       	ldi	r30, 0x04	; 4
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	ea 95       	dec	r30
 3c4:	e1 f7       	brne	.-8      	; 0x3be <lcd_string+0x6e>
 3c6:	80 7c       	andi	r24, 0xC0	; 192
 3c8:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
		poop=(bitch << 1) & 0b00000110; // 00000'01'0
 3cc:	00 0f       	add	r16, r16
 3ce:	11 1f       	adc	r17, r17
 3d0:	06 70       	andi	r16, 0x06	; 6
 3d2:	10 70       	andi	r17, 0x00	; 0
		poop = PORTE | poop;
 3d4:	8e b1       	in	r24, 0x0e	; 14
		CheckTemp(poop);
 3d6:	80 2b       	or	r24, r16
 3d8:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
	}
}

void toggleE(void)
{
	SETBIT(PORTE,BIT(0));
 3dc:	70 9a       	sbi	0x0e, 0	; 14
 3de:	c5 01       	movw	r24, r10
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <lcd_string+0x90>
	_delay_us(500);
	CLEARBIT(PORTE,BIT(0));
 3e4:	70 98       	cbi	0x0e, 0	; 14
		CheckTemp(poop);
		poop=(bitch << 1) & 0b00000110; // 00000'01'0
		poop = PORTE | poop;
		CheckTemp(poop);
		toggleE();
		k++;
 3e6:	f3 94       	inc	r15
		WaitMs(1);
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
{
	int poop,bitch;
	unsigned char k=0;
	SETBIT(PORTG,BIT(5));
	CLEARBIT(PORTE,BIT(0));
	while(str[k]!='\0')	//Till null character is encountered
 3f0:	e6 01       	movw	r28, r12
 3f2:	cf 0d       	add	r28, r15
 3f4:	d1 1d       	adc	r29, r1
 3f6:	88 81       	ld	r24, Y
 3f8:	88 23       	and	r24, r24
 3fa:	09 f0       	breq	.+2      	; 0x3fe <lcd_string+0xae>
 3fc:	bb cf       	rjmp	.-138    	; 0x374 <lcd_string+0x24>
		CheckTemp(poop);
		toggleE();
		k++;
		WaitMs(1);
	}
}
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	1f 91       	pop	r17
 404:	0f 91       	pop	r16
 406:	ff 90       	pop	r15
 408:	df 90       	pop	r13
 40a:	cf 90       	pop	r12
 40c:	bf 90       	pop	r11
 40e:	af 90       	pop	r10
 410:	08 95       	ret

00000412 <lcd_showvalue>:

void lcd_showvalue(long int num)
{
 412:	8f 92       	push	r8
 414:	9f 92       	push	r9
 416:	af 92       	push	r10
 418:	bf 92       	push	r11
 41a:	cf 92       	push	r12
 41c:	df 92       	push	r13
 41e:	ef 92       	push	r14
 420:	ff 92       	push	r15
 422:	1f 93       	push	r17
 424:	cf 93       	push	r28
 426:	df 93       	push	r29
 428:	6b 01       	movw	r12, r22
 42a:	7c 01       	movw	r14, r24
	if (num < 0)
 42c:	97 ff       	sbrs	r25, 7
 42e:	0b c0       	rjmp	.+22     	; 0x446 <lcd_showvalue+0x34>
	{
		lcd_char('-');
 430:	8d e2       	ldi	r24, 0x2D	; 45
 432:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_char>
		num = -num;
 436:	f0 94       	com	r15
 438:	e0 94       	com	r14
 43a:	d0 94       	com	r13
 43c:	c0 94       	com	r12
 43e:	c1 1c       	adc	r12, r1
 440:	d1 1c       	adc	r13, r1
 442:	e1 1c       	adc	r14, r1
 444:	f1 1c       	adc	r15, r1
	
	unsigned long int n = 0;
	int flag = 0;


	if(num%100000 == 0)
 446:	c7 01       	movw	r24, r14
 448:	b6 01       	movw	r22, r12
 44a:	20 ea       	ldi	r18, 0xA0	; 160
 44c:	36 e8       	ldi	r19, 0x86	; 134
 44e:	41 e0       	ldi	r20, 0x01	; 1
 450:	50 e0       	ldi	r21, 0x00	; 0
 452:	0e 94 67 05 	call	0xace	; 0xace <__divmodsi4>
 456:	61 15       	cp	r22, r1
 458:	71 05       	cpc	r23, r1
 45a:	81 05       	cpc	r24, r1
 45c:	91 05       	cpc	r25, r1
 45e:	19 f4       	brne	.+6      	; 0x466 <lcd_showvalue+0x54>
 460:	c5 e0       	ldi	r28, 0x05	; 5
 462:	d0 e0       	ldi	r29, 0x00	; 0
 464:	41 c0       	rjmp	.+130    	; 0x4e8 <lcd_showvalue+0xd6>
	{
		flag = 5;
	}
	
	else if(num%10000 == 0)
 466:	c7 01       	movw	r24, r14
 468:	b6 01       	movw	r22, r12
 46a:	20 e1       	ldi	r18, 0x10	; 16
 46c:	37 e2       	ldi	r19, 0x27	; 39
 46e:	40 e0       	ldi	r20, 0x00	; 0
 470:	50 e0       	ldi	r21, 0x00	; 0
 472:	0e 94 67 05 	call	0xace	; 0xace <__divmodsi4>
 476:	61 15       	cp	r22, r1
 478:	71 05       	cpc	r23, r1
 47a:	81 05       	cpc	r24, r1
 47c:	91 05       	cpc	r25, r1
 47e:	19 f4       	brne	.+6      	; 0x486 <lcd_showvalue+0x74>
 480:	c4 e0       	ldi	r28, 0x04	; 4
 482:	d0 e0       	ldi	r29, 0x00	; 0
 484:	31 c0       	rjmp	.+98     	; 0x4e8 <lcd_showvalue+0xd6>
	{
		flag = 4;
	}

	else if(num%1000 == 0)
 486:	c7 01       	movw	r24, r14
 488:	b6 01       	movw	r22, r12
 48a:	28 ee       	ldi	r18, 0xE8	; 232
 48c:	33 e0       	ldi	r19, 0x03	; 3
 48e:	40 e0       	ldi	r20, 0x00	; 0
 490:	50 e0       	ldi	r21, 0x00	; 0
 492:	0e 94 67 05 	call	0xace	; 0xace <__divmodsi4>
 496:	61 15       	cp	r22, r1
 498:	71 05       	cpc	r23, r1
 49a:	81 05       	cpc	r24, r1
 49c:	91 05       	cpc	r25, r1
 49e:	19 f4       	brne	.+6      	; 0x4a6 <lcd_showvalue+0x94>
 4a0:	c3 e0       	ldi	r28, 0x03	; 3
 4a2:	d0 e0       	ldi	r29, 0x00	; 0
 4a4:	21 c0       	rjmp	.+66     	; 0x4e8 <lcd_showvalue+0xd6>
	{
		flag = 3;
	}

	else if(num%100 == 0)
 4a6:	c7 01       	movw	r24, r14
 4a8:	b6 01       	movw	r22, r12
 4aa:	24 e6       	ldi	r18, 0x64	; 100
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	40 e0       	ldi	r20, 0x00	; 0
 4b0:	50 e0       	ldi	r21, 0x00	; 0
 4b2:	0e 94 67 05 	call	0xace	; 0xace <__divmodsi4>
 4b6:	61 15       	cp	r22, r1
 4b8:	71 05       	cpc	r23, r1
 4ba:	81 05       	cpc	r24, r1
 4bc:	91 05       	cpc	r25, r1
 4be:	19 f4       	brne	.+6      	; 0x4c6 <lcd_showvalue+0xb4>
 4c0:	c2 e0       	ldi	r28, 0x02	; 2
 4c2:	d0 e0       	ldi	r29, 0x00	; 0
 4c4:	11 c0       	rjmp	.+34     	; 0x4e8 <lcd_showvalue+0xd6>
 4c6:	c0 e0       	ldi	r28, 0x00	; 0
 4c8:	d0 e0       	ldi	r29, 0x00	; 0
 4ca:	c7 01       	movw	r24, r14
 4cc:	b6 01       	movw	r22, r12
 4ce:	2a e0       	ldi	r18, 0x0A	; 10
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	40 e0       	ldi	r20, 0x00	; 0
 4d4:	50 e0       	ldi	r21, 0x00	; 0
 4d6:	0e 94 67 05 	call	0xace	; 0xace <__divmodsi4>
 4da:	61 15       	cp	r22, r1
 4dc:	71 05       	cpc	r23, r1
 4de:	81 05       	cpc	r24, r1
 4e0:	91 05       	cpc	r25, r1
 4e2:	11 f4       	brne	.+4      	; 0x4e8 <lcd_showvalue+0xd6>
 4e4:	c1 e0       	ldi	r28, 0x01	; 1
 4e6:	d0 e0       	ldi	r29, 0x00	; 0
 4e8:	88 24       	eor	r8, r8
 4ea:	99 24       	eor	r9, r9
 4ec:	54 01       	movw	r10, r8
 4ee:	23 c0       	rjmp	.+70     	; 0x536 <lcd_showvalue+0x124>


	while(num!=0)
	{
		
		H = num%10;
 4f0:	c7 01       	movw	r24, r14
 4f2:	b6 01       	movw	r22, r12
 4f4:	2a e0       	ldi	r18, 0x0A	; 10
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	40 e0       	ldi	r20, 0x00	; 0
 4fa:	50 e0       	ldi	r21, 0x00	; 0
 4fc:	0e 94 67 05 	call	0xace	; 0xace <__divmodsi4>
 500:	16 2f       	mov	r17, r22
		num = num/10;
 502:	c7 01       	movw	r24, r14
 504:	b6 01       	movw	r22, r12
 506:	2a e0       	ldi	r18, 0x0A	; 10
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	40 e0       	ldi	r20, 0x00	; 0
 50c:	50 e0       	ldi	r21, 0x00	; 0
 50e:	0e 94 67 05 	call	0xace	; 0xace <__divmodsi4>
 512:	c9 01       	movw	r24, r18
 514:	da 01       	movw	r26, r20
 516:	6c 01       	movw	r12, r24
 518:	7d 01       	movw	r14, r26
		n = (n*10)+H;
 51a:	c5 01       	movw	r24, r10
 51c:	b4 01       	movw	r22, r8
 51e:	2a e0       	ldi	r18, 0x0A	; 10
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	40 e0       	ldi	r20, 0x00	; 0
 524:	50 e0       	ldi	r21, 0x00	; 0
 526:	0e 94 12 05 	call	0xa24	; 0xa24 <__mulsi3>
 52a:	4b 01       	movw	r8, r22
 52c:	5c 01       	movw	r10, r24
 52e:	81 0e       	add	r8, r17
 530:	91 1c       	adc	r9, r1
 532:	a1 1c       	adc	r10, r1
 534:	b1 1c       	adc	r11, r1
		flag = 0;
	}



	while(num!=0)
 536:	c1 14       	cp	r12, r1
 538:	d1 04       	cpc	r13, r1
 53a:	e1 04       	cpc	r14, r1
 53c:	f1 04       	cpc	r15, r1
 53e:	c1 f6       	brne	.-80     	; 0x4f0 <lcd_showvalue+0xde>
 540:	19 c0       	rjmp	.+50     	; 0x574 <lcd_showvalue+0x162>
	}
	
	while(n!=0)
	{
		
		H = n%10;
 542:	c5 01       	movw	r24, r10
 544:	b4 01       	movw	r22, r8
 546:	2a e0       	ldi	r18, 0x0A	; 10
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	40 e0       	ldi	r20, 0x00	; 0
 54c:	50 e0       	ldi	r21, 0x00	; 0
 54e:	0e 94 45 05 	call	0xa8a	; 0xa8a <__udivmodsi4>
 552:	16 2f       	mov	r17, r22
		n = n/10;
 554:	c5 01       	movw	r24, r10
 556:	b4 01       	movw	r22, r8
 558:	2a e0       	ldi	r18, 0x0A	; 10
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	40 e0       	ldi	r20, 0x00	; 0
 55e:	50 e0       	ldi	r21, 0x00	; 0
 560:	0e 94 45 05 	call	0xa8a	; 0xa8a <__udivmodsi4>
 564:	c9 01       	movw	r24, r18
 566:	da 01       	movw	r26, r20
 568:	4c 01       	movw	r8, r24
 56a:	5d 01       	movw	r10, r26
		lcd_char(H+48);
 56c:	81 2f       	mov	r24, r17
 56e:	80 5d       	subi	r24, 0xD0	; 208
 570:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_char>
		num = num/10;
		n = (n*10)+H;

	}
	
	while(n!=0)
 574:	81 14       	cp	r8, r1
 576:	91 04       	cpc	r9, r1
 578:	a1 04       	cpc	r10, r1
 57a:	b1 04       	cpc	r11, r1
 57c:	11 f7       	brne	.-60     	; 0x542 <lcd_showvalue+0x130>
 57e:	04 c0       	rjmp	.+8      	; 0x588 <lcd_showvalue+0x176>
	}
	
	
	while(flag > 0)
	{
		lcd_char(48);
 580:	80 e3       	ldi	r24, 0x30	; 48
 582:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_char>
		flag--;
 586:	21 97       	sbiw	r28, 0x01	; 1
		lcd_char(H+48);

	}
	
	
	while(flag > 0)
 588:	20 97       	sbiw	r28, 0x00	; 0
 58a:	d1 f7       	brne	.-12     	; 0x580 <lcd_showvalue+0x16e>
	{
		lcd_char(48);
		flag--;
	}

}
 58c:	df 91       	pop	r29
 58e:	cf 91       	pop	r28
 590:	1f 91       	pop	r17
 592:	ff 90       	pop	r15
 594:	ef 90       	pop	r14
 596:	df 90       	pop	r13
 598:	cf 90       	pop	r12
 59a:	bf 90       	pop	r11
 59c:	af 90       	pop	r10
 59e:	9f 90       	pop	r9
 5a0:	8f 90       	pop	r8
 5a2:	08 95       	ret

000005a4 <lcd_gotoxy1>:

}

void lcd_gotoxy1(unsigned char pos)
{
	lcd_cmd(LINE1+pos);
 5a4:	80 58       	subi	r24, 0x80	; 128
 5a6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
}
 5aa:	08 95       	ret

000005ac <lcd_gotoxy2>:

void lcd_gotoxy2(unsigned char pos)
{
	lcd_cmd(LINE2+pos);
 5ac:	80 54       	subi	r24, 0x40	; 64
 5ae:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
}
 5b2:	08 95       	ret

000005b4 <lcd_showvalueh>:

void lcd_showvalueh(unsigned int num)	//prints the decimal 3digit value of num
{
 5b4:	ef 92       	push	r14
 5b6:	ff 92       	push	r15
 5b8:	0f 93       	push	r16
 5ba:	1f 93       	push	r17
 5bc:	8c 01       	movw	r16, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
 5be:	64 e6       	ldi	r22, 0x64	; 100
 5c0:	70 e0       	ldi	r23, 0x00	; 0
 5c2:	0e 94 31 05 	call	0xa62	; 0xa62 <__udivmodhi4>
 5c6:	46 2f       	mov	r20, r22
	T=(num - (H*100))/10;
 5c8:	26 2f       	mov	r18, r22
 5ca:	30 e0       	ldi	r19, 0x00	; 0
 5cc:	8c e9       	ldi	r24, 0x9C	; 156
 5ce:	9f ef       	ldi	r25, 0xFF	; 255
 5d0:	28 9f       	mul	r18, r24
 5d2:	70 01       	movw	r14, r0
 5d4:	29 9f       	mul	r18, r25
 5d6:	f0 0c       	add	r15, r0
 5d8:	38 9f       	mul	r19, r24
 5da:	f0 0c       	add	r15, r0
 5dc:	11 24       	eor	r1, r1
 5de:	c7 01       	movw	r24, r14
 5e0:	80 0f       	add	r24, r16
 5e2:	91 1f       	adc	r25, r17
 5e4:	6a e0       	ldi	r22, 0x0A	; 10
 5e6:	70 e0       	ldi	r23, 0x00	; 0
 5e8:	0e 94 31 05 	call	0xa62	; 0xa62 <__udivmodhi4>
 5ec:	16 2f       	mov	r17, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+48);
 5ee:	84 2f       	mov	r24, r20
 5f0:	80 5d       	subi	r24, 0xD0	; 208
 5f2:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_char>
	lcd_char(T+48);
 5f6:	81 2f       	mov	r24, r17
 5f8:	80 5d       	subi	r24, 0xD0	; 208
 5fa:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_char>
	lcd_char(O+48);
 5fe:	00 5d       	subi	r16, 0xD0	; 208
 600:	0e 0d       	add	r16, r14
 602:	86 ef       	ldi	r24, 0xF6	; 246
 604:	9f ef       	ldi	r25, 0xFF	; 255
 606:	18 9f       	mul	r17, r24
 608:	60 2d       	mov	r22, r0
 60a:	11 24       	eor	r1, r1
 60c:	86 2f       	mov	r24, r22
 60e:	80 0f       	add	r24, r16
 610:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_char>
}
 614:	1f 91       	pop	r17
 616:	0f 91       	pop	r16
 618:	ff 90       	pop	r15
 61a:	ef 90       	pop	r14
 61c:	08 95       	ret

0000061e <pwm_init>:
#define CLEARBIT(x,b)  x&=~b;
#define TOGGLEBIT(x,b)  x^=b;

void pwm_init(void)
{
	TCCR4A = 0xA8;
 61e:	38 ea       	ldi	r19, 0xA8	; 168
 620:	30 93 a0 00 	sts	0x00A0, r19
	TCCR4B = 0x11;
 624:	21 e1       	ldi	r18, 0x11	; 17
 626:	20 93 a1 00 	sts	0x00A1, r18
	ICR4 = 737;
 62a:	81 ee       	ldi	r24, 0xE1	; 225
 62c:	92 e0       	ldi	r25, 0x02	; 2
 62e:	90 93 a7 00 	sts	0x00A7, r25
 632:	80 93 a6 00 	sts	0x00A6, r24
	TCCR3A = 0xA8;
 636:	30 93 90 00 	sts	0x0090, r19
	TCCR3B = 0x11;
 63a:	20 93 91 00 	sts	0x0091, r18
	ICR3 = 737;
 63e:	90 93 97 00 	sts	0x0097, r25
 642:	80 93 96 00 	sts	0x0096, r24
	
}
 646:	08 95       	ret

00000648 <main>:

int main(void)
{
	pwm_init();
 648:	0e 94 0f 03 	call	0x61e	; 0x61e <pwm_init>
	DDRE |= (1<<3);
 64c:	6b 9a       	sbi	0x0d, 3	; 13
    while(1)
    {
		OCR3A = 737*0.1;
 64e:	89 e4       	ldi	r24, 0x49	; 73
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	90 93 99 00 	sts	0x0099, r25
 656:	80 93 98 00 	sts	0x0098, r24
 65a:	fb cf       	rjmp	.-10     	; 0x652 <main+0xa>

0000065c <lcd_showvaluef>:
	}

}

void lcd_showvaluef(float num)
{
 65c:	ef 92       	push	r14
 65e:	ff 92       	push	r15
 660:	0f 93       	push	r16
 662:	1f 93       	push	r17
 664:	df 93       	push	r29
 666:	cf 93       	push	r28
 668:	00 d0       	rcall	.+0      	; 0x66a <lcd_showvaluef+0xe>
 66a:	00 d0       	rcall	.+0      	; 0x66c <lcd_showvaluef+0x10>
 66c:	cd b7       	in	r28, 0x3d	; 61
 66e:	de b7       	in	r29, 0x3e	; 62
 670:	7b 01       	movw	r14, r22
 672:	8c 01       	movw	r16, r24
	if (num < 0)
 674:	20 e0       	ldi	r18, 0x00	; 0
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	40 e0       	ldi	r20, 0x00	; 0
 67a:	50 e0       	ldi	r21, 0x00	; 0
 67c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__cmpsf2>
 680:	88 23       	and	r24, r24
 682:	3c f4       	brge	.+14     	; 0x692 <lcd_showvaluef+0x36>
	{
		lcd_char('-');
 684:	8d e2       	ldi	r24, 0x2D	; 45
 686:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_char>
		num = -num;
 68a:	17 fb       	bst	r17, 7
 68c:	10 95       	com	r17
 68e:	17 f9       	bld	r17, 7
 690:	10 95       	com	r17
	unsigned long int l;
	double fraction,integer;

	l = (unsigned long int)num;

	lcd_showvalue(l);
 692:	c8 01       	movw	r24, r16
 694:	b7 01       	movw	r22, r14
 696:	0e 94 76 03 	call	0x6ec	; 0x6ec <__fixunssfsi>
 69a:	0e 94 09 02 	call	0x412	; 0x412 <lcd_showvalue>

	fraction = modf((double)num,&integer);
 69e:	c8 01       	movw	r24, r16
 6a0:	b7 01       	movw	r22, r14
 6a2:	ae 01       	movw	r20, r28
 6a4:	4f 5f       	subi	r20, 0xFF	; 255
 6a6:	5f 4f       	sbci	r21, 0xFF	; 255
 6a8:	0e 94 ef 03 	call	0x7de	; 0x7de <modf>
 6ac:	7b 01       	movw	r14, r22
 6ae:	8c 01       	movw	r16, r24

	l = (unsigned long int)(fraction * 100000);

	lcd_char('.');
 6b0:	8e e2       	ldi	r24, 0x2E	; 46
 6b2:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_char>

	lcd_showvalue(l);
 6b6:	c8 01       	movw	r24, r16
 6b8:	b7 01       	movw	r22, r14
 6ba:	20 e0       	ldi	r18, 0x00	; 0
 6bc:	30 e5       	ldi	r19, 0x50	; 80
 6be:	43 ec       	ldi	r20, 0xC3	; 195
 6c0:	57 e4       	ldi	r21, 0x47	; 71
 6c2:	0e 94 22 04 	call	0x844	; 0x844 <__mulsf3>
 6c6:	0e 94 76 03 	call	0x6ec	; 0x6ec <__fixunssfsi>
 6ca:	0e 94 09 02 	call	0x412	; 0x412 <lcd_showvalue>

}
 6ce:	0f 90       	pop	r0
 6d0:	0f 90       	pop	r0
 6d2:	0f 90       	pop	r0
 6d4:	0f 90       	pop	r0
 6d6:	cf 91       	pop	r28
 6d8:	df 91       	pop	r29
 6da:	1f 91       	pop	r17
 6dc:	0f 91       	pop	r16
 6de:	ff 90       	pop	r15
 6e0:	ef 90       	pop	r14
 6e2:	08 95       	ret

000006e4 <__cmpsf2>:
 6e4:	2f d0       	rcall	.+94     	; 0x744 <__fp_cmp>
 6e6:	08 f4       	brcc	.+2      	; 0x6ea <__cmpsf2+0x6>
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	08 95       	ret

000006ec <__fixunssfsi>:
 6ec:	57 d0       	rcall	.+174    	; 0x79c <__fp_splitA>
 6ee:	88 f0       	brcs	.+34     	; 0x712 <__fixunssfsi+0x26>
 6f0:	9f 57       	subi	r25, 0x7F	; 127
 6f2:	90 f0       	brcs	.+36     	; 0x718 <__fixunssfsi+0x2c>
 6f4:	b9 2f       	mov	r27, r25
 6f6:	99 27       	eor	r25, r25
 6f8:	b7 51       	subi	r27, 0x17	; 23
 6fa:	a0 f0       	brcs	.+40     	; 0x724 <__fixunssfsi+0x38>
 6fc:	d1 f0       	breq	.+52     	; 0x732 <__fixunssfsi+0x46>
 6fe:	66 0f       	add	r22, r22
 700:	77 1f       	adc	r23, r23
 702:	88 1f       	adc	r24, r24
 704:	99 1f       	adc	r25, r25
 706:	1a f0       	brmi	.+6      	; 0x70e <__fixunssfsi+0x22>
 708:	ba 95       	dec	r27
 70a:	c9 f7       	brne	.-14     	; 0x6fe <__fixunssfsi+0x12>
 70c:	12 c0       	rjmp	.+36     	; 0x732 <__fixunssfsi+0x46>
 70e:	b1 30       	cpi	r27, 0x01	; 1
 710:	81 f0       	breq	.+32     	; 0x732 <__fixunssfsi+0x46>
 712:	5e d0       	rcall	.+188    	; 0x7d0 <__fp_zero>
 714:	b1 e0       	ldi	r27, 0x01	; 1
 716:	08 95       	ret
 718:	5b c0       	rjmp	.+182    	; 0x7d0 <__fp_zero>
 71a:	67 2f       	mov	r22, r23
 71c:	78 2f       	mov	r23, r24
 71e:	88 27       	eor	r24, r24
 720:	b8 5f       	subi	r27, 0xF8	; 248
 722:	39 f0       	breq	.+14     	; 0x732 <__fixunssfsi+0x46>
 724:	b9 3f       	cpi	r27, 0xF9	; 249
 726:	cc f3       	brlt	.-14     	; 0x71a <__fixunssfsi+0x2e>
 728:	86 95       	lsr	r24
 72a:	77 95       	ror	r23
 72c:	67 95       	ror	r22
 72e:	b3 95       	inc	r27
 730:	d9 f7       	brne	.-10     	; 0x728 <__fixunssfsi+0x3c>
 732:	3e f4       	brtc	.+14     	; 0x742 <__fixunssfsi+0x56>
 734:	90 95       	com	r25
 736:	80 95       	com	r24
 738:	70 95       	com	r23
 73a:	61 95       	neg	r22
 73c:	7f 4f       	sbci	r23, 0xFF	; 255
 73e:	8f 4f       	sbci	r24, 0xFF	; 255
 740:	9f 4f       	sbci	r25, 0xFF	; 255
 742:	08 95       	ret

00000744 <__fp_cmp>:
 744:	99 0f       	add	r25, r25
 746:	00 08       	sbc	r0, r0
 748:	55 0f       	add	r21, r21
 74a:	aa 0b       	sbc	r26, r26
 74c:	e0 e8       	ldi	r30, 0x80	; 128
 74e:	fe ef       	ldi	r31, 0xFE	; 254
 750:	16 16       	cp	r1, r22
 752:	17 06       	cpc	r1, r23
 754:	e8 07       	cpc	r30, r24
 756:	f9 07       	cpc	r31, r25
 758:	c0 f0       	brcs	.+48     	; 0x78a <__fp_cmp+0x46>
 75a:	12 16       	cp	r1, r18
 75c:	13 06       	cpc	r1, r19
 75e:	e4 07       	cpc	r30, r20
 760:	f5 07       	cpc	r31, r21
 762:	98 f0       	brcs	.+38     	; 0x78a <__fp_cmp+0x46>
 764:	62 1b       	sub	r22, r18
 766:	73 0b       	sbc	r23, r19
 768:	84 0b       	sbc	r24, r20
 76a:	95 0b       	sbc	r25, r21
 76c:	39 f4       	brne	.+14     	; 0x77c <__fp_cmp+0x38>
 76e:	0a 26       	eor	r0, r26
 770:	61 f0       	breq	.+24     	; 0x78a <__fp_cmp+0x46>
 772:	23 2b       	or	r18, r19
 774:	24 2b       	or	r18, r20
 776:	25 2b       	or	r18, r21
 778:	21 f4       	brne	.+8      	; 0x782 <__fp_cmp+0x3e>
 77a:	08 95       	ret
 77c:	0a 26       	eor	r0, r26
 77e:	09 f4       	brne	.+2      	; 0x782 <__fp_cmp+0x3e>
 780:	a1 40       	sbci	r26, 0x01	; 1
 782:	a6 95       	lsr	r26
 784:	8f ef       	ldi	r24, 0xFF	; 255
 786:	81 1d       	adc	r24, r1
 788:	81 1d       	adc	r24, r1
 78a:	08 95       	ret

0000078c <__fp_split3>:
 78c:	57 fd       	sbrc	r21, 7
 78e:	90 58       	subi	r25, 0x80	; 128
 790:	44 0f       	add	r20, r20
 792:	55 1f       	adc	r21, r21
 794:	59 f0       	breq	.+22     	; 0x7ac <__fp_splitA+0x10>
 796:	5f 3f       	cpi	r21, 0xFF	; 255
 798:	71 f0       	breq	.+28     	; 0x7b6 <__fp_splitA+0x1a>
 79a:	47 95       	ror	r20

0000079c <__fp_splitA>:
 79c:	88 0f       	add	r24, r24
 79e:	97 fb       	bst	r25, 7
 7a0:	99 1f       	adc	r25, r25
 7a2:	61 f0       	breq	.+24     	; 0x7bc <__fp_splitA+0x20>
 7a4:	9f 3f       	cpi	r25, 0xFF	; 255
 7a6:	79 f0       	breq	.+30     	; 0x7c6 <__fp_splitA+0x2a>
 7a8:	87 95       	ror	r24
 7aa:	08 95       	ret
 7ac:	12 16       	cp	r1, r18
 7ae:	13 06       	cpc	r1, r19
 7b0:	14 06       	cpc	r1, r20
 7b2:	55 1f       	adc	r21, r21
 7b4:	f2 cf       	rjmp	.-28     	; 0x79a <__fp_split3+0xe>
 7b6:	46 95       	lsr	r20
 7b8:	f1 df       	rcall	.-30     	; 0x79c <__fp_splitA>
 7ba:	08 c0       	rjmp	.+16     	; 0x7cc <__fp_splitA+0x30>
 7bc:	16 16       	cp	r1, r22
 7be:	17 06       	cpc	r1, r23
 7c0:	18 06       	cpc	r1, r24
 7c2:	99 1f       	adc	r25, r25
 7c4:	f1 cf       	rjmp	.-30     	; 0x7a8 <__fp_splitA+0xc>
 7c6:	86 95       	lsr	r24
 7c8:	71 05       	cpc	r23, r1
 7ca:	61 05       	cpc	r22, r1
 7cc:	08 94       	sec
 7ce:	08 95       	ret

000007d0 <__fp_zero>:
 7d0:	e8 94       	clt

000007d2 <__fp_szero>:
 7d2:	bb 27       	eor	r27, r27
 7d4:	66 27       	eor	r22, r22
 7d6:	77 27       	eor	r23, r23
 7d8:	cb 01       	movw	r24, r22
 7da:	97 f9       	bld	r25, 7
 7dc:	08 95       	ret

000007de <modf>:
 7de:	fa 01       	movw	r30, r20
 7e0:	dc 01       	movw	r26, r24
 7e2:	aa 0f       	add	r26, r26
 7e4:	bb 1f       	adc	r27, r27
 7e6:	9b 01       	movw	r18, r22
 7e8:	ac 01       	movw	r20, r24
 7ea:	bf 57       	subi	r27, 0x7F	; 127
 7ec:	28 f4       	brcc	.+10     	; 0x7f8 <modf+0x1a>
 7ee:	22 27       	eor	r18, r18
 7f0:	33 27       	eor	r19, r19
 7f2:	44 27       	eor	r20, r20
 7f4:	50 78       	andi	r21, 0x80	; 128
 7f6:	1f c0       	rjmp	.+62     	; 0x836 <modf+0x58>
 7f8:	b7 51       	subi	r27, 0x17	; 23
 7fa:	88 f4       	brcc	.+34     	; 0x81e <modf+0x40>
 7fc:	ab 2f       	mov	r26, r27
 7fe:	00 24       	eor	r0, r0
 800:	46 95       	lsr	r20
 802:	37 95       	ror	r19
 804:	27 95       	ror	r18
 806:	01 1c       	adc	r0, r1
 808:	a3 95       	inc	r26
 80a:	d2 f3       	brmi	.-12     	; 0x800 <modf+0x22>
 80c:	00 20       	and	r0, r0
 80e:	69 f0       	breq	.+26     	; 0x82a <modf+0x4c>
 810:	22 0f       	add	r18, r18
 812:	33 1f       	adc	r19, r19
 814:	44 1f       	adc	r20, r20
 816:	b3 95       	inc	r27
 818:	da f3       	brmi	.-10     	; 0x810 <modf+0x32>
 81a:	0d d0       	rcall	.+26     	; 0x836 <modf+0x58>
 81c:	76 c0       	rjmp	.+236    	; 0x90a <__subsf3>
 81e:	61 30       	cpi	r22, 0x01	; 1
 820:	71 05       	cpc	r23, r1
 822:	a0 e8       	ldi	r26, 0x80	; 128
 824:	8a 07       	cpc	r24, r26
 826:	b9 46       	sbci	r27, 0x69	; 105
 828:	30 f4       	brcc	.+12     	; 0x836 <modf+0x58>
 82a:	9b 01       	movw	r18, r22
 82c:	ac 01       	movw	r20, r24
 82e:	66 27       	eor	r22, r22
 830:	77 27       	eor	r23, r23
 832:	88 27       	eor	r24, r24
 834:	90 78       	andi	r25, 0x80	; 128
 836:	30 96       	adiw	r30, 0x00	; 0
 838:	21 f0       	breq	.+8      	; 0x842 <modf+0x64>
 83a:	20 83       	st	Z, r18
 83c:	31 83       	std	Z+1, r19	; 0x01
 83e:	42 83       	std	Z+2, r20	; 0x02
 840:	53 83       	std	Z+3, r21	; 0x03
 842:	08 95       	ret

00000844 <__mulsf3>:
 844:	0b d0       	rcall	.+22     	; 0x85c <__mulsf3x>
 846:	dd c0       	rjmp	.+442    	; 0xa02 <__fp_round>
 848:	ce d0       	rcall	.+412    	; 0x9e6 <__fp_pscA>
 84a:	28 f0       	brcs	.+10     	; 0x856 <__mulsf3+0x12>
 84c:	d3 d0       	rcall	.+422    	; 0x9f4 <__fp_pscB>
 84e:	18 f0       	brcs	.+6      	; 0x856 <__mulsf3+0x12>
 850:	95 23       	and	r25, r21
 852:	09 f0       	breq	.+2      	; 0x856 <__mulsf3+0x12>
 854:	bf c0       	rjmp	.+382    	; 0x9d4 <__fp_inf>
 856:	c4 c0       	rjmp	.+392    	; 0x9e0 <__fp_nan>
 858:	11 24       	eor	r1, r1
 85a:	bb cf       	rjmp	.-138    	; 0x7d2 <__fp_szero>

0000085c <__mulsf3x>:
 85c:	97 df       	rcall	.-210    	; 0x78c <__fp_split3>
 85e:	a0 f3       	brcs	.-24     	; 0x848 <__mulsf3+0x4>

00000860 <__mulsf3_pse>:
 860:	95 9f       	mul	r25, r21
 862:	d1 f3       	breq	.-12     	; 0x858 <__mulsf3+0x14>
 864:	95 0f       	add	r25, r21
 866:	50 e0       	ldi	r21, 0x00	; 0
 868:	55 1f       	adc	r21, r21
 86a:	62 9f       	mul	r22, r18
 86c:	f0 01       	movw	r30, r0
 86e:	72 9f       	mul	r23, r18
 870:	bb 27       	eor	r27, r27
 872:	f0 0d       	add	r31, r0
 874:	b1 1d       	adc	r27, r1
 876:	63 9f       	mul	r22, r19
 878:	aa 27       	eor	r26, r26
 87a:	f0 0d       	add	r31, r0
 87c:	b1 1d       	adc	r27, r1
 87e:	aa 1f       	adc	r26, r26
 880:	64 9f       	mul	r22, r20
 882:	66 27       	eor	r22, r22
 884:	b0 0d       	add	r27, r0
 886:	a1 1d       	adc	r26, r1
 888:	66 1f       	adc	r22, r22
 88a:	82 9f       	mul	r24, r18
 88c:	22 27       	eor	r18, r18
 88e:	b0 0d       	add	r27, r0
 890:	a1 1d       	adc	r26, r1
 892:	62 1f       	adc	r22, r18
 894:	73 9f       	mul	r23, r19
 896:	b0 0d       	add	r27, r0
 898:	a1 1d       	adc	r26, r1
 89a:	62 1f       	adc	r22, r18
 89c:	83 9f       	mul	r24, r19
 89e:	a0 0d       	add	r26, r0
 8a0:	61 1d       	adc	r22, r1
 8a2:	22 1f       	adc	r18, r18
 8a4:	74 9f       	mul	r23, r20
 8a6:	33 27       	eor	r19, r19
 8a8:	a0 0d       	add	r26, r0
 8aa:	61 1d       	adc	r22, r1
 8ac:	23 1f       	adc	r18, r19
 8ae:	84 9f       	mul	r24, r20
 8b0:	60 0d       	add	r22, r0
 8b2:	21 1d       	adc	r18, r1
 8b4:	82 2f       	mov	r24, r18
 8b6:	76 2f       	mov	r23, r22
 8b8:	6a 2f       	mov	r22, r26
 8ba:	11 24       	eor	r1, r1
 8bc:	9f 57       	subi	r25, 0x7F	; 127
 8be:	50 40       	sbci	r21, 0x00	; 0
 8c0:	8a f0       	brmi	.+34     	; 0x8e4 <__mulsf3_pse+0x84>
 8c2:	e1 f0       	breq	.+56     	; 0x8fc <__mulsf3_pse+0x9c>
 8c4:	88 23       	and	r24, r24
 8c6:	4a f0       	brmi	.+18     	; 0x8da <__mulsf3_pse+0x7a>
 8c8:	ee 0f       	add	r30, r30
 8ca:	ff 1f       	adc	r31, r31
 8cc:	bb 1f       	adc	r27, r27
 8ce:	66 1f       	adc	r22, r22
 8d0:	77 1f       	adc	r23, r23
 8d2:	88 1f       	adc	r24, r24
 8d4:	91 50       	subi	r25, 0x01	; 1
 8d6:	50 40       	sbci	r21, 0x00	; 0
 8d8:	a9 f7       	brne	.-22     	; 0x8c4 <__mulsf3_pse+0x64>
 8da:	9e 3f       	cpi	r25, 0xFE	; 254
 8dc:	51 05       	cpc	r21, r1
 8de:	70 f0       	brcs	.+28     	; 0x8fc <__mulsf3_pse+0x9c>
 8e0:	79 c0       	rjmp	.+242    	; 0x9d4 <__fp_inf>
 8e2:	77 cf       	rjmp	.-274    	; 0x7d2 <__fp_szero>
 8e4:	5f 3f       	cpi	r21, 0xFF	; 255
 8e6:	ec f3       	brlt	.-6      	; 0x8e2 <__mulsf3_pse+0x82>
 8e8:	98 3e       	cpi	r25, 0xE8	; 232
 8ea:	dc f3       	brlt	.-10     	; 0x8e2 <__mulsf3_pse+0x82>
 8ec:	86 95       	lsr	r24
 8ee:	77 95       	ror	r23
 8f0:	67 95       	ror	r22
 8f2:	b7 95       	ror	r27
 8f4:	f7 95       	ror	r31
 8f6:	e7 95       	ror	r30
 8f8:	9f 5f       	subi	r25, 0xFF	; 255
 8fa:	c1 f7       	brne	.-16     	; 0x8ec <__mulsf3_pse+0x8c>
 8fc:	fe 2b       	or	r31, r30
 8fe:	88 0f       	add	r24, r24
 900:	91 1d       	adc	r25, r1
 902:	96 95       	lsr	r25
 904:	87 95       	ror	r24
 906:	97 f9       	bld	r25, 7
 908:	08 95       	ret

0000090a <__subsf3>:
 90a:	50 58       	subi	r21, 0x80	; 128

0000090c <__addsf3>:
 90c:	bb 27       	eor	r27, r27
 90e:	aa 27       	eor	r26, r26
 910:	0e d0       	rcall	.+28     	; 0x92e <__addsf3x>
 912:	77 c0       	rjmp	.+238    	; 0xa02 <__fp_round>
 914:	68 d0       	rcall	.+208    	; 0x9e6 <__fp_pscA>
 916:	30 f0       	brcs	.+12     	; 0x924 <__addsf3+0x18>
 918:	6d d0       	rcall	.+218    	; 0x9f4 <__fp_pscB>
 91a:	20 f0       	brcs	.+8      	; 0x924 <__addsf3+0x18>
 91c:	31 f4       	brne	.+12     	; 0x92a <__addsf3+0x1e>
 91e:	9f 3f       	cpi	r25, 0xFF	; 255
 920:	11 f4       	brne	.+4      	; 0x926 <__addsf3+0x1a>
 922:	1e f4       	brtc	.+6      	; 0x92a <__addsf3+0x1e>
 924:	5d c0       	rjmp	.+186    	; 0x9e0 <__fp_nan>
 926:	0e f4       	brtc	.+2      	; 0x92a <__addsf3+0x1e>
 928:	e0 95       	com	r30
 92a:	e7 fb       	bst	r30, 7
 92c:	53 c0       	rjmp	.+166    	; 0x9d4 <__fp_inf>

0000092e <__addsf3x>:
 92e:	e9 2f       	mov	r30, r25
 930:	2d df       	rcall	.-422    	; 0x78c <__fp_split3>
 932:	80 f3       	brcs	.-32     	; 0x914 <__addsf3+0x8>
 934:	ba 17       	cp	r27, r26
 936:	62 07       	cpc	r22, r18
 938:	73 07       	cpc	r23, r19
 93a:	84 07       	cpc	r24, r20
 93c:	95 07       	cpc	r25, r21
 93e:	18 f0       	brcs	.+6      	; 0x946 <__addsf3x+0x18>
 940:	71 f4       	brne	.+28     	; 0x95e <__addsf3x+0x30>
 942:	9e f5       	brtc	.+102    	; 0x9aa <__addsf3x+0x7c>
 944:	45 cf       	rjmp	.-374    	; 0x7d0 <__fp_zero>
 946:	0e f4       	brtc	.+2      	; 0x94a <__addsf3x+0x1c>
 948:	e0 95       	com	r30
 94a:	0b 2e       	mov	r0, r27
 94c:	ba 2f       	mov	r27, r26
 94e:	a0 2d       	mov	r26, r0
 950:	0b 01       	movw	r0, r22
 952:	b9 01       	movw	r22, r18
 954:	90 01       	movw	r18, r0
 956:	0c 01       	movw	r0, r24
 958:	ca 01       	movw	r24, r20
 95a:	a0 01       	movw	r20, r0
 95c:	11 24       	eor	r1, r1
 95e:	ff 27       	eor	r31, r31
 960:	59 1b       	sub	r21, r25
 962:	99 f0       	breq	.+38     	; 0x98a <__addsf3x+0x5c>
 964:	59 3f       	cpi	r21, 0xF9	; 249
 966:	50 f4       	brcc	.+20     	; 0x97c <__addsf3x+0x4e>
 968:	50 3e       	cpi	r21, 0xE0	; 224
 96a:	68 f1       	brcs	.+90     	; 0x9c6 <__addsf3x+0x98>
 96c:	1a 16       	cp	r1, r26
 96e:	f0 40       	sbci	r31, 0x00	; 0
 970:	a2 2f       	mov	r26, r18
 972:	23 2f       	mov	r18, r19
 974:	34 2f       	mov	r19, r20
 976:	44 27       	eor	r20, r20
 978:	58 5f       	subi	r21, 0xF8	; 248
 97a:	f3 cf       	rjmp	.-26     	; 0x962 <__addsf3x+0x34>
 97c:	46 95       	lsr	r20
 97e:	37 95       	ror	r19
 980:	27 95       	ror	r18
 982:	a7 95       	ror	r26
 984:	f0 40       	sbci	r31, 0x00	; 0
 986:	53 95       	inc	r21
 988:	c9 f7       	brne	.-14     	; 0x97c <__addsf3x+0x4e>
 98a:	7e f4       	brtc	.+30     	; 0x9aa <__addsf3x+0x7c>
 98c:	1f 16       	cp	r1, r31
 98e:	ba 0b       	sbc	r27, r26
 990:	62 0b       	sbc	r22, r18
 992:	73 0b       	sbc	r23, r19
 994:	84 0b       	sbc	r24, r20
 996:	ba f0       	brmi	.+46     	; 0x9c6 <__addsf3x+0x98>
 998:	91 50       	subi	r25, 0x01	; 1
 99a:	a1 f0       	breq	.+40     	; 0x9c4 <__addsf3x+0x96>
 99c:	ff 0f       	add	r31, r31
 99e:	bb 1f       	adc	r27, r27
 9a0:	66 1f       	adc	r22, r22
 9a2:	77 1f       	adc	r23, r23
 9a4:	88 1f       	adc	r24, r24
 9a6:	c2 f7       	brpl	.-16     	; 0x998 <__addsf3x+0x6a>
 9a8:	0e c0       	rjmp	.+28     	; 0x9c6 <__addsf3x+0x98>
 9aa:	ba 0f       	add	r27, r26
 9ac:	62 1f       	adc	r22, r18
 9ae:	73 1f       	adc	r23, r19
 9b0:	84 1f       	adc	r24, r20
 9b2:	48 f4       	brcc	.+18     	; 0x9c6 <__addsf3x+0x98>
 9b4:	87 95       	ror	r24
 9b6:	77 95       	ror	r23
 9b8:	67 95       	ror	r22
 9ba:	b7 95       	ror	r27
 9bc:	f7 95       	ror	r31
 9be:	9e 3f       	cpi	r25, 0xFE	; 254
 9c0:	08 f0       	brcs	.+2      	; 0x9c4 <__addsf3x+0x96>
 9c2:	b3 cf       	rjmp	.-154    	; 0x92a <__addsf3+0x1e>
 9c4:	93 95       	inc	r25
 9c6:	88 0f       	add	r24, r24
 9c8:	08 f0       	brcs	.+2      	; 0x9cc <__addsf3x+0x9e>
 9ca:	99 27       	eor	r25, r25
 9cc:	ee 0f       	add	r30, r30
 9ce:	97 95       	ror	r25
 9d0:	87 95       	ror	r24
 9d2:	08 95       	ret

000009d4 <__fp_inf>:
 9d4:	97 f9       	bld	r25, 7
 9d6:	9f 67       	ori	r25, 0x7F	; 127
 9d8:	80 e8       	ldi	r24, 0x80	; 128
 9da:	70 e0       	ldi	r23, 0x00	; 0
 9dc:	60 e0       	ldi	r22, 0x00	; 0
 9de:	08 95       	ret

000009e0 <__fp_nan>:
 9e0:	9f ef       	ldi	r25, 0xFF	; 255
 9e2:	80 ec       	ldi	r24, 0xC0	; 192
 9e4:	08 95       	ret

000009e6 <__fp_pscA>:
 9e6:	00 24       	eor	r0, r0
 9e8:	0a 94       	dec	r0
 9ea:	16 16       	cp	r1, r22
 9ec:	17 06       	cpc	r1, r23
 9ee:	18 06       	cpc	r1, r24
 9f0:	09 06       	cpc	r0, r25
 9f2:	08 95       	ret

000009f4 <__fp_pscB>:
 9f4:	00 24       	eor	r0, r0
 9f6:	0a 94       	dec	r0
 9f8:	12 16       	cp	r1, r18
 9fa:	13 06       	cpc	r1, r19
 9fc:	14 06       	cpc	r1, r20
 9fe:	05 06       	cpc	r0, r21
 a00:	08 95       	ret

00000a02 <__fp_round>:
 a02:	09 2e       	mov	r0, r25
 a04:	03 94       	inc	r0
 a06:	00 0c       	add	r0, r0
 a08:	11 f4       	brne	.+4      	; 0xa0e <__fp_round+0xc>
 a0a:	88 23       	and	r24, r24
 a0c:	52 f0       	brmi	.+20     	; 0xa22 <__fp_round+0x20>
 a0e:	bb 0f       	add	r27, r27
 a10:	40 f4       	brcc	.+16     	; 0xa22 <__fp_round+0x20>
 a12:	bf 2b       	or	r27, r31
 a14:	11 f4       	brne	.+4      	; 0xa1a <__fp_round+0x18>
 a16:	60 ff       	sbrs	r22, 0
 a18:	04 c0       	rjmp	.+8      	; 0xa22 <__fp_round+0x20>
 a1a:	6f 5f       	subi	r22, 0xFF	; 255
 a1c:	7f 4f       	sbci	r23, 0xFF	; 255
 a1e:	8f 4f       	sbci	r24, 0xFF	; 255
 a20:	9f 4f       	sbci	r25, 0xFF	; 255
 a22:	08 95       	ret

00000a24 <__mulsi3>:
 a24:	62 9f       	mul	r22, r18
 a26:	d0 01       	movw	r26, r0
 a28:	73 9f       	mul	r23, r19
 a2a:	f0 01       	movw	r30, r0
 a2c:	82 9f       	mul	r24, r18
 a2e:	e0 0d       	add	r30, r0
 a30:	f1 1d       	adc	r31, r1
 a32:	64 9f       	mul	r22, r20
 a34:	e0 0d       	add	r30, r0
 a36:	f1 1d       	adc	r31, r1
 a38:	92 9f       	mul	r25, r18
 a3a:	f0 0d       	add	r31, r0
 a3c:	83 9f       	mul	r24, r19
 a3e:	f0 0d       	add	r31, r0
 a40:	74 9f       	mul	r23, r20
 a42:	f0 0d       	add	r31, r0
 a44:	65 9f       	mul	r22, r21
 a46:	f0 0d       	add	r31, r0
 a48:	99 27       	eor	r25, r25
 a4a:	72 9f       	mul	r23, r18
 a4c:	b0 0d       	add	r27, r0
 a4e:	e1 1d       	adc	r30, r1
 a50:	f9 1f       	adc	r31, r25
 a52:	63 9f       	mul	r22, r19
 a54:	b0 0d       	add	r27, r0
 a56:	e1 1d       	adc	r30, r1
 a58:	f9 1f       	adc	r31, r25
 a5a:	bd 01       	movw	r22, r26
 a5c:	cf 01       	movw	r24, r30
 a5e:	11 24       	eor	r1, r1
 a60:	08 95       	ret

00000a62 <__udivmodhi4>:
 a62:	aa 1b       	sub	r26, r26
 a64:	bb 1b       	sub	r27, r27
 a66:	51 e1       	ldi	r21, 0x11	; 17
 a68:	07 c0       	rjmp	.+14     	; 0xa78 <__udivmodhi4_ep>

00000a6a <__udivmodhi4_loop>:
 a6a:	aa 1f       	adc	r26, r26
 a6c:	bb 1f       	adc	r27, r27
 a6e:	a6 17       	cp	r26, r22
 a70:	b7 07       	cpc	r27, r23
 a72:	10 f0       	brcs	.+4      	; 0xa78 <__udivmodhi4_ep>
 a74:	a6 1b       	sub	r26, r22
 a76:	b7 0b       	sbc	r27, r23

00000a78 <__udivmodhi4_ep>:
 a78:	88 1f       	adc	r24, r24
 a7a:	99 1f       	adc	r25, r25
 a7c:	5a 95       	dec	r21
 a7e:	a9 f7       	brne	.-22     	; 0xa6a <__udivmodhi4_loop>
 a80:	80 95       	com	r24
 a82:	90 95       	com	r25
 a84:	bc 01       	movw	r22, r24
 a86:	cd 01       	movw	r24, r26
 a88:	08 95       	ret

00000a8a <__udivmodsi4>:
 a8a:	a1 e2       	ldi	r26, 0x21	; 33
 a8c:	1a 2e       	mov	r1, r26
 a8e:	aa 1b       	sub	r26, r26
 a90:	bb 1b       	sub	r27, r27
 a92:	fd 01       	movw	r30, r26
 a94:	0d c0       	rjmp	.+26     	; 0xab0 <__udivmodsi4_ep>

00000a96 <__udivmodsi4_loop>:
 a96:	aa 1f       	adc	r26, r26
 a98:	bb 1f       	adc	r27, r27
 a9a:	ee 1f       	adc	r30, r30
 a9c:	ff 1f       	adc	r31, r31
 a9e:	a2 17       	cp	r26, r18
 aa0:	b3 07       	cpc	r27, r19
 aa2:	e4 07       	cpc	r30, r20
 aa4:	f5 07       	cpc	r31, r21
 aa6:	20 f0       	brcs	.+8      	; 0xab0 <__udivmodsi4_ep>
 aa8:	a2 1b       	sub	r26, r18
 aaa:	b3 0b       	sbc	r27, r19
 aac:	e4 0b       	sbc	r30, r20
 aae:	f5 0b       	sbc	r31, r21

00000ab0 <__udivmodsi4_ep>:
 ab0:	66 1f       	adc	r22, r22
 ab2:	77 1f       	adc	r23, r23
 ab4:	88 1f       	adc	r24, r24
 ab6:	99 1f       	adc	r25, r25
 ab8:	1a 94       	dec	r1
 aba:	69 f7       	brne	.-38     	; 0xa96 <__udivmodsi4_loop>
 abc:	60 95       	com	r22
 abe:	70 95       	com	r23
 ac0:	80 95       	com	r24
 ac2:	90 95       	com	r25
 ac4:	9b 01       	movw	r18, r22
 ac6:	ac 01       	movw	r20, r24
 ac8:	bd 01       	movw	r22, r26
 aca:	cf 01       	movw	r24, r30
 acc:	08 95       	ret

00000ace <__divmodsi4>:
 ace:	97 fb       	bst	r25, 7
 ad0:	09 2e       	mov	r0, r25
 ad2:	05 26       	eor	r0, r21
 ad4:	0e d0       	rcall	.+28     	; 0xaf2 <__divmodsi4_neg1>
 ad6:	57 fd       	sbrc	r21, 7
 ad8:	04 d0       	rcall	.+8      	; 0xae2 <__divmodsi4_neg2>
 ada:	d7 df       	rcall	.-82     	; 0xa8a <__udivmodsi4>
 adc:	0a d0       	rcall	.+20     	; 0xaf2 <__divmodsi4_neg1>
 ade:	00 1c       	adc	r0, r0
 ae0:	38 f4       	brcc	.+14     	; 0xaf0 <__divmodsi4_exit>

00000ae2 <__divmodsi4_neg2>:
 ae2:	50 95       	com	r21
 ae4:	40 95       	com	r20
 ae6:	30 95       	com	r19
 ae8:	21 95       	neg	r18
 aea:	3f 4f       	sbci	r19, 0xFF	; 255
 aec:	4f 4f       	sbci	r20, 0xFF	; 255
 aee:	5f 4f       	sbci	r21, 0xFF	; 255

00000af0 <__divmodsi4_exit>:
 af0:	08 95       	ret

00000af2 <__divmodsi4_neg1>:
 af2:	f6 f7       	brtc	.-4      	; 0xaf0 <__divmodsi4_exit>
 af4:	90 95       	com	r25
 af6:	80 95       	com	r24
 af8:	70 95       	com	r23
 afa:	61 95       	neg	r22
 afc:	7f 4f       	sbci	r23, 0xFF	; 255
 afe:	8f 4f       	sbci	r24, 0xFF	; 255
 b00:	9f 4f       	sbci	r25, 0xFF	; 255
 b02:	08 95       	ret

00000b04 <_exit>:
 b04:	f8 94       	cli

00000b06 <__stop_program>:
 b06:	ff cf       	rjmp	.-2      	; 0xb06 <__stop_program>
