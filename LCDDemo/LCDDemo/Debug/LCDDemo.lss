
LCDDemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000044a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  0000044a  000004be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000500  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00000c58  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cde  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002fe  00000000  00000000  00001a16  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000649  00000000  00000000  00001d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000108  00000000  00000000  00002360  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001a9  00000000  00000000  00002468  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006fd  00000000  00000000  00002611  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00002d0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000054 <__c.1572>:
  54:	4c 43 44 20 54 65 73 74 20 21 00                    LCD Test !.

0000005f <__c.1574>:
  5f:	42 79 20 41 76 69 6e 61 73 68 00                    By Avinash.

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf e5       	ldi	r28, 0x5F	; 95
  70:	d4 e0       	ldi	r29, 0x04	; 4
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	ea e4       	ldi	r30, 0x4A	; 74
  7e:	f4 e0       	ldi	r31, 0x04	; 4
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a0 3a       	cpi	r26, 0xA0	; 160
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	10 e0       	ldi	r17, 0x00	; 0
  8e:	a0 ea       	ldi	r26, 0xA0	; 160
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a0 3a       	cpi	r26, 0xA0	; 160
  98:	b1 07       	cpc	r27, r17
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>
  9c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <main>
  a0:	0c 94 23 02 	jmp	0x446	; 0x446 <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
  a8:	87 b3       	in	r24, 0x17	; 23
  aa:	80 7f       	andi	r24, 0xF0	; 240
  ac:	87 bb       	out	0x17, r24	; 23

	//change LCD mode
	SET_RW();		//Read mode
  ae:	96 9a       	sbi	0x12, 6	; 18
	CLEAR_RS();		//Read status
  b0:	93 98       	cbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	82 e0       	ldi	r24, 0x02	; 2
  b4:	8a 95       	dec	r24
  b6:	f1 f7       	brne	.-4      	; 0xb4 <LCDBusyLoop+0xc>
  b8:	00 c0       	rjmp	.+0      	; 0xba <LCDBusyLoop+0x12>

	
	do
	{

		SET_E();
  ba:	c4 9a       	sbi	0x18, 4	; 24
  bc:	92 e0       	ldi	r25, 0x02	; 2
  be:	9a 95       	dec	r25
  c0:	f1 f7       	brne	.-4      	; 0xbe <LCDBusyLoop+0x16>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <LCDBusyLoop+0x1c>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
  c4:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
  c6:	82 95       	swap	r24
  c8:	80 7f       	andi	r24, 0xF0	; 240
  ca:	92 e0       	ldi	r25, 0x02	; 2
  cc:	9a 95       	dec	r25
  ce:	f1 f7       	brne	.-4      	; 0xcc <LCDBusyLoop+0x24>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <LCDBusyLoop+0x2a>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
  d2:	c4 98       	cbi	0x18, 4	; 24
  d4:	95 e0       	ldi	r25, 0x05	; 5
  d6:	9a 95       	dec	r25
  d8:	f1 f7       	brne	.-4      	; 0xd6 <LCDBusyLoop+0x2e>
  da:	00 00       	nop
		_delay_us(1);	//tEL

		SET_E();
  dc:	c4 9a       	sbi	0x18, 4	; 24
  de:	92 e0       	ldi	r25, 0x02	; 2
  e0:	9a 95       	dec	r25
  e2:	f1 f7       	brne	.-4      	; 0xe0 <LCDBusyLoop+0x38>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <LCDBusyLoop+0x3e>
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
  e6:	96 b3       	in	r25, 0x16	; 22
  e8:	92 e0       	ldi	r25, 0x02	; 2
  ea:	9a 95       	dec	r25
  ec:	f1 f7       	brne	.-4      	; 0xea <LCDBusyLoop+0x42>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <LCDBusyLoop+0x48>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
  f0:	c4 98       	cbi	0x18, 4	; 24
  f2:	95 e0       	ldi	r25, 0x05	; 5
  f4:	9a 95       	dec	r25
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCDBusyLoop+0x4c>
  f8:	00 00       	nop
		_delay_us(1);	//tEL
	}while(busy);
  fa:	87 fd       	sbrc	r24, 7
  fc:	de cf       	rjmp	.-68     	; 0xba <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
  fe:	96 98       	cbi	0x12, 6	; 18
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 100:	87 b3       	in	r24, 0x17	; 23
 102:	8f 60       	ori	r24, 0x0F	; 15
 104:	87 bb       	out	0x17, r24	; 23

}
 106:	08 95       	ret

00000108 <LCDByte>:
	//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS COMPLETED PROCESSING THE COMMAND

	uint8_t hn,ln;			//Nibbles
	uint8_t temp;

	hn=c>>4;
 108:	28 2f       	mov	r18, r24
 10a:	22 95       	swap	r18
 10c:	2f 70       	andi	r18, 0x0F	; 15
	ln=(c & 0x0F);
 10e:	8f 70       	andi	r24, 0x0F	; 15

	if(isdata==0)
 110:	66 23       	and	r22, r22
 112:	21 f1       	breq	.+72     	; 0x15c <LCDByte+0x54>
		CLEAR_RS();
	else
		SET_RS();
 114:	93 9a       	sbi	0x12, 3	; 18
 116:	92 e0       	ldi	r25, 0x02	; 2
 118:	9a 95       	dec	r25
 11a:	f1 f7       	brne	.-4      	; 0x118 <LCDByte+0x10>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <LCDByte+0x16>

	_delay_us(0.500);		//tAS

	SET_E();
 11e:	c4 9a       	sbi	0x18, 4	; 24

	//Send high nibble

	temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
 120:	98 b3       	in	r25, 0x18	; 24
 122:	90 7f       	andi	r25, 0xF0	; 240
 124:	92 2b       	or	r25, r18
	LCD_DATA_PORT=temp;
 126:	98 bb       	out	0x18, r25	; 24
 128:	95 e0       	ldi	r25, 0x05	; 5
 12a:	9a 95       	dec	r25
 12c:	f1 f7       	brne	.-4      	; 0x12a <LCDByte+0x22>
 12e:	00 00       	nop

	_delay_us(1);			//tEH

	//Now data lines are stable pull E low for transmission

	CLEAR_E();
 130:	c4 98       	cbi	0x18, 4	; 24
 132:	95 e0       	ldi	r25, 0x05	; 5
 134:	9a 95       	dec	r25
 136:	f1 f7       	brne	.-4      	; 0x134 <LCDByte+0x2c>
 138:	00 00       	nop

	_delay_us(1);

	//Send the lower nibble
	SET_E();
 13a:	c4 9a       	sbi	0x18, 4	; 24

	temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
 13c:	98 b3       	in	r25, 0x18	; 24
 13e:	90 7f       	andi	r25, 0xF0	; 240
 140:	98 2b       	or	r25, r24

	LCD_DATA_PORT=temp;
 142:	98 bb       	out	0x18, r25	; 24
 144:	85 e0       	ldi	r24, 0x05	; 5
 146:	8a 95       	dec	r24
 148:	f1 f7       	brne	.-4      	; 0x146 <LCDByte+0x3e>
 14a:	00 00       	nop

	_delay_us(1);			//tEH

	//SEND

	CLEAR_E();
 14c:	c4 98       	cbi	0x18, 4	; 24
 14e:	95 e0       	ldi	r25, 0x05	; 5
 150:	9a 95       	dec	r25
 152:	f1 f7       	brne	.-4      	; 0x150 <LCDByte+0x48>
 154:	00 00       	nop

	_delay_us(1);			//tEL

	LCDBusyLoop();
 156:	0e 94 54 00 	call	0xa8	; 0xa8 <LCDBusyLoop>
}
 15a:	08 95       	ret

	hn=c>>4;
	ln=(c & 0x0F);

	if(isdata==0)
		CLEAR_RS();
 15c:	93 98       	cbi	0x12, 3	; 18
 15e:	db cf       	rjmp	.-74     	; 0x116 <LCDByte+0xe>

00000160 <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 166:	8f ef       	ldi	r24, 0xFF	; 255
 168:	91 ee       	ldi	r25, 0xE1	; 225
 16a:	a4 e0       	ldi	r26, 0x04	; 4
 16c:	81 50       	subi	r24, 0x01	; 1
 16e:	90 40       	sbci	r25, 0x00	; 0
 170:	a0 40       	sbci	r26, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <LCDInit+0xc>
 174:	00 c0       	rjmp	.+0      	; 0x176 <LCDInit+0x16>
 176:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(100);
	
	//Clear Ports
	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
 178:	88 b3       	in	r24, 0x18	; 24
 17a:	80 7f       	andi	r24, 0xF0	; 240
 17c:	88 bb       	out	0x18, r24	; 24
	
	CLEAR_E();
 17e:	c4 98       	cbi	0x18, 4	; 24
	CLEAR_RW();
 180:	96 98       	cbi	0x12, 6	; 18
	CLEAR_RS();
 182:	93 98       	cbi	0x12, 3	; 18
	
	//Set IO Ports direction
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);	//data line direction
 184:	87 b3       	in	r24, 0x17	; 23
 186:	8f 60       	ori	r24, 0x0F	; 15
 188:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);			//E line line direction
 18a:	bc 9a       	sbi	0x17, 4	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);		//RS line direction
 18c:	8b 9a       	sbi	0x11, 3	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);		//RW line direction
 18e:	8e 9a       	sbi	0x11, 6	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 190:	00 c0       	rjmp	.+0      	; 0x192 <LCDInit+0x32>
 192:	00 c0       	rjmp	.+0      	; 0x194 <LCDInit+0x34>
 194:	00 00       	nop
	//Reset sequence END
	
	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 196:	c4 9a       	sbi	0x18, 4	; 24
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 198:	c1 9a       	sbi	0x18, 1	; 24
 19a:	95 e0       	ldi	r25, 0x05	; 5
 19c:	9a 95       	dec	r25
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCDInit+0x3c>
 1a0:	00 00       	nop
	_delay_us(1);
	CLEAR_E();
 1a2:	c4 98       	cbi	0x18, 4	; 24
 1a4:	a5 e0       	ldi	r26, 0x05	; 5
 1a6:	aa 95       	dec	r26
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <LCDInit+0x46>
 1aa:	00 00       	nop
 1ac:	8f ea       	ldi	r24, 0xAF	; 175
 1ae:	94 e0       	ldi	r25, 0x04	; 4
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <LCDInit+0x50>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <LCDInit+0x56>
 1b6:	00 00       	nop
	//LCDBusyLoop();                                    //[B] Forgot this delay
	_delay_us(300);

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 1b8:	88 e2       	ldi	r24, 0x28	; 40
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	0e 94 84 00 	call	0x108	; 0x108 <LCDByte>
	LCDCmd(0b00001000|style);	//Display Off
 1c0:	8c 2f       	mov	r24, r28
 1c2:	88 60       	ori	r24, 0x08	; 8
 1c4:	60 e0       	ldi	r22, 0x00	; 0
 1c6:	0e 94 84 00 	call	0x108	; 0x108 <LCDByte>
	LCDCmd(0b00001100|style);	//Display On
 1ca:	8c 2f       	mov	r24, r28
 1cc:	8c 60       	ori	r24, 0x0C	; 12
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	0e 94 84 00 	call	0x108	; 0x108 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
 1d4:	80 e4       	ldi	r24, 0x40	; 64
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	0e 94 84 00 	call	0x108	; 0x108 <LCDByte>
 1dc:	c0 e6       	ldi	r28, 0x60	; 96
 1de:	d0 e0       	ldi	r29, 0x00	; 0

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
 1e0:	89 91       	ld	r24, Y+
 1e2:	61 e0       	ldi	r22, 0x01	; 1
 1e4:	0e 94 84 00 	call	0x108	; 0x108 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	c0 3a       	cpi	r28, 0xA0	; 160
 1ec:	d9 07       	cpc	r29, r25
 1ee:	c1 f7       	brne	.-16     	; 0x1e0 <LCDInit+0x80>
		LCDData(__cgram[__i]);
	
	LCDClear();
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	0e 94 84 00 	call	0x108	; 0x108 <LCDByte>

}
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 1fe:	0f 93       	push	r16
 200:	1f 93       	push	r17
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	8c 01       	movw	r16, r24
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 208:	fc 01       	movw	r30, r24
 20a:	80 81       	ld	r24, Z
 20c:	88 23       	and	r24, r24
 20e:	b9 f4       	brne	.+46     	; 0x23e <LCDWriteString+0x40>
 210:	22 c0       	rjmp	.+68     	; 0x256 <LCDWriteString+0x58>
 {
 	//Custom Char Support
	if(*msg=='%')
	{
		msg++;
 212:	e8 01       	movw	r28, r16
 214:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
 216:	f8 01       	movw	r30, r16
 218:	81 81       	ldd	r24, Z+1	; 0x01
 21a:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
 21c:	88 30       	cpi	r24, 0x08	; 8
 21e:	30 f0       	brcs	.+12     	; 0x22c <LCDWriteString+0x2e>
		{
			LCDData(cc);
		}
		else
		{
			LCDData('%');
 220:	85 e2       	ldi	r24, 0x25	; 37
 222:	61 e0       	ldi	r22, 0x01	; 1
 224:	0e 94 84 00 	call	0x108	; 0x108 <LCDByte>
			LCDData(*msg);
 228:	f8 01       	movw	r30, r16
 22a:	81 81       	ldd	r24, Z+1	; 0x01
 22c:	61 e0       	ldi	r22, 0x01	; 1
 22e:	0e 94 84 00 	call	0x108	; 0x108 <LCDByte>
	}
	else
	{
		LCDData(*msg);
	}
	msg++;
 232:	8e 01       	movw	r16, r28
 234:	0f 5f       	subi	r16, 0xFF	; 255
 236:	1f 4f       	sbci	r17, 0xFF	; 255
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 238:	89 81       	ldd	r24, Y+1	; 0x01
 23a:	88 23       	and	r24, r24
 23c:	61 f0       	breq	.+24     	; 0x256 <LCDWriteString+0x58>
 {
 	//Custom Char Support
	if(*msg=='%')
 23e:	85 32       	cpi	r24, 0x25	; 37
 240:	41 f3       	breq	.-48     	; 0x212 <LCDWriteString+0x14>
			LCDData(*msg);
		}
	}
	else
	{
		LCDData(*msg);
 242:	61 e0       	ldi	r22, 0x01	; 1
 244:	0e 94 84 00 	call	0x108	; 0x108 <LCDByte>
 248:	e8 01       	movw	r28, r16
	}
	msg++;
 24a:	8e 01       	movw	r16, r28
 24c:	0f 5f       	subi	r16, 0xFF	; 255
 24e:	1f 4f       	sbci	r17, 0xFF	; 255
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 250:	89 81       	ldd	r24, Y+1	; 0x01
 252:	88 23       	and	r24, r24
 254:	a1 f7       	brne	.-24     	; 0x23e <LCDWriteString+0x40>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	1f 91       	pop	r17
 25c:	0f 91       	pop	r16
 25e:	08 95       	ret

00000260 <LCDWriteFString>:

void LCDWriteFString(const char *msg)
{
 260:	1f 93       	push	r17
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	ec 01       	movw	r28, r24
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
	
 char ch=pgm_read_byte(msg);
 268:	fc 01       	movw	r30, r24
 26a:	84 91       	lpm	r24, Z
 while(ch!='\0')
 26c:	88 23       	and	r24, r24
 26e:	a9 f4       	brne	.+42     	; 0x29a <LCDWriteFString+0x3a>
 270:	1e c0       	rjmp	.+60     	; 0x2ae <LCDWriteFString+0x4e>
 {
 	//Custom Char Support
	if(ch=='%')
	{
		msg++;
 272:	21 96       	adiw	r28, 0x01	; 1
		
		ch=pgm_read_byte(msg);
 274:	fe 01       	movw	r30, r28
 276:	14 91       	lpm	r17, Z
		
		int8_t cc=ch-'0';
 278:	81 2f       	mov	r24, r17
 27a:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
 27c:	88 30       	cpi	r24, 0x08	; 8
 27e:	78 f0       	brcs	.+30     	; 0x29e <LCDWriteFString+0x3e>
		{
			LCDData(cc);
		}
		else
		{
			LCDData('%');
 280:	85 e2       	ldi	r24, 0x25	; 37
 282:	61 e0       	ldi	r22, 0x01	; 1
 284:	0e 94 84 00 	call	0x108	; 0x108 <LCDByte>
			LCDData(ch);
 288:	81 2f       	mov	r24, r17
 28a:	61 e0       	ldi	r22, 0x01	; 1
 28c:	0e 94 84 00 	call	0x108	; 0x108 <LCDByte>
	}
	else
	{
		LCDData(ch);
	}
	msg++;
 290:	21 96       	adiw	r28, 0x01	; 1
	ch=pgm_read_byte(msg);
 292:	fe 01       	movw	r30, r28
 294:	84 91       	lpm	r24, Z


	*****************************************************************/
	
 char ch=pgm_read_byte(msg);
 while(ch!='\0')
 296:	88 23       	and	r24, r24
 298:	51 f0       	breq	.+20     	; 0x2ae <LCDWriteFString+0x4e>
 {
 	//Custom Char Support
	if(ch=='%')
 29a:	85 32       	cpi	r24, 0x25	; 37
 29c:	51 f3       	breq	.-44     	; 0x272 <LCDWriteFString+0x12>
			LCDData(ch);
		}
	}
	else
	{
		LCDData(ch);
 29e:	61 e0       	ldi	r22, 0x01	; 1
 2a0:	0e 94 84 00 	call	0x108	; 0x108 <LCDByte>
	}
	msg++;
 2a4:	21 96       	adiw	r28, 0x01	; 1
	ch=pgm_read_byte(msg);
 2a6:	fe 01       	movw	r30, r28
 2a8:	84 91       	lpm	r24, Z


	*****************************************************************/
	
 char ch=pgm_read_byte(msg);
 while(ch!='\0')
 2aa:	88 23       	and	r24, r24
 2ac:	b1 f7       	brne	.-20     	; 0x29a <LCDWriteFString+0x3a>
		LCDData(ch);
	}
	msg++;
	ch=pgm_read_byte(msg);
 }
}
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	1f 91       	pop	r17
 2b4:	08 95       	ret

000002b6 <LCDWriteInt>:

void LCDWriteInt(int val,int8_t field_length)
{
 2b6:	cf 92       	push	r12
 2b8:	df 92       	push	r13
 2ba:	ef 92       	push	r14
 2bc:	ff 92       	push	r15
 2be:	0f 93       	push	r16
 2c0:	1f 93       	push	r17
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	00 d0       	rcall	.+0      	; 0x2c8 <LCDWriteInt+0x12>
 2c8:	00 d0       	rcall	.+0      	; 0x2ca <LCDWriteInt+0x14>
 2ca:	0f 92       	push	r0
 2cc:	cd b7       	in	r28, 0x3d	; 61
 2ce:	de b7       	in	r29, 0x3e	; 62
 2d0:	8c 01       	movw	r16, r24
 2d2:	e6 2e       	mov	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 2d4:	6e 01       	movw	r12, r28
 2d6:	08 94       	sec
 2d8:	c1 1c       	adc	r12, r1
 2da:	d1 1c       	adc	r13, r1
 2dc:	85 e0       	ldi	r24, 0x05	; 5
 2de:	f6 01       	movw	r30, r12
 2e0:	11 92       	st	Z+, r1
 2e2:	8a 95       	dec	r24
 2e4:	e9 f7       	brne	.-6      	; 0x2e0 <LCDWriteInt+0x2a>
	int i=4,j=0;
	
	//Handle negative integers
	if(val<0)
 2e6:	17 fd       	sbrc	r17, 7
 2e8:	52 c0       	rjmp	.+164    	; 0x38e <LCDWriteInt+0xd8>
		LCDData('-');   //Write Negative sign
		val=val*-1;     //convert to positive
	}
	else
	{
		LCDData(' ');
 2ea:	80 e2       	ldi	r24, 0x20	; 32
 2ec:	61 e0       	ldi	r22, 0x01	; 1
 2ee:	0e 94 84 00 	call	0x108	; 0x108 <LCDByte>
	}
	
	while(val)
 2f2:	01 15       	cp	r16, r1
 2f4:	11 05       	cpc	r17, r1
 2f6:	69 f0       	breq	.+26     	; 0x312 <LCDWriteInt+0x5c>
 2f8:	fe 01       	movw	r30, r28
 2fa:	36 96       	adiw	r30, 0x06	; 6
	{
		str[i]=val%10;
 2fc:	2a e0       	ldi	r18, 0x0A	; 10
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	c8 01       	movw	r24, r16
 302:	b9 01       	movw	r22, r18
 304:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__divmodhi4>
 308:	82 93       	st	-Z, r24
		val=val/10;
 30a:	8b 01       	movw	r16, r22
	else
	{
		LCDData(' ');
	}
	
	while(val)
 30c:	61 15       	cp	r22, r1
 30e:	71 05       	cpc	r23, r1
 310:	b9 f7       	brne	.-18     	; 0x300 <LCDWriteInt+0x4a>
		str[i]=val%10;
		val=val/10;
		i--;
	}
	
	if(field_length==-1)
 312:	ff ef       	ldi	r31, 0xFF	; 255
 314:	ef 16       	cp	r14, r31
 316:	71 f1       	breq	.+92     	; 0x374 <LCDWriteInt+0xbe>
		while(str[j]==0) j++;
	else
		j=5-field_length;
 318:	ff 24       	eor	r15, r15
 31a:	e7 fc       	sbrc	r14, 7
 31c:	f0 94       	com	r15
 31e:	05 e0       	ldi	r16, 0x05	; 5
 320:	10 e0       	ldi	r17, 0x00	; 0
 322:	0e 19       	sub	r16, r14
 324:	1f 09       	sbc	r17, r15

	for(i=j;i<5;i++)
 326:	05 30       	cpi	r16, 0x05	; 5
 328:	11 05       	cpc	r17, r1
 32a:	b4 f4       	brge	.+44     	; 0x358 <LCDWriteInt+0xa2>
 32c:	f6 01       	movw	r30, r12
 32e:	e0 0f       	add	r30, r16
 330:	f1 1f       	adc	r31, r17
 332:	80 81       	ld	r24, Z
	msg++;
	ch=pgm_read_byte(msg);
 }
}

void LCDWriteInt(int val,int8_t field_length)
 334:	0f 5f       	subi	r16, 0xFF	; 255
 336:	1f 4f       	sbci	r17, 0xFF	; 255
 338:	76 01       	movw	r14, r12
 33a:	e0 0e       	add	r14, r16
 33c:	f1 1e       	adc	r15, r17
 33e:	05 c0       	rjmp	.+10     	; 0x34a <LCDWriteInt+0x94>
	if(field_length==-1)
		while(str[j]==0) j++;
	else
		j=5-field_length;

	for(i=j;i<5;i++)
 340:	f7 01       	movw	r30, r14
 342:	81 91       	ld	r24, Z+
 344:	7f 01       	movw	r14, r30
 346:	0f 5f       	subi	r16, 0xFF	; 255
 348:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		LCDData('0'+str[i]);
 34a:	80 5d       	subi	r24, 0xD0	; 208
 34c:	61 e0       	ldi	r22, 0x01	; 1
 34e:	0e 94 84 00 	call	0x108	; 0x108 <LCDByte>
	if(field_length==-1)
		while(str[j]==0) j++;
	else
		j=5-field_length;

	for(i=j;i<5;i++)
 352:	05 30       	cpi	r16, 0x05	; 5
 354:	11 05       	cpc	r17, r1
 356:	a4 f3       	brlt	.-24     	; 0x340 <LCDWriteInt+0x8a>
	{
		LCDData('0'+str[i]);
	}
}
 358:	0f 90       	pop	r0
 35a:	0f 90       	pop	r0
 35c:	0f 90       	pop	r0
 35e:	0f 90       	pop	r0
 360:	0f 90       	pop	r0
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	1f 91       	pop	r17
 368:	0f 91       	pop	r16
 36a:	ff 90       	pop	r15
 36c:	ef 90       	pop	r14
 36e:	df 90       	pop	r13
 370:	cf 90       	pop	r12
 372:	08 95       	ret
		val=val/10;
		i--;
	}
	
	if(field_length==-1)
		while(str[j]==0) j++;
 374:	89 81       	ldd	r24, Y+1	; 0x01
 376:	88 23       	and	r24, r24
 378:	91 f4       	brne	.+36     	; 0x39e <LCDWriteInt+0xe8>
 37a:	fe 01       	movw	r30, r28
 37c:	32 96       	adiw	r30, 0x02	; 2
 37e:	00 e0       	ldi	r16, 0x00	; 0
 380:	10 e0       	ldi	r17, 0x00	; 0
 382:	0f 5f       	subi	r16, 0xFF	; 255
 384:	1f 4f       	sbci	r17, 0xFF	; 255
 386:	81 91       	ld	r24, Z+
 388:	88 23       	and	r24, r24
 38a:	d9 f3       	breq	.-10     	; 0x382 <LCDWriteInt+0xcc>
 38c:	cc cf       	rjmp	.-104    	; 0x326 <LCDWriteInt+0x70>
	int i=4,j=0;
	
	//Handle negative integers
	if(val<0)
	{
		LCDData('-');   //Write Negative sign
 38e:	8d e2       	ldi	r24, 0x2D	; 45
 390:	61 e0       	ldi	r22, 0x01	; 1
 392:	0e 94 84 00 	call	0x108	; 0x108 <LCDByte>
		val=val*-1;     //convert to positive
 396:	10 95       	com	r17
 398:	01 95       	neg	r16
 39a:	1f 4f       	sbci	r17, 0xFF	; 255
 39c:	ad cf       	rjmp	.-166    	; 0x2f8 <LCDWriteInt+0x42>
		val=val/10;
		i--;
	}
	
	if(field_length==-1)
		while(str[j]==0) j++;
 39e:	00 e0       	ldi	r16, 0x00	; 0
 3a0:	10 e0       	ldi	r17, 0x00	; 0
 3a2:	c8 cf       	rjmp	.-112    	; 0x334 <LCDWriteInt+0x7e>

000003a4 <LCDGotoXY>:
		LCDData('0'+str[i]);
	}
}
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
 3a4:	84 31       	cpi	r24, 0x14	; 20
 3a6:	58 f4       	brcc	.+22     	; 0x3be <LCDGotoXY+0x1a>

	#ifdef LCD_TYPE_204
	
	switch(y)
 3a8:	62 30       	cpi	r22, 0x02	; 2
 3aa:	51 f0       	breq	.+20     	; 0x3c0 <LCDGotoXY+0x1c>
 3ac:	63 30       	cpi	r22, 0x03	; 3
 3ae:	71 f0       	breq	.+28     	; 0x3cc <LCDGotoXY+0x28>
 3b0:	61 30       	cpi	r22, 0x01	; 1
 3b2:	09 f4       	brne	.+2      	; 0x3b6 <LCDGotoXY+0x12>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
 3b4:	80 64       	ori	r24, 0x40	; 64
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 3b6:	80 68       	ori	r24, 0x80	; 128
 3b8:	60 e0       	ldi	r22, 0x00	; 0
 3ba:	0e 94 84 00 	call	0x108	; 0x108 <LCDByte>
 3be:	08 95       	ret
			break;
		case 1:
			x|=0b01000000;
			break;
		case 2:
			x+=0x14;
 3c0:	8c 5e       	subi	r24, 0xEC	; 236
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 3c2:	80 68       	ori	r24, 0x80	; 128
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	0e 94 84 00 	call	0x108	; 0x108 <LCDByte>
 3ca:	f9 cf       	rjmp	.-14     	; 0x3be <LCDGotoXY+0x1a>
			break;
		case 2:
			x+=0x14;
			break;
		case 3:
			x+=0x54;
 3cc:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 3ce:	80 68       	ori	r24, 0x80	; 128
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	0e 94 84 00 	call	0x108	; 0x108 <LCDByte>
 3d6:	f3 cf       	rjmp	.-26     	; 0x3be <LCDGotoXY+0x1a>

000003d8 <main>:

#include "lib/lcd/lcd_hd44780_avr.h"

int main(void)
{
	LCDInit(LS_NONE);
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	0e 94 b0 00 	call	0x160	; 0x160 <LCDInit>
	
	LCDWriteFString(PSTR("LCD Test !"));
 3de:	84 e5       	ldi	r24, 0x54	; 84
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 30 01 	call	0x260	; 0x260 <LCDWriteFString>
	LCDWriteFStringXY(0,1,PSTR("By Avinash"));
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	61 e0       	ldi	r22, 0x01	; 1
 3ea:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCDGotoXY>
 3ee:	8f e5       	ldi	r24, 0x5F	; 95
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	0e 94 30 01 	call	0x260	; 0x260 <LCDWriteFString>
 3f6:	ff cf       	rjmp	.-2      	; 0x3f6 <main+0x1e>

000003f8 <__divmodhi4>:
 3f8:	97 fb       	bst	r25, 7
 3fa:	09 2e       	mov	r0, r25
 3fc:	07 26       	eor	r0, r23
 3fe:	0a d0       	rcall	.+20     	; 0x414 <__divmodhi4_neg1>
 400:	77 fd       	sbrc	r23, 7
 402:	04 d0       	rcall	.+8      	; 0x40c <__divmodhi4_neg2>
 404:	0c d0       	rcall	.+24     	; 0x41e <__udivmodhi4>
 406:	06 d0       	rcall	.+12     	; 0x414 <__divmodhi4_neg1>
 408:	00 20       	and	r0, r0
 40a:	1a f4       	brpl	.+6      	; 0x412 <__divmodhi4_exit>

0000040c <__divmodhi4_neg2>:
 40c:	70 95       	com	r23
 40e:	61 95       	neg	r22
 410:	7f 4f       	sbci	r23, 0xFF	; 255

00000412 <__divmodhi4_exit>:
 412:	08 95       	ret

00000414 <__divmodhi4_neg1>:
 414:	f6 f7       	brtc	.-4      	; 0x412 <__divmodhi4_exit>
 416:	90 95       	com	r25
 418:	81 95       	neg	r24
 41a:	9f 4f       	sbci	r25, 0xFF	; 255
 41c:	08 95       	ret

0000041e <__udivmodhi4>:
 41e:	aa 1b       	sub	r26, r26
 420:	bb 1b       	sub	r27, r27
 422:	51 e1       	ldi	r21, 0x11	; 17
 424:	07 c0       	rjmp	.+14     	; 0x434 <__udivmodhi4_ep>

00000426 <__udivmodhi4_loop>:
 426:	aa 1f       	adc	r26, r26
 428:	bb 1f       	adc	r27, r27
 42a:	a6 17       	cp	r26, r22
 42c:	b7 07       	cpc	r27, r23
 42e:	10 f0       	brcs	.+4      	; 0x434 <__udivmodhi4_ep>
 430:	a6 1b       	sub	r26, r22
 432:	b7 0b       	sbc	r27, r23

00000434 <__udivmodhi4_ep>:
 434:	88 1f       	adc	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	5a 95       	dec	r21
 43a:	a9 f7       	brne	.-22     	; 0x426 <__udivmodhi4_loop>
 43c:	80 95       	com	r24
 43e:	90 95       	com	r25
 440:	bc 01       	movw	r22, r24
 442:	cd 01       	movw	r24, r26
 444:	08 95       	ret

00000446 <_exit>:
 446:	f8 94       	cli

00000448 <__stop_program>:
 448:	ff cf       	rjmp	.-2      	; 0x448 <__stop_program>
