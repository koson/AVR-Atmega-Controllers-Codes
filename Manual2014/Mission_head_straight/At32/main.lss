
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000120  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000055  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000190  00000000  00000000  000001e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000fc  00000000  00000000  00000379  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000022d  00000000  00000000  00000475  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000060  00000000  00000000  000006a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000bd  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000003f  00000000  00000000  000007c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  64:	0c 94 8e 00 	jmp	0x11c	; 0x11c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <UartInit>:
uint8_t UartReceive();
void UartTransmit(uint8_t data);

void UartInit()
{	
	UCSRB |= (1 << RXEN) | (1 << TXEN);
  6c:	8a b1       	in	r24, 0x0a	; 10
  6e:	88 61       	ori	r24, 0x18	; 24
  70:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << UCSZ1) | (1 << UCSZ0);
  72:	80 b5       	in	r24, 0x20	; 32
  74:	86 60       	ori	r24, 0x06	; 6
  76:	80 bd       	out	0x20, r24	; 32
	UCSRA |= (1<<U2X);
  78:	59 9a       	sbi	0x0b, 1	; 11
	
	UBRRH = 0;
  7a:	10 bc       	out	0x20, r1	; 32
	UBRRL = 12;
  7c:	8c e0       	ldi	r24, 0x0C	; 12
  7e:	89 b9       	out	0x09, r24	; 9

	DDRD &= ~(1<<PD0);
  80:	88 98       	cbi	0x11, 0	; 17
	DDRD |= (1<<PD1);
  82:	89 9a       	sbi	0x11, 1	; 17
	
	PORTD &= ~(1<<PD0);
  84:	90 98       	cbi	0x12, 0	; 18
	PORTD |= (1<<PD1);
  86:	91 9a       	sbi	0x12, 1	; 18
	
	// PD0 - RX
	// PD1 - TX
}
  88:	08 95       	ret

0000008a <UartReceive>:

uint8_t UartReceive()
{
	while( !(UCSRA & (1<<RXC)) );
  8a:	5f 9b       	sbis	0x0b, 7	; 11
  8c:	fe cf       	rjmp	.-4      	; 0x8a <UartReceive>
	return UDR;
  8e:	8c b1       	in	r24, 0x0c	; 12
}
  90:	08 95       	ret

00000092 <UartTransmit>:

void UartTransmit(uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
  92:	5d 9b       	sbis	0x0b, 5	; 11
  94:	fe cf       	rjmp	.-4      	; 0x92 <UartTransmit>
	UDR = data;
  96:	8c b9       	out	0x0c, r24	; 12
}
  98:	08 95       	ret

0000009a <AdcInit>:

void AdcInit()
{
	ADCSRA |= (1<<ADEN) ;
  9a:	37 9a       	sbi	0x06, 7	; 6
	ADMUX |= (1<<REFS0) | (1<<ADLAR);
  9c:	87 b1       	in	r24, 0x07	; 7
  9e:	80 66       	ori	r24, 0x60	; 96
  a0:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (1<<MUX1) | (1<<MUX2) | (1<<MUX0);
  a2:	87 b1       	in	r24, 0x07	; 7
  a4:	87 60       	ori	r24, 0x07	; 7
  a6:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADPS2) | (1<<ADSC);
  a8:	86 b1       	in	r24, 0x06	; 6
  aa:	84 64       	ori	r24, 0x44	; 68
  ac:	86 b9       	out	0x06, r24	; 6
}
  ae:	08 95       	ret

000000b0 <main>:
//PD2-PD7 -> 5 PN

int main(void)
{
	uint8_t c = 0;
	DDRD = 0x00;
  b0:	11 ba       	out	0x11, r1	; 17
	PORTD = 0xFF;
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	82 bb       	out	0x12, r24	; 18
	
	DDRC = 0x00;		// DPDT DATA
  b6:	14 ba       	out	0x14, r1	; 20
	PORTC = 0xFF;
  b8:	85 bb       	out	0x15, r24	; 21
	
	DDRB = 0x00;
  ba:	17 ba       	out	0x17, r1	; 23
	PORTB = 0xFF;
  bc:	88 bb       	out	0x18, r24	; 24
	
	DDRA = 0x00;		// DPDT DATA PA6-PA7
  be:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xFF;
  c0:	8b bb       	out	0x1b, r24	; 27
	
	//lcd_init();
	UartInit();
  c2:	0e 94 36 00 	call	0x6c	; 0x6c <UartInit>
	AdcInit();
  c6:	0e 94 4d 00 	call	0x9a	; 0x9a <AdcInit>
	// PD1 - TX
}

uint8_t UartReceive()
{
	while( !(UCSRA & (1<<RXC)) );
  ca:	5f 9b       	sbis	0x0b, 7	; 11
  cc:	fe cf       	rjmp	.-4      	; 0xca <main+0x1a>
	return UDR;
  ce:	8c b1       	in	r24, 0x0c	; 12
	
	while(1)
	{
			c  = UartReceive();
			
			switch(c)
  d0:	86 34       	cpi	r24, 0x46	; 70
  d2:	a1 f0       	breq	.+40     	; 0xfc <main+0x4c>
  d4:	87 34       	cpi	r24, 0x47	; 71
  d6:	28 f4       	brcc	.+10     	; 0xe2 <main+0x32>
  d8:	82 33       	cpi	r24, 0x32	; 50
  da:	41 f0       	breq	.+16     	; 0xec <main+0x3c>
  dc:	8c 33       	cpi	r24, 0x3C	; 60
  de:	a9 f7       	brne	.-22     	; 0xca <main+0x1a>
  e0:	09 c0       	rjmp	.+18     	; 0xf4 <main+0x44>
  e2:	80 35       	cpi	r24, 0x50	; 80
  e4:	79 f0       	breq	.+30     	; 0x104 <main+0x54>
  e6:	8a 35       	cpi	r24, 0x5A	; 90
  e8:	81 f7       	brne	.-32     	; 0xca <main+0x1a>
  ea:	10 c0       	rjmp	.+32     	; 0x10c <main+0x5c>
			{
				case 50:
					UartTransmit(PINA);
  ec:	89 b3       	in	r24, 0x19	; 25
	return UDR;
}

void UartTransmit(uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
  ee:	5d 9b       	sbis	0x0b, 5	; 11
  f0:	fe cf       	rjmp	.-4      	; 0xee <main+0x3e>
  f2:	12 c0       	rjmp	.+36     	; 0x118 <main+0x68>
				case 50:
					UartTransmit(PINA);
				break;
				
				case 60:
					UartTransmit(PINB);
  f4:	86 b3       	in	r24, 0x16	; 22
	return UDR;
}

void UartTransmit(uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
  f6:	5d 9b       	sbis	0x0b, 5	; 11
  f8:	fe cf       	rjmp	.-4      	; 0xf6 <main+0x46>
  fa:	0e c0       	rjmp	.+28     	; 0x118 <main+0x68>
				case 60:
					UartTransmit(PINB);
				break;
				
				case 70:
					UartTransmit(PINC);
  fc:	83 b3       	in	r24, 0x13	; 19
	return UDR;
}

void UartTransmit(uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
  fe:	5d 9b       	sbis	0x0b, 5	; 11
 100:	fe cf       	rjmp	.-4      	; 0xfe <main+0x4e>
 102:	0a c0       	rjmp	.+20     	; 0x118 <main+0x68>
				case 70:
					UartTransmit(PINC);
				break;
				
				case 80:
					UartTransmit(PIND);
 104:	80 b3       	in	r24, 0x10	; 16
	return UDR;
}

void UartTransmit(uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
 106:	5d 9b       	sbis	0x0b, 5	; 11
 108:	fe cf       	rjmp	.-4      	; 0x106 <main+0x56>
 10a:	06 c0       	rjmp	.+12     	; 0x118 <main+0x68>
				
				case 80:
					UartTransmit(PIND);
				break;
				case 90:
					ADCSRA |= (1<<ADSC);
 10c:	36 9a       	sbi	0x06, 6	; 6
					while( !(ADCSRA & (1<<ADIF)));
 10e:	34 9b       	sbis	0x06, 4	; 6
 110:	fe cf       	rjmp	.-4      	; 0x10e <main+0x5e>
					UartTransmit(ADCH);
 112:	85 b1       	in	r24, 0x05	; 5
	return UDR;
}

void UartTransmit(uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
 114:	5d 9b       	sbis	0x0b, 5	; 11
 116:	fe cf       	rjmp	.-4      	; 0x114 <main+0x64>
	UDR = data;
 118:	8c b9       	out	0x0c, r24	; 12
 11a:	d7 cf       	rjmp	.-82     	; 0xca <main+0x1a>

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
