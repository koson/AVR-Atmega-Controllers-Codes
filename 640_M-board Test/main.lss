
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800200  00000de2  00000e76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000de2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080020a  0080020a  00000e80  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000018d  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009c3  00000000  00000000  0000102d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000256  00000000  00000000  000019f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b71  00000000  00000000  00001c46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000160  00000000  00000000  000027b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001f4  00000000  00000000  00002918  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003a8  00000000  00000000  00002b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00002eb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	e2 ee       	ldi	r30, 0xE2	; 226
  f8:	fd e0       	ldi	r31, 0x0D	; 13
  fa:	02 c0       	rjmp	.+4      	; 0x100 <.do_copy_data_start>

000000fc <.do_copy_data_loop>:
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0

00000100 <.do_copy_data_start>:
 100:	aa 30       	cpi	r26, 0x0A	; 10
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <.do_copy_data_loop>

00000106 <__do_clear_bss>:
 106:	12 e0       	ldi	r17, 0x02	; 2
 108:	aa e0       	ldi	r26, 0x0A	; 10
 10a:	b2 e0       	ldi	r27, 0x02	; 2
 10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
 10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
 110:	a1 31       	cpi	r26, 0x11	; 17
 112:	b1 07       	cpc	r27, r17
 114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
 116:	0e 94 47 04 	call	0x88e	; 0x88e <main>
 11a:	0c 94 ef 06 	jmp	0xdde	; 0xdde <_exit>

0000011e <__bad_interrupt>:
 11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <WaitMs>:

unsigned char ch[10] = {'0','1','2','3','4','5','6','7','8','9'};
unsigned char tenthousand=0,thousand=0,hundred=0,ten=0,one=0;

void WaitMs(unsigned int ms)
{
 122:	0a c0       	rjmp	.+20     	; 0x138 <WaitMs+0x16>
	int i;
	while (ms-- > 0)
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	30 e0       	ldi	r19, 0x00	; 0
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 128:	00 00       	nop
	int i;
	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 12a:	2f 5f       	subi	r18, 0xFF	; 255
 12c:	3f 4f       	sbci	r19, 0xFF	; 255
 12e:	4c e0       	ldi	r20, 0x0C	; 12
 130:	2c 3c       	cpi	r18, 0xCC	; 204
 132:	34 07       	cpc	r19, r20
 134:	c9 f7       	brne	.-14     	; 0x128 <WaitMs+0x6>
 136:	01 97       	sbiw	r24, 0x01	; 1
unsigned char tenthousand=0,thousand=0,hundred=0,ten=0,one=0;

void WaitMs(unsigned int ms)
{
	int i;
	while (ms-- > 0)
 138:	00 97       	sbiw	r24, 0x00	; 0
 13a:	a1 f7       	brne	.-24     	; 0x124 <WaitMs+0x2>
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
	}
}
 13c:	08 95       	ret

0000013e <toggleE>:

void toggleE(void)
{
	SETBIT(PORTE,BIT(0));
 13e:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 140:	83 e3       	ldi	r24, 0x33	; 51
 142:	97 e0       	ldi	r25, 0x07	; 7
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <toggleE+0x6>
	_delay_us(500);
	CLEARBIT(PORTE,BIT(0));
 148:	70 98       	cbi	0x0e, 0	; 14
}
 14a:	08 95       	ret

0000014c <CheckTemp>:

void CheckTemp(uint8_t temp)
{
 14c:	df 93       	push	r29
 14e:	cf 93       	push	r28
 150:	0f 92       	push	r0
 152:	cd b7       	in	r28, 0x3d	; 61
 154:	de b7       	in	r29, 0x3e	; 62
 156:	89 83       	std	Y+1, r24	; 0x01
	if (bit_is_set(temp, 7))
 158:	fe 01       	movw	r30, r28
 15a:	31 96       	adiw	r30, 0x01	; 1
 15c:	89 81       	ldd	r24, Y+1	; 0x01
 15e:	87 ff       	sbrs	r24, 7
 160:	02 c0       	rjmp	.+4      	; 0x166 <CheckTemp+0x1a>
	{
		SETBIT(PORTE, BIT(7))
 162:	77 9a       	sbi	0x0e, 7	; 14
 164:	01 c0       	rjmp	.+2      	; 0x168 <CheckTemp+0x1c>
	}
	else
	{
		CLEARBIT(PORTE, BIT(7))
 166:	77 98       	cbi	0x0e, 7	; 14
	}
	
	if (bit_is_set(temp, 6))
 168:	80 81       	ld	r24, Z
 16a:	86 ff       	sbrs	r24, 6
 16c:	02 c0       	rjmp	.+4      	; 0x172 <CheckTemp+0x26>
	{
		SETBIT(PORTE, BIT(6))
 16e:	76 9a       	sbi	0x0e, 6	; 14
 170:	01 c0       	rjmp	.+2      	; 0x174 <CheckTemp+0x28>
	}
	else
	{
		CLEARBIT(PORTE, BIT(6))
 172:	76 98       	cbi	0x0e, 6	; 14
	}
	if (bit_is_set(temp, 1))
 174:	80 81       	ld	r24, Z
 176:	81 ff       	sbrs	r24, 1
 178:	02 c0       	rjmp	.+4      	; 0x17e <CheckTemp+0x32>
	{
		SETBIT(PORTE, BIT(1))
 17a:	71 9a       	sbi	0x0e, 1	; 14
 17c:	01 c0       	rjmp	.+2      	; 0x180 <CheckTemp+0x34>
	}
	else
	{
		CLEARBIT(PORTE, BIT(1))
 17e:	71 98       	cbi	0x0e, 1	; 14
	}
	
	if (bit_is_set(temp, 2))
 180:	80 81       	ld	r24, Z
 182:	82 ff       	sbrs	r24, 2
 184:	02 c0       	rjmp	.+4      	; 0x18a <CheckTemp+0x3e>
	{
		SETBIT(PORTE, BIT(2))
 186:	72 9a       	sbi	0x0e, 2	; 14
 188:	01 c0       	rjmp	.+2      	; 0x18c <CheckTemp+0x40>
	}
	else
	{
		CLEARBIT(PORTE, BIT(2))
 18a:	72 98       	cbi	0x0e, 2	; 14
	}
	
	if (bit_is_set(temp, 0))
 18c:	80 81       	ld	r24, Z
 18e:	80 ff       	sbrs	r24, 0
 190:	02 c0       	rjmp	.+4      	; 0x196 <CheckTemp+0x4a>
	{
		SETBIT(PORTE, BIT(0))
 192:	70 9a       	sbi	0x0e, 0	; 14
 194:	01 c0       	rjmp	.+2      	; 0x198 <CheckTemp+0x4c>
	}
	else
	{
		CLEARBIT(PORTE, BIT(0))
 196:	70 98       	cbi	0x0e, 0	; 14
	}
}
 198:	0f 90       	pop	r0
 19a:	cf 91       	pop	r28
 19c:	df 91       	pop	r29
 19e:	08 95       	ret

000001a0 <lcd_cmd>:

void lcd_cmd(unsigned char ch)
{
 1a0:	df 92       	push	r13
 1a2:	ef 92       	push	r14
 1a4:	ff 92       	push	r15
 1a6:	0f 93       	push	r16
 1a8:	1f 93       	push	r17
 1aa:	08 2f       	mov	r16, r24
	int temp;
	CLEARBIT(PORTG,BIT(5));
 1ac:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 1ae:	70 98       	cbi	0x0e, 0	; 14

	temp= ch & 0b11000000; // '10'000000
 1b0:	e8 2e       	mov	r14, r24
 1b2:	ff 24       	eor	r15, r15
	CheckTemp(temp);	
 1b4:	80 7c       	andi	r24, 0xC0	; 192
 1b6:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
	//PORTE=temp;
	
	temp=(ch >> 3) & 0b00000110; // 00000'11'0
 1ba:	06 95       	lsr	r16
 1bc:	06 95       	lsr	r16
 1be:	06 95       	lsr	r16
 1c0:	10 e0       	ldi	r17, 0x00	; 0
 1c2:	06 70       	andi	r16, 0x06	; 6
 1c4:	10 70       	andi	r17, 0x00	; 0
	temp = PORTE | temp;
 1c6:	8e b1       	in	r24, 0x0e	; 14
	
	CheckTemp(temp);
 1c8:	80 2b       	or	r24, r16
 1ca:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1ce:	38 e1       	ldi	r19, 0x18	; 24
 1d0:	d3 2e       	mov	r13, r19
 1d2:	8d 2d       	mov	r24, r13
 1d4:	8a 95       	dec	r24
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_cmd+0x34>
	}
}

void toggleE(void)
{
	SETBIT(PORTE,BIT(0));
 1d8:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1da:	03 e3       	ldi	r16, 0x33	; 51
 1dc:	17 e0       	ldi	r17, 0x07	; 7
 1de:	c8 01       	movw	r24, r16
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <lcd_cmd+0x40>
	_delay_us(500);
	CLEARBIT(PORTE,BIT(0));
 1e4:	70 98       	cbi	0x0e, 0	; 14
	CheckTemp(temp);
	_delay_us(5);
	
	toggleE();
   // Extract lower nibble
	SETBIT(PORTG,BIT(5));
 1e6:	a5 9a       	sbi	0x14, 5	; 20
   	CLEARBIT(PORTG,BIT(5));
 1e8:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 1ea:	70 98       	cbi	0x0e, 0	; 14

	temp=(ch << 4) & 0b11000000; // '10'000000
	CheckTemp(temp);
 1ec:	c7 01       	movw	r24, r14
 1ee:	24 e0       	ldi	r18, 0x04	; 4
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	2a 95       	dec	r18
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <lcd_cmd+0x50>
 1f8:	80 7c       	andi	r24, 0xC0	; 192
 1fa:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
	temp=(ch << 1) & 0b00000110; // 00000'01'0 
 1fe:	ee 0c       	add	r14, r14
 200:	ff 1c       	adc	r15, r15
 202:	86 e0       	ldi	r24, 0x06	; 6
 204:	e8 22       	and	r14, r24
 206:	ff 24       	eor	r15, r15
	temp= PORTE | temp;
 208:	8e b1       	in	r24, 0x0e	; 14
	CheckTemp(temp);
 20a:	8e 29       	or	r24, r14
 20c:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 210:	da 94       	dec	r13
 212:	f1 f7       	brne	.-4      	; 0x210 <lcd_cmd+0x70>
	}
}

void toggleE(void)
{
	SETBIT(PORTE,BIT(0));
 214:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 216:	c8 01       	movw	r24, r16
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <lcd_cmd+0x78>
	_delay_us(500);
	CLEARBIT(PORTE,BIT(0));
 21c:	70 98       	cbi	0x0e, 0	; 14
	temp= PORTE | temp;
	CheckTemp(temp);
	_delay_us(5);
	toggleE();
   	//PORTE = 0x00;
	CLEARBIT(PORTE,BIT(0));			//Enable
 21e:	70 98       	cbi	0x0e, 0	; 14
	CLEARBIT(PORTE,BIT(1));
 220:	71 98       	cbi	0x0e, 1	; 14
	CLEARBIT(PORTE,BIT(2));
 222:	72 98       	cbi	0x0e, 2	; 14
	CLEARBIT(PORTE,BIT(6));
 224:	76 98       	cbi	0x0e, 6	; 14
	CLEARBIT(PORTE,BIT(7));
 226:	77 98       	cbi	0x0e, 7	; 14
   	WaitMs(10);
 228:	8a e0       	ldi	r24, 0x0A	; 10
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
}
 230:	1f 91       	pop	r17
 232:	0f 91       	pop	r16
 234:	ff 90       	pop	r15
 236:	ef 90       	pop	r14
 238:	df 90       	pop	r13
 23a:	08 95       	ret

0000023c <lcd_init>:

void lcd_init(void)
{
	DDRE |= (1<<0) | (1<<1) | (1<<2) | (1<<6) | (1<<7);
 23c:	8d b1       	in	r24, 0x0d	; 13
 23e:	87 6c       	ori	r24, 0xC7	; 199
 240:	8d b9       	out	0x0d, r24	; 13
	DDRG |= (1<<5);
 242:	9d 9a       	sbi	0x13, 5	; 19
	WaitMs(15);
 244:	8f e0       	ldi	r24, 0x0F	; 15
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
	CLEARBIT(PORTG,BIT(5));			//RS
 24c:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));			//Enable
 24e:	70 98       	cbi	0x0e, 0	; 14
	CLEARBIT(PORTE,BIT(1));
 250:	71 98       	cbi	0x0e, 1	; 14
	CLEARBIT(PORTE,BIT(2));
 252:	72 98       	cbi	0x0e, 2	; 14
	CLEARBIT(PORTE,BIT(6));
 254:	76 98       	cbi	0x0e, 6	; 14
	CLEARBIT(PORTE,BIT(7));
 256:	77 98       	cbi	0x0e, 7	; 14
	lcd_cmd(0x20);		//data is 8-bit length
 258:	80 e2       	ldi	r24, 0x20	; 32
 25a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
	WaitMs(1);
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
	lcd_cmd(0x20);		//data is 8-bit length
 266:	80 e2       	ldi	r24, 0x20	; 32
 268:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
	WaitMs(1);
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
	lcd_cmd(0x20);		//data is 8-bit length
 274:	80 e2       	ldi	r24, 0x20	; 32
 276:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
	WaitMs(1);
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
	lcd_cmd(0x28);		//sets character font
 282:	88 e2       	ldi	r24, 0x28	; 40
 284:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
	WaitMs(1);
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
	lcd_cmd(0x0E);		//display off(d,c,b=0) 08
 290:	8e e0       	ldi	r24, 0x0E	; 14
 292:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
	WaitMs(1);
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
	lcd_cmd(0x01);		//clears the data
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
	WaitMs(1);
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
	lcd_cmd(0x6);		//entry mode--increment
 2ac:	86 e0       	ldi	r24, 0x06	; 6
 2ae:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
	WaitMs(1);
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
}
 2ba:	08 95       	ret

000002bc <lcd_char>:

void lcd_char(unsigned char data)
{	
 2bc:	df 92       	push	r13
 2be:	ef 92       	push	r14
 2c0:	ff 92       	push	r15
 2c2:	0f 93       	push	r16
 2c4:	1f 93       	push	r17
 2c6:	08 2f       	mov	r16, r24
	int temp;
	WaitMs(15);
 2c8:	8f e0       	ldi	r24, 0x0F	; 15
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
	SETBIT(PORTG,BIT(5));
 2d0:	a5 9a       	sbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 2d2:	70 98       	cbi	0x0e, 0	; 14
	temp= (data & 0b11000000); // '10'000000
 2d4:	e0 2e       	mov	r14, r16
 2d6:	ff 24       	eor	r15, r15
	CheckTemp(temp);
 2d8:	80 2f       	mov	r24, r16
 2da:	80 7c       	andi	r24, 0xC0	; 192
 2dc:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
	temp=(data>>3) & 0b00000110; // 00000'11'0
 2e0:	06 95       	lsr	r16
 2e2:	06 95       	lsr	r16
 2e4:	06 95       	lsr	r16
 2e6:	10 e0       	ldi	r17, 0x00	; 0
 2e8:	06 70       	andi	r16, 0x06	; 6
 2ea:	10 70       	andi	r17, 0x00	; 0
	temp = PORTE | temp;
 2ec:	8e b1       	in	r24, 0x0e	; 14
	CheckTemp(temp);
 2ee:	80 2b       	or	r24, r16
 2f0:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2f4:	68 e1       	ldi	r22, 0x18	; 24
 2f6:	d6 2e       	mov	r13, r22
 2f8:	8d 2d       	mov	r24, r13
 2fa:	8a 95       	dec	r24
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <lcd_char+0x3e>
	}
}

void toggleE(void)
{
	SETBIT(PORTE,BIT(0));
 2fe:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 300:	03 e3       	ldi	r16, 0x33	; 51
 302:	17 e0       	ldi	r17, 0x07	; 7
 304:	c8 01       	movw	r24, r16
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <lcd_char+0x4a>
	_delay_us(500);
	CLEARBIT(PORTE,BIT(0));
 30a:	70 98       	cbi	0x0e, 0	; 14
	temp = PORTE | temp;
	CheckTemp(temp);
	_delay_us(5);
	toggleE();	
	
	CLEARBIT(PORTG,BIT(5));
 30c:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 30e:	70 98       	cbi	0x0e, 0	; 14
	SETBIT(PORTG,BIT(5));
 310:	a5 9a       	sbi	0x14, 5	; 20
	temp=(data << 4) & 0b11000000; // '10'000000
	CheckTemp(temp);
 312:	c7 01       	movw	r24, r14
 314:	54 e0       	ldi	r21, 0x04	; 4
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	5a 95       	dec	r21
 31c:	e1 f7       	brne	.-8      	; 0x316 <lcd_char+0x5a>
 31e:	80 7c       	andi	r24, 0xC0	; 192
 320:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
	temp=(data << 1) & 0b00000110; // 00000'01'0 
 324:	ee 0c       	add	r14, r14
 326:	ff 1c       	adc	r15, r15
 328:	86 e0       	ldi	r24, 0x06	; 6
 32a:	e8 22       	and	r14, r24
 32c:	ff 24       	eor	r15, r15
	temp = PORTE | temp;
 32e:	8e b1       	in	r24, 0x0e	; 14
	CheckTemp(temp);
 330:	8e 29       	or	r24, r14
 332:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 336:	da 94       	dec	r13
 338:	f1 f7       	brne	.-4      	; 0x336 <lcd_char+0x7a>
	}
}

void toggleE(void)
{
	SETBIT(PORTE,BIT(0));
 33a:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 33c:	c8 01       	movw	r24, r16
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <lcd_char+0x82>
	_delay_us(500);
	CLEARBIT(PORTE,BIT(0));
 342:	70 98       	cbi	0x0e, 0	; 14
	temp=(data << 1) & 0b00000110; // 00000'01'0 
	temp = PORTE | temp;
	CheckTemp(temp);
	_delay_us(5);				
	toggleE();
}
 344:	1f 91       	pop	r17
 346:	0f 91       	pop	r16
 348:	ff 90       	pop	r15
 34a:	ef 90       	pop	r14
 34c:	df 90       	pop	r13
 34e:	08 95       	ret

00000350 <lcd_string>:

void lcd_string(unsigned char str[32])
{
 350:	af 92       	push	r10
 352:	bf 92       	push	r11
 354:	cf 92       	push	r12
 356:	df 92       	push	r13
 358:	ff 92       	push	r15
 35a:	0f 93       	push	r16
 35c:	1f 93       	push	r17
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	6c 01       	movw	r12, r24
	int poop,bitch;
	unsigned char k=0;
	SETBIT(PORTG,BIT(5));
 364:	a5 9a       	sbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 366:	70 98       	cbi	0x0e, 0	; 14
 368:	ff 24       	eor	r15, r15
 36a:	a3 e3       	ldi	r26, 0x33	; 51
 36c:	aa 2e       	mov	r10, r26
 36e:	a7 e0       	ldi	r26, 0x07	; 7
 370:	ba 2e       	mov	r11, r26
 372:	3e c0       	rjmp	.+124    	; 0x3f0 <lcd_string+0xa0>
	while(str[k]!='\0')	//Till null character is encountered
	{
		if(k==16)
 374:	80 e1       	ldi	r24, 0x10	; 16
 376:	f8 16       	cp	r15, r24
 378:	19 f4       	brne	.+6      	; 0x380 <lcd_string+0x30>
		lcd_cmd(LINE2);
 37a:	80 ec       	ldi	r24, 0xC0	; 192
 37c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
		SETBIT(PORTG,BIT(5));
 380:	a5 9a       	sbi	0x14, 5	; 20
		CLEARBIT(PORTE,BIT(0));
 382:	70 98       	cbi	0x0e, 0	; 14
		bitch=str[k]; //10111001
 384:	08 81       	ld	r16, Y
 386:	10 e0       	ldi	r17, 0x00	; 0
		poop= bitch & 0b11000000; // '10'000000
		CheckTemp(poop);
 388:	80 2f       	mov	r24, r16
 38a:	80 7c       	andi	r24, 0xC0	; 192
 38c:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
		//PORTE=poop;
		poop=(bitch>>3) & 0b00000110; // 00000'11'0
 390:	f3 e0       	ldi	r31, 0x03	; 3
 392:	15 95       	asr	r17
 394:	07 95       	ror	r16
 396:	fa 95       	dec	r31
 398:	e1 f7       	brne	.-8      	; 0x392 <lcd_string+0x42>
 39a:	06 70       	andi	r16, 0x06	; 6
 39c:	10 70       	andi	r17, 0x00	; 0
		poop = PORTE | poop;
 39e:	8e b1       	in	r24, 0x0e	; 14
		CheckTemp(poop);
 3a0:	80 2b       	or	r24, r16
 3a2:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
	}
}

void toggleE(void)
{
	SETBIT(PORTE,BIT(0));
 3a6:	70 9a       	sbi	0x0e, 0	; 14
 3a8:	c5 01       	movw	r24, r10
 3aa:	01 97       	sbiw	r24, 0x01	; 1
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <lcd_string+0x5a>
	_delay_us(500);
	CLEARBIT(PORTE,BIT(0));
 3ae:	70 98       	cbi	0x0e, 0	; 14
		poop=(bitch>>3) & 0b00000110; // 00000'11'0
		poop = PORTE | poop;
		CheckTemp(poop);
		
		toggleE();
		CLEARBIT(PORTG,BIT(5))
 3b0:	a5 98       	cbi	0x14, 5	; 20
		SETBIT(PORTG,BIT(5));
 3b2:	a5 9a       	sbi	0x14, 5	; 20
		CLEARBIT(PORTE,BIT(0));
 3b4:	70 98       	cbi	0x0e, 0	; 14
		bitch=str[k];
 3b6:	08 81       	ld	r16, Y
 3b8:	10 e0       	ldi	r17, 0x00	; 0
		poop=(bitch << 4) & 0b11000000; // '10'000000
		CheckTemp(poop);
 3ba:	c8 01       	movw	r24, r16
 3bc:	e4 e0       	ldi	r30, 0x04	; 4
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	ea 95       	dec	r30
 3c4:	e1 f7       	brne	.-8      	; 0x3be <lcd_string+0x6e>
 3c6:	80 7c       	andi	r24, 0xC0	; 192
 3c8:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
		poop=(bitch << 1) & 0b00000110; // 00000'01'0
 3cc:	00 0f       	add	r16, r16
 3ce:	11 1f       	adc	r17, r17
 3d0:	06 70       	andi	r16, 0x06	; 6
 3d2:	10 70       	andi	r17, 0x00	; 0
		poop = PORTE | poop;
 3d4:	8e b1       	in	r24, 0x0e	; 14
		CheckTemp(poop);
 3d6:	80 2b       	or	r24, r16
 3d8:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
	}
}

void toggleE(void)
{
	SETBIT(PORTE,BIT(0));
 3dc:	70 9a       	sbi	0x0e, 0	; 14
 3de:	c5 01       	movw	r24, r10
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <lcd_string+0x90>
	_delay_us(500);
	CLEARBIT(PORTE,BIT(0));
 3e4:	70 98       	cbi	0x0e, 0	; 14
		CheckTemp(poop);
		poop=(bitch << 1) & 0b00000110; // 00000'01'0
		poop = PORTE | poop;
		CheckTemp(poop);
		toggleE();
		k++;
 3e6:	f3 94       	inc	r15
		WaitMs(1);
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
{
	int poop,bitch;
	unsigned char k=0;
	SETBIT(PORTG,BIT(5));
	CLEARBIT(PORTE,BIT(0));
	while(str[k]!='\0')	//Till null character is encountered
 3f0:	e6 01       	movw	r28, r12
 3f2:	cf 0d       	add	r28, r15
 3f4:	d1 1d       	adc	r29, r1
 3f6:	88 81       	ld	r24, Y
 3f8:	88 23       	and	r24, r24
 3fa:	09 f0       	breq	.+2      	; 0x3fe <lcd_string+0xae>
 3fc:	bb cf       	rjmp	.-138    	; 0x374 <lcd_string+0x24>
		CheckTemp(poop);
		toggleE();
		k++;
		WaitMs(1);
	}
}
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	1f 91       	pop	r17
 404:	0f 91       	pop	r16
 406:	ff 90       	pop	r15
 408:	df 90       	pop	r13
 40a:	cf 90       	pop	r12
 40c:	bf 90       	pop	r11
 40e:	af 90       	pop	r10
 410:	08 95       	ret

00000412 <lcd_showvalue>:

void lcd_showvalue(long int num)
{
 412:	8f 92       	push	r8
 414:	9f 92       	push	r9
 416:	af 92       	push	r10
 418:	bf 92       	push	r11
 41a:	cf 92       	push	r12
 41c:	df 92       	push	r13
 41e:	ef 92       	push	r14
 420:	ff 92       	push	r15
 422:	1f 93       	push	r17
 424:	cf 93       	push	r28
 426:	df 93       	push	r29
 428:	6b 01       	movw	r12, r22
 42a:	7c 01       	movw	r14, r24
	if (num < 0)
 42c:	97 ff       	sbrs	r25, 7
 42e:	0b c0       	rjmp	.+22     	; 0x446 <lcd_showvalue+0x34>
	{
		lcd_char('-');
 430:	8d e2       	ldi	r24, 0x2D	; 45
 432:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_char>
		num = -num;
 436:	f0 94       	com	r15
 438:	e0 94       	com	r14
 43a:	d0 94       	com	r13
 43c:	c0 94       	com	r12
 43e:	c1 1c       	adc	r12, r1
 440:	d1 1c       	adc	r13, r1
 442:	e1 1c       	adc	r14, r1
 444:	f1 1c       	adc	r15, r1
	
	unsigned long int n = 0;
	int flag = 0;


	if(num%100000 == 0)
 446:	c7 01       	movw	r24, r14
 448:	b6 01       	movw	r22, r12
 44a:	20 ea       	ldi	r18, 0xA0	; 160
 44c:	36 e8       	ldi	r19, 0x86	; 134
 44e:	41 e0       	ldi	r20, 0x01	; 1
 450:	50 e0       	ldi	r21, 0x00	; 0
 452:	0e 94 d4 06 	call	0xda8	; 0xda8 <__divmodsi4>
 456:	61 15       	cp	r22, r1
 458:	71 05       	cpc	r23, r1
 45a:	81 05       	cpc	r24, r1
 45c:	91 05       	cpc	r25, r1
 45e:	19 f4       	brne	.+6      	; 0x466 <lcd_showvalue+0x54>
 460:	c5 e0       	ldi	r28, 0x05	; 5
 462:	d0 e0       	ldi	r29, 0x00	; 0
 464:	41 c0       	rjmp	.+130    	; 0x4e8 <lcd_showvalue+0xd6>
	{
		flag = 5;
	}
	
	else if(num%10000 == 0)
 466:	c7 01       	movw	r24, r14
 468:	b6 01       	movw	r22, r12
 46a:	20 e1       	ldi	r18, 0x10	; 16
 46c:	37 e2       	ldi	r19, 0x27	; 39
 46e:	40 e0       	ldi	r20, 0x00	; 0
 470:	50 e0       	ldi	r21, 0x00	; 0
 472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__divmodsi4>
 476:	61 15       	cp	r22, r1
 478:	71 05       	cpc	r23, r1
 47a:	81 05       	cpc	r24, r1
 47c:	91 05       	cpc	r25, r1
 47e:	19 f4       	brne	.+6      	; 0x486 <lcd_showvalue+0x74>
 480:	c4 e0       	ldi	r28, 0x04	; 4
 482:	d0 e0       	ldi	r29, 0x00	; 0
 484:	31 c0       	rjmp	.+98     	; 0x4e8 <lcd_showvalue+0xd6>
	{
		flag = 4;
	}

	else if(num%1000 == 0)
 486:	c7 01       	movw	r24, r14
 488:	b6 01       	movw	r22, r12
 48a:	28 ee       	ldi	r18, 0xE8	; 232
 48c:	33 e0       	ldi	r19, 0x03	; 3
 48e:	40 e0       	ldi	r20, 0x00	; 0
 490:	50 e0       	ldi	r21, 0x00	; 0
 492:	0e 94 d4 06 	call	0xda8	; 0xda8 <__divmodsi4>
 496:	61 15       	cp	r22, r1
 498:	71 05       	cpc	r23, r1
 49a:	81 05       	cpc	r24, r1
 49c:	91 05       	cpc	r25, r1
 49e:	19 f4       	brne	.+6      	; 0x4a6 <lcd_showvalue+0x94>
 4a0:	c3 e0       	ldi	r28, 0x03	; 3
 4a2:	d0 e0       	ldi	r29, 0x00	; 0
 4a4:	21 c0       	rjmp	.+66     	; 0x4e8 <lcd_showvalue+0xd6>
	{
		flag = 3;
	}

	else if(num%100 == 0)
 4a6:	c7 01       	movw	r24, r14
 4a8:	b6 01       	movw	r22, r12
 4aa:	24 e6       	ldi	r18, 0x64	; 100
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	40 e0       	ldi	r20, 0x00	; 0
 4b0:	50 e0       	ldi	r21, 0x00	; 0
 4b2:	0e 94 d4 06 	call	0xda8	; 0xda8 <__divmodsi4>
 4b6:	61 15       	cp	r22, r1
 4b8:	71 05       	cpc	r23, r1
 4ba:	81 05       	cpc	r24, r1
 4bc:	91 05       	cpc	r25, r1
 4be:	19 f4       	brne	.+6      	; 0x4c6 <lcd_showvalue+0xb4>
 4c0:	c2 e0       	ldi	r28, 0x02	; 2
 4c2:	d0 e0       	ldi	r29, 0x00	; 0
 4c4:	11 c0       	rjmp	.+34     	; 0x4e8 <lcd_showvalue+0xd6>
 4c6:	c0 e0       	ldi	r28, 0x00	; 0
 4c8:	d0 e0       	ldi	r29, 0x00	; 0
 4ca:	c7 01       	movw	r24, r14
 4cc:	b6 01       	movw	r22, r12
 4ce:	2a e0       	ldi	r18, 0x0A	; 10
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	40 e0       	ldi	r20, 0x00	; 0
 4d4:	50 e0       	ldi	r21, 0x00	; 0
 4d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__divmodsi4>
 4da:	61 15       	cp	r22, r1
 4dc:	71 05       	cpc	r23, r1
 4de:	81 05       	cpc	r24, r1
 4e0:	91 05       	cpc	r25, r1
 4e2:	11 f4       	brne	.+4      	; 0x4e8 <lcd_showvalue+0xd6>
 4e4:	c1 e0       	ldi	r28, 0x01	; 1
 4e6:	d0 e0       	ldi	r29, 0x00	; 0
 4e8:	88 24       	eor	r8, r8
 4ea:	99 24       	eor	r9, r9
 4ec:	54 01       	movw	r10, r8
 4ee:	23 c0       	rjmp	.+70     	; 0x536 <lcd_showvalue+0x124>


	while(num!=0)
	{
		
		H = num%10;
 4f0:	c7 01       	movw	r24, r14
 4f2:	b6 01       	movw	r22, r12
 4f4:	2a e0       	ldi	r18, 0x0A	; 10
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	40 e0       	ldi	r20, 0x00	; 0
 4fa:	50 e0       	ldi	r21, 0x00	; 0
 4fc:	0e 94 d4 06 	call	0xda8	; 0xda8 <__divmodsi4>
 500:	16 2f       	mov	r17, r22
		num = num/10;
 502:	c7 01       	movw	r24, r14
 504:	b6 01       	movw	r22, r12
 506:	2a e0       	ldi	r18, 0x0A	; 10
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	40 e0       	ldi	r20, 0x00	; 0
 50c:	50 e0       	ldi	r21, 0x00	; 0
 50e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__divmodsi4>
 512:	c9 01       	movw	r24, r18
 514:	da 01       	movw	r26, r20
 516:	6c 01       	movw	r12, r24
 518:	7d 01       	movw	r14, r26
		n = (n*10)+H;
 51a:	c5 01       	movw	r24, r10
 51c:	b4 01       	movw	r22, r8
 51e:	2a e0       	ldi	r18, 0x0A	; 10
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	40 e0       	ldi	r20, 0x00	; 0
 524:	50 e0       	ldi	r21, 0x00	; 0
 526:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__mulsi3>
 52a:	4b 01       	movw	r8, r22
 52c:	5c 01       	movw	r10, r24
 52e:	81 0e       	add	r8, r17
 530:	91 1c       	adc	r9, r1
 532:	a1 1c       	adc	r10, r1
 534:	b1 1c       	adc	r11, r1
		flag = 0;
	}



	while(num!=0)
 536:	c1 14       	cp	r12, r1
 538:	d1 04       	cpc	r13, r1
 53a:	e1 04       	cpc	r14, r1
 53c:	f1 04       	cpc	r15, r1
 53e:	c1 f6       	brne	.-80     	; 0x4f0 <lcd_showvalue+0xde>
 540:	19 c0       	rjmp	.+50     	; 0x574 <lcd_showvalue+0x162>
	}
	
	while(n!=0)
	{
		
		H = n%10;
 542:	c5 01       	movw	r24, r10
 544:	b4 01       	movw	r22, r8
 546:	2a e0       	ldi	r18, 0x0A	; 10
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	40 e0       	ldi	r20, 0x00	; 0
 54c:	50 e0       	ldi	r21, 0x00	; 0
 54e:	0e 94 b2 06 	call	0xd64	; 0xd64 <__udivmodsi4>
 552:	16 2f       	mov	r17, r22
		n = n/10;
 554:	c5 01       	movw	r24, r10
 556:	b4 01       	movw	r22, r8
 558:	2a e0       	ldi	r18, 0x0A	; 10
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	40 e0       	ldi	r20, 0x00	; 0
 55e:	50 e0       	ldi	r21, 0x00	; 0
 560:	0e 94 b2 06 	call	0xd64	; 0xd64 <__udivmodsi4>
 564:	c9 01       	movw	r24, r18
 566:	da 01       	movw	r26, r20
 568:	4c 01       	movw	r8, r24
 56a:	5d 01       	movw	r10, r26
		lcd_char(H+48);
 56c:	81 2f       	mov	r24, r17
 56e:	80 5d       	subi	r24, 0xD0	; 208
 570:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_char>
		num = num/10;
		n = (n*10)+H;

	}
	
	while(n!=0)
 574:	81 14       	cp	r8, r1
 576:	91 04       	cpc	r9, r1
 578:	a1 04       	cpc	r10, r1
 57a:	b1 04       	cpc	r11, r1
 57c:	11 f7       	brne	.-60     	; 0x542 <lcd_showvalue+0x130>
 57e:	04 c0       	rjmp	.+8      	; 0x588 <lcd_showvalue+0x176>
	}
	
	
	while(flag > 0)
	{
		lcd_char(48);
 580:	80 e3       	ldi	r24, 0x30	; 48
 582:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_char>
		flag--;
 586:	21 97       	sbiw	r28, 0x01	; 1
		lcd_char(H+48);

	}
	
	
	while(flag > 0)
 588:	20 97       	sbiw	r28, 0x00	; 0
 58a:	d1 f7       	brne	.-12     	; 0x580 <lcd_showvalue+0x16e>
	{
		lcd_char(48);
		flag--;
	}

}
 58c:	df 91       	pop	r29
 58e:	cf 91       	pop	r28
 590:	1f 91       	pop	r17
 592:	ff 90       	pop	r15
 594:	ef 90       	pop	r14
 596:	df 90       	pop	r13
 598:	cf 90       	pop	r12
 59a:	bf 90       	pop	r11
 59c:	af 90       	pop	r10
 59e:	9f 90       	pop	r9
 5a0:	8f 90       	pop	r8
 5a2:	08 95       	ret

000005a4 <lcd_gotoxy1>:

}

void lcd_gotoxy1(unsigned char pos)
{
	lcd_cmd(LINE1+pos);
 5a4:	80 58       	subi	r24, 0x80	; 128
 5a6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
}
 5aa:	08 95       	ret

000005ac <lcd_gotoxy2>:

void lcd_gotoxy2(unsigned char pos)
{
	lcd_cmd(LINE2+pos);
 5ac:	80 54       	subi	r24, 0x40	; 64
 5ae:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
}
 5b2:	08 95       	ret

000005b4 <lcd_showvalueh>:

void lcd_showvalueh(unsigned int num)	//prints the decimal 3digit value of num
{
 5b4:	ef 92       	push	r14
 5b6:	ff 92       	push	r15
 5b8:	0f 93       	push	r16
 5ba:	1f 93       	push	r17
 5bc:	8c 01       	movw	r16, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
 5be:	64 e6       	ldi	r22, 0x64	; 100
 5c0:	70 e0       	ldi	r23, 0x00	; 0
 5c2:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__udivmodhi4>
 5c6:	46 2f       	mov	r20, r22
	T=(num - (H*100))/10;
 5c8:	26 2f       	mov	r18, r22
 5ca:	30 e0       	ldi	r19, 0x00	; 0
 5cc:	8c e9       	ldi	r24, 0x9C	; 156
 5ce:	9f ef       	ldi	r25, 0xFF	; 255
 5d0:	28 9f       	mul	r18, r24
 5d2:	70 01       	movw	r14, r0
 5d4:	29 9f       	mul	r18, r25
 5d6:	f0 0c       	add	r15, r0
 5d8:	38 9f       	mul	r19, r24
 5da:	f0 0c       	add	r15, r0
 5dc:	11 24       	eor	r1, r1
 5de:	c7 01       	movw	r24, r14
 5e0:	80 0f       	add	r24, r16
 5e2:	91 1f       	adc	r25, r17
 5e4:	6a e0       	ldi	r22, 0x0A	; 10
 5e6:	70 e0       	ldi	r23, 0x00	; 0
 5e8:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__udivmodhi4>
 5ec:	16 2f       	mov	r17, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+48);
 5ee:	84 2f       	mov	r24, r20
 5f0:	80 5d       	subi	r24, 0xD0	; 208
 5f2:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_char>
	lcd_char(T+48);
 5f6:	81 2f       	mov	r24, r17
 5f8:	80 5d       	subi	r24, 0xD0	; 208
 5fa:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_char>
	lcd_char(O+48);
 5fe:	00 5d       	subi	r16, 0xD0	; 208
 600:	0e 0d       	add	r16, r14
 602:	86 ef       	ldi	r24, 0xF6	; 246
 604:	9f ef       	ldi	r25, 0xFF	; 255
 606:	18 9f       	mul	r17, r24
 608:	60 2d       	mov	r22, r0
 60a:	11 24       	eor	r1, r1
 60c:	86 2f       	mov	r24, r22
 60e:	80 0f       	add	r24, r16
 610:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_char>
}
 614:	1f 91       	pop	r17
 616:	0f 91       	pop	r16
 618:	ff 90       	pop	r15
 61a:	ef 90       	pop	r14
 61c:	08 95       	ret

0000061e <pwm_init>:



void pwm_init(void)
{
	TCCR1A = 0xA8;
 61e:	38 ea       	ldi	r19, 0xA8	; 168
 620:	30 93 80 00 	sts	0x0080, r19
	TCCR1B = 0x11;
 624:	21 e1       	ldi	r18, 0x11	; 17
 626:	20 93 81 00 	sts	0x0081, r18
	ICR1 = 737;
 62a:	81 ee       	ldi	r24, 0xE1	; 225
 62c:	92 e0       	ldi	r25, 0x02	; 2
 62e:	90 93 87 00 	sts	0x0087, r25
 632:	80 93 86 00 	sts	0x0086, r24

	TCCR3A = 0xA8;
 636:	30 93 90 00 	sts	0x0090, r19
	TCCR3B = 0x11;
 63a:	20 93 91 00 	sts	0x0091, r18
	ICR3 = 737;
 63e:	90 93 97 00 	sts	0x0097, r25
 642:	80 93 96 00 	sts	0x0096, r24
	TCCR4A = 0xA8;
 646:	30 93 a0 00 	sts	0x00A0, r19
	TCCR4B = 0x11;
 64a:	20 93 a1 00 	sts	0x00A1, r18
	ICR4 = 737;
 64e:	90 93 a7 00 	sts	0x00A7, r25
 652:	80 93 a6 00 	sts	0x00A6, r24
	TCCR5A = 0xA8;
 656:	30 93 20 01 	sts	0x0120, r19
	TCCR5B = 0x11;
 65a:	20 93 21 01 	sts	0x0121, r18
	ICR5 = 737;
 65e:	90 93 27 01 	sts	0x0127, r25
 662:	80 93 26 01 	sts	0x0126, r24
}
 666:	08 95       	ret

00000668 <port_init>:

void port_init(void)
{
	DDRA = 0xFF;
 668:	8f ef       	ldi	r24, 0xFF	; 255
 66a:	81 b9       	out	0x01, r24	; 1
	DDRB = 0xFF;
 66c:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF;
 66e:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xFE;
 670:	9e ef       	ldi	r25, 0xFE	; 254
 672:	9a b9       	out	0x0a, r25	; 10
	DDRE = 0xFF;
 674:	8d b9       	out	0x0d, r24	; 13
	DDRF = 0xFF;
 676:	80 bb       	out	0x10, r24	; 16
	DDRG = 0xFF;
 678:	83 bb       	out	0x13, r24	; 19
	DDRH = 0xFF;
 67a:	80 93 01 01 	sts	0x0101, r24
	DDRJ = 0xFF;
 67e:	80 93 04 01 	sts	0x0104, r24
	DDRK = 0xFF;
 682:	80 93 07 01 	sts	0x0107, r24
	DDRL = 0xFF;
 686:	80 93 0a 01 	sts	0x010A, r24
}
 68a:	08 95       	ret

0000068c <check_port>:
void check_port(void)
{
 68c:	40 e0       	ldi	r20, 0x00	; 0
 68e:	50 e0       	ldi	r21, 0x00	; 0
	for(int i= 0; i < 8; i++)
	{
		PORTA |= (1<<i);
 690:	a1 e0       	ldi	r26, 0x01	; 1
 692:	b0 e0       	ldi	r27, 0x00	; 0
 694:	60 e7       	ldi	r22, 0x70	; 112
 696:	71 e0       	ldi	r23, 0x01	; 1
 698:	82 b1       	in	r24, 0x02	; 2
 69a:	9d 01       	movw	r18, r26
 69c:	04 2e       	mov	r0, r20
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <check_port+0x18>
 6a0:	22 0f       	add	r18, r18
 6a2:	33 1f       	adc	r19, r19
 6a4:	0a 94       	dec	r0
 6a6:	e2 f7       	brpl	.-8      	; 0x6a0 <check_port+0x14>
 6a8:	82 2b       	or	r24, r18
 6aa:	82 b9       	out	0x02, r24	; 2
		PORTD |= (1<<i);
 6ac:	8b b1       	in	r24, 0x0b	; 11
 6ae:	82 2b       	or	r24, r18
 6b0:	8b b9       	out	0x0b, r24	; 11
		PORTC |= (1<<i);
 6b2:	88 b1       	in	r24, 0x08	; 8
 6b4:	82 2b       	or	r24, r18
 6b6:	88 b9       	out	0x08, r24	; 8
		PORTJ |= (1<<i);
 6b8:	80 91 05 01 	lds	r24, 0x0105
 6bc:	82 2b       	or	r24, r18
 6be:	80 93 05 01 	sts	0x0105, r24
		PORTH |= (1<<i);
 6c2:	80 91 02 01 	lds	r24, 0x0102
 6c6:	82 2b       	or	r24, r18
 6c8:	80 93 02 01 	sts	0x0102, r24
		PORTB |= (1<<i);
 6cc:	85 b1       	in	r24, 0x05	; 5
 6ce:	28 2b       	or	r18, r24
 6d0:	25 b9       	out	0x05, r18	; 5
 6d2:	88 eb       	ldi	r24, 0xB8	; 184
 6d4:	9b e0       	ldi	r25, 0x0B	; 11
 6d6:	fb 01       	movw	r30, r22
 6d8:	31 97       	sbiw	r30, 0x01	; 1
 6da:	f1 f7       	brne	.-4      	; 0x6d8 <check_port+0x4c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6dc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6de:	d9 f7       	brne	.-10     	; 0x6d6 <check_port+0x4a>
		_delay_ms(300);
		PORTA = 0x00;
 6e0:	12 b8       	out	0x02, r1	; 2
		PORTD = 0x00;
 6e2:	1b b8       	out	0x0b, r1	; 11
		PORTC = 0x00;
 6e4:	18 b8       	out	0x08, r1	; 8
		PORTJ = 0x00;
 6e6:	10 92 05 01 	sts	0x0105, r1
		PORTH = 0x00;
 6ea:	10 92 02 01 	sts	0x0102, r1
		PORTB = 0x00;
 6ee:	15 b8       	out	0x05, r1	; 5
	DDRK = 0xFF;
	DDRL = 0xFF;
}
void check_port(void)
{
	for(int i= 0; i < 8; i++)
 6f0:	4f 5f       	subi	r20, 0xFF	; 255
 6f2:	5f 4f       	sbci	r21, 0xFF	; 255
 6f4:	48 30       	cpi	r20, 0x08	; 8
 6f6:	51 05       	cpc	r21, r1
 6f8:	79 f6       	brne	.-98     	; 0x698 <check_port+0xc>
		PORTJ = 0x00;
		PORTH = 0x00;
		PORTB = 0x00;
	}

}
 6fa:	08 95       	ret

000006fc <start_pwm>:

void start_pwm(void)
{
	OCR1A = 700;
 6fc:	8c eb       	ldi	r24, 0xBC	; 188
 6fe:	92 e0       	ldi	r25, 0x02	; 2
 700:	90 93 89 00 	sts	0x0089, r25
 704:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 700;
 708:	90 93 8b 00 	sts	0x008B, r25
 70c:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = 700;
 710:	90 93 8d 00 	sts	0x008D, r25
 714:	80 93 8c 00 	sts	0x008C, r24
	OCR3A = 700;
 718:	90 93 99 00 	sts	0x0099, r25
 71c:	80 93 98 00 	sts	0x0098, r24
	OCR3B = 700;
 720:	90 93 9b 00 	sts	0x009B, r25
 724:	80 93 9a 00 	sts	0x009A, r24
	OCR3C = 700;
 728:	90 93 9d 00 	sts	0x009D, r25
 72c:	80 93 9c 00 	sts	0x009C, r24
	OCR4A = 700;
 730:	90 93 a9 00 	sts	0x00A9, r25
 734:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 700;
 738:	90 93 ab 00 	sts	0x00AB, r25
 73c:	80 93 aa 00 	sts	0x00AA, r24
	OCR4C = 700;
 740:	90 93 ad 00 	sts	0x00AD, r25
 744:	80 93 ac 00 	sts	0x00AC, r24
	OCR5A = 700;
 748:	90 93 29 01 	sts	0x0129, r25
 74c:	80 93 28 01 	sts	0x0128, r24
	OCR5B = 700;
 750:	90 93 2b 01 	sts	0x012B, r25
 754:	80 93 2a 01 	sts	0x012A, r24
	OCR5C = 700;
 758:	90 93 2d 01 	sts	0x012D, r25
 75c:	80 93 2c 01 	sts	0x012C, r24
}
 760:	08 95       	ret

00000762 <set_pwm_d_bit>:

void set_pwm_d_bit(void)
{
	_sb(PORTL, bit(6));
 762:	ab e0       	ldi	r26, 0x0B	; 11
 764:	b1 e0       	ldi	r27, 0x01	; 1
 766:	8c 91       	ld	r24, X
 768:	80 64       	ori	r24, 0x40	; 64
 76a:	8c 93       	st	X, r24
	_sb(PORTL, bit(2));
 76c:	8c 91       	ld	r24, X
 76e:	84 60       	ori	r24, 0x04	; 4
 770:	8c 93       	st	X, r24
	_sb(PORTG, bit(2));
 772:	a2 9a       	sbi	0x14, 2	; 20
	_sb(PORTG, bit(1));
 774:	a1 9a       	sbi	0x14, 1	; 20
	_sb(PORTG, bit(0));
 776:	a0 9a       	sbi	0x14, 0	; 20
	_sb(PORTL, bit(1));
 778:	8c 91       	ld	r24, X
 77a:	82 60       	ori	r24, 0x02	; 2
 77c:	8c 93       	st	X, r24
	_sb(PORTL, bit(0));
 77e:	8c 91       	ld	r24, X
 780:	81 60       	ori	r24, 0x01	; 1
 782:	8c 93       	st	X, r24
	_sb(PORTG, bit(4));
 784:	a4 9a       	sbi	0x14, 4	; 20
	_sb(PORTG, bit(3));
 786:	a3 9a       	sbi	0x14, 3	; 20
	_sb(PORTH, bit(7));
 788:	e2 e0       	ldi	r30, 0x02	; 2
 78a:	f1 e0       	ldi	r31, 0x01	; 1
 78c:	80 81       	ld	r24, Z
 78e:	80 68       	ori	r24, 0x80	; 128
 790:	80 83       	st	Z, r24
	_sb(PORTH, bit(6));
 792:	80 81       	ld	r24, Z
 794:	80 64       	ori	r24, 0x40	; 64
 796:	80 83       	st	Z, r24
	PORTL |= (1<< 7);
 798:	8c 91       	ld	r24, X
 79a:	80 68       	ori	r24, 0x80	; 128
 79c:	8c 93       	st	X, r24

}
 79e:	08 95       	ret

000007a0 <stop_pwm>:
void stop_pwm(void)
{
	OCR1A = 0;
 7a0:	10 92 89 00 	sts	0x0089, r1
 7a4:	10 92 88 00 	sts	0x0088, r1
	_cb(PORTL, bit(2));
 7a8:	ab e0       	ldi	r26, 0x0B	; 11
 7aa:	b1 e0       	ldi	r27, 0x01	; 1
 7ac:	8c 91       	ld	r24, X
 7ae:	8b 7f       	andi	r24, 0xFB	; 251
 7b0:	8c 93       	st	X, r24
	OCR1B = 0;
 7b2:	10 92 8b 00 	sts	0x008B, r1
 7b6:	10 92 8a 00 	sts	0x008A, r1
	_cb(PORTL, bit(6));
 7ba:	8c 91       	ld	r24, X
 7bc:	8f 7b       	andi	r24, 0xBF	; 191
 7be:	8c 93       	st	X, r24
	OCR1C = 0;
 7c0:	10 92 8d 00 	sts	0x008D, r1
 7c4:	10 92 8c 00 	sts	0x008C, r1
	PORTL &= ~(1<< 7);
 7c8:	8c 91       	ld	r24, X
 7ca:	8f 77       	andi	r24, 0x7F	; 127
 7cc:	8c 93       	st	X, r24
	OCR3A = 0;
 7ce:	10 92 99 00 	sts	0x0099, r1
 7d2:	10 92 98 00 	sts	0x0098, r1
	_cb(PORTH, bit(6));
 7d6:	e2 e0       	ldi	r30, 0x02	; 2
 7d8:	f1 e0       	ldi	r31, 0x01	; 1
 7da:	80 81       	ld	r24, Z
 7dc:	8f 7b       	andi	r24, 0xBF	; 191
 7de:	80 83       	st	Z, r24
	OCR3B = 0;
 7e0:	10 92 9b 00 	sts	0x009B, r1
 7e4:	10 92 9a 00 	sts	0x009A, r1
	_cb(PORTH, bit(7));
 7e8:	80 81       	ld	r24, Z
 7ea:	8f 77       	andi	r24, 0x7F	; 127
 7ec:	80 83       	st	Z, r24
	OCR3C = 0;
 7ee:	10 92 9d 00 	sts	0x009D, r1
 7f2:	10 92 9c 00 	sts	0x009C, r1
	_cb(PORTG, bit(3));
 7f6:	a3 98       	cbi	0x14, 3	; 20
	OCR4A = 0;
 7f8:	10 92 a9 00 	sts	0x00A9, r1
 7fc:	10 92 a8 00 	sts	0x00A8, r1
	_cb(PORTG, bit(4));
 800:	a4 98       	cbi	0x14, 4	; 20
	OCR4B = 0;
 802:	10 92 ab 00 	sts	0x00AB, r1
 806:	10 92 aa 00 	sts	0x00AA, r1
	_cb(PORTL, bit(0));
 80a:	8c 91       	ld	r24, X
 80c:	8e 7f       	andi	r24, 0xFE	; 254
 80e:	8c 93       	st	X, r24
	OCR4C = 0;
 810:	10 92 ad 00 	sts	0x00AD, r1
 814:	10 92 ac 00 	sts	0x00AC, r1
	_cb(PORTL, bit(1));
 818:	8c 91       	ld	r24, X
 81a:	8d 7f       	andi	r24, 0xFD	; 253
 81c:	8c 93       	st	X, r24
	OCR5A = 0;
 81e:	10 92 29 01 	sts	0x0129, r1
 822:	10 92 28 01 	sts	0x0128, r1
	_cb(PORTG, bit(0));
 826:	a0 98       	cbi	0x14, 0	; 20
	OCR5B = 0;
 828:	10 92 2b 01 	sts	0x012B, r1
 82c:	10 92 2a 01 	sts	0x012A, r1
	_cb(PORTG, bit(1));
 830:	a1 98       	cbi	0x14, 1	; 20
	OCR5C = 0;
 832:	10 92 2d 01 	sts	0x012D, r1
 836:	10 92 2c 01 	sts	0x012C, r1
	_cb(PORTG, bit(2));
 83a:	a2 98       	cbi	0x14, 2	; 20
}
 83c:	08 95       	ret

0000083e <check_pwm>:

void check_pwm(void)
{
	start_pwm();
 83e:	0e 94 7e 03 	call	0x6fc	; 0x6fc <start_pwm>
 842:	88 ee       	ldi	r24, 0xE8	; 232
 844:	93 e0       	ldi	r25, 0x03	; 3
 846:	20 e7       	ldi	r18, 0x70	; 112
 848:	31 e0       	ldi	r19, 0x01	; 1
 84a:	f9 01       	movw	r30, r18
 84c:	31 97       	sbiw	r30, 0x01	; 1
 84e:	f1 f7       	brne	.-4      	; 0x84c <check_pwm+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 850:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 852:	d9 f7       	brne	.-10     	; 0x84a <check_pwm+0xc>
	_delay_ms(100);
	set_pwm_d_bit();
 854:	0e 94 b1 03 	call	0x762	; 0x762 <set_pwm_d_bit>
 858:	80 e1       	ldi	r24, 0x10	; 16
 85a:	97 e2       	ldi	r25, 0x27	; 39
 85c:	20 e7       	ldi	r18, 0x70	; 112
 85e:	31 e0       	ldi	r19, 0x01	; 1
 860:	f9 01       	movw	r30, r18
 862:	31 97       	sbiw	r30, 0x01	; 1
 864:	f1 f7       	brne	.-4      	; 0x862 <check_pwm+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 866:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 868:	d9 f7       	brne	.-10     	; 0x860 <check_pwm+0x22>
	_delay_ms(1000);
	stop_pwm();
 86a:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <stop_pwm>
 86e:	80 e1       	ldi	r24, 0x10	; 16
 870:	97 e2       	ldi	r25, 0x27	; 39
 872:	20 e7       	ldi	r18, 0x70	; 112
 874:	31 e0       	ldi	r19, 0x01	; 1
 876:	f9 01       	movw	r30, r18
 878:	31 97       	sbiw	r30, 0x01	; 1
 87a:	f1 f7       	brne	.-4      	; 0x878 <check_pwm+0x3a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 87c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 87e:	d9 f7       	brne	.-10     	; 0x876 <check_pwm+0x38>
	_delay_ms(1000);
}
 880:	08 95       	ret

00000882 <timer_init>:

void timer_init(void)
{
	/*--------Timer Initialisation-------*/
	TCCR1B = 0x07;
 882:	87 e0       	ldi	r24, 0x07	; 7
 884:	80 93 81 00 	sts	0x0081, r24
	DDRD &= ~(1<<6);
 888:	56 98       	cbi	0x0a, 6	; 10
	PORTD |= (1<<6);		
 88a:	5e 9a       	sbi	0x0b, 6	; 11
}
 88c:	08 95       	ret

0000088e <main>:

int main(void)
{
	//lcd_init();
	pwm_init();
 88e:	0e 94 0f 03 	call	0x61e	; 0x61e <pwm_init>
	port_init();
 892:	0e 94 34 03 	call	0x668	; 0x668 <port_init>
	stop_pwm();
 896:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <stop_pwm>
	PORTD = 0xFE;
 89a:	8e ef       	ldi	r24, 0xFE	; 254
 89c:	8b b9       	out	0x0b, r24	; 11
	OCR3A = 700 ;
 89e:	8c eb       	ldi	r24, 0xBC	; 188
 8a0:	92 e0       	ldi	r25, 0x02	; 2
 8a2:	90 93 99 00 	sts	0x0099, r25
 8a6:	80 93 98 00 	sts	0x0098, r24
	OCR3B = 700*0.9;
 8aa:	86 e7       	ldi	r24, 0x76	; 118
 8ac:	92 e0       	ldi	r25, 0x02	; 2
 8ae:	90 93 9b 00 	sts	0x009B, r25
 8b2:	80 93 9a 00 	sts	0x009A, r24
	OCR3C = 700*0.8;
 8b6:	80 e3       	ldi	r24, 0x30	; 48
 8b8:	92 e0       	ldi	r25, 0x02	; 2
 8ba:	90 93 9d 00 	sts	0x009D, r25
 8be:	80 93 9c 00 	sts	0x009C, r24
	OCR4A = 700*0.7 ;
 8c2:	8a ee       	ldi	r24, 0xEA	; 234
 8c4:	91 e0       	ldi	r25, 0x01	; 1
 8c6:	90 93 a9 00 	sts	0x00A9, r25
 8ca:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 700*0.6;
 8ce:	84 ea       	ldi	r24, 0xA4	; 164
 8d0:	91 e0       	ldi	r25, 0x01	; 1
 8d2:	90 93 ab 00 	sts	0x00AB, r25
 8d6:	80 93 aa 00 	sts	0x00AA, r24
	OCR4C = 700*0.5;
 8da:	8e e5       	ldi	r24, 0x5E	; 94
 8dc:	91 e0       	ldi	r25, 0x01	; 1
 8de:	90 93 ad 00 	sts	0x00AD, r25
 8e2:	80 93 ac 00 	sts	0x00AC, r24
	OCR1A = 700*0.4 ;
 8e6:	88 e1       	ldi	r24, 0x18	; 24
 8e8:	91 e0       	ldi	r25, 0x01	; 1
 8ea:	90 93 89 00 	sts	0x0089, r25
 8ee:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 700*0.3;
 8f2:	82 ed       	ldi	r24, 0xD2	; 210
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	90 93 8b 00 	sts	0x008B, r25
 8fa:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = 700*0.2;
 8fe:	ec e8       	ldi	r30, 0x8C	; 140
 900:	f0 e0       	ldi	r31, 0x00	; 0
 902:	f1 83       	std	Z+1, r31	; 0x01
 904:	e0 83       	st	Z, r30
	OCR5A = 700*0.15 ;
 906:	89 e6       	ldi	r24, 0x69	; 105
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	90 93 29 01 	sts	0x0129, r25
 90e:	80 93 28 01 	sts	0x0128, r24
	OCR5B = 700*0.12;
 912:	84 e5       	ldi	r24, 0x54	; 84
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	90 93 2b 01 	sts	0x012B, r25
 91a:	80 93 2a 01 	sts	0x012A, r24
	OCR5C = 700*0.10;
 91e:	86 e4       	ldi	r24, 0x46	; 70
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	90 93 2d 01 	sts	0x012D, r25
 926:	80 93 2c 01 	sts	0x012C, r24
	PORTH |= (1<<7);
 92a:	80 91 02 01 	lds	r24, 0x0102
 92e:	80 68       	ori	r24, 0x80	; 128
 930:	80 93 02 01 	sts	0x0102, r24
 934:	ff cf       	rjmp	.-2      	; 0x934 <main+0xa6>

00000936 <lcd_showvaluef>:
	}

}

void lcd_showvaluef(float num)
{
 936:	ef 92       	push	r14
 938:	ff 92       	push	r15
 93a:	0f 93       	push	r16
 93c:	1f 93       	push	r17
 93e:	df 93       	push	r29
 940:	cf 93       	push	r28
 942:	00 d0       	rcall	.+0      	; 0x944 <lcd_showvaluef+0xe>
 944:	00 d0       	rcall	.+0      	; 0x946 <lcd_showvaluef+0x10>
 946:	cd b7       	in	r28, 0x3d	; 61
 948:	de b7       	in	r29, 0x3e	; 62
 94a:	7b 01       	movw	r14, r22
 94c:	8c 01       	movw	r16, r24
	if (num < 0)
 94e:	20 e0       	ldi	r18, 0x00	; 0
 950:	30 e0       	ldi	r19, 0x00	; 0
 952:	40 e0       	ldi	r20, 0x00	; 0
 954:	50 e0       	ldi	r21, 0x00	; 0
 956:	0e 94 df 04 	call	0x9be	; 0x9be <__cmpsf2>
 95a:	88 23       	and	r24, r24
 95c:	3c f4       	brge	.+14     	; 0x96c <lcd_showvaluef+0x36>
	{
		lcd_char('-');
 95e:	8d e2       	ldi	r24, 0x2D	; 45
 960:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_char>
		num = -num;
 964:	17 fb       	bst	r17, 7
 966:	10 95       	com	r17
 968:	17 f9       	bld	r17, 7
 96a:	10 95       	com	r17
	unsigned long int l;
	double fraction,integer;

	l = (unsigned long int)num;

	lcd_showvalue(l);
 96c:	c8 01       	movw	r24, r16
 96e:	b7 01       	movw	r22, r14
 970:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixunssfsi>
 974:	0e 94 09 02 	call	0x412	; 0x412 <lcd_showvalue>

	fraction = modf((double)num,&integer);
 978:	c8 01       	movw	r24, r16
 97a:	b7 01       	movw	r22, r14
 97c:	ae 01       	movw	r20, r28
 97e:	4f 5f       	subi	r20, 0xFF	; 255
 980:	5f 4f       	sbci	r21, 0xFF	; 255
 982:	0e 94 5c 05 	call	0xab8	; 0xab8 <modf>
 986:	7b 01       	movw	r14, r22
 988:	8c 01       	movw	r16, r24

	l = (unsigned long int)(fraction * 100000);

	lcd_char('.');
 98a:	8e e2       	ldi	r24, 0x2E	; 46
 98c:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_char>

	lcd_showvalue(l);
 990:	c8 01       	movw	r24, r16
 992:	b7 01       	movw	r22, r14
 994:	20 e0       	ldi	r18, 0x00	; 0
 996:	30 e5       	ldi	r19, 0x50	; 80
 998:	43 ec       	ldi	r20, 0xC3	; 195
 99a:	57 e4       	ldi	r21, 0x47	; 71
 99c:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__mulsf3>
 9a0:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixunssfsi>
 9a4:	0e 94 09 02 	call	0x412	; 0x412 <lcd_showvalue>

}
 9a8:	0f 90       	pop	r0
 9aa:	0f 90       	pop	r0
 9ac:	0f 90       	pop	r0
 9ae:	0f 90       	pop	r0
 9b0:	cf 91       	pop	r28
 9b2:	df 91       	pop	r29
 9b4:	1f 91       	pop	r17
 9b6:	0f 91       	pop	r16
 9b8:	ff 90       	pop	r15
 9ba:	ef 90       	pop	r14
 9bc:	08 95       	ret

000009be <__cmpsf2>:
 9be:	2f d0       	rcall	.+94     	; 0xa1e <__fp_cmp>
 9c0:	08 f4       	brcc	.+2      	; 0x9c4 <__cmpsf2+0x6>
 9c2:	81 e0       	ldi	r24, 0x01	; 1
 9c4:	08 95       	ret

000009c6 <__fixunssfsi>:
 9c6:	57 d0       	rcall	.+174    	; 0xa76 <__fp_splitA>
 9c8:	88 f0       	brcs	.+34     	; 0x9ec <__fixunssfsi+0x26>
 9ca:	9f 57       	subi	r25, 0x7F	; 127
 9cc:	90 f0       	brcs	.+36     	; 0x9f2 <__fixunssfsi+0x2c>
 9ce:	b9 2f       	mov	r27, r25
 9d0:	99 27       	eor	r25, r25
 9d2:	b7 51       	subi	r27, 0x17	; 23
 9d4:	a0 f0       	brcs	.+40     	; 0x9fe <__fixunssfsi+0x38>
 9d6:	d1 f0       	breq	.+52     	; 0xa0c <__fixunssfsi+0x46>
 9d8:	66 0f       	add	r22, r22
 9da:	77 1f       	adc	r23, r23
 9dc:	88 1f       	adc	r24, r24
 9de:	99 1f       	adc	r25, r25
 9e0:	1a f0       	brmi	.+6      	; 0x9e8 <__fixunssfsi+0x22>
 9e2:	ba 95       	dec	r27
 9e4:	c9 f7       	brne	.-14     	; 0x9d8 <__fixunssfsi+0x12>
 9e6:	12 c0       	rjmp	.+36     	; 0xa0c <__fixunssfsi+0x46>
 9e8:	b1 30       	cpi	r27, 0x01	; 1
 9ea:	81 f0       	breq	.+32     	; 0xa0c <__fixunssfsi+0x46>
 9ec:	5e d0       	rcall	.+188    	; 0xaaa <__fp_zero>
 9ee:	b1 e0       	ldi	r27, 0x01	; 1
 9f0:	08 95       	ret
 9f2:	5b c0       	rjmp	.+182    	; 0xaaa <__fp_zero>
 9f4:	67 2f       	mov	r22, r23
 9f6:	78 2f       	mov	r23, r24
 9f8:	88 27       	eor	r24, r24
 9fa:	b8 5f       	subi	r27, 0xF8	; 248
 9fc:	39 f0       	breq	.+14     	; 0xa0c <__fixunssfsi+0x46>
 9fe:	b9 3f       	cpi	r27, 0xF9	; 249
 a00:	cc f3       	brlt	.-14     	; 0x9f4 <__fixunssfsi+0x2e>
 a02:	86 95       	lsr	r24
 a04:	77 95       	ror	r23
 a06:	67 95       	ror	r22
 a08:	b3 95       	inc	r27
 a0a:	d9 f7       	brne	.-10     	; 0xa02 <__fixunssfsi+0x3c>
 a0c:	3e f4       	brtc	.+14     	; 0xa1c <__fixunssfsi+0x56>
 a0e:	90 95       	com	r25
 a10:	80 95       	com	r24
 a12:	70 95       	com	r23
 a14:	61 95       	neg	r22
 a16:	7f 4f       	sbci	r23, 0xFF	; 255
 a18:	8f 4f       	sbci	r24, 0xFF	; 255
 a1a:	9f 4f       	sbci	r25, 0xFF	; 255
 a1c:	08 95       	ret

00000a1e <__fp_cmp>:
 a1e:	99 0f       	add	r25, r25
 a20:	00 08       	sbc	r0, r0
 a22:	55 0f       	add	r21, r21
 a24:	aa 0b       	sbc	r26, r26
 a26:	e0 e8       	ldi	r30, 0x80	; 128
 a28:	fe ef       	ldi	r31, 0xFE	; 254
 a2a:	16 16       	cp	r1, r22
 a2c:	17 06       	cpc	r1, r23
 a2e:	e8 07       	cpc	r30, r24
 a30:	f9 07       	cpc	r31, r25
 a32:	c0 f0       	brcs	.+48     	; 0xa64 <__fp_cmp+0x46>
 a34:	12 16       	cp	r1, r18
 a36:	13 06       	cpc	r1, r19
 a38:	e4 07       	cpc	r30, r20
 a3a:	f5 07       	cpc	r31, r21
 a3c:	98 f0       	brcs	.+38     	; 0xa64 <__fp_cmp+0x46>
 a3e:	62 1b       	sub	r22, r18
 a40:	73 0b       	sbc	r23, r19
 a42:	84 0b       	sbc	r24, r20
 a44:	95 0b       	sbc	r25, r21
 a46:	39 f4       	brne	.+14     	; 0xa56 <__fp_cmp+0x38>
 a48:	0a 26       	eor	r0, r26
 a4a:	61 f0       	breq	.+24     	; 0xa64 <__fp_cmp+0x46>
 a4c:	23 2b       	or	r18, r19
 a4e:	24 2b       	or	r18, r20
 a50:	25 2b       	or	r18, r21
 a52:	21 f4       	brne	.+8      	; 0xa5c <__fp_cmp+0x3e>
 a54:	08 95       	ret
 a56:	0a 26       	eor	r0, r26
 a58:	09 f4       	brne	.+2      	; 0xa5c <__fp_cmp+0x3e>
 a5a:	a1 40       	sbci	r26, 0x01	; 1
 a5c:	a6 95       	lsr	r26
 a5e:	8f ef       	ldi	r24, 0xFF	; 255
 a60:	81 1d       	adc	r24, r1
 a62:	81 1d       	adc	r24, r1
 a64:	08 95       	ret

00000a66 <__fp_split3>:
 a66:	57 fd       	sbrc	r21, 7
 a68:	90 58       	subi	r25, 0x80	; 128
 a6a:	44 0f       	add	r20, r20
 a6c:	55 1f       	adc	r21, r21
 a6e:	59 f0       	breq	.+22     	; 0xa86 <__fp_splitA+0x10>
 a70:	5f 3f       	cpi	r21, 0xFF	; 255
 a72:	71 f0       	breq	.+28     	; 0xa90 <__fp_splitA+0x1a>
 a74:	47 95       	ror	r20

00000a76 <__fp_splitA>:
 a76:	88 0f       	add	r24, r24
 a78:	97 fb       	bst	r25, 7
 a7a:	99 1f       	adc	r25, r25
 a7c:	61 f0       	breq	.+24     	; 0xa96 <__fp_splitA+0x20>
 a7e:	9f 3f       	cpi	r25, 0xFF	; 255
 a80:	79 f0       	breq	.+30     	; 0xaa0 <__fp_splitA+0x2a>
 a82:	87 95       	ror	r24
 a84:	08 95       	ret
 a86:	12 16       	cp	r1, r18
 a88:	13 06       	cpc	r1, r19
 a8a:	14 06       	cpc	r1, r20
 a8c:	55 1f       	adc	r21, r21
 a8e:	f2 cf       	rjmp	.-28     	; 0xa74 <__fp_split3+0xe>
 a90:	46 95       	lsr	r20
 a92:	f1 df       	rcall	.-30     	; 0xa76 <__fp_splitA>
 a94:	08 c0       	rjmp	.+16     	; 0xaa6 <__fp_splitA+0x30>
 a96:	16 16       	cp	r1, r22
 a98:	17 06       	cpc	r1, r23
 a9a:	18 06       	cpc	r1, r24
 a9c:	99 1f       	adc	r25, r25
 a9e:	f1 cf       	rjmp	.-30     	; 0xa82 <__fp_splitA+0xc>
 aa0:	86 95       	lsr	r24
 aa2:	71 05       	cpc	r23, r1
 aa4:	61 05       	cpc	r22, r1
 aa6:	08 94       	sec
 aa8:	08 95       	ret

00000aaa <__fp_zero>:
 aaa:	e8 94       	clt

00000aac <__fp_szero>:
 aac:	bb 27       	eor	r27, r27
 aae:	66 27       	eor	r22, r22
 ab0:	77 27       	eor	r23, r23
 ab2:	cb 01       	movw	r24, r22
 ab4:	97 f9       	bld	r25, 7
 ab6:	08 95       	ret

00000ab8 <modf>:
 ab8:	fa 01       	movw	r30, r20
 aba:	dc 01       	movw	r26, r24
 abc:	aa 0f       	add	r26, r26
 abe:	bb 1f       	adc	r27, r27
 ac0:	9b 01       	movw	r18, r22
 ac2:	ac 01       	movw	r20, r24
 ac4:	bf 57       	subi	r27, 0x7F	; 127
 ac6:	28 f4       	brcc	.+10     	; 0xad2 <modf+0x1a>
 ac8:	22 27       	eor	r18, r18
 aca:	33 27       	eor	r19, r19
 acc:	44 27       	eor	r20, r20
 ace:	50 78       	andi	r21, 0x80	; 128
 ad0:	1f c0       	rjmp	.+62     	; 0xb10 <modf+0x58>
 ad2:	b7 51       	subi	r27, 0x17	; 23
 ad4:	88 f4       	brcc	.+34     	; 0xaf8 <modf+0x40>
 ad6:	ab 2f       	mov	r26, r27
 ad8:	00 24       	eor	r0, r0
 ada:	46 95       	lsr	r20
 adc:	37 95       	ror	r19
 ade:	27 95       	ror	r18
 ae0:	01 1c       	adc	r0, r1
 ae2:	a3 95       	inc	r26
 ae4:	d2 f3       	brmi	.-12     	; 0xada <modf+0x22>
 ae6:	00 20       	and	r0, r0
 ae8:	69 f0       	breq	.+26     	; 0xb04 <modf+0x4c>
 aea:	22 0f       	add	r18, r18
 aec:	33 1f       	adc	r19, r19
 aee:	44 1f       	adc	r20, r20
 af0:	b3 95       	inc	r27
 af2:	da f3       	brmi	.-10     	; 0xaea <modf+0x32>
 af4:	0d d0       	rcall	.+26     	; 0xb10 <modf+0x58>
 af6:	76 c0       	rjmp	.+236    	; 0xbe4 <__subsf3>
 af8:	61 30       	cpi	r22, 0x01	; 1
 afa:	71 05       	cpc	r23, r1
 afc:	a0 e8       	ldi	r26, 0x80	; 128
 afe:	8a 07       	cpc	r24, r26
 b00:	b9 46       	sbci	r27, 0x69	; 105
 b02:	30 f4       	brcc	.+12     	; 0xb10 <modf+0x58>
 b04:	9b 01       	movw	r18, r22
 b06:	ac 01       	movw	r20, r24
 b08:	66 27       	eor	r22, r22
 b0a:	77 27       	eor	r23, r23
 b0c:	88 27       	eor	r24, r24
 b0e:	90 78       	andi	r25, 0x80	; 128
 b10:	30 96       	adiw	r30, 0x00	; 0
 b12:	21 f0       	breq	.+8      	; 0xb1c <modf+0x64>
 b14:	20 83       	st	Z, r18
 b16:	31 83       	std	Z+1, r19	; 0x01
 b18:	42 83       	std	Z+2, r20	; 0x02
 b1a:	53 83       	std	Z+3, r21	; 0x03
 b1c:	08 95       	ret

00000b1e <__mulsf3>:
 b1e:	0b d0       	rcall	.+22     	; 0xb36 <__mulsf3x>
 b20:	dd c0       	rjmp	.+442    	; 0xcdc <__fp_round>
 b22:	ce d0       	rcall	.+412    	; 0xcc0 <__fp_pscA>
 b24:	28 f0       	brcs	.+10     	; 0xb30 <__mulsf3+0x12>
 b26:	d3 d0       	rcall	.+422    	; 0xcce <__fp_pscB>
 b28:	18 f0       	brcs	.+6      	; 0xb30 <__mulsf3+0x12>
 b2a:	95 23       	and	r25, r21
 b2c:	09 f0       	breq	.+2      	; 0xb30 <__mulsf3+0x12>
 b2e:	bf c0       	rjmp	.+382    	; 0xcae <__fp_inf>
 b30:	c4 c0       	rjmp	.+392    	; 0xcba <__fp_nan>
 b32:	11 24       	eor	r1, r1
 b34:	bb cf       	rjmp	.-138    	; 0xaac <__fp_szero>

00000b36 <__mulsf3x>:
 b36:	97 df       	rcall	.-210    	; 0xa66 <__fp_split3>
 b38:	a0 f3       	brcs	.-24     	; 0xb22 <__mulsf3+0x4>

00000b3a <__mulsf3_pse>:
 b3a:	95 9f       	mul	r25, r21
 b3c:	d1 f3       	breq	.-12     	; 0xb32 <__mulsf3+0x14>
 b3e:	95 0f       	add	r25, r21
 b40:	50 e0       	ldi	r21, 0x00	; 0
 b42:	55 1f       	adc	r21, r21
 b44:	62 9f       	mul	r22, r18
 b46:	f0 01       	movw	r30, r0
 b48:	72 9f       	mul	r23, r18
 b4a:	bb 27       	eor	r27, r27
 b4c:	f0 0d       	add	r31, r0
 b4e:	b1 1d       	adc	r27, r1
 b50:	63 9f       	mul	r22, r19
 b52:	aa 27       	eor	r26, r26
 b54:	f0 0d       	add	r31, r0
 b56:	b1 1d       	adc	r27, r1
 b58:	aa 1f       	adc	r26, r26
 b5a:	64 9f       	mul	r22, r20
 b5c:	66 27       	eor	r22, r22
 b5e:	b0 0d       	add	r27, r0
 b60:	a1 1d       	adc	r26, r1
 b62:	66 1f       	adc	r22, r22
 b64:	82 9f       	mul	r24, r18
 b66:	22 27       	eor	r18, r18
 b68:	b0 0d       	add	r27, r0
 b6a:	a1 1d       	adc	r26, r1
 b6c:	62 1f       	adc	r22, r18
 b6e:	73 9f       	mul	r23, r19
 b70:	b0 0d       	add	r27, r0
 b72:	a1 1d       	adc	r26, r1
 b74:	62 1f       	adc	r22, r18
 b76:	83 9f       	mul	r24, r19
 b78:	a0 0d       	add	r26, r0
 b7a:	61 1d       	adc	r22, r1
 b7c:	22 1f       	adc	r18, r18
 b7e:	74 9f       	mul	r23, r20
 b80:	33 27       	eor	r19, r19
 b82:	a0 0d       	add	r26, r0
 b84:	61 1d       	adc	r22, r1
 b86:	23 1f       	adc	r18, r19
 b88:	84 9f       	mul	r24, r20
 b8a:	60 0d       	add	r22, r0
 b8c:	21 1d       	adc	r18, r1
 b8e:	82 2f       	mov	r24, r18
 b90:	76 2f       	mov	r23, r22
 b92:	6a 2f       	mov	r22, r26
 b94:	11 24       	eor	r1, r1
 b96:	9f 57       	subi	r25, 0x7F	; 127
 b98:	50 40       	sbci	r21, 0x00	; 0
 b9a:	8a f0       	brmi	.+34     	; 0xbbe <__mulsf3_pse+0x84>
 b9c:	e1 f0       	breq	.+56     	; 0xbd6 <__mulsf3_pse+0x9c>
 b9e:	88 23       	and	r24, r24
 ba0:	4a f0       	brmi	.+18     	; 0xbb4 <__mulsf3_pse+0x7a>
 ba2:	ee 0f       	add	r30, r30
 ba4:	ff 1f       	adc	r31, r31
 ba6:	bb 1f       	adc	r27, r27
 ba8:	66 1f       	adc	r22, r22
 baa:	77 1f       	adc	r23, r23
 bac:	88 1f       	adc	r24, r24
 bae:	91 50       	subi	r25, 0x01	; 1
 bb0:	50 40       	sbci	r21, 0x00	; 0
 bb2:	a9 f7       	brne	.-22     	; 0xb9e <__mulsf3_pse+0x64>
 bb4:	9e 3f       	cpi	r25, 0xFE	; 254
 bb6:	51 05       	cpc	r21, r1
 bb8:	70 f0       	brcs	.+28     	; 0xbd6 <__mulsf3_pse+0x9c>
 bba:	79 c0       	rjmp	.+242    	; 0xcae <__fp_inf>
 bbc:	77 cf       	rjmp	.-274    	; 0xaac <__fp_szero>
 bbe:	5f 3f       	cpi	r21, 0xFF	; 255
 bc0:	ec f3       	brlt	.-6      	; 0xbbc <__mulsf3_pse+0x82>
 bc2:	98 3e       	cpi	r25, 0xE8	; 232
 bc4:	dc f3       	brlt	.-10     	; 0xbbc <__mulsf3_pse+0x82>
 bc6:	86 95       	lsr	r24
 bc8:	77 95       	ror	r23
 bca:	67 95       	ror	r22
 bcc:	b7 95       	ror	r27
 bce:	f7 95       	ror	r31
 bd0:	e7 95       	ror	r30
 bd2:	9f 5f       	subi	r25, 0xFF	; 255
 bd4:	c1 f7       	brne	.-16     	; 0xbc6 <__mulsf3_pse+0x8c>
 bd6:	fe 2b       	or	r31, r30
 bd8:	88 0f       	add	r24, r24
 bda:	91 1d       	adc	r25, r1
 bdc:	96 95       	lsr	r25
 bde:	87 95       	ror	r24
 be0:	97 f9       	bld	r25, 7
 be2:	08 95       	ret

00000be4 <__subsf3>:
 be4:	50 58       	subi	r21, 0x80	; 128

00000be6 <__addsf3>:
 be6:	bb 27       	eor	r27, r27
 be8:	aa 27       	eor	r26, r26
 bea:	0e d0       	rcall	.+28     	; 0xc08 <__addsf3x>
 bec:	77 c0       	rjmp	.+238    	; 0xcdc <__fp_round>
 bee:	68 d0       	rcall	.+208    	; 0xcc0 <__fp_pscA>
 bf0:	30 f0       	brcs	.+12     	; 0xbfe <__addsf3+0x18>
 bf2:	6d d0       	rcall	.+218    	; 0xcce <__fp_pscB>
 bf4:	20 f0       	brcs	.+8      	; 0xbfe <__addsf3+0x18>
 bf6:	31 f4       	brne	.+12     	; 0xc04 <__addsf3+0x1e>
 bf8:	9f 3f       	cpi	r25, 0xFF	; 255
 bfa:	11 f4       	brne	.+4      	; 0xc00 <__addsf3+0x1a>
 bfc:	1e f4       	brtc	.+6      	; 0xc04 <__addsf3+0x1e>
 bfe:	5d c0       	rjmp	.+186    	; 0xcba <__fp_nan>
 c00:	0e f4       	brtc	.+2      	; 0xc04 <__addsf3+0x1e>
 c02:	e0 95       	com	r30
 c04:	e7 fb       	bst	r30, 7
 c06:	53 c0       	rjmp	.+166    	; 0xcae <__fp_inf>

00000c08 <__addsf3x>:
 c08:	e9 2f       	mov	r30, r25
 c0a:	2d df       	rcall	.-422    	; 0xa66 <__fp_split3>
 c0c:	80 f3       	brcs	.-32     	; 0xbee <__addsf3+0x8>
 c0e:	ba 17       	cp	r27, r26
 c10:	62 07       	cpc	r22, r18
 c12:	73 07       	cpc	r23, r19
 c14:	84 07       	cpc	r24, r20
 c16:	95 07       	cpc	r25, r21
 c18:	18 f0       	brcs	.+6      	; 0xc20 <__addsf3x+0x18>
 c1a:	71 f4       	brne	.+28     	; 0xc38 <__addsf3x+0x30>
 c1c:	9e f5       	brtc	.+102    	; 0xc84 <__addsf3x+0x7c>
 c1e:	45 cf       	rjmp	.-374    	; 0xaaa <__fp_zero>
 c20:	0e f4       	brtc	.+2      	; 0xc24 <__addsf3x+0x1c>
 c22:	e0 95       	com	r30
 c24:	0b 2e       	mov	r0, r27
 c26:	ba 2f       	mov	r27, r26
 c28:	a0 2d       	mov	r26, r0
 c2a:	0b 01       	movw	r0, r22
 c2c:	b9 01       	movw	r22, r18
 c2e:	90 01       	movw	r18, r0
 c30:	0c 01       	movw	r0, r24
 c32:	ca 01       	movw	r24, r20
 c34:	a0 01       	movw	r20, r0
 c36:	11 24       	eor	r1, r1
 c38:	ff 27       	eor	r31, r31
 c3a:	59 1b       	sub	r21, r25
 c3c:	99 f0       	breq	.+38     	; 0xc64 <__addsf3x+0x5c>
 c3e:	59 3f       	cpi	r21, 0xF9	; 249
 c40:	50 f4       	brcc	.+20     	; 0xc56 <__addsf3x+0x4e>
 c42:	50 3e       	cpi	r21, 0xE0	; 224
 c44:	68 f1       	brcs	.+90     	; 0xca0 <__addsf3x+0x98>
 c46:	1a 16       	cp	r1, r26
 c48:	f0 40       	sbci	r31, 0x00	; 0
 c4a:	a2 2f       	mov	r26, r18
 c4c:	23 2f       	mov	r18, r19
 c4e:	34 2f       	mov	r19, r20
 c50:	44 27       	eor	r20, r20
 c52:	58 5f       	subi	r21, 0xF8	; 248
 c54:	f3 cf       	rjmp	.-26     	; 0xc3c <__addsf3x+0x34>
 c56:	46 95       	lsr	r20
 c58:	37 95       	ror	r19
 c5a:	27 95       	ror	r18
 c5c:	a7 95       	ror	r26
 c5e:	f0 40       	sbci	r31, 0x00	; 0
 c60:	53 95       	inc	r21
 c62:	c9 f7       	brne	.-14     	; 0xc56 <__addsf3x+0x4e>
 c64:	7e f4       	brtc	.+30     	; 0xc84 <__addsf3x+0x7c>
 c66:	1f 16       	cp	r1, r31
 c68:	ba 0b       	sbc	r27, r26
 c6a:	62 0b       	sbc	r22, r18
 c6c:	73 0b       	sbc	r23, r19
 c6e:	84 0b       	sbc	r24, r20
 c70:	ba f0       	brmi	.+46     	; 0xca0 <__addsf3x+0x98>
 c72:	91 50       	subi	r25, 0x01	; 1
 c74:	a1 f0       	breq	.+40     	; 0xc9e <__addsf3x+0x96>
 c76:	ff 0f       	add	r31, r31
 c78:	bb 1f       	adc	r27, r27
 c7a:	66 1f       	adc	r22, r22
 c7c:	77 1f       	adc	r23, r23
 c7e:	88 1f       	adc	r24, r24
 c80:	c2 f7       	brpl	.-16     	; 0xc72 <__addsf3x+0x6a>
 c82:	0e c0       	rjmp	.+28     	; 0xca0 <__addsf3x+0x98>
 c84:	ba 0f       	add	r27, r26
 c86:	62 1f       	adc	r22, r18
 c88:	73 1f       	adc	r23, r19
 c8a:	84 1f       	adc	r24, r20
 c8c:	48 f4       	brcc	.+18     	; 0xca0 <__addsf3x+0x98>
 c8e:	87 95       	ror	r24
 c90:	77 95       	ror	r23
 c92:	67 95       	ror	r22
 c94:	b7 95       	ror	r27
 c96:	f7 95       	ror	r31
 c98:	9e 3f       	cpi	r25, 0xFE	; 254
 c9a:	08 f0       	brcs	.+2      	; 0xc9e <__addsf3x+0x96>
 c9c:	b3 cf       	rjmp	.-154    	; 0xc04 <__addsf3+0x1e>
 c9e:	93 95       	inc	r25
 ca0:	88 0f       	add	r24, r24
 ca2:	08 f0       	brcs	.+2      	; 0xca6 <__addsf3x+0x9e>
 ca4:	99 27       	eor	r25, r25
 ca6:	ee 0f       	add	r30, r30
 ca8:	97 95       	ror	r25
 caa:	87 95       	ror	r24
 cac:	08 95       	ret

00000cae <__fp_inf>:
 cae:	97 f9       	bld	r25, 7
 cb0:	9f 67       	ori	r25, 0x7F	; 127
 cb2:	80 e8       	ldi	r24, 0x80	; 128
 cb4:	70 e0       	ldi	r23, 0x00	; 0
 cb6:	60 e0       	ldi	r22, 0x00	; 0
 cb8:	08 95       	ret

00000cba <__fp_nan>:
 cba:	9f ef       	ldi	r25, 0xFF	; 255
 cbc:	80 ec       	ldi	r24, 0xC0	; 192
 cbe:	08 95       	ret

00000cc0 <__fp_pscA>:
 cc0:	00 24       	eor	r0, r0
 cc2:	0a 94       	dec	r0
 cc4:	16 16       	cp	r1, r22
 cc6:	17 06       	cpc	r1, r23
 cc8:	18 06       	cpc	r1, r24
 cca:	09 06       	cpc	r0, r25
 ccc:	08 95       	ret

00000cce <__fp_pscB>:
 cce:	00 24       	eor	r0, r0
 cd0:	0a 94       	dec	r0
 cd2:	12 16       	cp	r1, r18
 cd4:	13 06       	cpc	r1, r19
 cd6:	14 06       	cpc	r1, r20
 cd8:	05 06       	cpc	r0, r21
 cda:	08 95       	ret

00000cdc <__fp_round>:
 cdc:	09 2e       	mov	r0, r25
 cde:	03 94       	inc	r0
 ce0:	00 0c       	add	r0, r0
 ce2:	11 f4       	brne	.+4      	; 0xce8 <__fp_round+0xc>
 ce4:	88 23       	and	r24, r24
 ce6:	52 f0       	brmi	.+20     	; 0xcfc <__fp_round+0x20>
 ce8:	bb 0f       	add	r27, r27
 cea:	40 f4       	brcc	.+16     	; 0xcfc <__fp_round+0x20>
 cec:	bf 2b       	or	r27, r31
 cee:	11 f4       	brne	.+4      	; 0xcf4 <__fp_round+0x18>
 cf0:	60 ff       	sbrs	r22, 0
 cf2:	04 c0       	rjmp	.+8      	; 0xcfc <__fp_round+0x20>
 cf4:	6f 5f       	subi	r22, 0xFF	; 255
 cf6:	7f 4f       	sbci	r23, 0xFF	; 255
 cf8:	8f 4f       	sbci	r24, 0xFF	; 255
 cfa:	9f 4f       	sbci	r25, 0xFF	; 255
 cfc:	08 95       	ret

00000cfe <__mulsi3>:
 cfe:	62 9f       	mul	r22, r18
 d00:	d0 01       	movw	r26, r0
 d02:	73 9f       	mul	r23, r19
 d04:	f0 01       	movw	r30, r0
 d06:	82 9f       	mul	r24, r18
 d08:	e0 0d       	add	r30, r0
 d0a:	f1 1d       	adc	r31, r1
 d0c:	64 9f       	mul	r22, r20
 d0e:	e0 0d       	add	r30, r0
 d10:	f1 1d       	adc	r31, r1
 d12:	92 9f       	mul	r25, r18
 d14:	f0 0d       	add	r31, r0
 d16:	83 9f       	mul	r24, r19
 d18:	f0 0d       	add	r31, r0
 d1a:	74 9f       	mul	r23, r20
 d1c:	f0 0d       	add	r31, r0
 d1e:	65 9f       	mul	r22, r21
 d20:	f0 0d       	add	r31, r0
 d22:	99 27       	eor	r25, r25
 d24:	72 9f       	mul	r23, r18
 d26:	b0 0d       	add	r27, r0
 d28:	e1 1d       	adc	r30, r1
 d2a:	f9 1f       	adc	r31, r25
 d2c:	63 9f       	mul	r22, r19
 d2e:	b0 0d       	add	r27, r0
 d30:	e1 1d       	adc	r30, r1
 d32:	f9 1f       	adc	r31, r25
 d34:	bd 01       	movw	r22, r26
 d36:	cf 01       	movw	r24, r30
 d38:	11 24       	eor	r1, r1
 d3a:	08 95       	ret

00000d3c <__udivmodhi4>:
 d3c:	aa 1b       	sub	r26, r26
 d3e:	bb 1b       	sub	r27, r27
 d40:	51 e1       	ldi	r21, 0x11	; 17
 d42:	07 c0       	rjmp	.+14     	; 0xd52 <__udivmodhi4_ep>

00000d44 <__udivmodhi4_loop>:
 d44:	aa 1f       	adc	r26, r26
 d46:	bb 1f       	adc	r27, r27
 d48:	a6 17       	cp	r26, r22
 d4a:	b7 07       	cpc	r27, r23
 d4c:	10 f0       	brcs	.+4      	; 0xd52 <__udivmodhi4_ep>
 d4e:	a6 1b       	sub	r26, r22
 d50:	b7 0b       	sbc	r27, r23

00000d52 <__udivmodhi4_ep>:
 d52:	88 1f       	adc	r24, r24
 d54:	99 1f       	adc	r25, r25
 d56:	5a 95       	dec	r21
 d58:	a9 f7       	brne	.-22     	; 0xd44 <__udivmodhi4_loop>
 d5a:	80 95       	com	r24
 d5c:	90 95       	com	r25
 d5e:	bc 01       	movw	r22, r24
 d60:	cd 01       	movw	r24, r26
 d62:	08 95       	ret

00000d64 <__udivmodsi4>:
 d64:	a1 e2       	ldi	r26, 0x21	; 33
 d66:	1a 2e       	mov	r1, r26
 d68:	aa 1b       	sub	r26, r26
 d6a:	bb 1b       	sub	r27, r27
 d6c:	fd 01       	movw	r30, r26
 d6e:	0d c0       	rjmp	.+26     	; 0xd8a <__udivmodsi4_ep>

00000d70 <__udivmodsi4_loop>:
 d70:	aa 1f       	adc	r26, r26
 d72:	bb 1f       	adc	r27, r27
 d74:	ee 1f       	adc	r30, r30
 d76:	ff 1f       	adc	r31, r31
 d78:	a2 17       	cp	r26, r18
 d7a:	b3 07       	cpc	r27, r19
 d7c:	e4 07       	cpc	r30, r20
 d7e:	f5 07       	cpc	r31, r21
 d80:	20 f0       	brcs	.+8      	; 0xd8a <__udivmodsi4_ep>
 d82:	a2 1b       	sub	r26, r18
 d84:	b3 0b       	sbc	r27, r19
 d86:	e4 0b       	sbc	r30, r20
 d88:	f5 0b       	sbc	r31, r21

00000d8a <__udivmodsi4_ep>:
 d8a:	66 1f       	adc	r22, r22
 d8c:	77 1f       	adc	r23, r23
 d8e:	88 1f       	adc	r24, r24
 d90:	99 1f       	adc	r25, r25
 d92:	1a 94       	dec	r1
 d94:	69 f7       	brne	.-38     	; 0xd70 <__udivmodsi4_loop>
 d96:	60 95       	com	r22
 d98:	70 95       	com	r23
 d9a:	80 95       	com	r24
 d9c:	90 95       	com	r25
 d9e:	9b 01       	movw	r18, r22
 da0:	ac 01       	movw	r20, r24
 da2:	bd 01       	movw	r22, r26
 da4:	cf 01       	movw	r24, r30
 da6:	08 95       	ret

00000da8 <__divmodsi4>:
 da8:	97 fb       	bst	r25, 7
 daa:	09 2e       	mov	r0, r25
 dac:	05 26       	eor	r0, r21
 dae:	0e d0       	rcall	.+28     	; 0xdcc <__divmodsi4_neg1>
 db0:	57 fd       	sbrc	r21, 7
 db2:	04 d0       	rcall	.+8      	; 0xdbc <__divmodsi4_neg2>
 db4:	d7 df       	rcall	.-82     	; 0xd64 <__udivmodsi4>
 db6:	0a d0       	rcall	.+20     	; 0xdcc <__divmodsi4_neg1>
 db8:	00 1c       	adc	r0, r0
 dba:	38 f4       	brcc	.+14     	; 0xdca <__divmodsi4_exit>

00000dbc <__divmodsi4_neg2>:
 dbc:	50 95       	com	r21
 dbe:	40 95       	com	r20
 dc0:	30 95       	com	r19
 dc2:	21 95       	neg	r18
 dc4:	3f 4f       	sbci	r19, 0xFF	; 255
 dc6:	4f 4f       	sbci	r20, 0xFF	; 255
 dc8:	5f 4f       	sbci	r21, 0xFF	; 255

00000dca <__divmodsi4_exit>:
 dca:	08 95       	ret

00000dcc <__divmodsi4_neg1>:
 dcc:	f6 f7       	brtc	.-4      	; 0xdca <__divmodsi4_exit>
 dce:	90 95       	com	r25
 dd0:	80 95       	com	r24
 dd2:	70 95       	com	r23
 dd4:	61 95       	neg	r22
 dd6:	7f 4f       	sbci	r23, 0xFF	; 255
 dd8:	8f 4f       	sbci	r24, 0xFF	; 255
 dda:	9f 4f       	sbci	r25, 0xFF	; 255
 ddc:	08 95       	ret

00000dde <_exit>:
 dde:	f8 94       	cli

00000de0 <__stop_program>:
 de0:	ff cf       	rjmp	.-2      	; 0xde0 <__stop_program>
