
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800200  0000038a  000003fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080020a  00000394  00000408  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000012f  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000466  00000000  00000000  00000557  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001cb  00000000  00000000  000009bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000041b  00000000  00000000  00000b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00000fa4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000016a  00000000  00000000  00001094  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000130  00000000  00000000  000011fe  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	ea e8       	ldi	r30, 0x8A	; 138
  f8:	f3 e0       	ldi	r31, 0x03	; 3
  fa:	02 c0       	rjmp	.+4      	; 0x100 <.do_copy_data_start>

000000fc <.do_copy_data_loop>:
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0

00000100 <.do_copy_data_start>:
 100:	aa 30       	cpi	r26, 0x0A	; 10
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <.do_copy_data_loop>

00000106 <__do_clear_bss>:
 106:	12 e0       	ldi	r17, 0x02	; 2
 108:	aa e0       	ldi	r26, 0x0A	; 10
 10a:	b2 e0       	ldi	r27, 0x02	; 2
 10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
 10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
 110:	a2 31       	cpi	r26, 0x12	; 18
 112:	b1 07       	cpc	r27, r17
 114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
 116:	0e 94 81 01 	call	0x302	; 0x302 <main>
 11a:	0c 94 c3 01 	jmp	0x386	; 0x386 <_exit>

0000011e <__bad_interrupt>:
 11e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000122 <toggleE>:
	lcd_cmd(0x06);
	lcd_cmd(LINE1);	
}

void toggleE(void)
{
 122:	47 9a       	sbi	0x08, 7	; 8
CLEARBIT(PORTC,BIT(7));
}

void WaitMs(unsigned int ms)
{
	for(j=0;j<ms;j++)
 124:	88 ec       	ldi	r24, 0xC8	; 200
 126:	80 93 0a 02 	sts	0x020A, r24
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	80 93 0b 02 	sts	0x020B, r24

void toggleE(void)
{
SETBIT(PORTC,BIT(7));
WaitMs(1);
CLEARBIT(PORTC,BIT(7));
 130:	47 98       	cbi	0x08, 7	; 8
}
 132:	08 95       	ret

00000134 <WaitMs>:

void WaitMs(unsigned int ms)
{
 134:	ac 01       	movw	r20, r24
 136:	30 91 0a 02 	lds	r19, 0x020A
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <WaitMs+0xe>
	for(j=0;j<ms;j++)
 13e:	2f 5f       	subi	r18, 0xFF	; 255
 140:	38 ec       	ldi	r19, 0xC8	; 200
 142:	82 2f       	mov	r24, r18
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	84 17       	cp	r24, r20
 148:	95 07       	cpc	r25, r21
 14a:	c8 f3       	brcs	.-14     	; 0x13e <WaitMs+0xa>
 14c:	30 93 0a 02 	sts	0x020A, r19
 150:	20 93 0b 02 	sts	0x020B, r18
	{
		for(k=0;k<200;k++)
		{};
	}
}
 154:	08 95       	ret

00000156 <lcd_cmd>:

void lcd_cmd(unsigned char cmd)
{   
 156:	20 91 0a 02 	lds	r18, 0x020A
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <lcd_cmd+0xc>
 15e:	9f 5f       	subi	r25, 0xFF	; 255
 160:	28 ec       	ldi	r18, 0xC8	; 200
CLEARBIT(PORTC,BIT(7));
}

void WaitMs(unsigned int ms)
{
	for(j=0;j<ms;j++)
 162:	92 30       	cpi	r25, 0x02	; 2
 164:	e0 f3       	brcs	.-8      	; 0x15e <lcd_cmd+0x8>
 166:	20 93 0a 02 	sts	0x020A, r18
 16a:	90 93 0b 02 	sts	0x020B, r25
}

void lcd_cmd(unsigned char cmd)
{   
    WaitMs(2);
	CLEARBIT(PORTG,BIT(2));
 16e:	a2 98       	cbi	0x14, 2	; 20
	PORTK=cmd;			
 170:	80 93 08 01 	sts	0x0108, r24
	toggleE();
 174:	0e 94 91 00 	call	0x122	; 0x122 <toggleE>
}
 178:	08 95       	ret

0000017a <lcd_init>:
void lcd_gotoxy2(unsigned char pos);
void lcd_exit(void);
void WaitMs(unsigned int ms);

void lcd_init(void)	//init the lcd
{	
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	80 93 07 01 	sts	0x0107, r24
	DDRK=0xFF;
	DDRC=0xFF;
 180:	87 b9       	out	0x07, r24	; 7
	DDRG=0xFF;
 182:	83 bb       	out	0x13, r24	; 19
 184:	90 91 0a 02 	lds	r25, 0x020A
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <lcd_init+0x16>
 18c:	8f 5f       	subi	r24, 0xFF	; 255
 18e:	98 ec       	ldi	r25, 0xC8	; 200
CLEARBIT(PORTC,BIT(7));
}

void WaitMs(unsigned int ms)
{
	for(j=0;j<ms;j++)
 190:	8f 30       	cpi	r24, 0x0F	; 15
 192:	e0 f3       	brcs	.-8      	; 0x18c <lcd_init+0x12>
 194:	90 93 0a 02 	sts	0x020A, r25
 198:	80 93 0b 02 	sts	0x020B, r24
{	
	DDRK=0xFF;
	DDRC=0xFF;
	DDRG=0xFF;
	WaitMs(15);
	CLEARBIT(PORTG,BIT(2));
 19c:	a2 98       	cbi	0x14, 2	; 20
	lcd_cmd(0x38);
 19e:	88 e3       	ldi	r24, 0x38	; 56
 1a0:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_cmd>
	lcd_cmd(0x0E);
 1a4:	8e e0       	ldi	r24, 0x0E	; 14
 1a6:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_cmd>
	lcd_cmd(0x01);
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_cmd>
	lcd_cmd(0x06);
 1b0:	86 e0       	ldi	r24, 0x06	; 6
 1b2:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_cmd>
	lcd_cmd(LINE1);	
 1b6:	80 e8       	ldi	r24, 0x80	; 128
 1b8:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_cmd>
}
 1bc:	08 95       	ret

000001be <lcd_char>:
	PORTK=cmd;			
	toggleE();
}

void lcd_char(unsigned char single)
{
 1be:	98 ec       	ldi	r25, 0xC8	; 200
 1c0:	90 93 0a 02 	sts	0x020A, r25
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	90 93 0b 02 	sts	0x020B, r25
    WaitMs(1);
	SETBIT(PORTG,BIT(2));	
 1ca:	a2 9a       	sbi	0x14, 2	; 20
	PORTK=single;						
 1cc:	80 93 08 01 	sts	0x0108, r24
	toggleE();
 1d0:	0e 94 91 00 	call	0x122	; 0x122 <toggleE>
}
 1d4:	08 95       	ret

000001d6 <lcd_string>:

void lcd_string(unsigned char str[32])
{
 1d6:	ef 92       	push	r14
 1d8:	ff 92       	push	r15
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	7c 01       	movw	r14, r24
	unsigned char k=0;
	SETBIT(PORTG,BIT(2));
 1e2:	a2 9a       	sbi	0x14, 2	; 20
 1e4:	10 e0       	ldi	r17, 0x00	; 0
 1e6:	11 c0       	rjmp	.+34     	; 0x20a <lcd_string+0x34>
CLEARBIT(PORTC,BIT(7));
}

void WaitMs(unsigned int ms)
{
	for(j=0;j<ms;j++)
 1e8:	88 ec       	ldi	r24, 0xC8	; 200
 1ea:	80 93 0a 02 	sts	0x020A, r24
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	80 93 0b 02 	sts	0x020B, r24
	unsigned char k=0;
	SETBIT(PORTG,BIT(2));
	//CLEARBIT(PORTG,BIT(2));
	while(str[k]!='\0')	//Till null character is encountered
		{   WaitMs(1);
			if(k==16)
 1f4:	10 31       	cpi	r17, 0x10	; 16
 1f6:	19 f4       	brne	.+6      	; 0x1fe <lcd_string+0x28>
				lcd_cmd(LINE2);
 1f8:	80 ec       	ldi	r24, 0xC0	; 192
 1fa:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_cmd>
			PORTK=str[k];
 1fe:	88 81       	ld	r24, Y
 200:	80 93 08 01 	sts	0x0108, r24
			toggleE();
 204:	0e 94 91 00 	call	0x122	; 0x122 <toggleE>
			k++;
 208:	1f 5f       	subi	r17, 0xFF	; 255
void lcd_string(unsigned char str[32])
{
	unsigned char k=0;
	SETBIT(PORTG,BIT(2));
	//CLEARBIT(PORTG,BIT(2));
	while(str[k]!='\0')	//Till null character is encountered
 20a:	e7 01       	movw	r28, r14
 20c:	c1 0f       	add	r28, r17
 20e:	d1 1d       	adc	r29, r1
 210:	88 81       	ld	r24, Y
 212:	88 23       	and	r24, r24
 214:	49 f7       	brne	.-46     	; 0x1e8 <lcd_string+0x12>
				lcd_cmd(LINE2);
			PORTK=str[k];
			toggleE();
			k++;
		}
}
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	1f 91       	pop	r17
 21c:	ff 90       	pop	r15
 21e:	ef 90       	pop	r14
 220:	08 95       	ret

00000222 <lcd_showvalue>:


void lcd_showvalue(unsigned int num)	//prints the decimal 3digit value of num
{
 222:	ef 92       	push	r14
 224:	ff 92       	push	r15
 226:	0f 93       	push	r16
 228:	1f 93       	push	r17
 22a:	8c 01       	movw	r16, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
 22c:	64 e6       	ldi	r22, 0x64	; 100
 22e:	70 e0       	ldi	r23, 0x00	; 0
 230:	0e 94 af 01 	call	0x35e	; 0x35e <__udivmodhi4>
 234:	46 2f       	mov	r20, r22
	T=(num - (H*100))/10;
 236:	26 2f       	mov	r18, r22
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	8c e9       	ldi	r24, 0x9C	; 156
 23c:	9f ef       	ldi	r25, 0xFF	; 255
 23e:	28 9f       	mul	r18, r24
 240:	70 01       	movw	r14, r0
 242:	29 9f       	mul	r18, r25
 244:	f0 0c       	add	r15, r0
 246:	38 9f       	mul	r19, r24
 248:	f0 0c       	add	r15, r0
 24a:	11 24       	eor	r1, r1
 24c:	c7 01       	movw	r24, r14
 24e:	80 0f       	add	r24, r16
 250:	91 1f       	adc	r25, r17
 252:	6a e0       	ldi	r22, 0x0A	; 10
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	0e 94 af 01 	call	0x35e	; 0x35e <__udivmodhi4>
 25a:	16 2f       	mov	r17, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+48);
 25c:	84 2f       	mov	r24, r20
 25e:	80 5d       	subi	r24, 0xD0	; 208
 260:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_char>
	lcd_char(T+48);
 264:	81 2f       	mov	r24, r17
 266:	80 5d       	subi	r24, 0xD0	; 208
 268:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_char>
	lcd_char(O+48);
 26c:	00 5d       	subi	r16, 0xD0	; 208
 26e:	0e 0d       	add	r16, r14
 270:	86 ef       	ldi	r24, 0xF6	; 246
 272:	9f ef       	ldi	r25, 0xFF	; 255
 274:	18 9f       	mul	r17, r24
 276:	60 2d       	mov	r22, r0
 278:	11 24       	eor	r1, r1
 27a:	86 2f       	mov	r24, r22
 27c:	80 0f       	add	r24, r16
 27e:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_char>
}
 282:	1f 91       	pop	r17
 284:	0f 91       	pop	r16
 286:	ff 90       	pop	r15
 288:	ef 90       	pop	r14
 28a:	08 95       	ret

0000028c <lcd_gotoxy1>:

void lcd_gotoxy1(unsigned char pos)
{
 28c:	80 58       	subi	r24, 0x80	; 128
 28e:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_cmd>
	lcd_cmd(LINE1+pos);
}
 292:	08 95       	ret

00000294 <lcd_gotoxy2>:


void lcd_gotoxy2(unsigned char pos)
{
 294:	80 54       	subi	r24, 0x40	; 64
 296:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_cmd>
	lcd_cmd(LINE2+pos);
}
 29a:	08 95       	ret

0000029c <ports_init>:
#define TOGGLEBIT(x,b)  x^=b;


/************************************************/
void ports_init(void)
{
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	87 b9       	out	0x07, r24	; 7
DDRC=0XFF;
DDRB=0XFF;
 2a0:	84 b9       	out	0x04, r24	; 4
DDRD=0XFF;
 2a2:	8a b9       	out	0x0a, r24	; 10
DDRA=0XFF;
 2a4:	81 b9       	out	0x01, r24	; 1
DDRG=0XFF;
 2a6:	83 bb       	out	0x13, r24	; 19
DDRH=0XFF;
 2a8:	80 93 01 01 	sts	0x0101, r24
DDRK=0XFF;
 2ac:	80 93 07 01 	sts	0x0107, r24
}
 2b0:	08 95       	ret

000002b2 <recieve_data>:
#include "LCD.h"
#include "PORT.h"
//640

char recieve_data()
{
 2b2:	80 91 d0 00 	lds	r24, 0x00D0
 2b6:	87 ff       	sbrs	r24, 7
 2b8:	fc cf       	rjmp	.-8      	; 0x2b2 <recieve_data>
	while(!(UCSR2A & (1<<RXC2)))
	{}
	return UDR2;
 2ba:	80 91 d6 00 	lds	r24, 0x00D6
	CLEARBIT(UCSR2A,BIT(7));
	
}
 2be:	08 95       	ret

000002c0 <transmit_data>:

char transmit_data(char data1)
{
 2c0:	28 2f       	mov	r18, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2c2:	80 e3       	ldi	r24, 0x30	; 48
 2c4:	95 e7       	ldi	r25, 0x75	; 117
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <transmit_data+0x6>
	_delay_ms(15);
	while(!(UCSR2A & (1<<UDRE2)))
 2ca:	80 91 d0 00 	lds	r24, 0x00D0
 2ce:	85 ff       	sbrs	r24, 5
 2d0:	fc cf       	rjmp	.-8      	; 0x2ca <transmit_data+0xa>
	{}
	UDR2=data1;
 2d2:	20 93 d6 00 	sts	0x00D6, r18
}
 2d6:	08 95       	ret

000002d8 <usart_init>:

int usart_init(void)
{
 2d8:	8c e0       	ldi	r24, 0x0C	; 12
 2da:	80 93 d4 00 	sts	0x00D4, r24

UBRR2L=12;//SET BAUD RATE TO 9600 ASYNC
UBRR2H=0;
 2de:	10 92 d5 00 	sts	0x00D5, r1
SETBIT(UCSR2A,BIT(1));//DOUBLE ASYNC MODE ENABLED
 2e2:	e0 ed       	ldi	r30, 0xD0	; 208
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	82 60       	ori	r24, 0x02	; 2
 2ea:	80 83       	st	Z, r24
SETBIT(UCSR2B,BIT(4));
 2ec:	e1 ed       	ldi	r30, 0xD1	; 209
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	80 81       	ld	r24, Z
 2f2:	80 61       	ori	r24, 0x10	; 16
 2f4:	80 83       	st	Z, r24
UCSR2C=0X06;//PARITY DISABLED ASYNC 8 BIT
 2f6:	86 e0       	ldi	r24, 0x06	; 6
 2f8:	80 93 d2 00 	sts	0x00D2, r24
return 0;
}
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	08 95       	ret

00000302 <main>:

int main (void)
{
 302:	cf 93       	push	r28
 304:	df 93       	push	r29

char data[32],data1='B';
int i;

	DDRB=0XFF;	
 306:	9f ef       	ldi	r25, 0xFF	; 255
 308:	94 b9       	out	0x04, r25	; 4
	DDRC=0XFF;
 30a:	97 b9       	out	0x07, r25	; 7
	DDRG=0XFF;
 30c:	93 bb       	out	0x13, r25	; 19
	DDRH=0XFD;
 30e:	8d ef       	ldi	r24, 0xFD	; 253
 310:	80 93 01 01 	sts	0x0101, r24
	DDRK=0XFF;
 314:	90 93 07 01 	sts	0x0107, r25
	lcd_init();
 318:	0e 94 bd 00 	call	0x17a	; 0x17a <lcd_init>
}

int usart_init(void)
{

UBRR2L=12;//SET BAUD RATE TO 9600 ASYNC
 31c:	8c e0       	ldi	r24, 0x0C	; 12
 31e:	80 93 d4 00 	sts	0x00D4, r24
UBRR2H=0;
 322:	10 92 d5 00 	sts	0x00D5, r1
SETBIT(UCSR2A,BIT(1));//DOUBLE ASYNC MODE ENABLED
 326:	80 91 d0 00 	lds	r24, 0x00D0
 32a:	82 60       	ori	r24, 0x02	; 2
 32c:	80 93 d0 00 	sts	0x00D0, r24
SETBIT(UCSR2B,BIT(4));
 330:	80 91 d1 00 	lds	r24, 0x00D1
 334:	80 61       	ori	r24, 0x10	; 16
 336:	80 93 d1 00 	sts	0x00D1, r24
UCSR2C=0X06;//PARITY DISABLED ASYNC 8 BIT
 33a:	86 e0       	ldi	r24, 0x06	; 6
 33c:	80 93 d2 00 	sts	0x00D2, r24
 340:	c0 e0       	ldi	r28, 0x00	; 0
 342:	d0 e0       	ldi	r29, 0x00	; 0
#include "PORT.h"
//640

char recieve_data()
{
	while(!(UCSR2A & (1<<RXC2)))
 344:	80 91 d0 00 	lds	r24, 0x00D0
 348:	87 ff       	sbrs	r24, 7
 34a:	fc cf       	rjmp	.-8      	; 0x344 <main+0x42>
	{}
	return UDR2;
 34c:	80 91 d6 00 	lds	r24, 0x00D6
			//{
			for(i=0;i<32;i++)
			{
			data[i]=recieve_data();
			//lcd_gotoxy1(0);
			lcd_char(data[i]);
 350:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_char>
	usart_init();
	while(1)
	{
		//if(!(UCSR2A & (1<<RXC2)))
			//{
			for(i=0;i<32;i++)
 354:	21 96       	adiw	r28, 0x01	; 1
 356:	c0 32       	cpi	r28, 0x20	; 32
 358:	d1 05       	cpc	r29, r1
 35a:	94 f7       	brge	.-28     	; 0x340 <main+0x3e>
 35c:	f3 cf       	rjmp	.-26     	; 0x344 <main+0x42>

0000035e <__udivmodhi4>:
 35e:	aa 1b       	sub	r26, r26
 360:	bb 1b       	sub	r27, r27
 362:	51 e1       	ldi	r21, 0x11	; 17
 364:	07 c0       	rjmp	.+14     	; 0x374 <__udivmodhi4_ep>

00000366 <__udivmodhi4_loop>:
 366:	aa 1f       	adc	r26, r26
 368:	bb 1f       	adc	r27, r27
 36a:	a6 17       	cp	r26, r22
 36c:	b7 07       	cpc	r27, r23
 36e:	10 f0       	brcs	.+4      	; 0x374 <__udivmodhi4_ep>
 370:	a6 1b       	sub	r26, r22
 372:	b7 0b       	sbc	r27, r23

00000374 <__udivmodhi4_ep>:
 374:	88 1f       	adc	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	5a 95       	dec	r21
 37a:	a9 f7       	brne	.-22     	; 0x366 <__udivmodhi4_loop>
 37c:	80 95       	com	r24
 37e:	90 95       	com	r25
 380:	bc 01       	movw	r22, r24
 382:	cd 01       	movw	r24, r26
 384:	08 95       	ret

00000386 <_exit>:
 386:	f8 94       	cli

00000388 <__stop_program>:
 388:	ff cf       	rjmp	.-2      	; 0x388 <__stop_program>
