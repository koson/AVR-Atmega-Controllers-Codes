
DC Sensing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000b02  00000b96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006c  00800062  00800062  00000b98  2**0
                  ALLOC
  3 .stab         00002058  00000000  00000000  00000b98  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000084f  00000000  00000000  00002bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000343f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000060  00000000  00000000  0000346e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000b81  00000000  00000000  000034ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000028a  00000000  00000000  0000404f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000003bd  00000000  00000000  000042d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000e8  00000000  00000000  00004698  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001d7  00000000  00000000  00004780  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000003d8  00000000  00000000  00004957  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000040  00000000  00000000  00004d2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 4a 03 	jmp	0x694	; 0x694 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e0       	ldi	r30, 0x02	; 2
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3c       	cpi	r26, 0xCE	; 206
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f7 00 	call	0x1ee	; 0x1ee <main>
  8a:	0c 94 7f 05 	jmp	0xafe	; 0xafe <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <filter>:
uint16_t t=0;

char ch1[4],ch2[4],ch3[6],ch4[6],ch5[4],ch6[4],ch7[6],ch8[6],ch9[4],ch10[4],ch11[6],ch12[6],ch13[4],ch14[4],ch15[6],ch16[6];

uint16_t filter(uint16_t array[100])
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
	for(i=1;i<100;i++)
  96:	21 e0       	ldi	r18, 0x01	; 1
  98:	20 93 79 00 	sts	0x0079, r18
	{
		for(j=0;j<100-i;j++)
  9c:	c4 e6       	ldi	r28, 0x64	; 100
  9e:	d0 e0       	ldi	r29, 0x00	; 0
  a0:	10 92 78 00 	sts	0x0078, r1
  a4:	e0 91 79 00 	lds	r30, 0x0079
  a8:	9e 01       	movw	r18, r28
  aa:	2e 1b       	sub	r18, r30
  ac:	31 09       	sbc	r19, r1
  ae:	12 16       	cp	r1, r18
  b0:	13 06       	cpc	r1, r19
  b2:	dc f5       	brge	.+118    	; 0x12a <filter+0x98>
  b4:	20 e0       	ldi	r18, 0x00	; 0
		{
			if(array[j]>=array[j+1])
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	f9 01       	movw	r30, r18
  ba:	ee 0f       	add	r30, r30
  bc:	ff 1f       	adc	r31, r31
  be:	e8 0f       	add	r30, r24
  c0:	f9 1f       	adc	r31, r25
  c2:	40 81       	ld	r20, Z
  c4:	51 81       	ldd	r21, Z+1	; 0x01
  c6:	2f 5f       	subi	r18, 0xFF	; 255
  c8:	3f 4f       	sbci	r19, 0xFF	; 255
  ca:	d9 01       	movw	r26, r18
  cc:	aa 0f       	add	r26, r26
  ce:	bb 1f       	adc	r27, r27
  d0:	a8 0f       	add	r26, r24
  d2:	b9 1f       	adc	r27, r25
  d4:	2d 91       	ld	r18, X+
  d6:	3c 91       	ld	r19, X
  d8:	11 97       	sbiw	r26, 0x01	; 1
  da:	42 17       	cp	r20, r18
  dc:	53 07       	cpc	r21, r19
  de:	b0 f0       	brcs	.+44     	; 0x10c <filter+0x7a>
			{
				t=array[j];
  e0:	50 93 63 00 	sts	0x0063, r21
  e4:	40 93 62 00 	sts	0x0062, r20
				array[j]=array[j+1];
  e8:	2d 91       	ld	r18, X+
  ea:	3c 91       	ld	r19, X
  ec:	31 83       	std	Z+1, r19	; 0x01
  ee:	20 83       	st	Z, r18
				array[j+1]=t;
  f0:	20 91 62 00 	lds	r18, 0x0062
  f4:	30 91 63 00 	lds	r19, 0x0063
  f8:	e0 91 78 00 	lds	r30, 0x0078
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	31 96       	adiw	r30, 0x01	; 1
 100:	ee 0f       	add	r30, r30
 102:	ff 1f       	adc	r31, r31
 104:	e8 0f       	add	r30, r24
 106:	f9 1f       	adc	r31, r25
 108:	31 83       	std	Z+1, r19	; 0x01
 10a:	20 83       	st	Z, r18

uint16_t filter(uint16_t array[100])
{
	for(i=1;i<100;i++)
	{
		for(j=0;j<100-i;j++)
 10c:	20 91 78 00 	lds	r18, 0x0078
 110:	2f 5f       	subi	r18, 0xFF	; 255
 112:	20 93 78 00 	sts	0x0078, r18
 116:	e0 91 79 00 	lds	r30, 0x0079
 11a:	62 2f       	mov	r22, r18
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	ae 01       	movw	r20, r28
 120:	4e 1b       	sub	r20, r30
 122:	51 09       	sbc	r21, r1
 124:	64 17       	cp	r22, r20
 126:	75 07       	cpc	r23, r21
 128:	34 f2       	brlt	.-116    	; 0xb6 <filter+0x24>

char ch1[4],ch2[4],ch3[6],ch4[6],ch5[4],ch6[4],ch7[6],ch8[6],ch9[4],ch10[4],ch11[6],ch12[6],ch13[4],ch14[4],ch15[6],ch16[6];

uint16_t filter(uint16_t array[100])
{
	for(i=1;i<100;i++)
 12a:	ef 5f       	subi	r30, 0xFF	; 255
 12c:	e0 93 79 00 	sts	0x0079, r30
 130:	e4 36       	cpi	r30, 0x64	; 100
 132:	08 f4       	brcc	.+2      	; 0x136 <filter+0xa4>
 134:	b5 cf       	rjmp	.-150    	; 0xa0 <filter+0xe>
				array[j+1]=t;
			}
		}
	}
	
	uint16_t result = ceil(( array[45] + array[46] + array[47] + array[48] + array[49] + array[50] + array[51] + array[52] + array[53] + array[54] ) /10);
 136:	dc 01       	movw	r26, r24
 138:	a4 5a       	subi	r26, 0xA4	; 164
 13a:	bf 4f       	sbci	r27, 0xFF	; 255
 13c:	fc 01       	movw	r30, r24
 13e:	e6 5a       	subi	r30, 0xA6	; 166
 140:	ff 4f       	sbci	r31, 0xFF	; 255
 142:	4d 91       	ld	r20, X+
 144:	5c 91       	ld	r21, X
 146:	20 81       	ld	r18, Z
 148:	31 81       	ldd	r19, Z+1	; 0x01
 14a:	24 0f       	add	r18, r20
 14c:	35 1f       	adc	r19, r21
 14e:	fc 01       	movw	r30, r24
 150:	e2 5a       	subi	r30, 0xA2	; 162
 152:	ff 4f       	sbci	r31, 0xFF	; 255
 154:	40 81       	ld	r20, Z
 156:	51 81       	ldd	r21, Z+1	; 0x01
 158:	24 0f       	add	r18, r20
 15a:	35 1f       	adc	r19, r21
 15c:	fc 01       	movw	r30, r24
 15e:	e0 5a       	subi	r30, 0xA0	; 160
 160:	ff 4f       	sbci	r31, 0xFF	; 255
 162:	40 81       	ld	r20, Z
 164:	51 81       	ldd	r21, Z+1	; 0x01
 166:	24 0f       	add	r18, r20
 168:	35 1f       	adc	r19, r21
 16a:	fc 01       	movw	r30, r24
 16c:	ee 59       	subi	r30, 0x9E	; 158
 16e:	ff 4f       	sbci	r31, 0xFF	; 255
 170:	40 81       	ld	r20, Z
 172:	51 81       	ldd	r21, Z+1	; 0x01
 174:	24 0f       	add	r18, r20
 176:	35 1f       	adc	r19, r21
 178:	fc 01       	movw	r30, r24
 17a:	ec 59       	subi	r30, 0x9C	; 156
 17c:	ff 4f       	sbci	r31, 0xFF	; 255
 17e:	40 81       	ld	r20, Z
 180:	51 81       	ldd	r21, Z+1	; 0x01
 182:	24 0f       	add	r18, r20
 184:	35 1f       	adc	r19, r21
 186:	fc 01       	movw	r30, r24
 188:	ea 59       	subi	r30, 0x9A	; 154
 18a:	ff 4f       	sbci	r31, 0xFF	; 255
 18c:	40 81       	ld	r20, Z
 18e:	51 81       	ldd	r21, Z+1	; 0x01
 190:	24 0f       	add	r18, r20
 192:	35 1f       	adc	r19, r21
 194:	fc 01       	movw	r30, r24
 196:	e8 59       	subi	r30, 0x98	; 152
 198:	ff 4f       	sbci	r31, 0xFF	; 255
 19a:	40 81       	ld	r20, Z
 19c:	51 81       	ldd	r21, Z+1	; 0x01
 19e:	24 0f       	add	r18, r20
 1a0:	35 1f       	adc	r19, r21
 1a2:	fc 01       	movw	r30, r24
 1a4:	e6 59       	subi	r30, 0x96	; 150
 1a6:	ff 4f       	sbci	r31, 0xFF	; 255
 1a8:	40 81       	ld	r20, Z
 1aa:	51 81       	ldd	r21, Z+1	; 0x01
 1ac:	24 0f       	add	r18, r20
 1ae:	35 1f       	adc	r19, r21
 1b0:	fc 01       	movw	r30, r24
 1b2:	e4 59       	subi	r30, 0x94	; 148
 1b4:	ff 4f       	sbci	r31, 0xFF	; 255
 1b6:	80 81       	ld	r24, Z
 1b8:	91 81       	ldd	r25, Z+1	; 0x01
 1ba:	28 0f       	add	r18, r24
 1bc:	39 1f       	adc	r19, r25
 1be:	ad ec       	ldi	r26, 0xCD	; 205
 1c0:	bc ec       	ldi	r27, 0xCC	; 204
 1c2:	0e 94 73 05 	call	0xae6	; 0xae6 <__umulhisi3>
 1c6:	96 95       	lsr	r25
 1c8:	87 95       	ror	r24
 1ca:	96 95       	lsr	r25
 1cc:	87 95       	ror	r24
 1ce:	96 95       	lsr	r25
 1d0:	87 95       	ror	r24
 1d2:	bc 01       	movw	r22, r24
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 42 04 	call	0x884	; 0x884 <__floatunsisf>
 1dc:	0e 94 03 04 	call	0x806	; 0x806 <ceil>
 1e0:	0e 94 16 04 	call	0x82c	; 0x82c <__fixunssfsi>
	return result;
}
 1e4:	86 2f       	mov	r24, r22
 1e6:	97 2f       	mov	r25, r23
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <main>:

int main(void)
{
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	cd b7       	in	r28, 0x3d	; 61
 1f4:	de b7       	in	r29, 0x3e	; 62
 1f6:	c9 5c       	subi	r28, 0xC9	; 201
 1f8:	d1 09       	sbc	r29, r1
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	f8 94       	cli
 1fe:	de bf       	out	0x3e, r29	; 62
 200:	0f be       	out	0x3f, r0	; 63
 202:	cd bf       	out	0x3d, r28	; 61

	//Pre-scalar /8, Interrupt Disable, Auto Trigger off,
	ADCSRA = 0b10000111;
 204:	87 e8       	ldi	r24, 0x87	; 135
 206:	86 b9       	out	0x06, r24	; 6
	DDRD = 0b00000010;
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;
 20c:	12 ba       	out	0x12, r1	; 18
	
	DDRB  = 0x00;
 20e:	17 ba       	out	0x17, r1	; 23
	uint16_t v2=0,v4=0,v8=0,v3=0,v7=0;
	uint16_t b_i_u=0,b_v_u=0,s1=0,s2=0,s3=0,s_i_u=0,s_v_u=0,frq_u=0;
	float b_v=0.0,b_i=0.0,s_v=0.0,s_i=0.0,frq=0.0;
	uint16_t TH=0,TAB=0,RH=0,RAB=0;
	
	UART_init();
 210:	0e 94 90 03 	call	0x720	; 0x720 <UART_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 214:	2f ef       	ldi	r18, 0xFF	; 255
 216:	80 e7       	ldi	r24, 0x70	; 112
 218:	92 e0       	ldi	r25, 0x02	; 2
 21a:	21 50       	subi	r18, 0x01	; 1
 21c:	80 40       	sbci	r24, 0x00	; 0
 21e:	90 40       	sbci	r25, 0x00	; 0
 220:	e1 f7       	brne	.-8      	; 0x21a <main+0x2c>
 222:	00 c0       	rjmp	.+0      	; 0x224 <main+0x36>
 224:	00 00       	nop
		{
			_delay_ms(2);
			ADCSRA |= (1<<ADSC);
			while(!(ADCSRA & (1<<ADIF)));
			ADCSRA|=(1<<ADIF);
			filter_array[i] = ADC;
 226:	22 24       	eor	r2, r2
 228:	23 94       	inc	r2
 22a:	31 2c       	mov	r3, r1
 22c:	2c 0e       	add	r2, r28
 22e:	3d 1e       	adc	r3, r29
 230:	42 2c       	mov	r4, r2
 232:	73 2c       	mov	r7, r3

	_delay_ms(100);
	
	while (1)
	{
		cli();
 234:	f8 94       	cli
		//Battery Voltage
		ADMUX  = 0b01000001;
 236:	e1 e4       	ldi	r30, 0x41	; 65
 238:	e7 b9       	out	0x07, r30	; 7
		for (i=0;i<100;i++)
 23a:	10 92 79 00 	sts	0x0079, r1
 23e:	8f e9       	ldi	r24, 0x9F	; 159
 240:	9f e0       	ldi	r25, 0x0F	; 15
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <main+0x54>
 246:	00 c0       	rjmp	.+0      	; 0x248 <main+0x5a>
 248:	00 00       	nop
		{
			_delay_ms(2);
			ADCSRA |= (1<<ADSC);
 24a:	36 9a       	sbi	0x06, 6	; 6
			while(!(ADCSRA & (1<<ADIF)));
 24c:	34 9b       	sbis	0x06, 4	; 6
 24e:	fe cf       	rjmp	.-4      	; 0x24c <main+0x5e>
			ADCSRA|=(1<<ADIF);
 250:	34 9a       	sbi	0x06, 4	; 6
			filter_array[i] = ADC;
 252:	20 91 79 00 	lds	r18, 0x0079
 256:	84 b1       	in	r24, 0x04	; 4
 258:	95 b1       	in	r25, 0x05	; 5
 25a:	e2 2f       	mov	r30, r18
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	ee 0f       	add	r30, r30
 260:	ff 1f       	adc	r31, r31
 262:	e2 0d       	add	r30, r2
 264:	f3 1d       	adc	r31, r3
 266:	91 83       	std	Z+1, r25	; 0x01
 268:	80 83       	st	Z, r24
	while (1)
	{
		cli();
		//Battery Voltage
		ADMUX  = 0b01000001;
		for (i=0;i<100;i++)
 26a:	82 2f       	mov	r24, r18
 26c:	8f 5f       	subi	r24, 0xFF	; 255
 26e:	80 93 79 00 	sts	0x0079, r24
 272:	84 36       	cpi	r24, 0x64	; 100
 274:	20 f3       	brcs	.-56     	; 0x23e <main+0x50>
			ADCSRA |= (1<<ADSC);
			while(!(ADCSRA & (1<<ADIF)));
			ADCSRA|=(1<<ADIF);
			filter_array[i] = ADC;
		}
		v2 = filter(filter_array);
 276:	84 2d       	mov	r24, r4
 278:	97 2d       	mov	r25, r7
 27a:	0e 94 49 00 	call	0x92	; 0x92 <filter>
 27e:	4c 01       	movw	r8, r24
		
		//Solar String Current
		ADMUX  = 0b01000010;
 280:	92 e4       	ldi	r25, 0x42	; 66
 282:	97 b9       	out	0x07, r25	; 7
		for (i=0;i<100;i++)
 284:	10 92 79 00 	sts	0x0079, r1
 288:	ef ec       	ldi	r30, 0xCF	; 207
 28a:	f7 e0       	ldi	r31, 0x07	; 7
 28c:	31 97       	sbiw	r30, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <main+0x9e>
 290:	00 c0       	rjmp	.+0      	; 0x292 <main+0xa4>
 292:	00 00       	nop
		{
			_delay_ms(1);
			ADCSRA |= (1<<ADSC);
 294:	36 9a       	sbi	0x06, 6	; 6
			while(!(ADCSRA & (1<<ADIF)));
 296:	34 9b       	sbis	0x06, 4	; 6
 298:	fe cf       	rjmp	.-4      	; 0x296 <main+0xa8>
			ADCSRA|=(1<<ADIF);
 29a:	34 9a       	sbi	0x06, 4	; 6
			filter_array[i] = ADC;
 29c:	20 91 79 00 	lds	r18, 0x0079
 2a0:	84 b1       	in	r24, 0x04	; 4
 2a2:	95 b1       	in	r25, 0x05	; 5
 2a4:	e2 2f       	mov	r30, r18
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	ee 0f       	add	r30, r30
 2aa:	ff 1f       	adc	r31, r31
 2ac:	e2 0d       	add	r30, r2
 2ae:	f3 1d       	adc	r31, r3
 2b0:	91 83       	std	Z+1, r25	; 0x01
 2b2:	80 83       	st	Z, r24
		}
		v2 = filter(filter_array);
		
		//Solar String Current
		ADMUX  = 0b01000010;
		for (i=0;i<100;i++)
 2b4:	82 2f       	mov	r24, r18
 2b6:	8f 5f       	subi	r24, 0xFF	; 255
 2b8:	80 93 79 00 	sts	0x0079, r24
 2bc:	84 36       	cpi	r24, 0x64	; 100
 2be:	20 f3       	brcs	.-56     	; 0x288 <main+0x9a>
			ADCSRA |= (1<<ADSC);
			while(!(ADCSRA & (1<<ADIF)));
			ADCSRA|=(1<<ADIF);
			filter_array[i] = ADC;
		}
		v3 = filter(filter_array);
 2c0:	84 2d       	mov	r24, r4
 2c2:	97 2d       	mov	r25, r7
 2c4:	0e 94 49 00 	call	0x92	; 0x92 <filter>
 2c8:	5c 01       	movw	r10, r24
		
		//Battery Current
		ADMUX  = 0b01000011;
 2ca:	f3 e4       	ldi	r31, 0x43	; 67
 2cc:	f7 b9       	out	0x07, r31	; 7
		for (i=0;i<100;i++)
 2ce:	10 92 79 00 	sts	0x0079, r1
 2d2:	8f ec       	ldi	r24, 0xCF	; 207
 2d4:	97 e0       	ldi	r25, 0x07	; 7
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <main+0xe8>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <main+0xee>
 2dc:	00 00       	nop
		{
			_delay_ms(1);
			ADCSRA |= (1<<ADSC);
 2de:	36 9a       	sbi	0x06, 6	; 6
			while(!(ADCSRA & (1<<ADIF)));
 2e0:	34 9b       	sbis	0x06, 4	; 6
 2e2:	fe cf       	rjmp	.-4      	; 0x2e0 <main+0xf2>
			ADCSRA|=(1<<ADIF);
 2e4:	34 9a       	sbi	0x06, 4	; 6
			filter_array[i] = ADC;
 2e6:	20 91 79 00 	lds	r18, 0x0079
 2ea:	84 b1       	in	r24, 0x04	; 4
 2ec:	95 b1       	in	r25, 0x05	; 5
 2ee:	e2 2f       	mov	r30, r18
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	ee 0f       	add	r30, r30
 2f4:	ff 1f       	adc	r31, r31
 2f6:	e2 0d       	add	r30, r2
 2f8:	f3 1d       	adc	r31, r3
 2fa:	91 83       	std	Z+1, r25	; 0x01
 2fc:	80 83       	st	Z, r24
		}
		v3 = filter(filter_array);
		
		//Battery Current
		ADMUX  = 0b01000011;
		for (i=0;i<100;i++)
 2fe:	82 2f       	mov	r24, r18
 300:	8f 5f       	subi	r24, 0xFF	; 255
 302:	80 93 79 00 	sts	0x0079, r24
 306:	84 36       	cpi	r24, 0x64	; 100
 308:	20 f3       	brcs	.-56     	; 0x2d2 <main+0xe4>
			ADCSRA |= (1<<ADSC);
			while(!(ADCSRA & (1<<ADIF)));
			ADCSRA|=(1<<ADIF);
			filter_array[i] = ADC;
		}
		v4 = filter(filter_array);
 30a:	84 2d       	mov	r24, r4
 30c:	97 2d       	mov	r25, r7
 30e:	0e 94 49 00 	call	0x92	; 0x92 <filter>
 312:	7c 01       	movw	r14, r24
		
		// Frequency
		ADMUX  = 0b01000110;
 314:	96 e4       	ldi	r25, 0x46	; 70
 316:	97 b9       	out	0x07, r25	; 7
		for (i=0;i<100;i++)
 318:	10 92 79 00 	sts	0x0079, r1
 31c:	ef e9       	ldi	r30, 0x9F	; 159
 31e:	ff e0       	ldi	r31, 0x0F	; 15
 320:	31 97       	sbiw	r30, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <main+0x132>
 324:	00 c0       	rjmp	.+0      	; 0x326 <main+0x138>
 326:	00 00       	nop
		{
			_delay_ms(2);
			ADCSRA |= (1<<ADSC);
 328:	36 9a       	sbi	0x06, 6	; 6
			while(!(ADCSRA & (1<<ADIF)));
 32a:	34 9b       	sbis	0x06, 4	; 6
 32c:	fe cf       	rjmp	.-4      	; 0x32a <main+0x13c>
			ADCSRA|=(1<<ADIF);
 32e:	34 9a       	sbi	0x06, 4	; 6
			filter_array[i] = ADC;
 330:	20 91 79 00 	lds	r18, 0x0079
 334:	84 b1       	in	r24, 0x04	; 4
 336:	95 b1       	in	r25, 0x05	; 5
 338:	e2 2f       	mov	r30, r18
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	ee 0f       	add	r30, r30
 33e:	ff 1f       	adc	r31, r31
 340:	e2 0d       	add	r30, r2
 342:	f3 1d       	adc	r31, r3
 344:	91 83       	std	Z+1, r25	; 0x01
 346:	80 83       	st	Z, r24
		}
		v4 = filter(filter_array);
		
		// Frequency
		ADMUX  = 0b01000110;
		for (i=0;i<100;i++)
 348:	82 2f       	mov	r24, r18
 34a:	8f 5f       	subi	r24, 0xFF	; 255
 34c:	80 93 79 00 	sts	0x0079, r24
 350:	84 36       	cpi	r24, 0x64	; 100
 352:	20 f3       	brcs	.-56     	; 0x31c <main+0x12e>
			ADCSRA |= (1<<ADSC);
			while(!(ADCSRA & (1<<ADIF)));
			ADCSRA|=(1<<ADIF);
			filter_array[i] = ADC;
		}
		v7 = filter(filter_array);
 354:	84 2d       	mov	r24, r4
 356:	97 2d       	mov	r25, r7
 358:	0e 94 49 00 	call	0x92	; 0x92 <filter>
 35c:	6c 01       	movw	r12, r24
		
		// Solar Voltage
		ADMUX  = 0b01000111;
 35e:	f7 e4       	ldi	r31, 0x47	; 71
 360:	f7 b9       	out	0x07, r31	; 7
		for (i=0;i<100;i++)
 362:	10 92 79 00 	sts	0x0079, r1
 366:	8f e9       	ldi	r24, 0x9F	; 159
 368:	9f e0       	ldi	r25, 0x0F	; 15
 36a:	01 97       	sbiw	r24, 0x01	; 1
 36c:	f1 f7       	brne	.-4      	; 0x36a <main+0x17c>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <main+0x182>
 370:	00 00       	nop
		{
			_delay_ms(2);
			ADCSRA |= (1<<ADSC);
 372:	36 9a       	sbi	0x06, 6	; 6
			while(!(ADCSRA & (1<<ADIF)));
 374:	34 9b       	sbis	0x06, 4	; 6
 376:	fe cf       	rjmp	.-4      	; 0x374 <main+0x186>
			ADCSRA|=(1<<ADIF);
 378:	34 9a       	sbi	0x06, 4	; 6
			filter_array[i] = ADC;
 37a:	20 91 79 00 	lds	r18, 0x0079
 37e:	84 b1       	in	r24, 0x04	; 4
 380:	95 b1       	in	r25, 0x05	; 5
 382:	e2 2f       	mov	r30, r18
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	ee 0f       	add	r30, r30
 388:	ff 1f       	adc	r31, r31
 38a:	e2 0d       	add	r30, r2
 38c:	f3 1d       	adc	r31, r3
 38e:	91 83       	std	Z+1, r25	; 0x01
 390:	80 83       	st	Z, r24
		}
		v7 = filter(filter_array);
		
		// Solar Voltage
		ADMUX  = 0b01000111;
		for (i=0;i<100;i++)
 392:	82 2f       	mov	r24, r18
 394:	8f 5f       	subi	r24, 0xFF	; 255
 396:	80 93 79 00 	sts	0x0079, r24
 39a:	84 36       	cpi	r24, 0x64	; 100
 39c:	20 f3       	brcs	.-56     	; 0x366 <main+0x178>
			ADCSRA |= (1<<ADSC);
			while(!(ADCSRA & (1<<ADIF)));
			ADCSRA|=(1<<ADIF);
			filter_array[i] = ADC;
		}
		v8 = filter(filter_array);
 39e:	84 2d       	mov	r24, r4
 3a0:	97 2d       	mov	r25, r7
 3a2:	0e 94 49 00 	call	0x92	; 0x92 <filter>
 3a6:	8c 01       	movw	r16, r24
		
		if (PINB & (1<<PINB0)){s1 = 10;} else{s1 = 0;}
 3a8:	b0 9b       	sbis	0x16, 0	; 22
 3aa:	05 c0       	rjmp	.+10     	; 0x3b6 <main+0x1c8>
 3ac:	0f 2e       	mov	r0, r31
 3ae:	fa e0       	ldi	r31, 0x0A	; 10
 3b0:	6f 2e       	mov	r6, r31
 3b2:	f0 2d       	mov	r31, r0
 3b4:	01 c0       	rjmp	.+2      	; 0x3b8 <main+0x1ca>
 3b6:	61 2c       	mov	r6, r1
		if (PINB & (1<<PINB1)){s2 = 10;} else{s2 = 0;}
 3b8:	b1 9b       	sbis	0x16, 1	; 22
 3ba:	05 c0       	rjmp	.+10     	; 0x3c6 <main+0x1d8>
 3bc:	0f 2e       	mov	r0, r31
 3be:	fa e0       	ldi	r31, 0x0A	; 10
 3c0:	5f 2e       	mov	r5, r31
 3c2:	f0 2d       	mov	r31, r0
 3c4:	01 c0       	rjmp	.+2      	; 0x3c8 <main+0x1da>
 3c6:	51 2c       	mov	r5, r1
		if (PINB & (1<<PINB2)){s3 = 10;} else{s3 = 0;}
 3c8:	b2 9b       	sbis	0x16, 2	; 22
 3ca:	07 c0       	rjmp	.+14     	; 0x3da <main+0x1ec>
 3cc:	9a e0       	ldi	r25, 0x0A	; 10
 3ce:	c7 53       	subi	r28, 0x37	; 55
 3d0:	df 4f       	sbci	r29, 0xFF	; 255
 3d2:	98 83       	st	Y, r25
 3d4:	c9 5c       	subi	r28, 0xC9	; 201
 3d6:	d0 40       	sbci	r29, 0x00	; 0
 3d8:	05 c0       	rjmp	.+10     	; 0x3e4 <main+0x1f6>
 3da:	c7 53       	subi	r28, 0x37	; 55
 3dc:	df 4f       	sbci	r29, 0xFF	; 255
 3de:	18 82       	st	Y, r1
 3e0:	c9 5c       	subi	r28, 0xC9	; 201
 3e2:	d0 40       	sbci	r29, 0x00	; 0
		
		s_v = ((float)v8*0.9)-80.05;
		b_v = (float)v2*0.0293;
	    frq = ((float)v7*0.085)+2.0;
	
		b_i = ((float)v4*0.185)-92.35;
 3e4:	b7 01       	movw	r22, r14
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 42 04 	call	0x884	; 0x884 <__floatunsisf>
 3ee:	24 ea       	ldi	r18, 0xA4	; 164
 3f0:	30 e7       	ldi	r19, 0x70	; 112
 3f2:	4d e3       	ldi	r20, 0x3D	; 61
 3f4:	5e e3       	ldi	r21, 0x3E	; 62
 3f6:	0e 94 10 05 	call	0xa20	; 0xa20 <__mulsf3>
 3fa:	23 e3       	ldi	r18, 0x33	; 51
 3fc:	33 eb       	ldi	r19, 0xB3	; 179
 3fe:	48 eb       	ldi	r20, 0xB8	; 184
 400:	52 e4       	ldi	r21, 0x42	; 66
 402:	0e 94 9e 03 	call	0x73c	; 0x73c <__subsf3>
		s_i= ((float)v3*0.185)-92.35;
		b_i_u = (uint16_t)ceil(b_i*10)+100;
 406:	20 e0       	ldi	r18, 0x00	; 0
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	40 e2       	ldi	r20, 0x20	; 32
 40c:	51 e4       	ldi	r21, 0x41	; 65
 40e:	0e 94 10 05 	call	0xa20	; 0xa20 <__mulsf3>
 412:	0e 94 03 04 	call	0x806	; 0x806 <ceil>
 416:	0e 94 16 04 	call	0x82c	; 0x82c <__fixunssfsi>
 41a:	7b 01       	movw	r14, r22
 41c:	e4 e6       	ldi	r30, 0x64	; 100
 41e:	ee 0e       	add	r14, r30
 420:	f1 1c       	adc	r15, r1
		if (PINB & (1<<PINB0)){s1 = 10;} else{s1 = 0;}
		if (PINB & (1<<PINB1)){s2 = 10;} else{s2 = 0;}
		if (PINB & (1<<PINB2)){s3 = 10;} else{s3 = 0;}
		
		s_v = ((float)v8*0.9)-80.05;
		b_v = (float)v2*0.0293;
 422:	b4 01       	movw	r22, r8
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	0e 94 42 04 	call	0x884	; 0x884 <__floatunsisf>
 42c:	2e e8       	ldi	r18, 0x8E	; 142
 42e:	36 e0       	ldi	r19, 0x06	; 6
 430:	40 ef       	ldi	r20, 0xF0	; 240
 432:	5c e3       	ldi	r21, 0x3C	; 60
 434:	0e 94 10 05 	call	0xa20	; 0xa20 <__mulsf3>
	    frq = ((float)v7*0.085)+2.0;
	
		b_i = ((float)v4*0.185)-92.35;
		s_i= ((float)v3*0.185)-92.35;
		b_i_u = (uint16_t)ceil(b_i*10)+100;
		b_v_u = (uint16_t)ceil(b_v*10);
 438:	20 e0       	ldi	r18, 0x00	; 0
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	40 e2       	ldi	r20, 0x20	; 32
 43e:	51 e4       	ldi	r21, 0x41	; 65
 440:	0e 94 10 05 	call	0xa20	; 0xa20 <__mulsf3>
 444:	0e 94 03 04 	call	0x806	; 0x806 <ceil>
 448:	0e 94 16 04 	call	0x82c	; 0x82c <__fixunssfsi>
 44c:	86 2e       	mov	r8, r22
 44e:	97 2e       	mov	r9, r23
		s_v = ((float)v8*0.9)-80.05;
		b_v = (float)v2*0.0293;
	    frq = ((float)v7*0.085)+2.0;
	
		b_i = ((float)v4*0.185)-92.35;
		s_i= ((float)v3*0.185)-92.35;
 450:	b5 01       	movw	r22, r10
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	0e 94 42 04 	call	0x884	; 0x884 <__floatunsisf>
 45a:	24 ea       	ldi	r18, 0xA4	; 164
 45c:	30 e7       	ldi	r19, 0x70	; 112
 45e:	4d e3       	ldi	r20, 0x3D	; 61
 460:	5e e3       	ldi	r21, 0x3E	; 62
 462:	0e 94 10 05 	call	0xa20	; 0xa20 <__mulsf3>
 466:	23 e3       	ldi	r18, 0x33	; 51
 468:	33 eb       	ldi	r19, 0xB3	; 179
 46a:	48 eb       	ldi	r20, 0xB8	; 184
 46c:	52 e4       	ldi	r21, 0x42	; 66
 46e:	0e 94 9e 03 	call	0x73c	; 0x73c <__subsf3>
		b_i_u = (uint16_t)ceil(b_i*10)+100;
		b_v_u = (uint16_t)ceil(b_v*10);
		s_i_u= (uint16_t)ceil(s_i*10)+100;
 472:	20 e0       	ldi	r18, 0x00	; 0
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	40 e2       	ldi	r20, 0x20	; 32
 478:	51 e4       	ldi	r21, 0x41	; 65
 47a:	0e 94 10 05 	call	0xa20	; 0xa20 <__mulsf3>
 47e:	0e 94 03 04 	call	0x806	; 0x806 <ceil>
 482:	0e 94 16 04 	call	0x82c	; 0x82c <__fixunssfsi>
 486:	5b 01       	movw	r10, r22
 488:	f4 e6       	ldi	r31, 0x64	; 100
 48a:	af 0e       	add	r10, r31
 48c:	b1 1c       	adc	r11, r1
		
		if (PINB & (1<<PINB0)){s1 = 10;} else{s1 = 0;}
		if (PINB & (1<<PINB1)){s2 = 10;} else{s2 = 0;}
		if (PINB & (1<<PINB2)){s3 = 10;} else{s3 = 0;}
		
		s_v = ((float)v8*0.9)-80.05;
 48e:	b8 01       	movw	r22, r16
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	0e 94 42 04 	call	0x884	; 0x884 <__floatunsisf>
 498:	26 e6       	ldi	r18, 0x66	; 102
 49a:	36 e6       	ldi	r19, 0x66	; 102
 49c:	46 e6       	ldi	r20, 0x66	; 102
 49e:	5f e3       	ldi	r21, 0x3F	; 63
 4a0:	0e 94 10 05 	call	0xa20	; 0xa20 <__mulsf3>
 4a4:	2a e9       	ldi	r18, 0x9A	; 154
 4a6:	39 e1       	ldi	r19, 0x19	; 25
 4a8:	40 ea       	ldi	r20, 0xA0	; 160
 4aa:	52 e4       	ldi	r21, 0x42	; 66
 4ac:	0e 94 9e 03 	call	0x73c	; 0x73c <__subsf3>
		b_i = ((float)v4*0.185)-92.35;
		s_i= ((float)v3*0.185)-92.35;
		b_i_u = (uint16_t)ceil(b_i*10)+100;
		b_v_u = (uint16_t)ceil(b_v*10);
		s_i_u= (uint16_t)ceil(s_i*10)+100;
		s_v_u= (uint16_t)ceil(s_v*10); 
 4b0:	20 e0       	ldi	r18, 0x00	; 0
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	40 e2       	ldi	r20, 0x20	; 32
 4b6:	51 e4       	ldi	r21, 0x41	; 65
 4b8:	0e 94 10 05 	call	0xa20	; 0xa20 <__mulsf3>
 4bc:	0e 94 03 04 	call	0x806	; 0x806 <ceil>
 4c0:	0e 94 16 04 	call	0x82c	; 0x82c <__fixunssfsi>
 4c4:	06 2f       	mov	r16, r22
 4c6:	17 2f       	mov	r17, r23
		if (PINB & (1<<PINB1)){s2 = 10;} else{s2 = 0;}
		if (PINB & (1<<PINB2)){s3 = 10;} else{s3 = 0;}
		
		s_v = ((float)v8*0.9)-80.05;
		b_v = (float)v2*0.0293;
	    frq = ((float)v7*0.085)+2.0;
 4c8:	b6 01       	movw	r22, r12
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	0e 94 42 04 	call	0x884	; 0x884 <__floatunsisf>
 4d2:	2b e7       	ldi	r18, 0x7B	; 123
 4d4:	34 e1       	ldi	r19, 0x14	; 20
 4d6:	4e ea       	ldi	r20, 0xAE	; 174
 4d8:	5d e3       	ldi	r21, 0x3D	; 61
 4da:	0e 94 10 05 	call	0xa20	; 0xa20 <__mulsf3>
 4de:	20 e0       	ldi	r18, 0x00	; 0
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	40 e0       	ldi	r20, 0x00	; 0
 4e4:	50 e4       	ldi	r21, 0x40	; 64
 4e6:	0e 94 9f 03 	call	0x73e	; 0x73e <__addsf3>
		s_i= ((float)v3*0.185)-92.35;
		b_i_u = (uint16_t)ceil(b_i*10)+100;
		b_v_u = (uint16_t)ceil(b_v*10);
		s_i_u= (uint16_t)ceil(s_i*10)+100;
		s_v_u= (uint16_t)ceil(s_v*10); 
		frq_u= (uint16_t)ceil(frq*10);
 4ea:	20 e0       	ldi	r18, 0x00	; 0
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	40 e2       	ldi	r20, 0x20	; 32
 4f0:	51 e4       	ldi	r21, 0x41	; 65
 4f2:	0e 94 10 05 	call	0xa20	; 0xa20 <__mulsf3>
 4f6:	0e 94 03 04 	call	0x806	; 0x806 <ceil>
 4fa:	0e 94 16 04 	call	0x82c	; 0x82c <__fixunssfsi>
 4fe:	c6 2e       	mov	r12, r22
 500:	d7 2e       	mov	r13, r23
		TAB=256*refdata[6]+refdata[5];
		RH =256*refdata[4]+refdata[3];
		RAB=256*refdata[8]+refdata[7];
		*/
		
		UART_putc(0x01);		// 0x0001
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(0x00);	
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(s_v_u);		// Solar Voltage
 50e:	80 2f       	mov	r24, r16
 510:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(s_v_u>>8);
 514:	81 2f       	mov	r24, r17
 516:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(b_v_u);		// Battery Voltage
 51a:	88 2d       	mov	r24, r8
 51c:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(b_v_u>>8);
 520:	89 2d       	mov	r24, r9
 522:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(b_i_u);		// Load Current
 526:	8e 2d       	mov	r24, r14
 528:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(b_i_u>>8);
 52c:	8f 2d       	mov	r24, r15
 52e:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(s_i_u);		// Solar Current
 532:	8a 2d       	mov	r24, r10
 534:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(s_i_u>>8);		
 538:	8b 2d       	mov	r24, r11
 53a:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(frq_u);		// 0xFFFF
 53e:	8c 2d       	mov	r24, r12
 540:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(frq_u>>8);
 544:	8d 2d       	mov	r24, r13
 546:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		//UART_putc(0xFF);		// 0xFFFF
		//UART_putc(0xFF);
		UART_putc(0xFF);		// 0xFFFF
 54a:	8f ef       	ldi	r24, 0xFF	; 255
 54c:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(0xFF);
 550:	8f ef       	ldi	r24, 0xFF	; 255
 552:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(0xFF);		// 0xFFFF
 556:	8f ef       	ldi	r24, 0xFF	; 255
 558:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(0xFF);
 55c:	8f ef       	ldi	r24, 0xFF	; 255
 55e:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
 562:	2f ef       	ldi	r18, 0xFF	; 255
 564:	84 e3       	ldi	r24, 0x34	; 52
 566:	9c e0       	ldi	r25, 0x0C	; 12
 568:	21 50       	subi	r18, 0x01	; 1
 56a:	80 40       	sbci	r24, 0x00	; 0
 56c:	90 40       	sbci	r25, 0x00	; 0
 56e:	e1 f7       	brne	.-8      	; 0x568 <__stack+0x109>
 570:	00 c0       	rjmp	.+0      	; 0x572 <__stack+0x113>
 572:	00 00       	nop
		
		_delay_ms(500);
		
		UART_putc(0x02);		// 0x0002
 574:	82 e0       	ldi	r24, 0x02	; 2
 576:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(0x00);
 57a:	80 e0       	ldi	r24, 0x00	; 0
 57c:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(s1);			// HPS
 580:	86 2d       	mov	r24, r6
 582:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(s1>>8);
 586:	80 e0       	ldi	r24, 0x00	; 0
 588:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(s2);			// LPS
 58c:	85 2d       	mov	r24, r5
 58e:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(s2>>8);
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(s3);			// INT69
 598:	c7 53       	subi	r28, 0x37	; 55
 59a:	df 4f       	sbci	r29, 0xFF	; 255
 59c:	88 81       	ld	r24, Y
 59e:	c9 5c       	subi	r28, 0xC9	; 201
 5a0:	d0 40       	sbci	r29, 0x00	; 0
 5a2:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(s3>>8);
 5a6:	80 e0       	ldi	r24, 0x00	; 0
 5a8:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(refdata[14]);	// Grid
 5ac:	e3 e7       	ldi	r30, 0x73	; 115
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	80 81       	ld	r24, Z
 5b2:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(refdata[15]);
 5b6:	e4 e7       	ldi	r30, 0x74	; 116
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	80 81       	ld	r24, Z
 5bc:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(refdata[12]);	// Door
 5c0:	e1 e7       	ldi	r30, 0x71	; 113
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	80 81       	ld	r24, Z
 5c6:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(refdata[13]);
 5ca:	e2 e7       	ldi	r30, 0x72	; 114
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	80 81       	ld	r24, Z
 5d0:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(refdata[16]);	// Water Level
 5d4:	80 91 75 00 	lds	r24, 0x0075
 5d8:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(refdata[17]);	
 5dc:	80 91 76 00 	lds	r24, 0x0076
 5e0:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(0xFF);		// 0xFFFF
 5e4:	8f ef       	ldi	r24, 0xFF	; 255
 5e6:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(0xFF);
 5ea:	8f ef       	ldi	r24, 0xFF	; 255
 5ec:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
 5f0:	ff ef       	ldi	r31, 0xFF	; 255
 5f2:	24 e3       	ldi	r18, 0x34	; 52
 5f4:	8c e0       	ldi	r24, 0x0C	; 12
 5f6:	f1 50       	subi	r31, 0x01	; 1
 5f8:	20 40       	sbci	r18, 0x00	; 0
 5fa:	80 40       	sbci	r24, 0x00	; 0
 5fc:	e1 f7       	brne	.-8      	; 0x5f6 <__stack+0x197>
 5fe:	00 c0       	rjmp	.+0      	; 0x600 <__stack+0x1a1>
 600:	00 00       	nop
		
		_delay_ms(500);
		
		UART_putc(0x03);		// 0x0003
 602:	83 e0       	ldi	r24, 0x03	; 3
 604:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(0x00);
 608:	80 e0       	ldi	r24, 0x00	; 0
 60a:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(refdata[1]);	// TH1
 60e:	80 91 66 00 	lds	r24, 0x0066
 612:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(refdata[2]);	
 616:	80 91 67 00 	lds	r24, 0x0067
 61a:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(refdata[5]);	// TA
 61e:	80 91 6a 00 	lds	r24, 0x006A
 622:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(refdata[6]);
 626:	80 91 6b 00 	lds	r24, 0x006B
 62a:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(refdata[9]);	// TES1
 62e:	80 91 6e 00 	lds	r24, 0x006E
 632:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(refdata[10]);
 636:	80 91 6f 00 	lds	r24, 0x006F
 63a:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(refdata[11]);	// TES2
 63e:	80 91 70 00 	lds	r24, 0x0070
 642:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(refdata[12]);
 646:	e1 e7       	ldi	r30, 0x71	; 113
 648:	f0 e0       	ldi	r31, 0x00	; 0
 64a:	80 81       	ld	r24, Z
 64c:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(refdata[3]);	// RH1
 650:	80 91 68 00 	lds	r24, 0x0068
 654:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(refdata[4]);
 658:	80 91 69 00 	lds	r24, 0x0069
 65c:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(refdata[7]);	// RA
 660:	80 91 6c 00 	lds	r24, 0x006C
 664:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(refdata[8]);
 668:	80 91 6d 00 	lds	r24, 0x006D
 66c:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(0xFF);		// 0xFFFF
 670:	8f ef       	ldi	r24, 0xFF	; 255
 672:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_putc(0xFF);
 676:	8f ef       	ldi	r24, 0xFF	; 255
 678:	0e 94 9a 03 	call	0x734	; 0x734 <UART_putc>
		UART_puts("Room Temperature		:");UART_puts(ch11);UART_puts("\r\n");
		UART_puts("Ambient Temperature	:");UART_puts(ch12);UART_puts("\r\n");
		UART_puts("Room Humidity		:");UART_puts(ch13);UART_puts("\r\n");
		UART_puts("Ambient Humidity     :");UART_puts(ch14);UART_puts("\r\n");
		*/
		sei();
 67c:	78 94       	sei
 67e:	ff ef       	ldi	r31, 0xFF	; 255
 680:	2d e3       	ldi	r18, 0x3D	; 61
 682:	89 e4       	ldi	r24, 0x49	; 73
 684:	f1 50       	subi	r31, 0x01	; 1
 686:	20 40       	sbci	r18, 0x00	; 0
 688:	80 40       	sbci	r24, 0x00	; 0
 68a:	e1 f7       	brne	.-8      	; 0x684 <__stack+0x225>
 68c:	00 c0       	rjmp	.+0      	; 0x68e <__stack+0x22f>
 68e:	00 00       	nop
		_delay_ms(3000);
		cli();
 690:	f8 94       	cli
	}
 692:	d0 cd       	rjmp	.-1120   	; 0x234 <main+0x46>

00000694 <__vector_11>:
	return(0);
}

ISR(USART_RXC_vect)
{
 694:	1f 92       	push	r1
 696:	0f 92       	push	r0
 698:	0f b6       	in	r0, 0x3f	; 63
 69a:	0f 92       	push	r0
 69c:	11 24       	eor	r1, r1
 69e:	2f 93       	push	r18
 6a0:	3f 93       	push	r19
 6a2:	8f 93       	push	r24
 6a4:	9f 93       	push	r25
 6a6:	af 93       	push	r26
 6a8:	bf 93       	push	r27
 6aa:	ef 93       	push	r30
 6ac:	ff 93       	push	r31
	
		data= UDR;
 6ae:	8c b1       	in	r24, 0x0c	; 12
 6b0:	80 93 af 00 	sts	0x00AF, r24
		header[0]=header[1];
 6b4:	ab e7       	ldi	r26, 0x7B	; 123
 6b6:	b0 e0       	ldi	r27, 0x00	; 0
 6b8:	9c 91       	ld	r25, X
 6ba:	90 93 7a 00 	sts	0x007A, r25
		header[1]=header[2];
 6be:	ec e7       	ldi	r30, 0x7C	; 124
 6c0:	f0 e0       	ldi	r31, 0x00	; 0
 6c2:	20 81       	ld	r18, Z
 6c4:	2c 93       	st	X, r18
		header[2]=data;
 6c6:	80 83       	st	Z, r24
		
		if (takedata==1)
 6c8:	30 91 64 00 	lds	r19, 0x0064
 6cc:	31 30       	cpi	r19, 0x01	; 1
 6ce:	51 f4       	brne	.+20     	; 0x6e4 <__vector_11+0x50>
		{
			refdata[refcounter]=data;
 6d0:	30 91 60 00 	lds	r19, 0x0060
 6d4:	e3 2f       	mov	r30, r19
 6d6:	f0 e0       	ldi	r31, 0x00	; 0
 6d8:	eb 59       	subi	r30, 0x9B	; 155
 6da:	ff 4f       	sbci	r31, 0xFF	; 255
 6dc:	80 83       	st	Z, r24
			refcounter++;
 6de:	3f 5f       	subi	r19, 0xFF	; 255
 6e0:	30 93 60 00 	sts	0x0060, r19
		}
		
		if ((header[0]==0xFF)&&(header[1]==0xFE)&&(header[2]==0xFD))
 6e4:	9f 3f       	cpi	r25, 0xFF	; 255
 6e6:	49 f4       	brne	.+18     	; 0x6fa <__vector_11+0x66>
 6e8:	2e 3f       	cpi	r18, 0xFE	; 254
 6ea:	39 f4       	brne	.+14     	; 0x6fa <__vector_11+0x66>
 6ec:	8d 3f       	cpi	r24, 0xFD	; 253
 6ee:	29 f4       	brne	.+10     	; 0x6fa <__vector_11+0x66>
		{
			//UART_putc('S');
			refcounter=1;
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	80 93 60 00 	sts	0x0060, r24
			takedata=1;
 6f6:	80 93 64 00 	sts	0x0064, r24
		}
		
		if (refcounter>=19)
 6fa:	80 91 60 00 	lds	r24, 0x0060
 6fe:	83 31       	cpi	r24, 0x13	; 19
 700:	10 f0       	brcs	.+4      	; 0x706 <__vector_11+0x72>
		{
			takedata=0;
 702:	10 92 64 00 	sts	0x0064, r1
	if (refcounter ==16)
	{
		step1=0;step2=0;step3=0;
	}
	*/
}
 706:	ff 91       	pop	r31
 708:	ef 91       	pop	r30
 70a:	bf 91       	pop	r27
 70c:	af 91       	pop	r26
 70e:	9f 91       	pop	r25
 710:	8f 91       	pop	r24
 712:	3f 91       	pop	r19
 714:	2f 91       	pop	r18
 716:	0f 90       	pop	r0
 718:	0f be       	out	0x3f, r0	; 63
 71a:	0f 90       	pop	r0
 71c:	1f 90       	pop	r1
 71e:	18 95       	reti

00000720 <UART_init>:
#include <util/delay.h>
#include "UART.h"

void UART_init()
{
	UBRRH = (unsigned char) (((F_CPU/(BAUD*16UL))-1)>>8) ;
 720:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) (F_CPU/(BAUD*16UL))-1;
 722:	83 e3       	ldi	r24, 0x33	; 51
 724:	89 b9       	out	0x09, r24	; 9
	
	UCSRA=0x00;
 726:	1b b8       	out	0x0b, r1	; 11
	UCSRB=0x00;
 728:	1a b8       	out	0x0a, r1	; 10

	UCSRC=0b10000110;
 72a:	86 e8       	ldi	r24, 0x86	; 134
 72c:	80 bd       	out	0x20, r24	; 32
	// Set frame format: asynchronous, 8data, no parity, 1 stop bit

	UCSRB=0x98;
 72e:	88 e9       	ldi	r24, 0x98	; 152
 730:	8a b9       	out	0x0a, r24	; 10
 732:	08 95       	ret

00000734 <UART_putc>:
	
}
void UART_putc(unsigned char data)
{

	while ( !(UCSRA & (1<<UDRE)) );  /* Wait for empty transmit buffer */
 734:	5d 9b       	sbis	0x0b, 5	; 11
 736:	fe cf       	rjmp	.-4      	; 0x734 <UART_putc>

	UDR = data;         /* Start transmition */
 738:	8c b9       	out	0x0c, r24	; 12
 73a:	08 95       	ret

0000073c <__subsf3>:
 73c:	50 58       	subi	r21, 0x80	; 128

0000073e <__addsf3>:
 73e:	bb 27       	eor	r27, r27
 740:	aa 27       	eor	r26, r26
 742:	0e d0       	rcall	.+28     	; 0x760 <__addsf3x>
 744:	1c c1       	rjmp	.+568    	; 0x97e <__fp_round>
 746:	0d d1       	rcall	.+538    	; 0x962 <__fp_pscA>
 748:	30 f0       	brcs	.+12     	; 0x756 <__addsf3+0x18>
 74a:	12 d1       	rcall	.+548    	; 0x970 <__fp_pscB>
 74c:	20 f0       	brcs	.+8      	; 0x756 <__addsf3+0x18>
 74e:	31 f4       	brne	.+12     	; 0x75c <__addsf3+0x1e>
 750:	9f 3f       	cpi	r25, 0xFF	; 255
 752:	11 f4       	brne	.+4      	; 0x758 <__addsf3+0x1a>
 754:	1e f4       	brtc	.+6      	; 0x75c <__addsf3+0x1e>
 756:	02 c1       	rjmp	.+516    	; 0x95c <__fp_nan>
 758:	0e f4       	brtc	.+2      	; 0x75c <__addsf3+0x1e>
 75a:	e0 95       	com	r30
 75c:	e7 fb       	bst	r30, 7
 75e:	cf c0       	rjmp	.+414    	; 0x8fe <__fp_inf>

00000760 <__addsf3x>:
 760:	e9 2f       	mov	r30, r25
 762:	1e d1       	rcall	.+572    	; 0x9a0 <__fp_split3>
 764:	80 f3       	brcs	.-32     	; 0x746 <__addsf3+0x8>
 766:	ba 17       	cp	r27, r26
 768:	62 07       	cpc	r22, r18
 76a:	73 07       	cpc	r23, r19
 76c:	84 07       	cpc	r24, r20
 76e:	95 07       	cpc	r25, r21
 770:	18 f0       	brcs	.+6      	; 0x778 <__addsf3x+0x18>
 772:	71 f4       	brne	.+28     	; 0x790 <__addsf3x+0x30>
 774:	9e f5       	brtc	.+102    	; 0x7dc <__addsf3x+0x7c>
 776:	4d c1       	rjmp	.+666    	; 0xa12 <__fp_zero>
 778:	0e f4       	brtc	.+2      	; 0x77c <__addsf3x+0x1c>
 77a:	e0 95       	com	r30
 77c:	0b 2e       	mov	r0, r27
 77e:	ba 2f       	mov	r27, r26
 780:	a0 2d       	mov	r26, r0
 782:	0b 01       	movw	r0, r22
 784:	b9 01       	movw	r22, r18
 786:	90 01       	movw	r18, r0
 788:	0c 01       	movw	r0, r24
 78a:	ca 01       	movw	r24, r20
 78c:	a0 01       	movw	r20, r0
 78e:	11 24       	eor	r1, r1
 790:	ff 27       	eor	r31, r31
 792:	59 1b       	sub	r21, r25
 794:	99 f0       	breq	.+38     	; 0x7bc <__addsf3x+0x5c>
 796:	59 3f       	cpi	r21, 0xF9	; 249
 798:	50 f4       	brcc	.+20     	; 0x7ae <__addsf3x+0x4e>
 79a:	50 3e       	cpi	r21, 0xE0	; 224
 79c:	68 f1       	brcs	.+90     	; 0x7f8 <__addsf3x+0x98>
 79e:	1a 16       	cp	r1, r26
 7a0:	f0 40       	sbci	r31, 0x00	; 0
 7a2:	a2 2f       	mov	r26, r18
 7a4:	23 2f       	mov	r18, r19
 7a6:	34 2f       	mov	r19, r20
 7a8:	44 27       	eor	r20, r20
 7aa:	58 5f       	subi	r21, 0xF8	; 248
 7ac:	f3 cf       	rjmp	.-26     	; 0x794 <__addsf3x+0x34>
 7ae:	46 95       	lsr	r20
 7b0:	37 95       	ror	r19
 7b2:	27 95       	ror	r18
 7b4:	a7 95       	ror	r26
 7b6:	f0 40       	sbci	r31, 0x00	; 0
 7b8:	53 95       	inc	r21
 7ba:	c9 f7       	brne	.-14     	; 0x7ae <__addsf3x+0x4e>
 7bc:	7e f4       	brtc	.+30     	; 0x7dc <__addsf3x+0x7c>
 7be:	1f 16       	cp	r1, r31
 7c0:	ba 0b       	sbc	r27, r26
 7c2:	62 0b       	sbc	r22, r18
 7c4:	73 0b       	sbc	r23, r19
 7c6:	84 0b       	sbc	r24, r20
 7c8:	ba f0       	brmi	.+46     	; 0x7f8 <__addsf3x+0x98>
 7ca:	91 50       	subi	r25, 0x01	; 1
 7cc:	a1 f0       	breq	.+40     	; 0x7f6 <__addsf3x+0x96>
 7ce:	ff 0f       	add	r31, r31
 7d0:	bb 1f       	adc	r27, r27
 7d2:	66 1f       	adc	r22, r22
 7d4:	77 1f       	adc	r23, r23
 7d6:	88 1f       	adc	r24, r24
 7d8:	c2 f7       	brpl	.-16     	; 0x7ca <__addsf3x+0x6a>
 7da:	0e c0       	rjmp	.+28     	; 0x7f8 <__addsf3x+0x98>
 7dc:	ba 0f       	add	r27, r26
 7de:	62 1f       	adc	r22, r18
 7e0:	73 1f       	adc	r23, r19
 7e2:	84 1f       	adc	r24, r20
 7e4:	48 f4       	brcc	.+18     	; 0x7f8 <__addsf3x+0x98>
 7e6:	87 95       	ror	r24
 7e8:	77 95       	ror	r23
 7ea:	67 95       	ror	r22
 7ec:	b7 95       	ror	r27
 7ee:	f7 95       	ror	r31
 7f0:	9e 3f       	cpi	r25, 0xFE	; 254
 7f2:	08 f0       	brcs	.+2      	; 0x7f6 <__addsf3x+0x96>
 7f4:	b3 cf       	rjmp	.-154    	; 0x75c <__addsf3+0x1e>
 7f6:	93 95       	inc	r25
 7f8:	88 0f       	add	r24, r24
 7fa:	08 f0       	brcs	.+2      	; 0x7fe <__addsf3x+0x9e>
 7fc:	99 27       	eor	r25, r25
 7fe:	ee 0f       	add	r30, r30
 800:	97 95       	ror	r25
 802:	87 95       	ror	r24
 804:	08 95       	ret

00000806 <ceil>:
 806:	ee d0       	rcall	.+476    	; 0x9e4 <__fp_trunc>
 808:	80 f0       	brcs	.+32     	; 0x82a <ceil+0x24>
 80a:	9f 37       	cpi	r25, 0x7F	; 127
 80c:	40 f4       	brcc	.+16     	; 0x81e <ceil+0x18>
 80e:	91 11       	cpse	r25, r1
 810:	0e f4       	brtc	.+2      	; 0x814 <ceil+0xe>
 812:	00 c1       	rjmp	.+512    	; 0xa14 <__fp_szero>
 814:	60 e0       	ldi	r22, 0x00	; 0
 816:	70 e0       	ldi	r23, 0x00	; 0
 818:	80 e8       	ldi	r24, 0x80	; 128
 81a:	9f e3       	ldi	r25, 0x3F	; 63
 81c:	08 95       	ret
 81e:	26 f0       	brts	.+8      	; 0x828 <ceil+0x22>
 820:	1b 16       	cp	r1, r27
 822:	61 1d       	adc	r22, r1
 824:	71 1d       	adc	r23, r1
 826:	81 1d       	adc	r24, r1
 828:	70 c0       	rjmp	.+224    	; 0x90a <__fp_mintl>
 82a:	8a c0       	rjmp	.+276    	; 0x940 <__fp_mpack>

0000082c <__fixunssfsi>:
 82c:	c1 d0       	rcall	.+386    	; 0x9b0 <__fp_splitA>
 82e:	88 f0       	brcs	.+34     	; 0x852 <__fixunssfsi+0x26>
 830:	9f 57       	subi	r25, 0x7F	; 127
 832:	90 f0       	brcs	.+36     	; 0x858 <__fixunssfsi+0x2c>
 834:	b9 2f       	mov	r27, r25
 836:	99 27       	eor	r25, r25
 838:	b7 51       	subi	r27, 0x17	; 23
 83a:	a0 f0       	brcs	.+40     	; 0x864 <__fixunssfsi+0x38>
 83c:	d1 f0       	breq	.+52     	; 0x872 <__fixunssfsi+0x46>
 83e:	66 0f       	add	r22, r22
 840:	77 1f       	adc	r23, r23
 842:	88 1f       	adc	r24, r24
 844:	99 1f       	adc	r25, r25
 846:	1a f0       	brmi	.+6      	; 0x84e <__fixunssfsi+0x22>
 848:	ba 95       	dec	r27
 84a:	c9 f7       	brne	.-14     	; 0x83e <__fixunssfsi+0x12>
 84c:	12 c0       	rjmp	.+36     	; 0x872 <__fixunssfsi+0x46>
 84e:	b1 30       	cpi	r27, 0x01	; 1
 850:	81 f0       	breq	.+32     	; 0x872 <__fixunssfsi+0x46>
 852:	df d0       	rcall	.+446    	; 0xa12 <__fp_zero>
 854:	b1 e0       	ldi	r27, 0x01	; 1
 856:	08 95       	ret
 858:	dc c0       	rjmp	.+440    	; 0xa12 <__fp_zero>
 85a:	67 2f       	mov	r22, r23
 85c:	78 2f       	mov	r23, r24
 85e:	88 27       	eor	r24, r24
 860:	b8 5f       	subi	r27, 0xF8	; 248
 862:	39 f0       	breq	.+14     	; 0x872 <__fixunssfsi+0x46>
 864:	b9 3f       	cpi	r27, 0xF9	; 249
 866:	cc f3       	brlt	.-14     	; 0x85a <__fixunssfsi+0x2e>
 868:	86 95       	lsr	r24
 86a:	77 95       	ror	r23
 86c:	67 95       	ror	r22
 86e:	b3 95       	inc	r27
 870:	d9 f7       	brne	.-10     	; 0x868 <__fixunssfsi+0x3c>
 872:	3e f4       	brtc	.+14     	; 0x882 <__fixunssfsi+0x56>
 874:	90 95       	com	r25
 876:	80 95       	com	r24
 878:	70 95       	com	r23
 87a:	61 95       	neg	r22
 87c:	7f 4f       	sbci	r23, 0xFF	; 255
 87e:	8f 4f       	sbci	r24, 0xFF	; 255
 880:	9f 4f       	sbci	r25, 0xFF	; 255
 882:	08 95       	ret

00000884 <__floatunsisf>:
 884:	e8 94       	clt
 886:	09 c0       	rjmp	.+18     	; 0x89a <__floatsisf+0x12>

00000888 <__floatsisf>:
 888:	97 fb       	bst	r25, 7
 88a:	3e f4       	brtc	.+14     	; 0x89a <__floatsisf+0x12>
 88c:	90 95       	com	r25
 88e:	80 95       	com	r24
 890:	70 95       	com	r23
 892:	61 95       	neg	r22
 894:	7f 4f       	sbci	r23, 0xFF	; 255
 896:	8f 4f       	sbci	r24, 0xFF	; 255
 898:	9f 4f       	sbci	r25, 0xFF	; 255
 89a:	99 23       	and	r25, r25
 89c:	a9 f0       	breq	.+42     	; 0x8c8 <__floatsisf+0x40>
 89e:	f9 2f       	mov	r31, r25
 8a0:	96 e9       	ldi	r25, 0x96	; 150
 8a2:	bb 27       	eor	r27, r27
 8a4:	93 95       	inc	r25
 8a6:	f6 95       	lsr	r31
 8a8:	87 95       	ror	r24
 8aa:	77 95       	ror	r23
 8ac:	67 95       	ror	r22
 8ae:	b7 95       	ror	r27
 8b0:	f1 11       	cpse	r31, r1
 8b2:	f8 cf       	rjmp	.-16     	; 0x8a4 <__floatsisf+0x1c>
 8b4:	fa f4       	brpl	.+62     	; 0x8f4 <__floatsisf+0x6c>
 8b6:	bb 0f       	add	r27, r27
 8b8:	11 f4       	brne	.+4      	; 0x8be <__floatsisf+0x36>
 8ba:	60 ff       	sbrs	r22, 0
 8bc:	1b c0       	rjmp	.+54     	; 0x8f4 <__floatsisf+0x6c>
 8be:	6f 5f       	subi	r22, 0xFF	; 255
 8c0:	7f 4f       	sbci	r23, 0xFF	; 255
 8c2:	8f 4f       	sbci	r24, 0xFF	; 255
 8c4:	9f 4f       	sbci	r25, 0xFF	; 255
 8c6:	16 c0       	rjmp	.+44     	; 0x8f4 <__floatsisf+0x6c>
 8c8:	88 23       	and	r24, r24
 8ca:	11 f0       	breq	.+4      	; 0x8d0 <__floatsisf+0x48>
 8cc:	96 e9       	ldi	r25, 0x96	; 150
 8ce:	11 c0       	rjmp	.+34     	; 0x8f2 <__floatsisf+0x6a>
 8d0:	77 23       	and	r23, r23
 8d2:	21 f0       	breq	.+8      	; 0x8dc <__floatsisf+0x54>
 8d4:	9e e8       	ldi	r25, 0x8E	; 142
 8d6:	87 2f       	mov	r24, r23
 8d8:	76 2f       	mov	r23, r22
 8da:	05 c0       	rjmp	.+10     	; 0x8e6 <__floatsisf+0x5e>
 8dc:	66 23       	and	r22, r22
 8de:	71 f0       	breq	.+28     	; 0x8fc <__floatsisf+0x74>
 8e0:	96 e8       	ldi	r25, 0x86	; 134
 8e2:	86 2f       	mov	r24, r22
 8e4:	70 e0       	ldi	r23, 0x00	; 0
 8e6:	60 e0       	ldi	r22, 0x00	; 0
 8e8:	2a f0       	brmi	.+10     	; 0x8f4 <__floatsisf+0x6c>
 8ea:	9a 95       	dec	r25
 8ec:	66 0f       	add	r22, r22
 8ee:	77 1f       	adc	r23, r23
 8f0:	88 1f       	adc	r24, r24
 8f2:	da f7       	brpl	.-10     	; 0x8ea <__floatsisf+0x62>
 8f4:	88 0f       	add	r24, r24
 8f6:	96 95       	lsr	r25
 8f8:	87 95       	ror	r24
 8fa:	97 f9       	bld	r25, 7
 8fc:	08 95       	ret

000008fe <__fp_inf>:
 8fe:	97 f9       	bld	r25, 7
 900:	9f 67       	ori	r25, 0x7F	; 127
 902:	80 e8       	ldi	r24, 0x80	; 128
 904:	70 e0       	ldi	r23, 0x00	; 0
 906:	60 e0       	ldi	r22, 0x00	; 0
 908:	08 95       	ret

0000090a <__fp_mintl>:
 90a:	88 23       	and	r24, r24
 90c:	71 f4       	brne	.+28     	; 0x92a <__fp_mintl+0x20>
 90e:	77 23       	and	r23, r23
 910:	21 f0       	breq	.+8      	; 0x91a <__fp_mintl+0x10>
 912:	98 50       	subi	r25, 0x08	; 8
 914:	87 2b       	or	r24, r23
 916:	76 2f       	mov	r23, r22
 918:	07 c0       	rjmp	.+14     	; 0x928 <__fp_mintl+0x1e>
 91a:	66 23       	and	r22, r22
 91c:	11 f4       	brne	.+4      	; 0x922 <__fp_mintl+0x18>
 91e:	99 27       	eor	r25, r25
 920:	0d c0       	rjmp	.+26     	; 0x93c <__fp_mintl+0x32>
 922:	90 51       	subi	r25, 0x10	; 16
 924:	86 2b       	or	r24, r22
 926:	70 e0       	ldi	r23, 0x00	; 0
 928:	60 e0       	ldi	r22, 0x00	; 0
 92a:	2a f0       	brmi	.+10     	; 0x936 <__fp_mintl+0x2c>
 92c:	9a 95       	dec	r25
 92e:	66 0f       	add	r22, r22
 930:	77 1f       	adc	r23, r23
 932:	88 1f       	adc	r24, r24
 934:	da f7       	brpl	.-10     	; 0x92c <__fp_mintl+0x22>
 936:	88 0f       	add	r24, r24
 938:	96 95       	lsr	r25
 93a:	87 95       	ror	r24
 93c:	97 f9       	bld	r25, 7
 93e:	08 95       	ret

00000940 <__fp_mpack>:
 940:	9f 3f       	cpi	r25, 0xFF	; 255
 942:	31 f0       	breq	.+12     	; 0x950 <__fp_mpack_finite+0xc>

00000944 <__fp_mpack_finite>:
 944:	91 50       	subi	r25, 0x01	; 1
 946:	20 f4       	brcc	.+8      	; 0x950 <__fp_mpack_finite+0xc>
 948:	87 95       	ror	r24
 94a:	77 95       	ror	r23
 94c:	67 95       	ror	r22
 94e:	b7 95       	ror	r27
 950:	88 0f       	add	r24, r24
 952:	91 1d       	adc	r25, r1
 954:	96 95       	lsr	r25
 956:	87 95       	ror	r24
 958:	97 f9       	bld	r25, 7
 95a:	08 95       	ret

0000095c <__fp_nan>:
 95c:	9f ef       	ldi	r25, 0xFF	; 255
 95e:	80 ec       	ldi	r24, 0xC0	; 192
 960:	08 95       	ret

00000962 <__fp_pscA>:
 962:	00 24       	eor	r0, r0
 964:	0a 94       	dec	r0
 966:	16 16       	cp	r1, r22
 968:	17 06       	cpc	r1, r23
 96a:	18 06       	cpc	r1, r24
 96c:	09 06       	cpc	r0, r25
 96e:	08 95       	ret

00000970 <__fp_pscB>:
 970:	00 24       	eor	r0, r0
 972:	0a 94       	dec	r0
 974:	12 16       	cp	r1, r18
 976:	13 06       	cpc	r1, r19
 978:	14 06       	cpc	r1, r20
 97a:	05 06       	cpc	r0, r21
 97c:	08 95       	ret

0000097e <__fp_round>:
 97e:	09 2e       	mov	r0, r25
 980:	03 94       	inc	r0
 982:	00 0c       	add	r0, r0
 984:	11 f4       	brne	.+4      	; 0x98a <__fp_round+0xc>
 986:	88 23       	and	r24, r24
 988:	52 f0       	brmi	.+20     	; 0x99e <__fp_round+0x20>
 98a:	bb 0f       	add	r27, r27
 98c:	40 f4       	brcc	.+16     	; 0x99e <__fp_round+0x20>
 98e:	bf 2b       	or	r27, r31
 990:	11 f4       	brne	.+4      	; 0x996 <__fp_round+0x18>
 992:	60 ff       	sbrs	r22, 0
 994:	04 c0       	rjmp	.+8      	; 0x99e <__fp_round+0x20>
 996:	6f 5f       	subi	r22, 0xFF	; 255
 998:	7f 4f       	sbci	r23, 0xFF	; 255
 99a:	8f 4f       	sbci	r24, 0xFF	; 255
 99c:	9f 4f       	sbci	r25, 0xFF	; 255
 99e:	08 95       	ret

000009a0 <__fp_split3>:
 9a0:	57 fd       	sbrc	r21, 7
 9a2:	90 58       	subi	r25, 0x80	; 128
 9a4:	44 0f       	add	r20, r20
 9a6:	55 1f       	adc	r21, r21
 9a8:	59 f0       	breq	.+22     	; 0x9c0 <__fp_splitA+0x10>
 9aa:	5f 3f       	cpi	r21, 0xFF	; 255
 9ac:	71 f0       	breq	.+28     	; 0x9ca <__fp_splitA+0x1a>
 9ae:	47 95       	ror	r20

000009b0 <__fp_splitA>:
 9b0:	88 0f       	add	r24, r24
 9b2:	97 fb       	bst	r25, 7
 9b4:	99 1f       	adc	r25, r25
 9b6:	61 f0       	breq	.+24     	; 0x9d0 <__fp_splitA+0x20>
 9b8:	9f 3f       	cpi	r25, 0xFF	; 255
 9ba:	79 f0       	breq	.+30     	; 0x9da <__fp_splitA+0x2a>
 9bc:	87 95       	ror	r24
 9be:	08 95       	ret
 9c0:	12 16       	cp	r1, r18
 9c2:	13 06       	cpc	r1, r19
 9c4:	14 06       	cpc	r1, r20
 9c6:	55 1f       	adc	r21, r21
 9c8:	f2 cf       	rjmp	.-28     	; 0x9ae <__fp_split3+0xe>
 9ca:	46 95       	lsr	r20
 9cc:	f1 df       	rcall	.-30     	; 0x9b0 <__fp_splitA>
 9ce:	08 c0       	rjmp	.+16     	; 0x9e0 <__fp_splitA+0x30>
 9d0:	16 16       	cp	r1, r22
 9d2:	17 06       	cpc	r1, r23
 9d4:	18 06       	cpc	r1, r24
 9d6:	99 1f       	adc	r25, r25
 9d8:	f1 cf       	rjmp	.-30     	; 0x9bc <__fp_splitA+0xc>
 9da:	86 95       	lsr	r24
 9dc:	71 05       	cpc	r23, r1
 9de:	61 05       	cpc	r22, r1
 9e0:	08 94       	sec
 9e2:	08 95       	ret

000009e4 <__fp_trunc>:
 9e4:	e5 df       	rcall	.-54     	; 0x9b0 <__fp_splitA>
 9e6:	a0 f0       	brcs	.+40     	; 0xa10 <__fp_trunc+0x2c>
 9e8:	be e7       	ldi	r27, 0x7E	; 126
 9ea:	b9 17       	cp	r27, r25
 9ec:	88 f4       	brcc	.+34     	; 0xa10 <__fp_trunc+0x2c>
 9ee:	bb 27       	eor	r27, r27
 9f0:	9f 38       	cpi	r25, 0x8F	; 143
 9f2:	60 f4       	brcc	.+24     	; 0xa0c <__fp_trunc+0x28>
 9f4:	16 16       	cp	r1, r22
 9f6:	b1 1d       	adc	r27, r1
 9f8:	67 2f       	mov	r22, r23
 9fa:	78 2f       	mov	r23, r24
 9fc:	88 27       	eor	r24, r24
 9fe:	98 5f       	subi	r25, 0xF8	; 248
 a00:	f7 cf       	rjmp	.-18     	; 0x9f0 <__fp_trunc+0xc>
 a02:	86 95       	lsr	r24
 a04:	77 95       	ror	r23
 a06:	67 95       	ror	r22
 a08:	b1 1d       	adc	r27, r1
 a0a:	93 95       	inc	r25
 a0c:	96 39       	cpi	r25, 0x96	; 150
 a0e:	c8 f3       	brcs	.-14     	; 0xa02 <__fp_trunc+0x1e>
 a10:	08 95       	ret

00000a12 <__fp_zero>:
 a12:	e8 94       	clt

00000a14 <__fp_szero>:
 a14:	bb 27       	eor	r27, r27
 a16:	66 27       	eor	r22, r22
 a18:	77 27       	eor	r23, r23
 a1a:	cb 01       	movw	r24, r22
 a1c:	97 f9       	bld	r25, 7
 a1e:	08 95       	ret

00000a20 <__mulsf3>:
 a20:	0b d0       	rcall	.+22     	; 0xa38 <__mulsf3x>
 a22:	ad cf       	rjmp	.-166    	; 0x97e <__fp_round>
 a24:	9e df       	rcall	.-196    	; 0x962 <__fp_pscA>
 a26:	28 f0       	brcs	.+10     	; 0xa32 <__mulsf3+0x12>
 a28:	a3 df       	rcall	.-186    	; 0x970 <__fp_pscB>
 a2a:	18 f0       	brcs	.+6      	; 0xa32 <__mulsf3+0x12>
 a2c:	95 23       	and	r25, r21
 a2e:	09 f0       	breq	.+2      	; 0xa32 <__mulsf3+0x12>
 a30:	66 cf       	rjmp	.-308    	; 0x8fe <__fp_inf>
 a32:	94 cf       	rjmp	.-216    	; 0x95c <__fp_nan>
 a34:	11 24       	eor	r1, r1
 a36:	ee cf       	rjmp	.-36     	; 0xa14 <__fp_szero>

00000a38 <__mulsf3x>:
 a38:	b3 df       	rcall	.-154    	; 0x9a0 <__fp_split3>
 a3a:	a0 f3       	brcs	.-24     	; 0xa24 <__mulsf3+0x4>

00000a3c <__mulsf3_pse>:
 a3c:	95 9f       	mul	r25, r21
 a3e:	d1 f3       	breq	.-12     	; 0xa34 <__mulsf3+0x14>
 a40:	95 0f       	add	r25, r21
 a42:	50 e0       	ldi	r21, 0x00	; 0
 a44:	55 1f       	adc	r21, r21
 a46:	62 9f       	mul	r22, r18
 a48:	f0 01       	movw	r30, r0
 a4a:	72 9f       	mul	r23, r18
 a4c:	bb 27       	eor	r27, r27
 a4e:	f0 0d       	add	r31, r0
 a50:	b1 1d       	adc	r27, r1
 a52:	63 9f       	mul	r22, r19
 a54:	aa 27       	eor	r26, r26
 a56:	f0 0d       	add	r31, r0
 a58:	b1 1d       	adc	r27, r1
 a5a:	aa 1f       	adc	r26, r26
 a5c:	64 9f       	mul	r22, r20
 a5e:	66 27       	eor	r22, r22
 a60:	b0 0d       	add	r27, r0
 a62:	a1 1d       	adc	r26, r1
 a64:	66 1f       	adc	r22, r22
 a66:	82 9f       	mul	r24, r18
 a68:	22 27       	eor	r18, r18
 a6a:	b0 0d       	add	r27, r0
 a6c:	a1 1d       	adc	r26, r1
 a6e:	62 1f       	adc	r22, r18
 a70:	73 9f       	mul	r23, r19
 a72:	b0 0d       	add	r27, r0
 a74:	a1 1d       	adc	r26, r1
 a76:	62 1f       	adc	r22, r18
 a78:	83 9f       	mul	r24, r19
 a7a:	a0 0d       	add	r26, r0
 a7c:	61 1d       	adc	r22, r1
 a7e:	22 1f       	adc	r18, r18
 a80:	74 9f       	mul	r23, r20
 a82:	33 27       	eor	r19, r19
 a84:	a0 0d       	add	r26, r0
 a86:	61 1d       	adc	r22, r1
 a88:	23 1f       	adc	r18, r19
 a8a:	84 9f       	mul	r24, r20
 a8c:	60 0d       	add	r22, r0
 a8e:	21 1d       	adc	r18, r1
 a90:	82 2f       	mov	r24, r18
 a92:	76 2f       	mov	r23, r22
 a94:	6a 2f       	mov	r22, r26
 a96:	11 24       	eor	r1, r1
 a98:	9f 57       	subi	r25, 0x7F	; 127
 a9a:	50 40       	sbci	r21, 0x00	; 0
 a9c:	8a f0       	brmi	.+34     	; 0xac0 <__mulsf3_pse+0x84>
 a9e:	e1 f0       	breq	.+56     	; 0xad8 <__mulsf3_pse+0x9c>
 aa0:	88 23       	and	r24, r24
 aa2:	4a f0       	brmi	.+18     	; 0xab6 <__mulsf3_pse+0x7a>
 aa4:	ee 0f       	add	r30, r30
 aa6:	ff 1f       	adc	r31, r31
 aa8:	bb 1f       	adc	r27, r27
 aaa:	66 1f       	adc	r22, r22
 aac:	77 1f       	adc	r23, r23
 aae:	88 1f       	adc	r24, r24
 ab0:	91 50       	subi	r25, 0x01	; 1
 ab2:	50 40       	sbci	r21, 0x00	; 0
 ab4:	a9 f7       	brne	.-22     	; 0xaa0 <__mulsf3_pse+0x64>
 ab6:	9e 3f       	cpi	r25, 0xFE	; 254
 ab8:	51 05       	cpc	r21, r1
 aba:	70 f0       	brcs	.+28     	; 0xad8 <__mulsf3_pse+0x9c>
 abc:	20 cf       	rjmp	.-448    	; 0x8fe <__fp_inf>
 abe:	aa cf       	rjmp	.-172    	; 0xa14 <__fp_szero>
 ac0:	5f 3f       	cpi	r21, 0xFF	; 255
 ac2:	ec f3       	brlt	.-6      	; 0xabe <__mulsf3_pse+0x82>
 ac4:	98 3e       	cpi	r25, 0xE8	; 232
 ac6:	dc f3       	brlt	.-10     	; 0xabe <__mulsf3_pse+0x82>
 ac8:	86 95       	lsr	r24
 aca:	77 95       	ror	r23
 acc:	67 95       	ror	r22
 ace:	b7 95       	ror	r27
 ad0:	f7 95       	ror	r31
 ad2:	e7 95       	ror	r30
 ad4:	9f 5f       	subi	r25, 0xFF	; 255
 ad6:	c1 f7       	brne	.-16     	; 0xac8 <__mulsf3_pse+0x8c>
 ad8:	fe 2b       	or	r31, r30
 ada:	88 0f       	add	r24, r24
 adc:	91 1d       	adc	r25, r1
 ade:	96 95       	lsr	r25
 ae0:	87 95       	ror	r24
 ae2:	97 f9       	bld	r25, 7
 ae4:	08 95       	ret

00000ae6 <__umulhisi3>:
 ae6:	a2 9f       	mul	r26, r18
 ae8:	b0 01       	movw	r22, r0
 aea:	b3 9f       	mul	r27, r19
 aec:	c0 01       	movw	r24, r0
 aee:	a3 9f       	mul	r26, r19
 af0:	01 d0       	rcall	.+2      	; 0xaf4 <__umulhisi3+0xe>
 af2:	b2 9f       	mul	r27, r18
 af4:	70 0d       	add	r23, r0
 af6:	81 1d       	adc	r24, r1
 af8:	11 24       	eor	r1, r1
 afa:	91 1d       	adc	r25, r1
 afc:	08 95       	ret

00000afe <_exit>:
 afe:	f8 94       	cli

00000b00 <__stop_program>:
 b00:	ff cf       	rjmp	.-2      	; 0xb00 <__stop_program>
