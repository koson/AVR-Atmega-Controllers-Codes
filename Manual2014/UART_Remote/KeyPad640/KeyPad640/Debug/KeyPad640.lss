
KeyPad640.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800200  0000105e  000010f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000105e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080020e  0080020e  00001100  2**0
                  ALLOC
  3 .stab         00002400  00000000  00000000  00001100  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009b2  00000000  00000000  00003500  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00003eb2  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000158  00000000  00000000  00003ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000013a9  00000000  00000000  00004039  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003b9  00000000  00000000  000053e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000070f  00000000  00000000  0000579b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000424  00000000  00000000  00005eac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003c5  00000000  00000000  000062d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000fd5  00000000  00000000  00006695  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000148  00000000  00000000  0000766a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	12 e0       	ldi	r17, 0x02	; 2
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b2 e0       	ldi	r27, 0x02	; 2
      f6:	ee e5       	ldi	r30, 0x5E	; 94
      f8:	f0 e1       	ldi	r31, 0x10	; 16
      fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
      fc:	05 90       	lpm	r0, Z+
      fe:	0d 92       	st	X+, r0
     100:	ae 30       	cpi	r26, 0x0E	; 14
     102:	b1 07       	cpc	r27, r17
     104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
     106:	22 e0       	ldi	r18, 0x02	; 2
     108:	ae e0       	ldi	r26, 0x0E	; 14
     10a:	b2 e0       	ldi	r27, 0x02	; 2
     10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
     10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
     110:	ad 31       	cpi	r26, 0x1D	; 29
     112:	b2 07       	cpc	r27, r18
     114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
     116:	0e 94 df 05 	call	0xbbe	; 0xbbe <main>
     11a:	0c 94 2d 08 	jmp	0x105a	; 0x105a <_exit>

0000011e <__bad_interrupt>:
     11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <toggleE>:
	
	while(n!=0)
	{
	
			H = n%10;
			n = n/10;
     122:	70 9a       	sbi	0x0e, 0	; 14
     124:	83 e3       	ldi	r24, 0x33	; 51
			lcd_char(H+48);
     126:	97 e0       	ldi	r25, 0x07	; 7
     128:	01 97       	sbiw	r24, 0x01	; 1
     12a:	f1 f7       	brne	.-4      	; 0x128 <toggleE+0x6>
     12c:	70 98       	cbi	0x0e, 0	; 14
     12e:	08 95       	ret

00000130 <WaitMs>:
	}
	
	while(n!=0)
	{
	
			H = n%10;
     130:	06 c0       	rjmp	.+12     	; 0x13e <WaitMs+0xe>
     132:	2c ec       	ldi	r18, 0xCC	; 204
     134:	3c e0       	ldi	r19, 0x0C	; 12
     136:	00 00       	nop
     138:	21 50       	subi	r18, 0x01	; 1
			num = num/10;
			n = (n*10)+H;

	}
	
	while(n!=0)
     13a:	31 09       	sbc	r19, r1
     13c:	e1 f7       	brne	.-8      	; 0x136 <WaitMs+0x6>
     13e:	01 97       	sbiw	r24, 0x01	; 1
     140:	c0 f7       	brcc	.-16     	; 0x132 <WaitMs+0x2>
     142:	08 95       	ret

00000144 <lcd_cmd>:
     144:	cf 93       	push	r28
	}
	
	
	while(flag > 0)
	{
		lcd_char(48);
     146:	df 93       	push	r29
     148:	1f 92       	push	r1
     14a:	cd b7       	in	r28, 0x3d	; 61
		flag--;
     14c:	de b7       	in	r29, 0x3e	; 62
     14e:	a5 98       	cbi	0x14, 5	; 20
			lcd_char(H+48);

	}
	
	
	while(flag > 0)
     150:	70 98       	cbi	0x0e, 0	; 14
     152:	98 2f       	mov	r25, r24
     154:	90 7c       	andi	r25, 0xC0	; 192
	{
		lcd_char(48);
		flag--;
	}	

}
     156:	9e b9       	out	0x0e, r25	; 14
     158:	2e b1       	in	r18, 0x0e	; 14
     15a:	98 2f       	mov	r25, r24
     15c:	96 95       	lsr	r25
     15e:	96 95       	lsr	r25
     160:	96 95       	lsr	r25
     162:	96 70       	andi	r25, 0x06	; 6
     164:	92 2b       	or	r25, r18
     166:	9e b9       	out	0x0e, r25	; 14
     168:	98 e1       	ldi	r25, 0x18	; 24
     16a:	9a 95       	dec	r25
     16c:	f1 f7       	brne	.-4      	; 0x16a <lcd_cmd+0x26>
     16e:	00 c0       	rjmp	.+0      	; 0x170 <lcd_cmd+0x2c>
     170:	89 83       	std	Y+1, r24	; 0x01
     172:	0e 94 91 00 	call	0x122	; 0x122 <toggleE>
     176:	a5 9a       	sbi	0x14, 5	; 20
     178:	a5 98       	cbi	0x14, 5	; 20
     17a:	70 98       	cbi	0x0e, 0	; 14
     17c:	89 81       	ldd	r24, Y+1	; 0x01
     17e:	90 e0       	ldi	r25, 0x00	; 0
	CLEARBIT(PORTE,BIT(0));
   					/*PORTA = ((ch << 4) & 0xF0); 	// Send twice because ATMEGA is too fast 
   					PORTA = ((ch << 4) & 0xF0);	// for the LCD display !
   					PORTA = (ch << 4) & 0xF0;
   					PORTA = (ch << 4) & 0xF0;*/
	temp=(ch << 4) & 0b11000000; // '10'000000
     180:	9c 01       	movw	r18, r24
     182:	e4 e0       	ldi	r30, 0x04	; 4
     184:	22 0f       	add	r18, r18
     186:	33 1f       	adc	r19, r19
     188:	ea 95       	dec	r30
     18a:	e1 f7       	brne	.-8      	; 0x184 <lcd_cmd+0x40>
     18c:	20 7c       	andi	r18, 0xC0	; 192
     18e:	33 27       	eor	r19, r19
	PORTE=temp;
     190:	2e b9       	out	0x0e, r18	; 14
	temp=(ch << 1) & 0b00000110; // 00000'01'0 
	PORTE= PORTE | temp;
     192:	2e b1       	in	r18, 0x0e	; 14
   					PORTA = ((ch << 4) & 0xF0);	// for the LCD display !
   					PORTA = (ch << 4) & 0xF0;
   					PORTA = (ch << 4) & 0xF0;*/
	temp=(ch << 4) & 0b11000000; // '10'000000
	PORTE=temp;
	temp=(ch << 1) & 0b00000110; // 00000'01'0 
     194:	88 0f       	add	r24, r24
     196:	99 1f       	adc	r25, r25
     198:	86 70       	andi	r24, 0x06	; 6
     19a:	99 27       	eor	r25, r25
	PORTE= PORTE | temp;
     19c:	28 2b       	or	r18, r24
     19e:	2e b9       	out	0x0e, r18	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1a0:	e8 e1       	ldi	r30, 0x18	; 24
     1a2:	ea 95       	dec	r30
     1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_cmd+0x5e>
     1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_cmd+0x64>
	_delay_us(5);
	toggleE();
     1a8:	0e 94 91 00 	call	0x122	; 0x122 <toggleE>
   	PORTE = 0x00;
     1ac:	1e b8       	out	0x0e, r1	; 14
   	WaitMs(10);
     1ae:	8a e0       	ldi	r24, 0x0A	; 10
     1b0:	90 e0       	ldi	r25, 0x00	; 0


}
     1b2:	0f 90       	pop	r0
     1b4:	df 91       	pop	r29
     1b6:	cf 91       	pop	r28
	temp=(ch << 1) & 0b00000110; // 00000'01'0 
	PORTE= PORTE | temp;
	_delay_us(5);
	toggleE();
   	PORTE = 0x00;
   	WaitMs(10);
     1b8:	0c 94 98 00 	jmp	0x130	; 0x130 <WaitMs>

000001bc <lcd_init>:
void lcd_exit(void);
void WaitMs(unsigned int ms);

void lcd_init(void)	//init the lcd
{	
	DDRE=0xC7;
     1bc:	87 ec       	ldi	r24, 0xC7	; 199
     1be:	8d b9       	out	0x0d, r24	; 13
	//DDRC=0x80;
	DDRG=0x20;
     1c0:	80 e2       	ldi	r24, 0x20	; 32
     1c2:	83 bb       	out	0x13, r24	; 19
	WaitMs(15);
     1c4:	8f e0       	ldi	r24, 0x0F	; 15
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	0e 94 98 00 	call	0x130	; 0x130 <WaitMs>
	CLEARBIT(PORTG,BIT(5));
     1cc:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
     1ce:	70 98       	cbi	0x0e, 0	; 14
	PORTE=0x00;
     1d0:	1e b8       	out	0x0e, r1	; 14
	lcd_cmd(0x20);		//data is 8-bit length
     1d2:	80 e2       	ldi	r24, 0x20	; 32
     1d4:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_cmd>
	WaitMs(1);
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	0e 94 98 00 	call	0x130	; 0x130 <WaitMs>
	lcd_cmd(0x20);		//data is 8-bit length
     1e0:	80 e2       	ldi	r24, 0x20	; 32
     1e2:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_cmd>
	WaitMs(1);
     1e6:	81 e0       	ldi	r24, 0x01	; 1
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	0e 94 98 00 	call	0x130	; 0x130 <WaitMs>
	lcd_cmd(0x20);		//data is 8-bit length
     1ee:	80 e2       	ldi	r24, 0x20	; 32
     1f0:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_cmd>
	WaitMs(1);
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	0e 94 98 00 	call	0x130	; 0x130 <WaitMs>
	lcd_cmd(0x28);		//sets character font
     1fc:	88 e2       	ldi	r24, 0x28	; 40
     1fe:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_cmd>
	WaitMs(1);
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	0e 94 98 00 	call	0x130	; 0x130 <WaitMs>
	lcd_cmd(0x0E);		//display off(d,c,b=0) 08
     20a:	8e e0       	ldi	r24, 0x0E	; 14
     20c:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_cmd>
	WaitMs(1);
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 98 00 	call	0x130	; 0x130 <WaitMs>
	lcd_cmd(0x01);		//clears the data
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_cmd>
	WaitMs(1);
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	0e 94 98 00 	call	0x130	; 0x130 <WaitMs>
	//lcd_cmd(0x02);		//home
	//WaitMs(1);
	lcd_cmd(0x6);		//entry mode--increment
     226:	86 e0       	ldi	r24, 0x06	; 6
     228:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_cmd>
	WaitMs(1);
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	0c 94 98 00 	jmp	0x130	; 0x130 <WaitMs>

00000234 <compute_duty_cycle>:

}


unsigned int compute_duty_cycle(unsigned int dc,char ix)
{
     234:	fc 01       	movw	r30, r24
	
if (ix == '1')
     236:	61 33       	cpi	r22, 0x31	; 49
     238:	29 f4       	brne	.+10     	; 0x244 <compute_duty_cycle+0x10>
	return 	( ((ICR1 /100 ) * dc));
     23a:	80 91 86 00 	lds	r24, 0x0086
     23e:	90 91 87 00 	lds	r25, 0x0087
     242:	14 c0       	rjmp	.+40     	; 0x26c <compute_duty_cycle+0x38>
if (ix == '3')
     244:	63 33       	cpi	r22, 0x33	; 51
     246:	29 f4       	brne	.+10     	; 0x252 <compute_duty_cycle+0x1e>
	return 	( ((ICR3 /100 ) * dc));
     248:	80 91 96 00 	lds	r24, 0x0096
     24c:	90 91 97 00 	lds	r25, 0x0097
     250:	0d c0       	rjmp	.+26     	; 0x26c <compute_duty_cycle+0x38>
if(ix == '4')
     252:	64 33       	cpi	r22, 0x34	; 52
     254:	29 f4       	brne	.+10     	; 0x260 <compute_duty_cycle+0x2c>
	return 	( ((ICR4 /100 ) * dc));
     256:	80 91 a6 00 	lds	r24, 0x00A6
     25a:	90 91 a7 00 	lds	r25, 0x00A7
     25e:	06 c0       	rjmp	.+12     	; 0x26c <compute_duty_cycle+0x38>
if(ix == '5')
     260:	65 33       	cpi	r22, 0x35	; 53
     262:	81 f4       	brne	.+32     	; 0x284 <compute_duty_cycle+0x50>
	return 	( ((ICR5 /100 ) * dc));
     264:	80 91 26 01 	lds	r24, 0x0126
     268:	90 91 27 01 	lds	r25, 0x0127
     26c:	64 e6       	ldi	r22, 0x64	; 100
     26e:	70 e0       	ldi	r23, 0x00	; 0
     270:	0e 94 ef 07 	call	0xfde	; 0xfde <__udivmodhi4>
     274:	e6 9f       	mul	r30, r22
     276:	90 01       	movw	r18, r0
     278:	e7 9f       	mul	r30, r23
     27a:	30 0d       	add	r19, r0
     27c:	f6 9f       	mul	r31, r22
     27e:	30 0d       	add	r19, r0
     280:	11 24       	eor	r1, r1
     282:	01 c0       	rjmp	.+2      	; 0x286 <compute_duty_cycle+0x52>
     284:	08 95       	ret
     286:	c9 01       	movw	r24, r18
}
     288:	08 95       	ret

0000028a <PWM>:
	CLEAR = 0,SET = 1, TOGGLE = 2
}DirectionBIT;


void PWM(char SELECT1 , char SELECT2 ,unsigned int f , unsigned int dc,enum DirectionBIT bit)
{
     28a:	af 92       	push	r10
     28c:	bf 92       	push	r11
     28e:	cf 92       	push	r12
     290:	df 92       	push	r13
     292:	ff 92       	push	r15
     294:	0f 93       	push	r16
     296:	1f 93       	push	r17
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	1f 92       	push	r1
     29e:	cd b7       	in	r28, 0x3d	; 61
     2a0:	de b7       	in	r29, 0x3e	; 62
     2a2:	6a 01       	movw	r12, r20
     2a4:	59 01       	movw	r10, r18
	char ix;
	char cy;
	unsigned int  frequency,duty_cycle;

	ix = toupper(SELECT1);
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	69 83       	std	Y+1, r22	; 0x01
     2aa:	0e 94 25 08 	call	0x104a	; 0x104a <toupper>
     2ae:	f8 2e       	mov	r15, r24
	cy = toupper(SELECT2);
     2b0:	69 81       	ldd	r22, Y+1	; 0x01
     2b2:	86 2f       	mov	r24, r22
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	0e 94 25 08 	call	0x104a	; 0x104a <toupper>
     2ba:	18 2f       	mov	r17, r24

	frequency = (FCLK / (2*f) );	//1 is selected as presclar
     2bc:	96 01       	movw	r18, r12
     2be:	22 0f       	add	r18, r18
     2c0:	33 1f       	adc	r19, r19
     2c2:	40 e0       	ldi	r20, 0x00	; 0
     2c4:	50 e0       	ldi	r21, 0x00	; 0
     2c6:	60 e0       	ldi	r22, 0x00	; 0
     2c8:	70 e0       	ldi	r23, 0x00	; 0
     2ca:	81 ee       	ldi	r24, 0xE1	; 225
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	0e 94 03 08 	call	0x1006	; 0x1006 <__udivmodsi4>

	if(ix == '1')
     2d2:	81 e3       	ldi	r24, 0x31	; 49
     2d4:	f8 12       	cpse	r15, r24
     2d6:	6c c0       	rjmp	.+216    	; 0x3b0 <PWM+0x126>
	{

		ICR1 = frequency;
     2d8:	30 93 87 00 	sts	0x0087, r19
     2dc:	20 93 86 00 	sts	0x0086, r18
		duty_cycle = compute_duty_cycle(dc,ix);
     2e0:	61 e3       	ldi	r22, 0x31	; 49
     2e2:	c5 01       	movw	r24, r10
     2e4:	0e 94 1a 01 	call	0x234	; 0x234 <compute_duty_cycle>

		TCCR1A = 0xA8;
     2e8:	28 ea       	ldi	r18, 0xA8	; 168
     2ea:	20 93 80 00 	sts	0x0080, r18
		TCCR1B = 0x11;
     2ee:	21 e1       	ldi	r18, 0x11	; 17
     2f0:	20 93 81 00 	sts	0x0081, r18

		if(cy == 'A')
     2f4:	11 34       	cpi	r17, 0x41	; 65
     2f6:	f9 f4       	brne	.+62     	; 0x336 <PWM+0xac>
		  {
		   SETBIT(DDRB,BIT(5));
     2f8:	25 9a       	sbi	0x04, 5	; 4
		   OCR1A = duty_cycle;
     2fa:	90 93 89 00 	sts	0x0089, r25
     2fe:	80 93 88 00 	sts	0x0088, r24
		   SETBIT(DDRL,BIT(2));		   
     302:	80 91 0a 01 	lds	r24, 0x010A
     306:	84 60       	ori	r24, 0x04	; 4
     308:	80 93 0a 01 	sts	0x010A, r24
		   if (bit == CLEAR)
     30c:	01 11       	cpse	r16, r1
     30e:	04 c0       	rjmp	.+8      	; 0x318 <PWM+0x8e>
		   {
			   CLEARBIT(PORTL,BIT(2));
     310:	80 91 0b 01 	lds	r24, 0x010B
     314:	8b 7f       	andi	r24, 0xFB	; 251
     316:	05 c0       	rjmp	.+10     	; 0x322 <PWM+0x98>
		   }
		   else if (bit == SET)
     318:	01 30       	cpi	r16, 0x01	; 1
     31a:	31 f4       	brne	.+12     	; 0x328 <PWM+0x9e>
		   {
			   SETBIT(PORTL,BIT(2));
     31c:	80 91 0b 01 	lds	r24, 0x010B
     320:	84 60       	ori	r24, 0x04	; 4
     322:	80 93 0b 01 	sts	0x010B, r24
     326:	6c c1       	rjmp	.+728    	; 0x600 <PWM+0x376>
		   }
		   else if (bit == TOGGLE)
     328:	02 30       	cpi	r16, 0x02	; 2
     32a:	09 f0       	breq	.+2      	; 0x32e <PWM+0xa4>
     32c:	69 c1       	rjmp	.+722    	; 0x600 <PWM+0x376>
		   {
			   TOGGLEBIT(PORTL,BIT(2));
     32e:	80 91 0b 01 	lds	r24, 0x010B
     332:	94 e0       	ldi	r25, 0x04	; 4
     334:	1e c0       	rjmp	.+60     	; 0x372 <PWM+0xe8>
		   }
		  }		
		else if(cy == 'B')
     336:	12 34       	cpi	r17, 0x42	; 66
     338:	f1 f4       	brne	.+60     	; 0x376 <PWM+0xec>
		  {
		   SETBIT(DDRB,BIT(6));
     33a:	26 9a       	sbi	0x04, 6	; 4
		   OCR1B = duty_cycle;
     33c:	90 93 8b 00 	sts	0x008B, r25
     340:	80 93 8a 00 	sts	0x008A, r24
		   SETBIT(DDRL,BIT(6));
     344:	80 91 0a 01 	lds	r24, 0x010A
     348:	80 64       	ori	r24, 0x40	; 64
     34a:	80 93 0a 01 	sts	0x010A, r24
		   if (bit == CLEAR)
     34e:	01 11       	cpse	r16, r1
     350:	04 c0       	rjmp	.+8      	; 0x35a <PWM+0xd0>
		   {
			   CLEARBIT(PORTL,BIT(6));
     352:	80 91 0b 01 	lds	r24, 0x010B
     356:	8f 7b       	andi	r24, 0xBF	; 191
     358:	e4 cf       	rjmp	.-56     	; 0x322 <PWM+0x98>
		   }
		   else if (bit == SET)
     35a:	01 30       	cpi	r16, 0x01	; 1
     35c:	21 f4       	brne	.+8      	; 0x366 <PWM+0xdc>
		   {
			   SETBIT(PORTL,BIT(6));
     35e:	80 91 0b 01 	lds	r24, 0x010B
     362:	80 64       	ori	r24, 0x40	; 64
     364:	de cf       	rjmp	.-68     	; 0x322 <PWM+0x98>
		   }
		   else if (bit == TOGGLE)
     366:	02 30       	cpi	r16, 0x02	; 2
     368:	09 f0       	breq	.+2      	; 0x36c <PWM+0xe2>
     36a:	4a c1       	rjmp	.+660    	; 0x600 <PWM+0x376>
		   {
			   TOGGLEBIT(PORTL,BIT(6));
     36c:	80 91 0b 01 	lds	r24, 0x010B
     370:	90 e4       	ldi	r25, 0x40	; 64
     372:	89 27       	eor	r24, r25
     374:	d6 cf       	rjmp	.-84     	; 0x322 <PWM+0x98>
		   }
		  }
		else
		  {
		   SETBIT(DDRB,BIT(7));
     376:	27 9a       	sbi	0x04, 7	; 4
		   OCR1C = duty_cycle;
     378:	90 93 8d 00 	sts	0x008D, r25
     37c:	80 93 8c 00 	sts	0x008C, r24
		   
		   		   SETBIT(DDRL,BIT(7));
     380:	80 91 0a 01 	lds	r24, 0x010A
     384:	80 68       	ori	r24, 0x80	; 128
     386:	80 93 0a 01 	sts	0x010A, r24
		   		   if (bit == CLEAR)
     38a:	01 11       	cpse	r16, r1
     38c:	04 c0       	rjmp	.+8      	; 0x396 <PWM+0x10c>
		   		   {
			   		   CLEARBIT(PORTL,BIT(7));
     38e:	80 91 0b 01 	lds	r24, 0x010B
     392:	8f 77       	andi	r24, 0x7F	; 127
     394:	c6 cf       	rjmp	.-116    	; 0x322 <PWM+0x98>
		   		   }
		   		   else if (bit == SET)
     396:	01 30       	cpi	r16, 0x01	; 1
     398:	21 f4       	brne	.+8      	; 0x3a2 <PWM+0x118>
		   		   {
			   		   SETBIT(PORTL,BIT(7));
     39a:	80 91 0b 01 	lds	r24, 0x010B
     39e:	80 68       	ori	r24, 0x80	; 128
     3a0:	c0 cf       	rjmp	.-128    	; 0x322 <PWM+0x98>
		   		   }
		   		   else if (bit == TOGGLE)
     3a2:	02 30       	cpi	r16, 0x02	; 2
     3a4:	09 f0       	breq	.+2      	; 0x3a8 <PWM+0x11e>
     3a6:	2c c1       	rjmp	.+600    	; 0x600 <PWM+0x376>
		   		   {
			   		   TOGGLEBIT(PORTL,BIT(7));
     3a8:	80 91 0b 01 	lds	r24, 0x010B
     3ac:	80 58       	subi	r24, 0x80	; 128
     3ae:	b9 cf       	rjmp	.-142    	; 0x322 <PWM+0x98>
		   		   }
		  }	
	}

	if(ix == '3')
     3b0:	e3 e3       	ldi	r30, 0x33	; 51
     3b2:	fe 12       	cpse	r15, r30
     3b4:	63 c0       	rjmp	.+198    	; 0x47c <PWM+0x1f2>
	{
		TCCR3A = 0xA8;
     3b6:	88 ea       	ldi	r24, 0xA8	; 168
     3b8:	80 93 90 00 	sts	0x0090, r24
		TCCR3B = 0x11;
     3bc:	81 e1       	ldi	r24, 0x11	; 17
     3be:	80 93 91 00 	sts	0x0091, r24
		
		ICR3 = frequency;
     3c2:	30 93 97 00 	sts	0x0097, r19
     3c6:	20 93 96 00 	sts	0x0096, r18
		duty_cycle = compute_duty_cycle(dc,ix);
     3ca:	63 e3       	ldi	r22, 0x33	; 51
     3cc:	c5 01       	movw	r24, r10
     3ce:	0e 94 1a 01 	call	0x234	; 0x234 <compute_duty_cycle>
		
 		
		if(cy == 'A')
     3d2:	11 34       	cpi	r17, 0x41	; 65
     3d4:	01 f5       	brne	.+64     	; 0x416 <PWM+0x18c>
		  { 
			   SETBIT(DDRE,BIT(3));
     3d6:	6b 9a       	sbi	0x0d, 3	; 13
			   OCR3A = duty_cycle;
     3d8:	90 93 99 00 	sts	0x0099, r25
     3dc:	80 93 98 00 	sts	0x0098, r24
			   
			   	SETBIT(DDRH,BIT(6));
     3e0:	80 91 01 01 	lds	r24, 0x0101
     3e4:	80 64       	ori	r24, 0x40	; 64
     3e6:	80 93 01 01 	sts	0x0101, r24
			   	if (bit == CLEAR)
     3ea:	01 11       	cpse	r16, r1
     3ec:	04 c0       	rjmp	.+8      	; 0x3f6 <PWM+0x16c>
			   	{
				   	CLEARBIT(PORTH,BIT(6));
     3ee:	80 91 02 01 	lds	r24, 0x0102
     3f2:	8f 7b       	andi	r24, 0xBF	; 191
     3f4:	05 c0       	rjmp	.+10     	; 0x400 <PWM+0x176>
			   	}
			   	else if (bit == SET)
     3f6:	01 30       	cpi	r16, 0x01	; 1
     3f8:	31 f4       	brne	.+12     	; 0x406 <PWM+0x17c>
			   	{
				   	SETBIT(PORTH,BIT(6));
     3fa:	80 91 02 01 	lds	r24, 0x0102
     3fe:	80 64       	ori	r24, 0x40	; 64
     400:	80 93 02 01 	sts	0x0102, r24
     404:	fd c0       	rjmp	.+506    	; 0x600 <PWM+0x376>
			   	}
			   	else if (bit == TOGGLE)
     406:	02 30       	cpi	r16, 0x02	; 2
     408:	09 f0       	breq	.+2      	; 0x40c <PWM+0x182>
     40a:	fa c0       	rjmp	.+500    	; 0x600 <PWM+0x376>
			   	{
				   	TOGGLEBIT(PORTH,BIT(6));
     40c:	80 91 02 01 	lds	r24, 0x0102
     410:	90 e4       	ldi	r25, 0x40	; 64
     412:	89 27       	eor	r24, r25
     414:	f5 cf       	rjmp	.-22     	; 0x400 <PWM+0x176>
			   	}
		  }		
		else if(cy == 'B')
     416:	12 34       	cpi	r17, 0x42	; 66
     418:	e9 f4       	brne	.+58     	; 0x454 <PWM+0x1ca>
		  {
			   SETBIT(DDRE,BIT(4));
     41a:	6c 9a       	sbi	0x0d, 4	; 13
			   OCR3B = duty_cycle;
     41c:	90 93 9b 00 	sts	0x009B, r25
     420:	80 93 9a 00 	sts	0x009A, r24
			   
			   	SETBIT(DDRL,BIT(7));
     424:	80 91 0a 01 	lds	r24, 0x010A
     428:	80 68       	ori	r24, 0x80	; 128
     42a:	80 93 0a 01 	sts	0x010A, r24
			   	if (bit == CLEAR)
     42e:	01 11       	cpse	r16, r1
     430:	04 c0       	rjmp	.+8      	; 0x43a <PWM+0x1b0>
			   	{
				   	CLEARBIT(PORTH,BIT(7));
     432:	80 91 02 01 	lds	r24, 0x0102
     436:	8f 77       	andi	r24, 0x7F	; 127
     438:	e3 cf       	rjmp	.-58     	; 0x400 <PWM+0x176>
			   	}
			   	else if (bit == SET)
     43a:	01 30       	cpi	r16, 0x01	; 1
     43c:	21 f4       	brne	.+8      	; 0x446 <PWM+0x1bc>
			   	{
				   	SETBIT(PORTH,BIT(7));
     43e:	80 91 02 01 	lds	r24, 0x0102
     442:	80 68       	ori	r24, 0x80	; 128
     444:	dd cf       	rjmp	.-70     	; 0x400 <PWM+0x176>
			   	}
			   	else if (bit == TOGGLE)
     446:	02 30       	cpi	r16, 0x02	; 2
     448:	09 f0       	breq	.+2      	; 0x44c <PWM+0x1c2>
     44a:	da c0       	rjmp	.+436    	; 0x600 <PWM+0x376>
			   	{
				   	TOGGLEBIT(PORTH,BIT(7));
     44c:	80 91 02 01 	lds	r24, 0x0102
     450:	80 58       	subi	r24, 0x80	; 128
     452:	d6 cf       	rjmp	.-84     	; 0x400 <PWM+0x176>
			   	}
		  }
		else
		  {
			   SETBIT(DDRE,BIT(5));
     454:	6d 9a       	sbi	0x0d, 5	; 13
			   OCR3C = duty_cycle;
     456:	90 93 9d 00 	sts	0x009D, r25
     45a:	80 93 9c 00 	sts	0x009C, r24
			   
		   		SETBIT(DDRG,BIT(3));
     45e:	9b 9a       	sbi	0x13, 3	; 19
		   		if (bit == CLEAR)
     460:	01 11       	cpse	r16, r1
     462:	02 c0       	rjmp	.+4      	; 0x468 <PWM+0x1de>
		   		{
			   		CLEARBIT(PORTG,BIT(3));
     464:	a3 98       	cbi	0x14, 3	; 20
     466:	cc c0       	rjmp	.+408    	; 0x600 <PWM+0x376>
		   		}
		   		else if (bit == SET)
     468:	01 30       	cpi	r16, 0x01	; 1
     46a:	11 f4       	brne	.+4      	; 0x470 <PWM+0x1e6>
		   		{
			   		SETBIT(PORTG,BIT(3));
     46c:	a3 9a       	sbi	0x14, 3	; 20
     46e:	c8 c0       	rjmp	.+400    	; 0x600 <PWM+0x376>
		   		}
		   		else if (bit == TOGGLE)
     470:	02 30       	cpi	r16, 0x02	; 2
     472:	09 f0       	breq	.+2      	; 0x476 <PWM+0x1ec>
     474:	c5 c0       	rjmp	.+394    	; 0x600 <PWM+0x376>
		   		{
			   		TOGGLEBIT(PORTG,BIT(3));
     476:	84 b3       	in	r24, 0x14	; 20
     478:	98 e0       	ldi	r25, 0x08	; 8
     47a:	c0 c0       	rjmp	.+384    	; 0x5fc <PWM+0x372>
		   		}			   			   
		  }			  
	}

	if(ix == '4')
     47c:	f4 e3       	ldi	r31, 0x34	; 52
     47e:	ff 12       	cpse	r15, r31
     480:	68 c0       	rjmp	.+208    	; 0x552 <PWM+0x2c8>
	{	
		ICR4 = frequency;
     482:	30 93 a7 00 	sts	0x00A7, r19
     486:	20 93 a6 00 	sts	0x00A6, r18
		duty_cycle = compute_duty_cycle(dc,ix);		
     48a:	64 e3       	ldi	r22, 0x34	; 52
     48c:	c5 01       	movw	r24, r10
     48e:	0e 94 1a 01 	call	0x234	; 0x234 <compute_duty_cycle>
 		TCCR4A = 0xA8;
     492:	28 ea       	ldi	r18, 0xA8	; 168
     494:	20 93 a0 00 	sts	0x00A0, r18
		TCCR4B = 0x11;
     498:	21 e1       	ldi	r18, 0x11	; 17
     49a:	20 93 a1 00 	sts	0x00A1, r18
		if(cy == 'A')
		  { 
			SETBIT(DDRH,BIT(3));
     49e:	20 91 01 01 	lds	r18, 0x0101
	{	
		ICR4 = frequency;
		duty_cycle = compute_duty_cycle(dc,ix);		
 		TCCR4A = 0xA8;
		TCCR4B = 0x11;
		if(cy == 'A')
     4a2:	11 34       	cpi	r17, 0x41	; 65
     4a4:	b1 f4       	brne	.+44     	; 0x4d2 <PWM+0x248>
		  { 
			SETBIT(DDRH,BIT(3));
     4a6:	28 60       	ori	r18, 0x08	; 8
     4a8:	20 93 01 01 	sts	0x0101, r18
			OCR4A = duty_cycle;
     4ac:	90 93 a9 00 	sts	0x00A9, r25
     4b0:	80 93 a8 00 	sts	0x00A8, r24
			
				SETBIT(DDRG,BIT(4));
     4b4:	9c 9a       	sbi	0x13, 4	; 19
				if (bit == CLEAR)
     4b6:	01 11       	cpse	r16, r1
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <PWM+0x234>
				{
					CLEARBIT(PORTG,BIT(4));
     4ba:	a4 98       	cbi	0x14, 4	; 20
     4bc:	a1 c0       	rjmp	.+322    	; 0x600 <PWM+0x376>
				}
				else if (bit == SET)
     4be:	01 30       	cpi	r16, 0x01	; 1
     4c0:	11 f4       	brne	.+4      	; 0x4c6 <PWM+0x23c>
				{
					SETBIT(PORTG,BIT(4));
     4c2:	a4 9a       	sbi	0x14, 4	; 20
     4c4:	9d c0       	rjmp	.+314    	; 0x600 <PWM+0x376>
				}
				else if (bit == TOGGLE)
     4c6:	02 30       	cpi	r16, 0x02	; 2
     4c8:	09 f0       	breq	.+2      	; 0x4cc <PWM+0x242>
     4ca:	9a c0       	rjmp	.+308    	; 0x600 <PWM+0x376>
				{
					TOGGLEBIT(PORTG,BIT(4));
     4cc:	84 b3       	in	r24, 0x14	; 20
     4ce:	90 e1       	ldi	r25, 0x10	; 16
     4d0:	95 c0       	rjmp	.+298    	; 0x5fc <PWM+0x372>
				}
		  }		
		else if(cy == 'B')
     4d2:	12 34       	cpi	r17, 0x42	; 66
     4d4:	f9 f4       	brne	.+62     	; 0x514 <PWM+0x28a>
		  {
			SETBIT(DDRH,BIT(4));
     4d6:	20 61       	ori	r18, 0x10	; 16
     4d8:	20 93 01 01 	sts	0x0101, r18
		   OCR4B = duty_cycle;
     4dc:	90 93 ab 00 	sts	0x00AB, r25
     4e0:	80 93 aa 00 	sts	0x00AA, r24
		   
		   		SETBIT(DDRL,BIT(0));
     4e4:	80 91 0a 01 	lds	r24, 0x010A
     4e8:	81 60       	ori	r24, 0x01	; 1
     4ea:	80 93 0a 01 	sts	0x010A, r24
		   		if (bit == CLEAR)
     4ee:	01 11       	cpse	r16, r1
     4f0:	04 c0       	rjmp	.+8      	; 0x4fa <PWM+0x270>
		   		{
			   		CLEARBIT(PORTL,BIT(0));
     4f2:	80 91 0b 01 	lds	r24, 0x010B
     4f6:	8e 7f       	andi	r24, 0xFE	; 254
     4f8:	14 cf       	rjmp	.-472    	; 0x322 <PWM+0x98>
		   		}
		   		else if (bit == SET)
     4fa:	01 30       	cpi	r16, 0x01	; 1
     4fc:	21 f4       	brne	.+8      	; 0x506 <PWM+0x27c>
		   		{
			   		SETBIT(PORTL,BIT(0));
     4fe:	80 91 0b 01 	lds	r24, 0x010B
     502:	81 60       	ori	r24, 0x01	; 1
     504:	0e cf       	rjmp	.-484    	; 0x322 <PWM+0x98>
		   		}
		   		else if (bit == TOGGLE)
     506:	02 30       	cpi	r16, 0x02	; 2
     508:	09 f0       	breq	.+2      	; 0x50c <PWM+0x282>
     50a:	7a c0       	rjmp	.+244    	; 0x600 <PWM+0x376>
		   		{
			   		TOGGLEBIT(PORTL,BIT(0));
     50c:	80 91 0b 01 	lds	r24, 0x010B
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	2f cf       	rjmp	.-418    	; 0x372 <PWM+0xe8>
		   		}
		  }
		else
		  {
			  SETBIT(DDRH,BIT(5));
     514:	20 62       	ori	r18, 0x20	; 32
     516:	20 93 01 01 	sts	0x0101, r18
		      OCR4C = duty_cycle;
     51a:	90 93 ad 00 	sts	0x00AD, r25
     51e:	80 93 ac 00 	sts	0x00AC, r24
			  
			  	SETBIT(DDRL,BIT(1));
     522:	80 91 0a 01 	lds	r24, 0x010A
     526:	82 60       	ori	r24, 0x02	; 2
     528:	80 93 0a 01 	sts	0x010A, r24
			  	if (bit == CLEAR)
     52c:	01 11       	cpse	r16, r1
     52e:	04 c0       	rjmp	.+8      	; 0x538 <PWM+0x2ae>
			  	{
				  	CLEARBIT(PORTL,BIT(1));
     530:	80 91 0b 01 	lds	r24, 0x010B
     534:	8d 7f       	andi	r24, 0xFD	; 253
     536:	f5 ce       	rjmp	.-534    	; 0x322 <PWM+0x98>
			  	}
			  	else if (bit == SET)
     538:	01 30       	cpi	r16, 0x01	; 1
     53a:	21 f4       	brne	.+8      	; 0x544 <PWM+0x2ba>
			  	{
				  	SETBIT(PORTL,BIT(1));
     53c:	80 91 0b 01 	lds	r24, 0x010B
     540:	82 60       	ori	r24, 0x02	; 2
     542:	ef ce       	rjmp	.-546    	; 0x322 <PWM+0x98>
			  	}
			  	else if (bit == TOGGLE)
     544:	02 30       	cpi	r16, 0x02	; 2
     546:	09 f0       	breq	.+2      	; 0x54a <PWM+0x2c0>
     548:	5b c0       	rjmp	.+182    	; 0x600 <PWM+0x376>
			  	{
				  	TOGGLEBIT(PORTL,BIT(1));
     54a:	80 91 0b 01 	lds	r24, 0x010B
     54e:	80 27       	eor	r24, r16
     550:	e8 ce       	rjmp	.-560    	; 0x322 <PWM+0x98>
			  	}
		  }		  
	}

	if(ix == '5')
     552:	85 e3       	ldi	r24, 0x35	; 53
     554:	f8 12       	cpse	r15, r24
     556:	54 c0       	rjmp	.+168    	; 0x600 <PWM+0x376>
	{
		ICR5 = frequency;
     558:	30 93 27 01 	sts	0x0127, r19
     55c:	20 93 26 01 	sts	0x0126, r18
		duty_cycle = compute_duty_cycle(dc,ix);
     560:	65 e3       	ldi	r22, 0x35	; 53
     562:	c5 01       	movw	r24, r10
     564:	0e 94 1a 01 	call	0x234	; 0x234 <compute_duty_cycle>
 		TCCR5A = 0xA8;
     568:	28 ea       	ldi	r18, 0xA8	; 168
     56a:	20 93 20 01 	sts	0x0120, r18
		TCCR5B = 0x11;
     56e:	21 e1       	ldi	r18, 0x11	; 17
     570:	20 93 21 01 	sts	0x0121, r18
		if(cy == 'A')
		  { 
			SETBIT(DDRL,BIT(3));
     574:	20 91 0a 01 	lds	r18, 0x010A
	{
		ICR5 = frequency;
		duty_cycle = compute_duty_cycle(dc,ix);
 		TCCR5A = 0xA8;
		TCCR5B = 0x11;
		if(cy == 'A')
     578:	11 34       	cpi	r17, 0x41	; 65
     57a:	a9 f4       	brne	.+42     	; 0x5a6 <PWM+0x31c>
		  { 
			SETBIT(DDRL,BIT(3));
     57c:	28 60       	ori	r18, 0x08	; 8
     57e:	20 93 0a 01 	sts	0x010A, r18
		   OCR5A = duty_cycle;
     582:	90 93 29 01 	sts	0x0129, r25
     586:	80 93 28 01 	sts	0x0128, r24
		   
		   	SETBIT(DDRG,BIT(0));
     58a:	98 9a       	sbi	0x13, 0	; 19
		   	if (bit == CLEAR)
     58c:	01 11       	cpse	r16, r1
     58e:	02 c0       	rjmp	.+4      	; 0x594 <PWM+0x30a>
		   	{
			   	CLEARBIT(PORTG,BIT(0));
     590:	a0 98       	cbi	0x14, 0	; 20
     592:	36 c0       	rjmp	.+108    	; 0x600 <PWM+0x376>
		   	}
		   	else if (bit == SET)
     594:	01 30       	cpi	r16, 0x01	; 1
     596:	11 f4       	brne	.+4      	; 0x59c <PWM+0x312>
		   	{
			   	SETBIT(PORTG,BIT(0));
     598:	a0 9a       	sbi	0x14, 0	; 20
     59a:	32 c0       	rjmp	.+100    	; 0x600 <PWM+0x376>
		   	}
		   	else if (bit == TOGGLE)
     59c:	02 30       	cpi	r16, 0x02	; 2
     59e:	81 f5       	brne	.+96     	; 0x600 <PWM+0x376>
		   	{
			   	TOGGLEBIT(PORTG,BIT(0));
     5a0:	84 b3       	in	r24, 0x14	; 20
     5a2:	91 e0       	ldi	r25, 0x01	; 1
     5a4:	2b c0       	rjmp	.+86     	; 0x5fc <PWM+0x372>
		   	}
		  }		
		else if(cy == 'B')
     5a6:	12 34       	cpi	r17, 0x42	; 66
     5a8:	a9 f4       	brne	.+42     	; 0x5d4 <PWM+0x34a>
		  {
			  SETBIT(DDRL,BIT(4));
     5aa:	20 61       	ori	r18, 0x10	; 16
     5ac:	20 93 0a 01 	sts	0x010A, r18
		   OCR5B = duty_cycle;
     5b0:	90 93 2b 01 	sts	0x012B, r25
     5b4:	80 93 2a 01 	sts	0x012A, r24
		   
		   			  	SETBIT(DDRG,BIT(1));
     5b8:	99 9a       	sbi	0x13, 1	; 19
		   			  	if (bit == CLEAR)
     5ba:	01 11       	cpse	r16, r1
     5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <PWM+0x338>
		   			  	{
			   			  	CLEARBIT(PORTG,BIT(1));
     5be:	a1 98       	cbi	0x14, 1	; 20
     5c0:	1f c0       	rjmp	.+62     	; 0x600 <PWM+0x376>
		   			  	}
		   			  	else if (bit == SET)
     5c2:	01 30       	cpi	r16, 0x01	; 1
     5c4:	11 f4       	brne	.+4      	; 0x5ca <PWM+0x340>
		   			  	{
			   			  	SETBIT(PORTG,BIT(1));
     5c6:	a1 9a       	sbi	0x14, 1	; 20
     5c8:	1b c0       	rjmp	.+54     	; 0x600 <PWM+0x376>
		   			  	}
		   			  	else if (bit == TOGGLE)
     5ca:	02 30       	cpi	r16, 0x02	; 2
     5cc:	c9 f4       	brne	.+50     	; 0x600 <PWM+0x376>
		   			  	{
			   			  	TOGGLEBIT(PORTG,BIT(1));
     5ce:	84 b3       	in	r24, 0x14	; 20
     5d0:	80 27       	eor	r24, r16
     5d2:	15 c0       	rjmp	.+42     	; 0x5fe <PWM+0x374>
		   			  	}
		  }
		else
		  {
			  SETBIT(DDRL,BIT(5));
     5d4:	20 62       	ori	r18, 0x20	; 32
     5d6:	20 93 0a 01 	sts	0x010A, r18
			  OCR5C = duty_cycle;
     5da:	90 93 2d 01 	sts	0x012D, r25
     5de:	80 93 2c 01 	sts	0x012C, r24
			  
			  	SETBIT(DDRG,BIT(2));
     5e2:	9a 9a       	sbi	0x13, 2	; 19
			  	if (bit == CLEAR)
     5e4:	01 11       	cpse	r16, r1
     5e6:	02 c0       	rjmp	.+4      	; 0x5ec <PWM+0x362>
			  	{
				  	CLEARBIT(PORTG,BIT(2));
     5e8:	a2 98       	cbi	0x14, 2	; 20
     5ea:	0a c0       	rjmp	.+20     	; 0x600 <PWM+0x376>
			  	}
			  	else if (bit == SET)
     5ec:	01 30       	cpi	r16, 0x01	; 1
     5ee:	11 f4       	brne	.+4      	; 0x5f4 <PWM+0x36a>
			  	{
				  	SETBIT(PORTG,BIT(2));
     5f0:	a2 9a       	sbi	0x14, 2	; 20
     5f2:	06 c0       	rjmp	.+12     	; 0x600 <PWM+0x376>
			  	}
			  	else if (bit == TOGGLE)
     5f4:	02 30       	cpi	r16, 0x02	; 2
     5f6:	21 f4       	brne	.+8      	; 0x600 <PWM+0x376>
			  	{
				  	TOGGLEBIT(PORTG,BIT(2));
     5f8:	84 b3       	in	r24, 0x14	; 20
     5fa:	94 e0       	ldi	r25, 0x04	; 4
     5fc:	89 27       	eor	r24, r25
     5fe:	84 bb       	out	0x14, r24	; 20
			  	}
		  }	
	}

}
     600:	0f 90       	pop	r0
     602:	df 91       	pop	r29
     604:	cf 91       	pop	r28
     606:	1f 91       	pop	r17
     608:	0f 91       	pop	r16
     60a:	ff 90       	pop	r15
     60c:	df 90       	pop	r13
     60e:	cf 90       	pop	r12
     610:	bf 90       	pop	r11
     612:	af 90       	pop	r10
     614:	08 95       	ret

00000616 <DiscStop>:
 *  Author: Coder Rajat
 */ 


void DiscStop()
{
     616:	0f 93       	push	r16
	PWM('4','A',10000,0,TOGGLE);
     618:	02 e0       	ldi	r16, 0x02	; 2
     61a:	20 e0       	ldi	r18, 0x00	; 0
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	40 e1       	ldi	r20, 0x10	; 16
     620:	57 e2       	ldi	r21, 0x27	; 39
     622:	61 e4       	ldi	r22, 0x41	; 65
     624:	84 e3       	ldi	r24, 0x34	; 52
     626:	0e 94 45 01 	call	0x28a	; 0x28a <PWM>
}
     62a:	0f 91       	pop	r16
     62c:	08 95       	ret

0000062e <DiscRight>:

void DiscRight(uint8_t s)
{
     62e:	0f 93       	push	r16
	PWM('4','A',10000,s,SET);
     630:	01 e0       	ldi	r16, 0x01	; 1
     632:	28 2f       	mov	r18, r24
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	40 e1       	ldi	r20, 0x10	; 16
     638:	57 e2       	ldi	r21, 0x27	; 39
     63a:	61 e4       	ldi	r22, 0x41	; 65
     63c:	84 e3       	ldi	r24, 0x34	; 52
     63e:	0e 94 45 01 	call	0x28a	; 0x28a <PWM>
}
     642:	0f 91       	pop	r16
     644:	08 95       	ret

00000646 <DiscLeft>:

void DiscLeft(uint8_t s)
{
     646:	0f 93       	push	r16
	PWM('4','A',10000,s,CLEAR);
     648:	00 e0       	ldi	r16, 0x00	; 0
     64a:	28 2f       	mov	r18, r24
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	40 e1       	ldi	r20, 0x10	; 16
     650:	57 e2       	ldi	r21, 0x27	; 39
     652:	61 e4       	ldi	r22, 0x41	; 65
     654:	84 e3       	ldi	r24, 0x34	; 52
     656:	0e 94 45 01 	call	0x28a	; 0x28a <PWM>
}
     65a:	0f 91       	pop	r16
     65c:	08 95       	ret

0000065e <LeftFwd>:

void LeftFwd(int speed)
{
     65e:	0f 93       	push	r16
	SETBIT(PORTJ,BIT(0));
     660:	e5 e0       	ldi	r30, 0x05	; 5
     662:	f1 e0       	ldi	r31, 0x01	; 1
     664:	20 81       	ld	r18, Z
     666:	21 60       	ori	r18, 0x01	; 1
     668:	20 83       	st	Z, r18
	CLEARBIT(PORTJ,BIT(1));
     66a:	20 81       	ld	r18, Z
     66c:	2d 7f       	andi	r18, 0xFD	; 253
     66e:	20 83       	st	Z, r18
	PWM('3','A',10000,speed,CLEAR);
     670:	00 e0       	ldi	r16, 0x00	; 0
     672:	9c 01       	movw	r18, r24
     674:	40 e1       	ldi	r20, 0x10	; 16
     676:	57 e2       	ldi	r21, 0x27	; 39
     678:	61 e4       	ldi	r22, 0x41	; 65
     67a:	83 e3       	ldi	r24, 0x33	; 51
     67c:	0e 94 45 01 	call	0x28a	; 0x28a <PWM>
}
     680:	0f 91       	pop	r16
     682:	08 95       	ret

00000684 <LeftRev>:

void LeftRev(int speed)
{
     684:	0f 93       	push	r16
	SETBIT(PORTJ,BIT(1));
     686:	e5 e0       	ldi	r30, 0x05	; 5
     688:	f1 e0       	ldi	r31, 0x01	; 1
     68a:	20 81       	ld	r18, Z
     68c:	22 60       	ori	r18, 0x02	; 2
     68e:	20 83       	st	Z, r18
	CLEARBIT(PORTJ,BIT(0));
     690:	20 81       	ld	r18, Z
     692:	2e 7f       	andi	r18, 0xFE	; 254
     694:	20 83       	st	Z, r18
	PWM('3','A',10000,speed,CLEAR);
     696:	00 e0       	ldi	r16, 0x00	; 0
     698:	9c 01       	movw	r18, r24
     69a:	40 e1       	ldi	r20, 0x10	; 16
     69c:	57 e2       	ldi	r21, 0x27	; 39
     69e:	61 e4       	ldi	r22, 0x41	; 65
     6a0:	83 e3       	ldi	r24, 0x33	; 51
     6a2:	0e 94 45 01 	call	0x28a	; 0x28a <PWM>
}
     6a6:	0f 91       	pop	r16
     6a8:	08 95       	ret

000006aa <LeftStop>:

void LeftStop()
{
     6aa:	0f 93       	push	r16
	SETBIT(PORTJ,BIT(0));
     6ac:	e5 e0       	ldi	r30, 0x05	; 5
     6ae:	f1 e0       	ldi	r31, 0x01	; 1
     6b0:	80 81       	ld	r24, Z
     6b2:	81 60       	ori	r24, 0x01	; 1
     6b4:	80 83       	st	Z, r24
	CLEARBIT(PORTJ,BIT(1));
     6b6:	80 81       	ld	r24, Z
     6b8:	8d 7f       	andi	r24, 0xFD	; 253
     6ba:	80 83       	st	Z, r24
	PWM('3','A',10000,20,CLEAR);
     6bc:	00 e0       	ldi	r16, 0x00	; 0
     6be:	24 e1       	ldi	r18, 0x14	; 20
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	40 e1       	ldi	r20, 0x10	; 16
     6c4:	57 e2       	ldi	r21, 0x27	; 39
     6c6:	61 e4       	ldi	r22, 0x41	; 65
     6c8:	83 e3       	ldi	r24, 0x33	; 51
     6ca:	0e 94 45 01 	call	0x28a	; 0x28a <PWM>
}
     6ce:	0f 91       	pop	r16
     6d0:	08 95       	ret

000006d2 <RightFwd>:


void RightFwd(int speed)
{
     6d2:	0f 93       	push	r16
	SETBIT(PORTJ,BIT(3));
     6d4:	e5 e0       	ldi	r30, 0x05	; 5
     6d6:	f1 e0       	ldi	r31, 0x01	; 1
     6d8:	20 81       	ld	r18, Z
     6da:	28 60       	ori	r18, 0x08	; 8
     6dc:	20 83       	st	Z, r18
	CLEARBIT(PORTJ,BIT(2));
     6de:	20 81       	ld	r18, Z
     6e0:	2b 7f       	andi	r18, 0xFB	; 251
     6e2:	20 83       	st	Z, r18
	PWM('3','B',10000,speed,CLEAR);
     6e4:	00 e0       	ldi	r16, 0x00	; 0
     6e6:	9c 01       	movw	r18, r24
     6e8:	40 e1       	ldi	r20, 0x10	; 16
     6ea:	57 e2       	ldi	r21, 0x27	; 39
     6ec:	62 e4       	ldi	r22, 0x42	; 66
     6ee:	83 e3       	ldi	r24, 0x33	; 51
     6f0:	0e 94 45 01 	call	0x28a	; 0x28a <PWM>
}
     6f4:	0f 91       	pop	r16
     6f6:	08 95       	ret

000006f8 <RightRev>:

void RightRev(int speed)
{
     6f8:	0f 93       	push	r16
	SETBIT(PORTJ,BIT(2));
     6fa:	e5 e0       	ldi	r30, 0x05	; 5
     6fc:	f1 e0       	ldi	r31, 0x01	; 1
     6fe:	20 81       	ld	r18, Z
     700:	24 60       	ori	r18, 0x04	; 4
     702:	20 83       	st	Z, r18
	CLEARBIT(PORTJ,BIT(3));
     704:	20 81       	ld	r18, Z
     706:	27 7f       	andi	r18, 0xF7	; 247
     708:	20 83       	st	Z, r18
	PWM('3','B',10000,speed,CLEAR);
     70a:	00 e0       	ldi	r16, 0x00	; 0
     70c:	9c 01       	movw	r18, r24
     70e:	40 e1       	ldi	r20, 0x10	; 16
     710:	57 e2       	ldi	r21, 0x27	; 39
     712:	62 e4       	ldi	r22, 0x42	; 66
     714:	83 e3       	ldi	r24, 0x33	; 51
     716:	0e 94 45 01 	call	0x28a	; 0x28a <PWM>
}
     71a:	0f 91       	pop	r16
     71c:	08 95       	ret

0000071e <RightStop>:

void RightStop()
{	
     71e:	0f 93       	push	r16
	SETBIT(PORTJ,BIT(3));
     720:	e5 e0       	ldi	r30, 0x05	; 5
     722:	f1 e0       	ldi	r31, 0x01	; 1
     724:	80 81       	ld	r24, Z
     726:	88 60       	ori	r24, 0x08	; 8
     728:	80 83       	st	Z, r24
	CLEARBIT(PORTJ,BIT(2));
     72a:	80 81       	ld	r24, Z
     72c:	8b 7f       	andi	r24, 0xFB	; 251
     72e:	80 83       	st	Z, r24
	PWM('3','B',10000,20,CLEAR);
     730:	00 e0       	ldi	r16, 0x00	; 0
     732:	24 e1       	ldi	r18, 0x14	; 20
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	40 e1       	ldi	r20, 0x10	; 16
     738:	57 e2       	ldi	r21, 0x27	; 39
     73a:	62 e4       	ldi	r22, 0x42	; 66
     73c:	83 e3       	ldi	r24, 0x33	; 51
     73e:	0e 94 45 01 	call	0x28a	; 0x28a <PWM>
}
     742:	0f 91       	pop	r16
     744:	08 95       	ret

00000746 <MainPullyStop>:


void MainPullyStop()
{
     746:	0f 93       	push	r16
	PWM('4','B',10000,10,CLEAR);
     748:	00 e0       	ldi	r16, 0x00	; 0
     74a:	2a e0       	ldi	r18, 0x0A	; 10
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	40 e1       	ldi	r20, 0x10	; 16
     750:	57 e2       	ldi	r21, 0x27	; 39
     752:	62 e4       	ldi	r22, 0x42	; 66
     754:	84 e3       	ldi	r24, 0x34	; 52
     756:	0e 94 45 01 	call	0x28a	; 0x28a <PWM>
}
     75a:	0f 91       	pop	r16
     75c:	08 95       	ret

0000075e <MainPullyUp>:

void MainPullyUp()
{
     75e:	0f 93       	push	r16
	PWM('4','B',10000,100,CLEAR);
     760:	00 e0       	ldi	r16, 0x00	; 0
     762:	24 e6       	ldi	r18, 0x64	; 100
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	40 e1       	ldi	r20, 0x10	; 16
     768:	57 e2       	ldi	r21, 0x27	; 39
     76a:	62 e4       	ldi	r22, 0x42	; 66
     76c:	84 e3       	ldi	r24, 0x34	; 52
     76e:	0e 94 45 01 	call	0x28a	; 0x28a <PWM>
}
     772:	0f 91       	pop	r16
     774:	08 95       	ret

00000776 <MainPullyDown>:

void MainPullyDown()
{
     776:	0f 93       	push	r16
	PWM('4','B',10000,100,SET);
     778:	01 e0       	ldi	r16, 0x01	; 1
     77a:	24 e6       	ldi	r18, 0x64	; 100
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	40 e1       	ldi	r20, 0x10	; 16
     780:	57 e2       	ldi	r21, 0x27	; 39
     782:	62 e4       	ldi	r22, 0x42	; 66
     784:	84 e3       	ldi	r24, 0x34	; 52
     786:	0e 94 45 01 	call	0x28a	; 0x28a <PWM>
}
     78a:	0f 91       	pop	r16
     78c:	08 95       	ret

0000078e <Pully2Stop>:


void Pully2Stop()
{
     78e:	0f 93       	push	r16
	PWM('5','A',10000,2,CLEAR);
     790:	00 e0       	ldi	r16, 0x00	; 0
     792:	22 e0       	ldi	r18, 0x02	; 2
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	40 e1       	ldi	r20, 0x10	; 16
     798:	57 e2       	ldi	r21, 0x27	; 39
     79a:	61 e4       	ldi	r22, 0x41	; 65
     79c:	85 e3       	ldi	r24, 0x35	; 53
     79e:	0e 94 45 01 	call	0x28a	; 0x28a <PWM>
}
     7a2:	0f 91       	pop	r16
     7a4:	08 95       	ret

000007a6 <Pully2Up>:

void Pully2Up()
{
     7a6:	0f 93       	push	r16
	PWM('5','A',10000,100,CLEAR);
     7a8:	00 e0       	ldi	r16, 0x00	; 0
     7aa:	24 e6       	ldi	r18, 0x64	; 100
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	40 e1       	ldi	r20, 0x10	; 16
     7b0:	57 e2       	ldi	r21, 0x27	; 39
     7b2:	61 e4       	ldi	r22, 0x41	; 65
     7b4:	85 e3       	ldi	r24, 0x35	; 53
     7b6:	0e 94 45 01 	call	0x28a	; 0x28a <PWM>
}
     7ba:	0f 91       	pop	r16
     7bc:	08 95       	ret

000007be <Pully2Down>:

void Pully2Down()
{
     7be:	0f 93       	push	r16
	PWM('5','A',10000,100,SET);
     7c0:	01 e0       	ldi	r16, 0x01	; 1
     7c2:	24 e6       	ldi	r18, 0x64	; 100
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e1       	ldi	r20, 0x10	; 16
     7c8:	57 e2       	ldi	r21, 0x27	; 39
     7ca:	61 e4       	ldi	r22, 0x41	; 65
     7cc:	85 e3       	ldi	r24, 0x35	; 53
     7ce:	0e 94 45 01 	call	0x28a	; 0x28a <PWM>
}
     7d2:	0f 91       	pop	r16
     7d4:	08 95       	ret

000007d6 <ExecuteSeeSaw>:

void ExecuteSeeSaw()
{
	PORTA |= (1<<PA3);
     7d6:	13 9a       	sbi	0x02, 3	; 2
     7d8:	83 e0       	ldi	r24, 0x03	; 3
     7da:	90 e0       	ldi	r25, 0x00	; 0
	//PORTA |= (1<<PA5);
	for(int i = 0; i < 3; i++)
	{
		PORTA |= (1<<PA1);
     7dc:	11 9a       	sbi	0x02, 1	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7de:	2f ef       	ldi	r18, 0xFF	; 255
     7e0:	3f ef       	ldi	r19, 0xFF	; 255
     7e2:	4c e2       	ldi	r20, 0x2C	; 44
     7e4:	21 50       	subi	r18, 0x01	; 1
     7e6:	30 40       	sbci	r19, 0x00	; 0
     7e8:	40 40       	sbci	r20, 0x00	; 0
     7ea:	e1 f7       	brne	.-8      	; 0x7e4 <ExecuteSeeSaw+0xe>
     7ec:	00 c0       	rjmp	.+0      	; 0x7ee <ExecuteSeeSaw+0x18>
     7ee:	00 00       	nop
		_delay_ms(1000);
		PORTA &= ~(1<<PA1);
     7f0:	11 98       	cbi	0x02, 1	; 2
     7f2:	2f ef       	ldi	r18, 0xFF	; 255
     7f4:	3f ef       	ldi	r19, 0xFF	; 255
     7f6:	4c e2       	ldi	r20, 0x2C	; 44
     7f8:	21 50       	subi	r18, 0x01	; 1
     7fa:	30 40       	sbci	r19, 0x00	; 0
     7fc:	40 40       	sbci	r20, 0x00	; 0
     7fe:	e1 f7       	brne	.-8      	; 0x7f8 <ExecuteSeeSaw+0x22>
     800:	00 c0       	rjmp	.+0      	; 0x802 <ExecuteSeeSaw+0x2c>
     802:	00 00       	nop
     804:	01 97       	sbiw	r24, 0x01	; 1

void ExecuteSeeSaw()
{
	PORTA |= (1<<PA3);
	//PORTA |= (1<<PA5);
	for(int i = 0; i < 3; i++)
     806:	51 f7       	brne	.-44     	; 0x7dc <ExecuteSeeSaw+0x6>
		PORTA |= (1<<PA1);
		_delay_ms(1000);
		PORTA &= ~(1<<PA1);
		_delay_ms(1000);
	}
	PORTA &= ~(1<<PA3);
     808:	13 98       	cbi	0x02, 3	; 2
	PORTA &= ~(1<<PA1);
     80a:	11 98       	cbi	0x02, 1	; 2
     80c:	08 95       	ret

0000080e <pid>:
float corr = 0;

uint8_t EncoderStarted = 0;

void pid(void)
{
     80e:	cf 92       	push	r12
     810:	df 92       	push	r13
     812:	ef 92       	push	r14
     814:	ff 92       	push	r15
     816:	1f 93       	push	r17
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
	//get the sensor input

	if(bit_is_set(PIN_sen, sen1))
     81c:	35 9b       	sbis	0x06, 5	; 6
     81e:	02 c0       	rjmp	.+4      	; 0x824 <pid+0x16>
		err = 3;
     820:	83 e0       	ldi	r24, 0x03	; 3
     822:	03 c0       	rjmp	.+6      	; 0x82a <pid+0x1c>
	else if(bit_is_set(PIN_sen, sen2))
     824:	34 9b       	sbis	0x06, 4	; 6
     826:	04 c0       	rjmp	.+8      	; 0x830 <pid+0x22>
		err = 2.4;
     828:	82 e0       	ldi	r24, 0x02	; 2
     82a:	80 93 16 02 	sts	0x0216, r24
     82e:	0a c0       	rjmp	.+20     	; 0x844 <pid+0x36>
	else if(bit_is_set(PIN_sen, sen3))
     830:	31 99       	sbic	0x06, 1	; 6
     832:	fa cf       	rjmp	.-12     	; 0x828 <pid+0x1a>
		err = 2.2;
	else if(bit_is_set(PIN_sen, sen4))
     834:	32 99       	sbic	0x06, 2	; 6
     836:	f8 cf       	rjmp	.-16     	; 0x828 <pid+0x1a>
		err = 2;
	else if(bit_is_set(PIN_sen, sen5))
     838:	33 9b       	sbis	0x06, 3	; 6
     83a:	02 c0       	rjmp	.+4      	; 0x840 <pid+0x32>
		err = 1;
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	f5 cf       	rjmp	.-22     	; 0x82a <pid+0x1c>
	else
		err = -0.1;
     840:	10 92 16 02 	sts	0x0216, r1
	
	
	inst_err = err - prev_err;
     844:	c0 91 16 02 	lds	r28, 0x0216
     848:	80 91 13 02 	lds	r24, 0x0213
     84c:	1c 2f       	mov	r17, r28
     84e:	18 1b       	sub	r17, r24
     850:	10 93 14 02 	sts	0x0214, r17
	corr = p*err + i*acc_err + d*inst_err;
     854:	d0 91 15 02 	lds	r29, 0x0215
     858:	6c 2f       	mov	r22, r28
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	0e 94 c0 06 	call	0xd80	; 0xd80 <__floatsisf>
     864:	20 91 08 02 	lds	r18, 0x0208
     868:	30 91 09 02 	lds	r19, 0x0209
     86c:	40 91 0a 02 	lds	r20, 0x020A
     870:	50 91 0b 02 	lds	r21, 0x020B
     874:	0e 94 8c 07 	call	0xf18	; 0xf18 <__mulsf3>
     878:	6b 01       	movw	r12, r22
     87a:	7c 01       	movw	r14, r24
     87c:	6d 2f       	mov	r22, r29
     87e:	70 e0       	ldi	r23, 0x00	; 0
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	0e 94 c0 06 	call	0xd80	; 0xd80 <__floatsisf>
     888:	20 91 04 02 	lds	r18, 0x0204
     88c:	30 91 05 02 	lds	r19, 0x0205
     890:	40 91 06 02 	lds	r20, 0x0206
     894:	50 91 07 02 	lds	r21, 0x0207
     898:	0e 94 8c 07 	call	0xf18	; 0xf18 <__mulsf3>
     89c:	9b 01       	movw	r18, r22
     89e:	ac 01       	movw	r20, r24
     8a0:	c7 01       	movw	r24, r14
     8a2:	b6 01       	movw	r22, r12
     8a4:	0e 94 16 06 	call	0xc2c	; 0xc2c <__addsf3>
     8a8:	6b 01       	movw	r12, r22
     8aa:	7c 01       	movw	r14, r24
     8ac:	61 2f       	mov	r22, r17
     8ae:	70 e0       	ldi	r23, 0x00	; 0
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	0e 94 c0 06 	call	0xd80	; 0xd80 <__floatsisf>
     8b8:	20 91 00 02 	lds	r18, 0x0200
     8bc:	30 91 01 02 	lds	r19, 0x0201
     8c0:	40 91 02 02 	lds	r20, 0x0202
     8c4:	50 91 03 02 	lds	r21, 0x0203
     8c8:	0e 94 8c 07 	call	0xf18	; 0xf18 <__mulsf3>
     8cc:	9b 01       	movw	r18, r22
     8ce:	ac 01       	movw	r20, r24
     8d0:	c7 01       	movw	r24, r14
     8d2:	b6 01       	movw	r22, r12
     8d4:	0e 94 16 06 	call	0xc2c	; 0xc2c <__addsf3>
     8d8:	60 93 0f 02 	sts	0x020F, r22
     8dc:	70 93 10 02 	sts	0x0210, r23
     8e0:	80 93 11 02 	sts	0x0211, r24
     8e4:	90 93 12 02 	sts	0x0212, r25
	acc_err += err;
     8e8:	dc 0f       	add	r29, r28
     8ea:	d0 93 15 02 	sts	0x0215, r29
	prev_err = err;
     8ee:	c0 93 13 02 	sts	0x0213, r28

	PidStarted = 1;
     8f2:	21 e0       	ldi	r18, 0x01	; 1
     8f4:	20 93 17 02 	sts	0x0217, r18

	CLEARBIT(PORTJ,BIT(1));		// Direction Bits Left Base
     8f8:	20 91 05 01 	lds	r18, 0x0105
     8fc:	2d 7f       	andi	r18, 0xFD	; 253
     8fe:	20 93 05 01 	sts	0x0105, r18
	SETBIT(PORTJ,BIT(0));
     902:	20 91 05 01 	lds	r18, 0x0105
     906:	21 60       	ori	r18, 0x01	; 1
     908:	20 93 05 01 	sts	0x0105, r18
	SETBIT(PORTJ,BIT(3));		// Direction Bits Right Base
     90c:	20 91 05 01 	lds	r18, 0x0105
     910:	28 60       	ori	r18, 0x08	; 8
     912:	20 93 05 01 	sts	0x0105, r18
	CLEARBIT(PORTJ,BIT(2));
     916:	20 91 05 01 	lds	r18, 0x0105
     91a:	2b 7f       	andi	r18, 0xFB	; 251
     91c:	20 93 05 01 	sts	0x0105, r18
	
	OCR3B = 350 + (int)(ceil(corr));
     920:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <ceil>
     924:	0e 94 8d 06 	call	0xd1a	; 0xd1a <__fixsfsi>
     928:	cb 01       	movw	r24, r22
     92a:	82 5a       	subi	r24, 0xA2	; 162
     92c:	9e 4f       	sbci	r25, 0xFE	; 254
     92e:	90 93 9b 00 	sts	0x009B, r25
     932:	80 93 9a 00 	sts	0x009A, r24
	OCR3A = 400 - (int)(ceil(corr));
     936:	80 e9       	ldi	r24, 0x90	; 144
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	86 1b       	sub	r24, r22
     93c:	97 0b       	sbc	r25, r23
     93e:	90 93 99 00 	sts	0x0099, r25
     942:	80 93 98 00 	sts	0x0098, r24
}
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	1f 91       	pop	r17
     94c:	ff 90       	pop	r15
     94e:	ef 90       	pop	r14
     950:	df 90       	pop	r13
     952:	cf 90       	pop	r12
     954:	08 95       	ret

00000956 <ProcessADC>:

void ProcessADC(uint8_t analogData)
{
	speed = 20+analogData/3;
     956:	9b ea       	ldi	r25, 0xAB	; 171
     958:	89 9f       	mul	r24, r25
     95a:	81 2d       	mov	r24, r1
     95c:	11 24       	eor	r1, r1
     95e:	86 95       	lsr	r24
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	44 96       	adiw	r24, 0x14	; 20
	if (speed >= 85)
     964:	85 35       	cpi	r24, 0x55	; 85
     966:	91 05       	cpc	r25, r1
     968:	0c f4       	brge	.+2      	; 0x96c <ProcessADC+0x16>
     96a:	02 c0       	rjmp	.+4      	; 0x970 <ProcessADC+0x1a>
	{
		speed = 85;
     96c:	85 e5       	ldi	r24, 0x55	; 85
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	90 93 0d 02 	sts	0x020D, r25
     974:	80 93 0c 02 	sts	0x020C, r24
     978:	08 95       	ret

0000097a <ProcessPIND>:
void ProcessPIND( uint8_t data )		// 1 DPDT of DISC	
{
		//lcd_cmd(LINE2);
		//lcd_showvalue(data);
		
		if( !(CHECKBIT(data,BIT(6))) && (CHECKBIT(data,BIT(7))) )						// DISC MOTORS
     97a:	86 fd       	sbrc	r24, 6
     97c:	08 c0       	rjmp	.+16     	; 0x98e <ProcessPIND+0x14>
     97e:	87 ff       	sbrs	r24, 7
     980:	16 c0       	rjmp	.+44     	; 0x9ae <ProcessPIND+0x34>
		{
			DiscStarted = 1;
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	80 93 1c 02 	sts	0x021C, r24
			DiscRight(100);
     988:	84 e6       	ldi	r24, 0x64	; 100
     98a:	0c 94 17 03 	jmp	0x62e	; 0x62e <DiscRight>
		}
		else if ( ((CHECKBIT(data,BIT(6))) && !(CHECKBIT(data,BIT(7)))) )
     98e:	87 fd       	sbrc	r24, 7
     990:	06 c0       	rjmp	.+12     	; 0x99e <ProcessPIND+0x24>
		{
			DiscStarted = 1;
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	80 93 1c 02 	sts	0x021C, r24
			DiscLeft(100);
     998:	84 e6       	ldi	r24, 0x64	; 100
     99a:	0c 94 23 03 	jmp	0x646	; 0x646 <DiscLeft>
		}
		else if ( ((CHECKBIT(data,BIT(6))) && (CHECKBIT(data,BIT(7)))) )
		{
			if (DiscStarted == 1)
     99e:	80 91 1c 02 	lds	r24, 0x021C
     9a2:	81 30       	cpi	r24, 0x01	; 1
     9a4:	21 f4       	brne	.+8      	; 0x9ae <ProcessPIND+0x34>
			{
				DiscStop();
     9a6:	0e 94 0b 03 	call	0x616	; 0x616 <DiscStop>
				DiscStarted = 0;
     9aa:	10 92 1c 02 	sts	0x021C, r1
     9ae:	08 95       	ret

000009b0 <ProcessPINC>:
			}
		}		
}

void ProcessPINC( uint8_t data )	// 4 DPDT
{
     9b0:	cf 93       	push	r28
     9b2:	c8 2f       	mov	r28, r24
     9b4:	82 70       	andi	r24, 0x02	; 2
	//lcd_cmd(LINE1);
	//lcd_string("PINC");
	//lcd_showvalue(data);
	//lcd_string("  ");
	//
	if( (!(CHECKBIT(data,BIT(0)))) && (CHECKBIT(data,BIT(1))) )						// LEFT MOTORS
     9b6:	c0 fd       	sbrc	r28, 0
     9b8:	09 c0       	rjmp	.+18     	; 0x9cc <ProcessPINC+0x1c>
     9ba:	88 23       	and	r24, r24
     9bc:	d9 f0       	breq	.+54     	; 0x9f4 <ProcessPINC+0x44>
	{
			LeftFwd(speed);
     9be:	80 91 0c 02 	lds	r24, 0x020C
     9c2:	90 91 0d 02 	lds	r25, 0x020D
     9c6:	0e 94 2f 03 	call	0x65e	; 0x65e <LeftFwd>
     9ca:	08 c0       	rjmp	.+16     	; 0x9dc <ProcessPINC+0x2c>
			LeftStarted = 1;
	}
	else if ( ((CHECKBIT(data,BIT(0))) && (!(CHECKBIT(data,BIT(1))))) )
     9cc:	81 11       	cpse	r24, r1
     9ce:	0a c0       	rjmp	.+20     	; 0x9e4 <ProcessPINC+0x34>
	{
			LeftRev(speed);
     9d0:	80 91 0c 02 	lds	r24, 0x020C
     9d4:	90 91 0d 02 	lds	r25, 0x020D
     9d8:	0e 94 42 03 	call	0x684	; 0x684 <LeftRev>
			LeftStarted = 1;
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	80 93 18 02 	sts	0x0218, r24
     9e2:	08 c0       	rjmp	.+16     	; 0x9f4 <ProcessPINC+0x44>
	}
	else if ( ((CHECKBIT(data,BIT(0))) && (CHECKBIT(data,BIT(1)))) )
	{
		if (LeftStarted == 1)
     9e4:	80 91 18 02 	lds	r24, 0x0218
     9e8:	81 30       	cpi	r24, 0x01	; 1
     9ea:	21 f4       	brne	.+8      	; 0x9f4 <ProcessPINC+0x44>
		{
			LeftStop();
     9ec:	0e 94 55 03 	call	0x6aa	; 0x6aa <LeftStop>
			LeftStarted = 0;
     9f0:	10 92 18 02 	sts	0x0218, r1
     9f4:	8c 2f       	mov	r24, r28
     9f6:	88 70       	andi	r24, 0x08	; 8
		}		
	}	
	
	if( (!(CHECKBIT(data,BIT(2)))) && (CHECKBIT(data,BIT(3))) )						// RIGHT MOTORS
     9f8:	c2 fd       	sbrc	r28, 2
     9fa:	09 c0       	rjmp	.+18     	; 0xa0e <ProcessPINC+0x5e>
     9fc:	88 23       	and	r24, r24
     9fe:	d9 f0       	breq	.+54     	; 0xa36 <ProcessPINC+0x86>
	{
			RightRev(speed);
     a00:	80 91 0c 02 	lds	r24, 0x020C
     a04:	90 91 0d 02 	lds	r25, 0x020D
     a08:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <RightRev>
     a0c:	08 c0       	rjmp	.+16     	; 0xa1e <ProcessPINC+0x6e>
			RightStarted = 1;
	}
	else if ( ((CHECKBIT(data,BIT(2))) && (!(CHECKBIT(data,BIT(3))))) )
     a0e:	81 11       	cpse	r24, r1
     a10:	0a c0       	rjmp	.+20     	; 0xa26 <ProcessPINC+0x76>
	{
			RightFwd(speed);
     a12:	80 91 0c 02 	lds	r24, 0x020C
     a16:	90 91 0d 02 	lds	r25, 0x020D
     a1a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <RightFwd>
			RightStarted = 1;
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	80 93 19 02 	sts	0x0219, r24
     a24:	08 c0       	rjmp	.+16     	; 0xa36 <ProcessPINC+0x86>
	}
	else if ( ((CHECKBIT(data,BIT(2))) && (CHECKBIT(data,BIT(3)))) )
	{
		if (RightStarted == 1)
     a26:	80 91 19 02 	lds	r24, 0x0219
     a2a:	81 30       	cpi	r24, 0x01	; 1
     a2c:	21 f4       	brne	.+8      	; 0xa36 <ProcessPINC+0x86>
		{
			RightStop();
     a2e:	0e 94 8f 03 	call	0x71e	; 0x71e <RightStop>
			RightStarted = 0;
     a32:	10 92 19 02 	sts	0x0219, r1
     a36:	8c 2f       	mov	r24, r28
     a38:	80 72       	andi	r24, 0x20	; 32
		}
	}
	
	
	if( (!(CHECKBIT(data,BIT(4)))) && (CHECKBIT(data,BIT(5))) )						// MAIN PULLY MOTORS
     a3a:	c4 fd       	sbrc	r28, 4
     a3c:	08 c0       	rjmp	.+16     	; 0xa4e <ProcessPINC+0x9e>
     a3e:	88 23       	and	r24, r24
     a40:	91 f0       	breq	.+36     	; 0xa66 <ProcessPINC+0xb6>
	{
			MainPullyStarted = 1;
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	80 93 1b 02 	sts	0x021B, r24
			MainPullyUp();
     a48:	0e 94 af 03 	call	0x75e	; 0x75e <MainPullyUp>
     a4c:	0c c0       	rjmp	.+24     	; 0xa66 <ProcessPINC+0xb6>
	}
	else if ( ((CHECKBIT(data,BIT(4))) && (!(CHECKBIT(data,BIT(5))))) )
     a4e:	81 11       	cpse	r24, r1
     a50:	06 c0       	rjmp	.+12     	; 0xa5e <ProcessPINC+0xae>
	{
			MainPullyStarted = 1;
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	80 93 1b 02 	sts	0x021B, r24
			MainPullyDown();
     a58:	0e 94 bb 03 	call	0x776	; 0x776 <MainPullyDown>
     a5c:	04 c0       	rjmp	.+8      	; 0xa66 <ProcessPINC+0xb6>
	}
	else if ( ((CHECKBIT(data,BIT(4))) && (CHECKBIT(data,BIT(5)))) )
	{
			MainPullyStarted = 0;
     a5e:	10 92 1b 02 	sts	0x021B, r1
			MainPullyStop();
     a62:	0e 94 a3 03 	call	0x746	; 0x746 <MainPullyStop>
	}
	
	
	if( !(CHECKBIT(data,BIT(6))) && (CHECKBIT(data,BIT(7))) )						// PULLY 2 MOTORS
     a66:	c6 fd       	sbrc	r28, 6
     a68:	0c c0       	rjmp	.+24     	; 0xa82 <ProcessPINC+0xd2>
     a6a:	c7 ff       	sbrs	r28, 7
     a6c:	1c c0       	rjmp	.+56     	; 0xaa6 <ProcessPINC+0xf6>
	{
		if (Pully2Started == 0)
     a6e:	80 91 1a 02 	lds	r24, 0x021A
     a72:	81 11       	cpse	r24, r1
     a74:	18 c0       	rjmp	.+48     	; 0xaa6 <ProcessPINC+0xf6>
		{
			Pully2Started = 1;
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	80 93 1a 02 	sts	0x021A, r24
		{
			Pully2Stop();
			Pully2Started = 0;
		}
	}
}
     a7c:	cf 91       	pop	r28
	if( !(CHECKBIT(data,BIT(6))) && (CHECKBIT(data,BIT(7))) )						// PULLY 2 MOTORS
	{
		if (Pully2Started == 0)
		{
			Pully2Started = 1;
			Pully2Up();
     a7e:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <Pully2Up>
     a82:	80 91 1a 02 	lds	r24, 0x021A
		}
		
	}
	else if ( ((CHECKBIT(data,BIT(6))) && !(CHECKBIT(data,BIT(7)))) )
     a86:	c7 fd       	sbrc	r28, 7
     a88:	08 c0       	rjmp	.+16     	; 0xa9a <ProcessPINC+0xea>
	{
		if (Pully2Started == 0)
     a8a:	81 11       	cpse	r24, r1
     a8c:	0c c0       	rjmp	.+24     	; 0xaa6 <ProcessPINC+0xf6>
		{
			Pully2Started = 1;
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	80 93 1a 02 	sts	0x021A, r24
		{
			Pully2Stop();
			Pully2Started = 0;
		}
	}
}
     a94:	cf 91       	pop	r28
	else if ( ((CHECKBIT(data,BIT(6))) && !(CHECKBIT(data,BIT(7)))) )
	{
		if (Pully2Started == 0)
		{
			Pully2Started = 1;
			Pully2Down();
     a96:	0c 94 df 03 	jmp	0x7be	; 0x7be <Pully2Down>
		}		
	}
	else if ( ((CHECKBIT(data,BIT(6))) && (CHECKBIT(data,BIT(7)))) )
	{
		if (Pully2Started == 1)
     a9a:	81 30       	cpi	r24, 0x01	; 1
     a9c:	21 f4       	brne	.+8      	; 0xaa6 <ProcessPINC+0xf6>
		{
			Pully2Stop();
     a9e:	0e 94 c7 03 	call	0x78e	; 0x78e <Pully2Stop>
			Pully2Started = 0;
     aa2:	10 92 1a 02 	sts	0x021A, r1
		}
	}
}
     aa6:	cf 91       	pop	r28
     aa8:	08 95       	ret

00000aaa <ProcessPINA>:
{
	
}

void ProcessPINA( uint8_t data )		// PID + PNEUMATICS (data Switches)
{
     aaa:	cf 93       	push	r28
     aac:	c8 2f       	mov	r28, r24
	if ( !(CHECKBIT(data,BIT(0))) )
     aae:	80 fd       	sbrc	r24, 0
     ab0:	03 c0       	rjmp	.+6      	; 0xab8 <ProcessPINA+0xe>
	{
		pid();
     ab2:	0e 94 07 04 	call	0x80e	; 0x80e <pid>
     ab6:	0a c0       	rjmp	.+20     	; 0xacc <ProcessPINA+0x22>
	}
	else if ((CHECKBIT(data,BIT(0))))
	{
		if(PidStarted == 1)
     ab8:	80 91 17 02 	lds	r24, 0x0217
     abc:	81 30       	cpi	r24, 0x01	; 1
     abe:	31 f4       	brne	.+12     	; 0xacc <ProcessPINA+0x22>
		{
			PidStarted = 0;
     ac0:	10 92 17 02 	sts	0x0217, r1
			LeftStop();
     ac4:	0e 94 55 03 	call	0x6aa	; 0x6aa <LeftStop>
			RightStop();
     ac8:	0e 94 8f 03 	call	0x71e	; 0x71e <RightStop>
		}
	}
	
	
	if ( !(CHECKBIT(data,BIT(1))))
     acc:	c1 ff       	sbrs	r28, 1
	{
		ExecuteSeeSaw();
     ace:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <ExecuteSeeSaw>
	}
	
	if (!(CHECKBIT(data,BIT(2))))
     ad2:	c2 fd       	sbrc	r28, 2
     ad4:	39 c0       	rjmp	.+114    	; 0xb48 <ProcessPINA+0x9e>
	{
		//lcd_cmd(LINE1);
		//lcd_showvalue(TCNT1);
		//lcd_string("  ");
		
		EncoderStarted = 1;
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	80 93 0e 02 	sts	0x020E, r24
		
		if (TCNT1 < 870)
     adc:	20 91 84 00 	lds	r18, 0x0084
     ae0:	30 91 85 00 	lds	r19, 0x0085
     ae4:	26 36       	cpi	r18, 0x66	; 102
     ae6:	33 40       	sbci	r19, 0x03	; 3
     ae8:	c0 f4       	brcc	.+48     	; 0xb1a <ProcessPINA+0x70>
		{
			LeftFwd(44 + TCNT1/50);
     aea:	80 91 84 00 	lds	r24, 0x0084
     aee:	90 91 85 00 	lds	r25, 0x0085
     af2:	62 e3       	ldi	r22, 0x32	; 50
     af4:	70 e0       	ldi	r23, 0x00	; 0
     af6:	0e 94 ef 07 	call	0xfde	; 0xfde <__udivmodhi4>
     afa:	cb 01       	movw	r24, r22
     afc:	8c 96       	adiw	r24, 0x2c	; 44
     afe:	0e 94 2f 03 	call	0x65e	; 0x65e <LeftFwd>
			RightFwd(58 + TCNT1/30);
     b02:	80 91 84 00 	lds	r24, 0x0084
     b06:	90 91 85 00 	lds	r25, 0x0085
     b0a:	6e e1       	ldi	r22, 0x1E	; 30
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	0e 94 ef 07 	call	0xfde	; 0xfde <__udivmodhi4>
     b12:	cb 01       	movw	r24, r22
     b14:	ca 96       	adiw	r24, 0x3a	; 58
     b16:	0e 94 69 03 	call	0x6d2	; 0x6d2 <RightFwd>
		}
		if (TCNT1 >= 870)
     b1a:	20 91 84 00 	lds	r18, 0x0084
     b1e:	30 91 85 00 	lds	r19, 0x0085
     b22:	26 36       	cpi	r18, 0x66	; 102
     b24:	33 40       	sbci	r19, 0x03	; 3
     b26:	38 f0       	brcs	.+14     	; 0xb36 <ProcessPINA+0x8c>
     b28:	02 c0       	rjmp	.+4      	; 0xb2e <ProcessPINA+0x84>
	}
	if ((CHECKBIT(data,BIT(2))))
	{
		if (EncoderStarted == 1)
		{
			EncoderStarted = 0;
     b2a:	10 92 0e 02 	sts	0x020E, r1
			LeftStop();
     b2e:	0e 94 55 03 	call	0x6aa	; 0x6aa <LeftStop>
			RightStop();
     b32:	0e 94 8f 03 	call	0x71e	; 0x71e <RightStop>
		}
	}
	
	if (!(CHECKBIT(data,BIT(3))))		// RED SWITCH (For Auto Reset)		// PA3
     b36:	c3 fd       	sbrc	r28, 3
     b38:	0c c0       	rjmp	.+24     	; 0xb52 <ProcessPINA+0xa8>
	{
		TCNT1 = 0;
     b3a:	10 92 85 00 	sts	0x0085, r1
     b3e:	10 92 84 00 	sts	0x0084, r1
		EncoderStarted = 0;
     b42:	10 92 0e 02 	sts	0x020E, r1
     b46:	05 c0       	rjmp	.+10     	; 0xb52 <ProcessPINA+0xa8>
			RightStop();
		}
	}
	if ((CHECKBIT(data,BIT(2))))
	{
		if (EncoderStarted == 1)
     b48:	80 91 0e 02 	lds	r24, 0x020E
     b4c:	81 30       	cpi	r24, 0x01	; 1
     b4e:	99 f7       	brne	.-26     	; 0xb36 <ProcessPINA+0x8c>
     b50:	ec cf       	rjmp	.-40     	; 0xb2a <ProcessPINA+0x80>
	{
		TCNT1 = 0;
		EncoderStarted = 0;
	}

}
     b52:	cf 91       	pop	r28
     b54:	08 95       	ret

00000b56 <UartReceive>:
    }
}

uint8_t UartReceive()
{
	while ( !( UCSR2A & (1<<RXC2)) );
     b56:	80 91 d0 00 	lds	r24, 0x00D0
     b5a:	87 ff       	sbrs	r24, 7
     b5c:	fc cf       	rjmp	.-8      	; 0xb56 <UartReceive>
	return UDR2;
     b5e:	80 91 d6 00 	lds	r24, 0x00D6
}
     b62:	08 95       	ret

00000b64 <UartInit>:

void UartInit()
{
//	SETBIT(DDRH,BIT(1));
//	CLEARBIT(DDRH,BIT(0));
	DDRH |= (1<<PH1);
     b64:	e1 e0       	ldi	r30, 0x01	; 1
     b66:	f1 e0       	ldi	r31, 0x01	; 1
     b68:	80 81       	ld	r24, Z
     b6a:	82 60       	ori	r24, 0x02	; 2
     b6c:	80 83       	st	Z, r24
	DDRH &= ~(1<<PH0);
     b6e:	80 81       	ld	r24, Z
     b70:	8e 7f       	andi	r24, 0xFE	; 254
     b72:	80 83       	st	Z, r24
	
	PORTH |= (1<<PH1);
     b74:	e2 e0       	ldi	r30, 0x02	; 2
     b76:	f1 e0       	ldi	r31, 0x01	; 1
     b78:	80 81       	ld	r24, Z
     b7a:	82 60       	ori	r24, 0x02	; 2
     b7c:	80 83       	st	Z, r24
	PORTH &= ~(1<<PH0);
     b7e:	80 81       	ld	r24, Z
     b80:	8e 7f       	andi	r24, 0xFE	; 254
     b82:	80 83       	st	Z, r24
	
	UCSR2B |= (1<<RXEN2) | (1<<TXEN2);
     b84:	e1 ed       	ldi	r30, 0xD1	; 209
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 81       	ld	r24, Z
     b8a:	88 61       	ori	r24, 0x18	; 24
     b8c:	80 83       	st	Z, r24
	UCSR2C |= (1<<UCSZ20) | (1<<UCSZ21);
     b8e:	e2 ed       	ldi	r30, 0xD2	; 210
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	86 60       	ori	r24, 0x06	; 6
     b96:	80 83       	st	Z, r24
	UCSR2A |= (1<<U2X2);
     b98:	e0 ed       	ldi	r30, 0xD0	; 208
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	82 60       	ori	r24, 0x02	; 2
     ba0:	80 83       	st	Z, r24
	
	UBRR2 = 191;
     ba2:	8f eb       	ldi	r24, 0xBF	; 191
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	90 93 d5 00 	sts	0x00D5, r25
     baa:	80 93 d4 00 	sts	0x00D4, r24
     bae:	08 95       	ret

00000bb0 <UartTransmit>:
	// Using Channel 2 of 640 Present at PORTH
}

void UartTransmit(uint8_t data)
{
	while ( !( UCSR2A & (1<<UDRE2)) );
     bb0:	90 91 d0 00 	lds	r25, 0x00D0
     bb4:	95 ff       	sbrs	r25, 5
     bb6:	fc cf       	rjmp	.-8      	; 0xbb0 <UartTransmit>
	UDR2 = data;
     bb8:	80 93 d6 00 	sts	0x00D6, r24
     bbc:	08 95       	ret

00000bbe <main>:

}

int main(void)
{
	lcd_init();	
     bbe:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_init>
	//sei();
	UartInit();
     bc2:	0e 94 b2 05 	call	0xb64	; 0xb64 <UartInit>
	uint8_t c;
	
	DDRJ = 0xFF;		// PORT FOR MAXON DIRECTIONS
     bc6:	8f ef       	ldi	r24, 0xFF	; 255
     bc8:	80 93 04 01 	sts	0x0104, r24
	PORTJ = 0x00;
     bcc:	10 92 05 01 	sts	0x0105, r1
	
	DDRC = 0x00;		// Sensor Array	of 5 and PC0 Pencil Sensor
     bd0:	17 b8       	out	0x07, r1	; 7
	PORTC = 0xFF;
     bd2:	88 b9       	out	0x08, r24	; 8
	
	CLEARBIT(DDRD,BIT(6));		// Encoder Port Initialization
     bd4:	56 98       	cbi	0x0a, 6	; 10
	SETBIT(PIND,BIT(6));
     bd6:	4e 9a       	sbi	0x09, 6	; 9
	
	TCCR1B = 0x07;		// Timer/Counter 1 Initialization for Encoder Count
     bd8:	87 e0       	ldi	r24, 0x07	; 7
     bda:	80 93 81 00 	sts	0x0081, r24
	TCNT1 = 0;
     bde:	10 92 85 00 	sts	0x0085, r1
     be2:	10 92 84 00 	sts	0x0084, r1
		
    while(1)
    {
		UartTransmit(50);
     be6:	82 e3       	ldi	r24, 0x32	; 50
     be8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <UartTransmit>
		ProcessPINA(UartReceive());
     bec:	0e 94 ab 05 	call	0xb56	; 0xb56 <UartReceive>
     bf0:	0e 94 55 05 	call	0xaaa	; 0xaaa <ProcessPINA>
		
		UartTransmit(60);
     bf4:	8c e3       	ldi	r24, 0x3C	; 60
     bf6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <UartTransmit>
		ProcessPINB(UartReceive());
     bfa:	0e 94 ab 05 	call	0xb56	; 0xb56 <UartReceive>
		
		UartTransmit(70);
     bfe:	86 e4       	ldi	r24, 0x46	; 70
     c00:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <UartTransmit>
		ProcessPINC(UartReceive());
     c04:	0e 94 ab 05 	call	0xb56	; 0xb56 <UartReceive>
     c08:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <ProcessPINC>
		
		UartTransmit(80);
     c0c:	80 e5       	ldi	r24, 0x50	; 80
     c0e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <UartTransmit>
		ProcessPIND(UartReceive());
     c12:	0e 94 ab 05 	call	0xb56	; 0xb56 <UartReceive>
     c16:	0e 94 bd 04 	call	0x97a	; 0x97a <ProcessPIND>
		
		UartTransmit(90);
     c1a:	8a e5       	ldi	r24, 0x5A	; 90
     c1c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <UartTransmit>
		ProcessADC(UartReceive());
     c20:	0e 94 ab 05 	call	0xb56	; 0xb56 <UartReceive>
     c24:	0e 94 ab 04 	call	0x956	; 0x956 <ProcessADC>
     c28:	de cf       	rjmp	.-68     	; 0xbe6 <main+0x28>

00000c2a <__subsf3>:
     c2a:	50 58       	subi	r21, 0x80	; 128

00000c2c <__addsf3>:
     c2c:	bb 27       	eor	r27, r27
     c2e:	aa 27       	eor	r26, r26
     c30:	0e d0       	rcall	.+28     	; 0xc4e <__addsf3x>
     c32:	21 c1       	rjmp	.+578    	; 0xe76 <__fp_round>
     c34:	12 d1       	rcall	.+548    	; 0xe5a <__fp_pscA>
     c36:	30 f0       	brcs	.+12     	; 0xc44 <__addsf3+0x18>
     c38:	17 d1       	rcall	.+558    	; 0xe68 <__fp_pscB>
     c3a:	20 f0       	brcs	.+8      	; 0xc44 <__addsf3+0x18>
     c3c:	31 f4       	brne	.+12     	; 0xc4a <__addsf3+0x1e>
     c3e:	9f 3f       	cpi	r25, 0xFF	; 255
     c40:	11 f4       	brne	.+4      	; 0xc46 <__addsf3+0x1a>
     c42:	1e f4       	brtc	.+6      	; 0xc4a <__addsf3+0x1e>
     c44:	07 c1       	rjmp	.+526    	; 0xe54 <__fp_nan>
     c46:	0e f4       	brtc	.+2      	; 0xc4a <__addsf3+0x1e>
     c48:	e0 95       	com	r30
     c4a:	e7 fb       	bst	r30, 7
     c4c:	d4 c0       	rjmp	.+424    	; 0xdf6 <__fp_inf>

00000c4e <__addsf3x>:
     c4e:	e9 2f       	mov	r30, r25
     c50:	23 d1       	rcall	.+582    	; 0xe98 <__fp_split3>
     c52:	80 f3       	brcs	.-32     	; 0xc34 <__addsf3+0x8>
     c54:	ba 17       	cp	r27, r26
     c56:	62 07       	cpc	r22, r18
     c58:	73 07       	cpc	r23, r19
     c5a:	84 07       	cpc	r24, r20
     c5c:	95 07       	cpc	r25, r21
     c5e:	18 f0       	brcs	.+6      	; 0xc66 <__addsf3x+0x18>
     c60:	71 f4       	brne	.+28     	; 0xc7e <__addsf3x+0x30>
     c62:	9e f5       	brtc	.+102    	; 0xcca <__addsf3x+0x7c>
     c64:	52 c1       	rjmp	.+676    	; 0xf0a <__fp_zero>
     c66:	0e f4       	brtc	.+2      	; 0xc6a <__addsf3x+0x1c>
     c68:	e0 95       	com	r30
     c6a:	0b 2e       	mov	r0, r27
     c6c:	ba 2f       	mov	r27, r26
     c6e:	a0 2d       	mov	r26, r0
     c70:	0b 01       	movw	r0, r22
     c72:	b9 01       	movw	r22, r18
     c74:	90 01       	movw	r18, r0
     c76:	0c 01       	movw	r0, r24
     c78:	ca 01       	movw	r24, r20
     c7a:	a0 01       	movw	r20, r0
     c7c:	11 24       	eor	r1, r1
     c7e:	ff 27       	eor	r31, r31
     c80:	59 1b       	sub	r21, r25
     c82:	99 f0       	breq	.+38     	; 0xcaa <__addsf3x+0x5c>
     c84:	59 3f       	cpi	r21, 0xF9	; 249
     c86:	50 f4       	brcc	.+20     	; 0xc9c <__addsf3x+0x4e>
     c88:	50 3e       	cpi	r21, 0xE0	; 224
     c8a:	68 f1       	brcs	.+90     	; 0xce6 <__addsf3x+0x98>
     c8c:	1a 16       	cp	r1, r26
     c8e:	f0 40       	sbci	r31, 0x00	; 0
     c90:	a2 2f       	mov	r26, r18
     c92:	23 2f       	mov	r18, r19
     c94:	34 2f       	mov	r19, r20
     c96:	44 27       	eor	r20, r20
     c98:	58 5f       	subi	r21, 0xF8	; 248
     c9a:	f3 cf       	rjmp	.-26     	; 0xc82 <__addsf3x+0x34>
     c9c:	46 95       	lsr	r20
     c9e:	37 95       	ror	r19
     ca0:	27 95       	ror	r18
     ca2:	a7 95       	ror	r26
     ca4:	f0 40       	sbci	r31, 0x00	; 0
     ca6:	53 95       	inc	r21
     ca8:	c9 f7       	brne	.-14     	; 0xc9c <__addsf3x+0x4e>
     caa:	7e f4       	brtc	.+30     	; 0xcca <__addsf3x+0x7c>
     cac:	1f 16       	cp	r1, r31
     cae:	ba 0b       	sbc	r27, r26
     cb0:	62 0b       	sbc	r22, r18
     cb2:	73 0b       	sbc	r23, r19
     cb4:	84 0b       	sbc	r24, r20
     cb6:	ba f0       	brmi	.+46     	; 0xce6 <__addsf3x+0x98>
     cb8:	91 50       	subi	r25, 0x01	; 1
     cba:	a1 f0       	breq	.+40     	; 0xce4 <__addsf3x+0x96>
     cbc:	ff 0f       	add	r31, r31
     cbe:	bb 1f       	adc	r27, r27
     cc0:	66 1f       	adc	r22, r22
     cc2:	77 1f       	adc	r23, r23
     cc4:	88 1f       	adc	r24, r24
     cc6:	c2 f7       	brpl	.-16     	; 0xcb8 <__addsf3x+0x6a>
     cc8:	0e c0       	rjmp	.+28     	; 0xce6 <__addsf3x+0x98>
     cca:	ba 0f       	add	r27, r26
     ccc:	62 1f       	adc	r22, r18
     cce:	73 1f       	adc	r23, r19
     cd0:	84 1f       	adc	r24, r20
     cd2:	48 f4       	brcc	.+18     	; 0xce6 <__addsf3x+0x98>
     cd4:	87 95       	ror	r24
     cd6:	77 95       	ror	r23
     cd8:	67 95       	ror	r22
     cda:	b7 95       	ror	r27
     cdc:	f7 95       	ror	r31
     cde:	9e 3f       	cpi	r25, 0xFE	; 254
     ce0:	08 f0       	brcs	.+2      	; 0xce4 <__addsf3x+0x96>
     ce2:	b3 cf       	rjmp	.-154    	; 0xc4a <__addsf3+0x1e>
     ce4:	93 95       	inc	r25
     ce6:	88 0f       	add	r24, r24
     ce8:	08 f0       	brcs	.+2      	; 0xcec <__addsf3x+0x9e>
     cea:	99 27       	eor	r25, r25
     cec:	ee 0f       	add	r30, r30
     cee:	97 95       	ror	r25
     cf0:	87 95       	ror	r24
     cf2:	08 95       	ret

00000cf4 <ceil>:
     cf4:	f3 d0       	rcall	.+486    	; 0xedc <__fp_trunc>
     cf6:	80 f0       	brcs	.+32     	; 0xd18 <ceil+0x24>
     cf8:	9f 37       	cpi	r25, 0x7F	; 127
     cfa:	40 f4       	brcc	.+16     	; 0xd0c <ceil+0x18>
     cfc:	91 11       	cpse	r25, r1
     cfe:	0e f4       	brtc	.+2      	; 0xd02 <ceil+0xe>
     d00:	05 c1       	rjmp	.+522    	; 0xf0c <__fp_szero>
     d02:	60 e0       	ldi	r22, 0x00	; 0
     d04:	70 e0       	ldi	r23, 0x00	; 0
     d06:	80 e8       	ldi	r24, 0x80	; 128
     d08:	9f e3       	ldi	r25, 0x3F	; 63
     d0a:	08 95       	ret
     d0c:	26 f0       	brts	.+8      	; 0xd16 <ceil+0x22>
     d0e:	1b 16       	cp	r1, r27
     d10:	61 1d       	adc	r22, r1
     d12:	71 1d       	adc	r23, r1
     d14:	81 1d       	adc	r24, r1
     d16:	75 c0       	rjmp	.+234    	; 0xe02 <__fp_mintl>
     d18:	8f c0       	rjmp	.+286    	; 0xe38 <__fp_mpack>

00000d1a <__fixsfsi>:
     d1a:	04 d0       	rcall	.+8      	; 0xd24 <__fixunssfsi>
     d1c:	68 94       	set
     d1e:	b1 11       	cpse	r27, r1
     d20:	f5 c0       	rjmp	.+490    	; 0xf0c <__fp_szero>
     d22:	08 95       	ret

00000d24 <__fixunssfsi>:
     d24:	c1 d0       	rcall	.+386    	; 0xea8 <__fp_splitA>
     d26:	88 f0       	brcs	.+34     	; 0xd4a <__fixunssfsi+0x26>
     d28:	9f 57       	subi	r25, 0x7F	; 127
     d2a:	90 f0       	brcs	.+36     	; 0xd50 <__fixunssfsi+0x2c>
     d2c:	b9 2f       	mov	r27, r25
     d2e:	99 27       	eor	r25, r25
     d30:	b7 51       	subi	r27, 0x17	; 23
     d32:	a0 f0       	brcs	.+40     	; 0xd5c <__fixunssfsi+0x38>
     d34:	d1 f0       	breq	.+52     	; 0xd6a <__fixunssfsi+0x46>
     d36:	66 0f       	add	r22, r22
     d38:	77 1f       	adc	r23, r23
     d3a:	88 1f       	adc	r24, r24
     d3c:	99 1f       	adc	r25, r25
     d3e:	1a f0       	brmi	.+6      	; 0xd46 <__fixunssfsi+0x22>
     d40:	ba 95       	dec	r27
     d42:	c9 f7       	brne	.-14     	; 0xd36 <__fixunssfsi+0x12>
     d44:	12 c0       	rjmp	.+36     	; 0xd6a <__fixunssfsi+0x46>
     d46:	b1 30       	cpi	r27, 0x01	; 1
     d48:	81 f0       	breq	.+32     	; 0xd6a <__fixunssfsi+0x46>
     d4a:	df d0       	rcall	.+446    	; 0xf0a <__fp_zero>
     d4c:	b1 e0       	ldi	r27, 0x01	; 1
     d4e:	08 95       	ret
     d50:	dc c0       	rjmp	.+440    	; 0xf0a <__fp_zero>
     d52:	67 2f       	mov	r22, r23
     d54:	78 2f       	mov	r23, r24
     d56:	88 27       	eor	r24, r24
     d58:	b8 5f       	subi	r27, 0xF8	; 248
     d5a:	39 f0       	breq	.+14     	; 0xd6a <__fixunssfsi+0x46>
     d5c:	b9 3f       	cpi	r27, 0xF9	; 249
     d5e:	cc f3       	brlt	.-14     	; 0xd52 <__fixunssfsi+0x2e>
     d60:	86 95       	lsr	r24
     d62:	77 95       	ror	r23
     d64:	67 95       	ror	r22
     d66:	b3 95       	inc	r27
     d68:	d9 f7       	brne	.-10     	; 0xd60 <__fixunssfsi+0x3c>
     d6a:	3e f4       	brtc	.+14     	; 0xd7a <__fixunssfsi+0x56>
     d6c:	90 95       	com	r25
     d6e:	80 95       	com	r24
     d70:	70 95       	com	r23
     d72:	61 95       	neg	r22
     d74:	7f 4f       	sbci	r23, 0xFF	; 255
     d76:	8f 4f       	sbci	r24, 0xFF	; 255
     d78:	9f 4f       	sbci	r25, 0xFF	; 255
     d7a:	08 95       	ret

00000d7c <__floatunsisf>:
     d7c:	e8 94       	clt
     d7e:	09 c0       	rjmp	.+18     	; 0xd92 <__floatsisf+0x12>

00000d80 <__floatsisf>:
     d80:	97 fb       	bst	r25, 7
     d82:	3e f4       	brtc	.+14     	; 0xd92 <__floatsisf+0x12>
     d84:	90 95       	com	r25
     d86:	80 95       	com	r24
     d88:	70 95       	com	r23
     d8a:	61 95       	neg	r22
     d8c:	7f 4f       	sbci	r23, 0xFF	; 255
     d8e:	8f 4f       	sbci	r24, 0xFF	; 255
     d90:	9f 4f       	sbci	r25, 0xFF	; 255
     d92:	99 23       	and	r25, r25
     d94:	a9 f0       	breq	.+42     	; 0xdc0 <__floatsisf+0x40>
     d96:	f9 2f       	mov	r31, r25
     d98:	96 e9       	ldi	r25, 0x96	; 150
     d9a:	bb 27       	eor	r27, r27
     d9c:	93 95       	inc	r25
     d9e:	f6 95       	lsr	r31
     da0:	87 95       	ror	r24
     da2:	77 95       	ror	r23
     da4:	67 95       	ror	r22
     da6:	b7 95       	ror	r27
     da8:	f1 11       	cpse	r31, r1
     daa:	f8 cf       	rjmp	.-16     	; 0xd9c <__floatsisf+0x1c>
     dac:	fa f4       	brpl	.+62     	; 0xdec <__floatsisf+0x6c>
     dae:	bb 0f       	add	r27, r27
     db0:	11 f4       	brne	.+4      	; 0xdb6 <__floatsisf+0x36>
     db2:	60 ff       	sbrs	r22, 0
     db4:	1b c0       	rjmp	.+54     	; 0xdec <__floatsisf+0x6c>
     db6:	6f 5f       	subi	r22, 0xFF	; 255
     db8:	7f 4f       	sbci	r23, 0xFF	; 255
     dba:	8f 4f       	sbci	r24, 0xFF	; 255
     dbc:	9f 4f       	sbci	r25, 0xFF	; 255
     dbe:	16 c0       	rjmp	.+44     	; 0xdec <__floatsisf+0x6c>
     dc0:	88 23       	and	r24, r24
     dc2:	11 f0       	breq	.+4      	; 0xdc8 <__floatsisf+0x48>
     dc4:	96 e9       	ldi	r25, 0x96	; 150
     dc6:	11 c0       	rjmp	.+34     	; 0xdea <__floatsisf+0x6a>
     dc8:	77 23       	and	r23, r23
     dca:	21 f0       	breq	.+8      	; 0xdd4 <__floatsisf+0x54>
     dcc:	9e e8       	ldi	r25, 0x8E	; 142
     dce:	87 2f       	mov	r24, r23
     dd0:	76 2f       	mov	r23, r22
     dd2:	05 c0       	rjmp	.+10     	; 0xdde <__floatsisf+0x5e>
     dd4:	66 23       	and	r22, r22
     dd6:	71 f0       	breq	.+28     	; 0xdf4 <__floatsisf+0x74>
     dd8:	96 e8       	ldi	r25, 0x86	; 134
     dda:	86 2f       	mov	r24, r22
     ddc:	70 e0       	ldi	r23, 0x00	; 0
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	2a f0       	brmi	.+10     	; 0xdec <__floatsisf+0x6c>
     de2:	9a 95       	dec	r25
     de4:	66 0f       	add	r22, r22
     de6:	77 1f       	adc	r23, r23
     de8:	88 1f       	adc	r24, r24
     dea:	da f7       	brpl	.-10     	; 0xde2 <__floatsisf+0x62>
     dec:	88 0f       	add	r24, r24
     dee:	96 95       	lsr	r25
     df0:	87 95       	ror	r24
     df2:	97 f9       	bld	r25, 7
     df4:	08 95       	ret

00000df6 <__fp_inf>:
     df6:	97 f9       	bld	r25, 7
     df8:	9f 67       	ori	r25, 0x7F	; 127
     dfa:	80 e8       	ldi	r24, 0x80	; 128
     dfc:	70 e0       	ldi	r23, 0x00	; 0
     dfe:	60 e0       	ldi	r22, 0x00	; 0
     e00:	08 95       	ret

00000e02 <__fp_mintl>:
     e02:	88 23       	and	r24, r24
     e04:	71 f4       	brne	.+28     	; 0xe22 <__fp_mintl+0x20>
     e06:	77 23       	and	r23, r23
     e08:	21 f0       	breq	.+8      	; 0xe12 <__fp_mintl+0x10>
     e0a:	98 50       	subi	r25, 0x08	; 8
     e0c:	87 2b       	or	r24, r23
     e0e:	76 2f       	mov	r23, r22
     e10:	07 c0       	rjmp	.+14     	; 0xe20 <__fp_mintl+0x1e>
     e12:	66 23       	and	r22, r22
     e14:	11 f4       	brne	.+4      	; 0xe1a <__fp_mintl+0x18>
     e16:	99 27       	eor	r25, r25
     e18:	0d c0       	rjmp	.+26     	; 0xe34 <__fp_mintl+0x32>
     e1a:	90 51       	subi	r25, 0x10	; 16
     e1c:	86 2b       	or	r24, r22
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	60 e0       	ldi	r22, 0x00	; 0
     e22:	2a f0       	brmi	.+10     	; 0xe2e <__fp_mintl+0x2c>
     e24:	9a 95       	dec	r25
     e26:	66 0f       	add	r22, r22
     e28:	77 1f       	adc	r23, r23
     e2a:	88 1f       	adc	r24, r24
     e2c:	da f7       	brpl	.-10     	; 0xe24 <__fp_mintl+0x22>
     e2e:	88 0f       	add	r24, r24
     e30:	96 95       	lsr	r25
     e32:	87 95       	ror	r24
     e34:	97 f9       	bld	r25, 7
     e36:	08 95       	ret

00000e38 <__fp_mpack>:
     e38:	9f 3f       	cpi	r25, 0xFF	; 255
     e3a:	31 f0       	breq	.+12     	; 0xe48 <__fp_mpack_finite+0xc>

00000e3c <__fp_mpack_finite>:
     e3c:	91 50       	subi	r25, 0x01	; 1
     e3e:	20 f4       	brcc	.+8      	; 0xe48 <__fp_mpack_finite+0xc>
     e40:	87 95       	ror	r24
     e42:	77 95       	ror	r23
     e44:	67 95       	ror	r22
     e46:	b7 95       	ror	r27
     e48:	88 0f       	add	r24, r24
     e4a:	91 1d       	adc	r25, r1
     e4c:	96 95       	lsr	r25
     e4e:	87 95       	ror	r24
     e50:	97 f9       	bld	r25, 7
     e52:	08 95       	ret

00000e54 <__fp_nan>:
     e54:	9f ef       	ldi	r25, 0xFF	; 255
     e56:	80 ec       	ldi	r24, 0xC0	; 192
     e58:	08 95       	ret

00000e5a <__fp_pscA>:
     e5a:	00 24       	eor	r0, r0
     e5c:	0a 94       	dec	r0
     e5e:	16 16       	cp	r1, r22
     e60:	17 06       	cpc	r1, r23
     e62:	18 06       	cpc	r1, r24
     e64:	09 06       	cpc	r0, r25
     e66:	08 95       	ret

00000e68 <__fp_pscB>:
     e68:	00 24       	eor	r0, r0
     e6a:	0a 94       	dec	r0
     e6c:	12 16       	cp	r1, r18
     e6e:	13 06       	cpc	r1, r19
     e70:	14 06       	cpc	r1, r20
     e72:	05 06       	cpc	r0, r21
     e74:	08 95       	ret

00000e76 <__fp_round>:
     e76:	09 2e       	mov	r0, r25
     e78:	03 94       	inc	r0
     e7a:	00 0c       	add	r0, r0
     e7c:	11 f4       	brne	.+4      	; 0xe82 <__fp_round+0xc>
     e7e:	88 23       	and	r24, r24
     e80:	52 f0       	brmi	.+20     	; 0xe96 <__fp_round+0x20>
     e82:	bb 0f       	add	r27, r27
     e84:	40 f4       	brcc	.+16     	; 0xe96 <__fp_round+0x20>
     e86:	bf 2b       	or	r27, r31
     e88:	11 f4       	brne	.+4      	; 0xe8e <__fp_round+0x18>
     e8a:	60 ff       	sbrs	r22, 0
     e8c:	04 c0       	rjmp	.+8      	; 0xe96 <__fp_round+0x20>
     e8e:	6f 5f       	subi	r22, 0xFF	; 255
     e90:	7f 4f       	sbci	r23, 0xFF	; 255
     e92:	8f 4f       	sbci	r24, 0xFF	; 255
     e94:	9f 4f       	sbci	r25, 0xFF	; 255
     e96:	08 95       	ret

00000e98 <__fp_split3>:
     e98:	57 fd       	sbrc	r21, 7
     e9a:	90 58       	subi	r25, 0x80	; 128
     e9c:	44 0f       	add	r20, r20
     e9e:	55 1f       	adc	r21, r21
     ea0:	59 f0       	breq	.+22     	; 0xeb8 <__fp_splitA+0x10>
     ea2:	5f 3f       	cpi	r21, 0xFF	; 255
     ea4:	71 f0       	breq	.+28     	; 0xec2 <__fp_splitA+0x1a>
     ea6:	47 95       	ror	r20

00000ea8 <__fp_splitA>:
     ea8:	88 0f       	add	r24, r24
     eaa:	97 fb       	bst	r25, 7
     eac:	99 1f       	adc	r25, r25
     eae:	61 f0       	breq	.+24     	; 0xec8 <__fp_splitA+0x20>
     eb0:	9f 3f       	cpi	r25, 0xFF	; 255
     eb2:	79 f0       	breq	.+30     	; 0xed2 <__fp_splitA+0x2a>
     eb4:	87 95       	ror	r24
     eb6:	08 95       	ret
     eb8:	12 16       	cp	r1, r18
     eba:	13 06       	cpc	r1, r19
     ebc:	14 06       	cpc	r1, r20
     ebe:	55 1f       	adc	r21, r21
     ec0:	f2 cf       	rjmp	.-28     	; 0xea6 <__fp_split3+0xe>
     ec2:	46 95       	lsr	r20
     ec4:	f1 df       	rcall	.-30     	; 0xea8 <__fp_splitA>
     ec6:	08 c0       	rjmp	.+16     	; 0xed8 <__fp_splitA+0x30>
     ec8:	16 16       	cp	r1, r22
     eca:	17 06       	cpc	r1, r23
     ecc:	18 06       	cpc	r1, r24
     ece:	99 1f       	adc	r25, r25
     ed0:	f1 cf       	rjmp	.-30     	; 0xeb4 <__fp_splitA+0xc>
     ed2:	86 95       	lsr	r24
     ed4:	71 05       	cpc	r23, r1
     ed6:	61 05       	cpc	r22, r1
     ed8:	08 94       	sec
     eda:	08 95       	ret

00000edc <__fp_trunc>:
     edc:	e5 df       	rcall	.-54     	; 0xea8 <__fp_splitA>
     ede:	a0 f0       	brcs	.+40     	; 0xf08 <__fp_trunc+0x2c>
     ee0:	be e7       	ldi	r27, 0x7E	; 126
     ee2:	b9 17       	cp	r27, r25
     ee4:	88 f4       	brcc	.+34     	; 0xf08 <__fp_trunc+0x2c>
     ee6:	bb 27       	eor	r27, r27
     ee8:	9f 38       	cpi	r25, 0x8F	; 143
     eea:	60 f4       	brcc	.+24     	; 0xf04 <__fp_trunc+0x28>
     eec:	16 16       	cp	r1, r22
     eee:	b1 1d       	adc	r27, r1
     ef0:	67 2f       	mov	r22, r23
     ef2:	78 2f       	mov	r23, r24
     ef4:	88 27       	eor	r24, r24
     ef6:	98 5f       	subi	r25, 0xF8	; 248
     ef8:	f7 cf       	rjmp	.-18     	; 0xee8 <__fp_trunc+0xc>
     efa:	86 95       	lsr	r24
     efc:	77 95       	ror	r23
     efe:	67 95       	ror	r22
     f00:	b1 1d       	adc	r27, r1
     f02:	93 95       	inc	r25
     f04:	96 39       	cpi	r25, 0x96	; 150
     f06:	c8 f3       	brcs	.-14     	; 0xefa <__fp_trunc+0x1e>
     f08:	08 95       	ret

00000f0a <__fp_zero>:
     f0a:	e8 94       	clt

00000f0c <__fp_szero>:
     f0c:	bb 27       	eor	r27, r27
     f0e:	66 27       	eor	r22, r22
     f10:	77 27       	eor	r23, r23
     f12:	cb 01       	movw	r24, r22
     f14:	97 f9       	bld	r25, 7
     f16:	08 95       	ret

00000f18 <__mulsf3>:
     f18:	0b d0       	rcall	.+22     	; 0xf30 <__mulsf3x>
     f1a:	ad cf       	rjmp	.-166    	; 0xe76 <__fp_round>
     f1c:	9e df       	rcall	.-196    	; 0xe5a <__fp_pscA>
     f1e:	28 f0       	brcs	.+10     	; 0xf2a <__mulsf3+0x12>
     f20:	a3 df       	rcall	.-186    	; 0xe68 <__fp_pscB>
     f22:	18 f0       	brcs	.+6      	; 0xf2a <__mulsf3+0x12>
     f24:	95 23       	and	r25, r21
     f26:	09 f0       	breq	.+2      	; 0xf2a <__mulsf3+0x12>
     f28:	66 cf       	rjmp	.-308    	; 0xdf6 <__fp_inf>
     f2a:	94 cf       	rjmp	.-216    	; 0xe54 <__fp_nan>
     f2c:	11 24       	eor	r1, r1
     f2e:	ee cf       	rjmp	.-36     	; 0xf0c <__fp_szero>

00000f30 <__mulsf3x>:
     f30:	b3 df       	rcall	.-154    	; 0xe98 <__fp_split3>
     f32:	a0 f3       	brcs	.-24     	; 0xf1c <__mulsf3+0x4>

00000f34 <__mulsf3_pse>:
     f34:	95 9f       	mul	r25, r21
     f36:	d1 f3       	breq	.-12     	; 0xf2c <__mulsf3+0x14>
     f38:	95 0f       	add	r25, r21
     f3a:	50 e0       	ldi	r21, 0x00	; 0
     f3c:	55 1f       	adc	r21, r21
     f3e:	62 9f       	mul	r22, r18
     f40:	f0 01       	movw	r30, r0
     f42:	72 9f       	mul	r23, r18
     f44:	bb 27       	eor	r27, r27
     f46:	f0 0d       	add	r31, r0
     f48:	b1 1d       	adc	r27, r1
     f4a:	63 9f       	mul	r22, r19
     f4c:	aa 27       	eor	r26, r26
     f4e:	f0 0d       	add	r31, r0
     f50:	b1 1d       	adc	r27, r1
     f52:	aa 1f       	adc	r26, r26
     f54:	64 9f       	mul	r22, r20
     f56:	66 27       	eor	r22, r22
     f58:	b0 0d       	add	r27, r0
     f5a:	a1 1d       	adc	r26, r1
     f5c:	66 1f       	adc	r22, r22
     f5e:	82 9f       	mul	r24, r18
     f60:	22 27       	eor	r18, r18
     f62:	b0 0d       	add	r27, r0
     f64:	a1 1d       	adc	r26, r1
     f66:	62 1f       	adc	r22, r18
     f68:	73 9f       	mul	r23, r19
     f6a:	b0 0d       	add	r27, r0
     f6c:	a1 1d       	adc	r26, r1
     f6e:	62 1f       	adc	r22, r18
     f70:	83 9f       	mul	r24, r19
     f72:	a0 0d       	add	r26, r0
     f74:	61 1d       	adc	r22, r1
     f76:	22 1f       	adc	r18, r18
     f78:	74 9f       	mul	r23, r20
     f7a:	33 27       	eor	r19, r19
     f7c:	a0 0d       	add	r26, r0
     f7e:	61 1d       	adc	r22, r1
     f80:	23 1f       	adc	r18, r19
     f82:	84 9f       	mul	r24, r20
     f84:	60 0d       	add	r22, r0
     f86:	21 1d       	adc	r18, r1
     f88:	82 2f       	mov	r24, r18
     f8a:	76 2f       	mov	r23, r22
     f8c:	6a 2f       	mov	r22, r26
     f8e:	11 24       	eor	r1, r1
     f90:	9f 57       	subi	r25, 0x7F	; 127
     f92:	50 40       	sbci	r21, 0x00	; 0
     f94:	8a f0       	brmi	.+34     	; 0xfb8 <__mulsf3_pse+0x84>
     f96:	e1 f0       	breq	.+56     	; 0xfd0 <__mulsf3_pse+0x9c>
     f98:	88 23       	and	r24, r24
     f9a:	4a f0       	brmi	.+18     	; 0xfae <__mulsf3_pse+0x7a>
     f9c:	ee 0f       	add	r30, r30
     f9e:	ff 1f       	adc	r31, r31
     fa0:	bb 1f       	adc	r27, r27
     fa2:	66 1f       	adc	r22, r22
     fa4:	77 1f       	adc	r23, r23
     fa6:	88 1f       	adc	r24, r24
     fa8:	91 50       	subi	r25, 0x01	; 1
     faa:	50 40       	sbci	r21, 0x00	; 0
     fac:	a9 f7       	brne	.-22     	; 0xf98 <__mulsf3_pse+0x64>
     fae:	9e 3f       	cpi	r25, 0xFE	; 254
     fb0:	51 05       	cpc	r21, r1
     fb2:	70 f0       	brcs	.+28     	; 0xfd0 <__mulsf3_pse+0x9c>
     fb4:	20 cf       	rjmp	.-448    	; 0xdf6 <__fp_inf>
     fb6:	aa cf       	rjmp	.-172    	; 0xf0c <__fp_szero>
     fb8:	5f 3f       	cpi	r21, 0xFF	; 255
     fba:	ec f3       	brlt	.-6      	; 0xfb6 <__mulsf3_pse+0x82>
     fbc:	98 3e       	cpi	r25, 0xE8	; 232
     fbe:	dc f3       	brlt	.-10     	; 0xfb6 <__mulsf3_pse+0x82>
     fc0:	86 95       	lsr	r24
     fc2:	77 95       	ror	r23
     fc4:	67 95       	ror	r22
     fc6:	b7 95       	ror	r27
     fc8:	f7 95       	ror	r31
     fca:	e7 95       	ror	r30
     fcc:	9f 5f       	subi	r25, 0xFF	; 255
     fce:	c1 f7       	brne	.-16     	; 0xfc0 <__mulsf3_pse+0x8c>
     fd0:	fe 2b       	or	r31, r30
     fd2:	88 0f       	add	r24, r24
     fd4:	91 1d       	adc	r25, r1
     fd6:	96 95       	lsr	r25
     fd8:	87 95       	ror	r24
     fda:	97 f9       	bld	r25, 7
     fdc:	08 95       	ret

00000fde <__udivmodhi4>:
     fde:	aa 1b       	sub	r26, r26
     fe0:	bb 1b       	sub	r27, r27
     fe2:	51 e1       	ldi	r21, 0x11	; 17
     fe4:	07 c0       	rjmp	.+14     	; 0xff4 <__udivmodhi4_ep>

00000fe6 <__udivmodhi4_loop>:
     fe6:	aa 1f       	adc	r26, r26
     fe8:	bb 1f       	adc	r27, r27
     fea:	a6 17       	cp	r26, r22
     fec:	b7 07       	cpc	r27, r23
     fee:	10 f0       	brcs	.+4      	; 0xff4 <__udivmodhi4_ep>
     ff0:	a6 1b       	sub	r26, r22
     ff2:	b7 0b       	sbc	r27, r23

00000ff4 <__udivmodhi4_ep>:
     ff4:	88 1f       	adc	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	5a 95       	dec	r21
     ffa:	a9 f7       	brne	.-22     	; 0xfe6 <__udivmodhi4_loop>
     ffc:	80 95       	com	r24
     ffe:	90 95       	com	r25
    1000:	bc 01       	movw	r22, r24
    1002:	cd 01       	movw	r24, r26
    1004:	08 95       	ret

00001006 <__udivmodsi4>:
    1006:	a1 e2       	ldi	r26, 0x21	; 33
    1008:	1a 2e       	mov	r1, r26
    100a:	aa 1b       	sub	r26, r26
    100c:	bb 1b       	sub	r27, r27
    100e:	fd 01       	movw	r30, r26
    1010:	0d c0       	rjmp	.+26     	; 0x102c <__udivmodsi4_ep>

00001012 <__udivmodsi4_loop>:
    1012:	aa 1f       	adc	r26, r26
    1014:	bb 1f       	adc	r27, r27
    1016:	ee 1f       	adc	r30, r30
    1018:	ff 1f       	adc	r31, r31
    101a:	a2 17       	cp	r26, r18
    101c:	b3 07       	cpc	r27, r19
    101e:	e4 07       	cpc	r30, r20
    1020:	f5 07       	cpc	r31, r21
    1022:	20 f0       	brcs	.+8      	; 0x102c <__udivmodsi4_ep>
    1024:	a2 1b       	sub	r26, r18
    1026:	b3 0b       	sbc	r27, r19
    1028:	e4 0b       	sbc	r30, r20
    102a:	f5 0b       	sbc	r31, r21

0000102c <__udivmodsi4_ep>:
    102c:	66 1f       	adc	r22, r22
    102e:	77 1f       	adc	r23, r23
    1030:	88 1f       	adc	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	1a 94       	dec	r1
    1036:	69 f7       	brne	.-38     	; 0x1012 <__udivmodsi4_loop>
    1038:	60 95       	com	r22
    103a:	70 95       	com	r23
    103c:	80 95       	com	r24
    103e:	90 95       	com	r25
    1040:	9b 01       	movw	r18, r22
    1042:	ac 01       	movw	r20, r24
    1044:	bd 01       	movw	r22, r26
    1046:	cf 01       	movw	r24, r30
    1048:	08 95       	ret

0000104a <toupper>:
    104a:	91 11       	cpse	r25, r1
    104c:	08 95       	ret
    104e:	81 56       	subi	r24, 0x61	; 97
    1050:	8a 51       	subi	r24, 0x1A	; 26
    1052:	08 f4       	brcc	.+2      	; 0x1056 <toupper+0xc>
    1054:	80 52       	subi	r24, 0x20	; 32
    1056:	85 58       	subi	r24, 0x85	; 133
    1058:	08 95       	ret

0000105a <_exit>:
    105a:	f8 94       	cli

0000105c <__stop_program>:
    105c:	ff cf       	rjmp	.-2      	; 0x105c <__stop_program>
