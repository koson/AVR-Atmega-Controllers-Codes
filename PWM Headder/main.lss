
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000028  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000a9  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000065  00000000  00000000  0000020d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000f7  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000075  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000060  00000000  00000000  00000411  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <PWM_init>:
#define CLK	1000000


void PWM_init(int num, int top)
{
	if(num ==1)
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	91 05       	cpc	r25, r1
  70:	61 f4       	brne	.+24     	; 0x8a <PWM_init+0x1e>
	{
		DDRD |= (1<<PD4) | (1<<PD5);
  72:	81 b3       	in	r24, 0x11	; 17
  74:	80 63       	ori	r24, 0x30	; 48
  76:	81 bb       	out	0x11, r24	; 17
		PORTD &= ~(1<<PD4);
  78:	94 98       	cbi	0x12, 4	; 18
		PORTD &= ~(1<<PD5);
  7a:	95 98       	cbi	0x12, 5	; 18
		TCCR1A = 0xA8;
  7c:	88 ea       	ldi	r24, 0xA8	; 168
  7e:	8f bd       	out	0x2f, r24	; 47
		TCCR1B = 0x11;
  80:	81 e1       	ldi	r24, 0x11	; 17
  82:	8e bd       	out	0x2e, r24	; 46
		ICR1 = top;
  84:	77 bd       	out	0x27, r23	; 39
  86:	66 bd       	out	0x26, r22	; 38
  88:	08 95       	ret
	}
	else if(num == 2)
  8a:	02 97       	sbiw	r24, 0x02	; 2
  8c:	29 f4       	brne	.+10     	; 0x98 <PWM_init+0x2c>
	{
		DDRD |= (1<<PD7);
  8e:	8f 9a       	sbi	0x11, 7	; 17
		PORTD &= ~(1<<PD7);
  90:	97 98       	cbi	0x12, 7	; 18
		TCCR2 |= (1<<WGM20) | (1<<COM21) | (1<<CS20);
  92:	85 b5       	in	r24, 0x25	; 37
  94:	81 66       	ori	r24, 0x61	; 97
  96:	85 bd       	out	0x25, r24	; 37
  98:	08 95       	ret

0000009a <main>:
#include<avr/io.h>
#include"PWM32.h"

void main(void)
{
	PWM_init(1, 737);
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	61 ee       	ldi	r22, 0xE1	; 225
  a0:	72 e0       	ldi	r23, 0x02	; 2
  a2:	0e 94 36 00 	call	0x6c	; 0x6c <PWM_init>
	
	PWM_init(2, 737);
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	61 ee       	ldi	r22, 0xE1	; 225
  ac:	72 e0       	ldi	r23, 0x02	; 2
  ae:	0e 94 36 00 	call	0x6c	; 0x6c <PWM_init>
	while(1)
	{	OCR1A = 500;
  b2:	84 ef       	ldi	r24, 0xF4	; 244
  b4:	91 e0       	ldi	r25, 0x01	; 1
		OCR1B = 500;
		OCR2 = 200;
  b6:	28 ec       	ldi	r18, 0xC8	; 200
{
	PWM_init(1, 737);
	
	PWM_init(2, 737);
	while(1)
	{	OCR1A = 500;
  b8:	9b bd       	out	0x2b, r25	; 43
  ba:	8a bd       	out	0x2a, r24	; 42
		OCR1B = 500;
  bc:	99 bd       	out	0x29, r25	; 41
  be:	88 bd       	out	0x28, r24	; 40
		OCR2 = 200;
  c0:	23 bd       	out	0x23, r18	; 35
  c2:	fa cf       	rjmp	.-12     	; 0xb8 <main+0x1e>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
