
Keypad16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000de  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008b7  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000008e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000011b  00000000  00000000  00000926  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000c4  00000000  00000000  00000a41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000011d  00000000  00000000  00000b05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00000c24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000cf  00000000  00000000  00000c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000040  00000000  00000000  00000d57  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00000d97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  64:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <UartInit>:
uint8_t UartReceive();
void UartTransmit(uint8_t data);

void UartInit()
{	
	UCSRB |= (1 << RXEN) | (1 << TXEN);
  6c:	8a b1       	in	r24, 0x0a	; 10
  6e:	88 61       	ori	r24, 0x18	; 24
  70:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << UCSZ1) | (1 << UCSZ0);
  72:	80 b5       	in	r24, 0x20	; 32
  74:	86 60       	ori	r24, 0x06	; 6
  76:	80 bd       	out	0x20, r24	; 32
	UCSRA |= (1<<U2X);
  78:	59 9a       	sbi	0x0b, 1	; 11
	
	UBRRH = 0;
  7a:	10 bc       	out	0x20, r1	; 32
	UBRRL = 12;
  7c:	8c e0       	ldi	r24, 0x0C	; 12
  7e:	89 b9       	out	0x09, r24	; 9

	DDRD &= ~(1<<PD0);
  80:	88 98       	cbi	0x11, 0	; 17
	DDRD |= (1<<PD1);
  82:	89 9a       	sbi	0x11, 1	; 17
  84:	08 95       	ret

00000086 <UartReceive>:
	// PD1 - TX
}

uint8_t UartReceive()
{
	while( !(UCSRA & (1<<RXC)) );
  86:	5f 9b       	sbis	0x0b, 7	; 11
  88:	fe cf       	rjmp	.-4      	; 0x86 <UartReceive>
	return UDR;
  8a:	8c b1       	in	r24, 0x0c	; 12
}
  8c:	08 95       	ret

0000008e <UartTransmit>:

void UartTransmit(uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
  8e:	5d 9b       	sbis	0x0b, 5	; 11
  90:	fe cf       	rjmp	.-4      	; 0x8e <UartTransmit>
	UDR = data;
  92:	8c b9       	out	0x0c, r24	; 12
  94:	08 95       	ret

00000096 <main>:
//PD2-PD7 -> 5 PN

int main(void)
{
	uint8_t c = 0;
	DDRD = 0x00;
  96:	11 ba       	out	0x11, r1	; 17
	PORTD = 0xFF;
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	82 bb       	out	0x12, r24	; 18
	
	DDRC = 0x00;		// DPDT DATA
  9c:	14 ba       	out	0x14, r1	; 20
	PORTC = 0xFF;
  9e:	85 bb       	out	0x15, r24	; 21
	
	DDRB = 0x00;
  a0:	17 ba       	out	0x17, r1	; 23
	PORTB = 0xFF;
  a2:	88 bb       	out	0x18, r24	; 24
	
	DDRA = 0x00;		// DPDT DATA PA6-PA7
  a4:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xFF;
  a6:	8b bb       	out	0x1b, r24	; 27
	
	//lcd_init();
	UartInit();
  a8:	0e 94 36 00 	call	0x6c	; 0x6c <UartInit>
	///AdcInit();
		
	while(1)
	{
			c  = UartReceive();
  ac:	0e 94 43 00 	call	0x86	; 0x86 <UartReceive>
			
			switch(c)
  b0:	86 34       	cpi	r24, 0x46	; 70
  b2:	69 f0       	breq	.+26     	; 0xce <main+0x38>
  b4:	28 f4       	brcc	.+10     	; 0xc0 <main+0x2a>
  b6:	82 33       	cpi	r24, 0x32	; 50
  b8:	31 f0       	breq	.+12     	; 0xc6 <main+0x30>
  ba:	8c 33       	cpi	r24, 0x3C	; 60
  bc:	b9 f7       	brne	.-18     	; 0xac <main+0x16>
  be:	05 c0       	rjmp	.+10     	; 0xca <main+0x34>
  c0:	80 35       	cpi	r24, 0x50	; 80
  c2:	a1 f7       	brne	.-24     	; 0xac <main+0x16>
  c4:	06 c0       	rjmp	.+12     	; 0xd2 <main+0x3c>
			{
				case 50:
					UartTransmit(PINA);
  c6:	89 b3       	in	r24, 0x19	; 25
  c8:	05 c0       	rjmp	.+10     	; 0xd4 <main+0x3e>
				break;
				
				case 60:
					UartTransmit(PINB);
  ca:	86 b3       	in	r24, 0x16	; 22
  cc:	03 c0       	rjmp	.+6      	; 0xd4 <main+0x3e>
				break;
				
				case 70:
					UartTransmit(PINC);
  ce:	83 b3       	in	r24, 0x13	; 19
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <main+0x3e>
				break;
				
				case 80:
					UartTransmit(PIND);
  d2:	80 b3       	in	r24, 0x10	; 16
  d4:	0e 94 47 00 	call	0x8e	; 0x8e <UartTransmit>
				break;
  d8:	e9 cf       	rjmp	.-46     	; 0xac <main+0x16>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
