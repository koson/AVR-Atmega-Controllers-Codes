
DataLogging Pumps with Litres Constraints.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000316  00800100  0000176c  00001800  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000176c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800416  00800416  00001b16  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b16  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00001b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000250d  00000000  00000000  00001c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000508  00000000  00000000  0000418d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001111  00000000  00000000  00004695  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000460  00000000  00000000  000057a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000518  00000000  00000000  00005c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002041  00000000  00000000  00006120  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00008161  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e9 c0       	rjmp	.+466    	; 0x210 <__vector_15>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c0       	rjmp	.+128    	; 0xca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3e c0       	rjmp	.+124    	; 0xca <__bad_interrupt>
      4e:	00 00       	nop
      50:	3c c0       	rjmp	.+120    	; 0xca <__bad_interrupt>
      52:	00 00       	nop
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	38 c0       	rjmp	.+112    	; 0xca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c0       	rjmp	.+88     	; 0xca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	14 e0       	ldi	r17, 0x04	; 4
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e6       	ldi	r30, 0x6C	; 108
      a0:	f7 e1       	ldi	r31, 0x17	; 23
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 31       	cpi	r26, 0x16	; 22
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	24 e0       	ldi	r18, 0x04	; 4
      b4:	a6 e1       	ldi	r26, 0x16	; 22
      b6:	b4 e0       	ldi	r27, 0x04	; 4
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a8 31       	cpi	r26, 0x18	; 24
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 bf 09 	call	0x137e	; 0x137e <main>
      c6:	0c 94 b4 0b 	jmp	0x1768	; 0x1768 <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <get_data>:
		return 1;
	}
	return 0;
}

void get_data(uint8_t system_on, char* responseimp,uint8_t  signal_status, uint8_t signal_strength,char* user){
      cc:	4f 92       	push	r4
      ce:	5f 92       	push	r5
      d0:	6f 92       	push	r6
      d2:	7f 92       	push	r7
      d4:	8f 92       	push	r8
      d6:	9f 92       	push	r9
      d8:	af 92       	push	r10
      da:	bf 92       	push	r11
      dc:	cf 92       	push	r12
      de:	df 92       	push	r13
      e0:	ef 92       	push	r14
      e2:	ff 92       	push	r15
      e4:	0f 93       	push	r16
      e6:	1f 93       	push	r17
      e8:	cf 93       	push	r28
      ea:	df 93       	push	r29
      ec:	00 d0       	rcall	.+0      	; 0xee <get_data+0x22>
      ee:	00 d0       	rcall	.+0      	; 0xf0 <get_data+0x24>
      f0:	00 d0       	rcall	.+0      	; 0xf2 <get_data+0x26>
      f2:	cd b7       	in	r28, 0x3d	; 61
      f4:	de b7       	in	r29, 0x3e	; 62
      f6:	68 2e       	mov	r6, r24
      f8:	5b 01       	movw	r10, r22
      fa:	84 2f       	mov	r24, r20
      fc:	f2 2e       	mov	r15, r18
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
      fe:	4a e0       	ldi	r20, 0x0A	; 10
     100:	be 01       	movw	r22, r28
     102:	6f 5f       	subi	r22, 0xFF	; 255
     104:	7f 4f       	sbci	r23, 0xFF	; 255
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	0e 94 5f 0b 	call	0x16be	; 0x16be <__itoa_ncheck>
     10c:	4a e0       	ldi	r20, 0x0A	; 10
     10e:	be 01       	movw	r22, r28
     110:	6c 5f       	subi	r22, 0xFC	; 252
     112:	7f 4f       	sbci	r23, 0xFF	; 255
     114:	8f 2d       	mov	r24, r15
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	0e 94 5f 0b 	call	0x16be	; 0x16be <__itoa_ncheck>
	//  Integer to ASCII for transmission
	itoa(signal_status,ch1,10);
	itoa(signal_strength,ch2,10);
	
	//  Reception Enable
	sbi(UCSR0B,RXEN0);
     11c:	e1 ec       	ldi	r30, 0xC1	; 193
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	80 81       	ld	r24, Z
     122:	80 61       	ori	r24, 0x10	; 16
     124:	80 83       	st	Z, r24
	}
	return 0;
}

void get_data(uint8_t system_on, char* responseimp,uint8_t  signal_status, uint8_t signal_strength,char* user){
	uint8_t t=0,response_receivedimp=0,takedata=0,dataarrived=0;
     126:	20 e0       	ldi	r18, 0x00	; 0
     128:	51 2c       	mov	r5, r1
	
	//  Reception Enable
	sbi(UCSR0B,RXEN0);
	
	while(response_receivedimp==0){
		while(!((UCSR0A) & (1<<RXC0)));  // Wait while data is being received
     12a:	0f 2e       	mov	r0, r31
     12c:	f0 ec       	ldi	r31, 0xC0	; 192
     12e:	ef 2e       	mov	r14, r31
     130:	f1 2c       	mov	r15, r1
     132:	f0 2d       	mov	r31, r0
		dataimp = UDR0;
     134:	0f 2e       	mov	r0, r31
     136:	f6 ec       	ldi	r31, 0xC6	; 198
     138:	cf 2e       	mov	r12, r31
     13a:	d1 2c       	mov	r13, r1
     13c:	f0 2d       	mov	r31, r0
     13e:	71 2c       	mov	r7, r1
			responseimp[t]=dataimp;
			t++;
		}
		// If first character $ is received, start taking data..
		if ((dataimp == 0x24) && (takedata == 0)){  //  $=0x24
			takedata=1;
     140:	44 24       	eor	r4, r4
     142:	43 94       	inc	r4
		dataimp = UDR0;
		
		// If last character # is received.. 
		if ((dataimp == 0x23) && (takedata == 1)){  //  #=0x23
			//  Reception Disable
			cbi(UCSR0B,RXEN0);
     144:	0f 2e       	mov	r0, r31
     146:	f1 ec       	ldi	r31, 0xC1	; 193
     148:	8f 2e       	mov	r8, r31
     14a:	91 2c       	mov	r9, r1
     14c:	f0 2d       	mov	r31, r0
	
	//  Reception Enable
	sbi(UCSR0B,RXEN0);
	
	while(response_receivedimp==0){
		while(!((UCSR0A) & (1<<RXC0)));  // Wait while data is being received
     14e:	f7 01       	movw	r30, r14
     150:	90 81       	ld	r25, Z
     152:	99 23       	and	r25, r25
     154:	e4 f7       	brge	.-8      	; 0x14e <get_data+0x82>
		dataimp = UDR0;
     156:	f6 01       	movw	r30, r12
     158:	90 81       	ld	r25, Z
		
		// If last character # is received.. 
		if ((dataimp == 0x23) && (takedata == 1)){  //  #=0x23
     15a:	93 32       	cpi	r25, 0x23	; 35
     15c:	49 f5       	brne	.+82     	; 0x1b0 <get_data+0xe4>
     15e:	21 30       	cpi	r18, 0x01	; 1
     160:	f1 f5       	brne	.+124    	; 0x1de <get_data+0x112>
			//  Reception Disable
			cbi(UCSR0B,RXEN0);
     162:	f4 01       	movw	r30, r8
     164:	80 81       	ld	r24, Z
     166:	8f 7e       	andi	r24, 0xEF	; 239
     168:	80 83       	st	Z, r24
			
			responseimp[t]='\0';
     16a:	f5 01       	movw	r30, r10
     16c:	e5 0d       	add	r30, r5
     16e:	f1 1d       	adc	r31, r1
     170:	10 82       	st	Z, r1
			response_receivedimp=1;
			takedata = 0;
			
			//  Sending data for displaying network health on LCD and SMS shutoff
			UART_0_puts("\r\n");
     172:	89 e9       	ldi	r24, 0x99	; 153
     174:	93 e0       	ldi	r25, 0x03	; 3
     176:	0e 94 ba 0a 	call	0x1574	; 0x1574 <UART_0_puts>
			UART_0_putc(system_on);
     17a:	86 2d       	mov	r24, r6
     17c:	0e 94 b2 0a 	call	0x1564	; 0x1564 <UART_0_putc>
			UART_0_puts(ch1);
     180:	ce 01       	movw	r24, r28
     182:	01 96       	adiw	r24, 0x01	; 1
     184:	0e 94 ba 0a 	call	0x1574	; 0x1574 <UART_0_puts>
			UART_0_puts(ch2);
     188:	ce 01       	movw	r24, r28
     18a:	04 96       	adiw	r24, 0x04	; 4
     18c:	0e 94 ba 0a 	call	0x1574	; 0x1574 <UART_0_puts>
			UART_0_putc('$');
     190:	84 e2       	ldi	r24, 0x24	; 36
     192:	0e 94 b2 0a 	call	0x1564	; 0x1564 <UART_0_putc>
			UART_0_puts(user);
     196:	c8 01       	movw	r24, r16
     198:	0e 94 ba 0a 	call	0x1574	; 0x1574 <UART_0_puts>
			UART_0_putc('#');
     19c:	83 e2       	ldi	r24, 0x23	; 35
     19e:	0e 94 b2 0a 	call	0x1564	; 0x1564 <UART_0_putc>
			UART_0_puts("\r\n");
     1a2:	89 e9       	ldi	r24, 0x99	; 153
     1a4:	93 e0       	ldi	r25, 0x03	; 3
     1a6:	0e 94 ba 0a 	call	0x1574	; 0x1574 <UART_0_puts>
			//  Reception Disable
			cbi(UCSR0B,RXEN0);
			
			responseimp[t]='\0';
			response_receivedimp=1;
			takedata = 0;
     1aa:	27 2d       	mov	r18, r7
		if ((dataimp == 0x23) && (takedata == 1)){  //  #=0x23
			//  Reception Disable
			cbi(UCSR0B,RXEN0);
			
			responseimp[t]='\0';
			response_receivedimp=1;
     1ac:	84 2d       	mov	r24, r4
     1ae:	13 c0       	rjmp	.+38     	; 0x1d6 <get_data+0x10a>
			UART_0_puts(user);
			UART_0_putc('#');
			UART_0_puts("\r\n");
		}
		// Continue taking data
		if (takedata==1 && t<512){
     1b0:	21 30       	cpi	r18, 0x01	; 1
     1b2:	39 f4       	brne	.+14     	; 0x1c2 <get_data+0xf6>
			responseimp[t]=dataimp;
     1b4:	f5 01       	movw	r30, r10
     1b6:	e5 0d       	add	r30, r5
     1b8:	f1 1d       	adc	r31, r1
     1ba:	90 83       	st	Z, r25
			t++;
     1bc:	53 94       	inc	r5
     1be:	87 2d       	mov	r24, r7
     1c0:	0a c0       	rjmp	.+20     	; 0x1d6 <get_data+0x10a>
		}
		// If first character $ is received, start taking data..
		if ((dataimp == 0x24) && (takedata == 0)){  //  $=0x24
     1c2:	94 32       	cpi	r25, 0x24	; 36
     1c4:	29 f4       	brne	.+10     	; 0x1d0 <get_data+0x104>
     1c6:	21 11       	cpse	r18, r1
     1c8:	05 c0       	rjmp	.+10     	; 0x1d4 <get_data+0x108>
     1ca:	87 2d       	mov	r24, r7
			takedata=1;
     1cc:	24 2d       	mov	r18, r4
     1ce:	03 c0       	rjmp	.+6      	; 0x1d6 <get_data+0x10a>
     1d0:	87 2d       	mov	r24, r7
     1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <get_data+0x10a>
     1d4:	87 2d       	mov	r24, r7
	itoa(signal_strength,ch2,10);
	
	//  Reception Enable
	sbi(UCSR0B,RXEN0);
	
	while(response_receivedimp==0){
     1d6:	88 23       	and	r24, r24
     1d8:	09 f4       	brne	.+2      	; 0x1dc <get_data+0x110>
     1da:	b9 cf       	rjmp	.-142    	; 0x14e <get_data+0x82>
     1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <get_data+0x116>
     1de:	87 2d       	mov	r24, r7
     1e0:	fa cf       	rjmp	.-12     	; 0x1d6 <get_data+0x10a>
		// If first character $ is received, start taking data..
		if ((dataimp == 0x24) && (takedata == 0)){  //  $=0x24
			takedata=1;
		}
	}
}
     1e2:	26 96       	adiw	r28, 0x06	; 6
     1e4:	0f b6       	in	r0, 0x3f	; 63
     1e6:	f8 94       	cli
     1e8:	de bf       	out	0x3e, r29	; 62
     1ea:	0f be       	out	0x3f, r0	; 63
     1ec:	cd bf       	out	0x3d, r28	; 61
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	1f 91       	pop	r17
     1f4:	0f 91       	pop	r16
     1f6:	ff 90       	pop	r15
     1f8:	ef 90       	pop	r14
     1fa:	df 90       	pop	r13
     1fc:	cf 90       	pop	r12
     1fe:	bf 90       	pop	r11
     200:	af 90       	pop	r10
     202:	9f 90       	pop	r9
     204:	8f 90       	pop	r8
     206:	7f 90       	pop	r7
     208:	6f 90       	pop	r6
     20a:	5f 90       	pop	r5
     20c:	4f 90       	pop	r4
     20e:	08 95       	ret

00000210 <__vector_15>:
		return 3;
	}
}

ISR(TIMER1_OVF_vect)
{
     210:	1f 92       	push	r1
     212:	0f 92       	push	r0
     214:	0f b6       	in	r0, 0x3f	; 63
     216:	0f 92       	push	r0
     218:	11 24       	eor	r1, r1
     21a:	0b b6       	in	r0, 0x3b	; 59
     21c:	0f 92       	push	r0
     21e:	8f 93       	push	r24
     220:	ef 93       	push	r30
     222:	ff 93       	push	r31
	overflowcount++;
     224:	80 91 16 04 	lds	r24, 0x0416
     228:	8f 5f       	subi	r24, 0xFF	; 255
	
	if (overflowcount>=25){  //  To account for 50 secs
     22a:	89 31       	cpi	r24, 0x19	; 25
     22c:	18 f4       	brcc	.+6      	; 0x234 <__vector_15+0x24>
	}
}

ISR(TIMER1_OVF_vect)
{
	overflowcount++;
     22e:	80 93 16 04 	sts	0x0416, r24
     232:	0a c0       	rjmp	.+20     	; 0x248 <__vector_15+0x38>
	
	if (overflowcount>=25){  //  To account for 50 secs
		overflowcount = 0;
     234:	10 92 16 04 	sts	0x0416, r1
		skip = 1;
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	80 93 17 04 	sts	0x0417, r24
		cbi(TCCR1B,CS12);
     23e:	e1 e8       	ldi	r30, 0x81	; 129
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	80 81       	ld	r24, Z
     244:	8b 7f       	andi	r24, 0xFB	; 251
     246:	80 83       	st	Z, r24
	}
}
     248:	ff 91       	pop	r31
     24a:	ef 91       	pop	r30
     24c:	8f 91       	pop	r24
     24e:	0f 90       	pop	r0
     250:	0b be       	out	0x3b, r0	; 59
     252:	0f 90       	pop	r0
     254:	0f be       	out	0x3f, r0	; 63
     256:	0f 90       	pop	r0
     258:	1f 90       	pop	r1
     25a:	18 95       	reti

0000025c <start_timer>:

void start_timer(){
	skip = 0;
     25c:	10 92 17 04 	sts	0x0417, r1
	TCNT1 = 0;
     260:	10 92 85 00 	sts	0x0085, r1
     264:	10 92 84 00 	sts	0x0084, r1
	sbi(TCCR1B,CS12);
     268:	e1 e8       	ldi	r30, 0x81	; 129
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	84 60       	ori	r24, 0x04	; 4
     270:	80 83       	st	Z, r24
     272:	08 95       	ret

00000274 <wait_for_data>:
}

uint8_t wait_for_data(){
	// Start Timer
	start_timer();
     274:	f3 df       	rcall	.-26     	; 0x25c <start_timer>
	
	//  Waiting for data
	while (!(UCSR1A & (1<<RXC1))){
     276:	e8 ec       	ldi	r30, 0xC8	; 200
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	08 c0       	rjmp	.+16     	; 0x28c <wait_for_data+0x18>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     27c:	8a e1       	ldi	r24, 0x1A	; 26
     27e:	8a 95       	dec	r24
     280:	f1 f7       	brne	.-4      	; 0x27e <wait_for_data+0xa>
     282:	00 c0       	rjmp	.+0      	; 0x284 <wait_for_data+0x10>
		_delay_us(10);
		if (skip==1){
     284:	80 91 17 04 	lds	r24, 0x0417
     288:	81 30       	cpi	r24, 0x01	; 1
     28a:	51 f0       	breq	.+20     	; 0x2a0 <wait_for_data+0x2c>
uint8_t wait_for_data(){
	// Start Timer
	start_timer();
	
	//  Waiting for data
	while (!(UCSR1A & (1<<RXC1))){
     28c:	80 81       	ld	r24, Z
     28e:	88 23       	and	r24, r24
     290:	ac f7       	brge	.-22     	; 0x27c <wait_for_data+0x8>
			return 0;  //  No data; timer expired
		}
	}
	
	//  Stop Timer
	cbi(TCCR1B,CS12);
     292:	e1 e8       	ldi	r30, 0x81	; 129
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	80 81       	ld	r24, Z
     298:	8b 7f       	andi	r24, 0xFB	; 251
     29a:	80 83       	st	Z, r24
	
	return 1;  //  Data arrived
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	08 95       	ret
	
	//  Waiting for data
	while (!(UCSR1A & (1<<RXC1))){
		_delay_us(10);
		if (skip==1){
			return 0;  //  No data; timer expired
     2a0:	80 e0       	ldi	r24, 0x00	; 0
	
	//  Stop Timer
	cbi(TCCR1B,CS12);
	
	return 1;  //  Data arrived
}
     2a2:	08 95       	ret

000002a4 <sim900_response>:
	}
	
	return 0;
}

void sim900_response(char* response){
     2a4:	ef 92       	push	r14
     2a6:	ff 92       	push	r15
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	cf 93       	push	r28
     2ae:	7c 01       	movw	r14, r24
	uint8_t i=0,dataarrived=0;
	char initial[]={'0','0'};
     2b0:	c0 e3       	ldi	r28, 0x30	; 48
		initial[0]=initial[1];
		dataarrived=wait_for_data();
		if (dataarrived==0){
			break;
		}
		initial[1]=UDR1;
     2b2:	0e ec       	ldi	r16, 0xCE	; 206
     2b4:	10 e0       	ldi	r17, 0x00	; 0
     2b6:	03 c0       	rjmp	.+6      	; 0x2be <sim900_response+0x1a>
     2b8:	c9 2f       	mov	r28, r25
     2ba:	01 c0       	rjmp	.+2      	; 0x2be <sim900_response+0x1a>
     2bc:	c9 2f       	mov	r28, r25
	uint8_t i=0,dataarrived=0;
	char initial[]={'0','0'};
		
	while(!(initial[0]==0x0D && initial[1]==0x0A)){
		initial[0]=initial[1];
		dataarrived=wait_for_data();
     2be:	da df       	rcall	.-76     	; 0x274 <wait_for_data>
		if (dataarrived==0){
     2c0:	88 23       	and	r24, r24
     2c2:	41 f0       	breq	.+16     	; 0x2d4 <sim900_response+0x30>
			break;
		}
		initial[1]=UDR1;
     2c4:	f8 01       	movw	r30, r16
     2c6:	90 81       	ld	r25, Z

void sim900_response(char* response){
	uint8_t i=0,dataarrived=0;
	char initial[]={'0','0'};
		
	while(!(initial[0]==0x0D && initial[1]==0x0A)){
     2c8:	cd 30       	cpi	r28, 0x0D	; 13
     2ca:	b1 f7       	brne	.-20     	; 0x2b8 <sim900_response+0x14>
     2cc:	9a 30       	cpi	r25, 0x0A	; 10
     2ce:	b1 f7       	brne	.-20     	; 0x2bc <sim900_response+0x18>
     2d0:	c0 e0       	ldi	r28, 0x00	; 0
     2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <sim900_response+0x32>
     2d4:	c0 e0       	ldi	r28, 0x00	; 0
	while(1){		
		dataarrived=wait_for_data();
		if (dataarrived==0){
			break;
		}
		response[i]=UDR1;
     2d6:	0e ec       	ldi	r16, 0xCE	; 206
     2d8:	10 e0       	ldi	r17, 0x00	; 0
		}
		initial[1]=UDR1;
	}

	while(1){		
		dataarrived=wait_for_data();
     2da:	cc df       	rcall	.-104    	; 0x274 <wait_for_data>
		if (dataarrived==0){
     2dc:	88 23       	and	r24, r24
     2de:	51 f0       	breq	.+20     	; 0x2f4 <sim900_response+0x50>
			break;
		}
		response[i]=UDR1;
     2e0:	f8 01       	movw	r30, r16
     2e2:	90 81       	ld	r25, Z
     2e4:	f7 01       	movw	r30, r14
     2e6:	ec 0f       	add	r30, r28
     2e8:	f1 1d       	adc	r31, r1
     2ea:	90 83       	st	Z, r25
		if(response[i]==0x0D){
     2ec:	9d 30       	cpi	r25, 0x0D	; 13
     2ee:	11 f0       	breq	.+4      	; 0x2f4 <sim900_response+0x50>
			break;
		}
		i++;
     2f0:	cf 5f       	subi	r28, 0xFF	; 255
	}
     2f2:	f3 cf       	rjmp	.-26     	; 0x2da <sim900_response+0x36>

	//  Terminating string
	response[i]="\0";
     2f4:	f7 01       	movw	r30, r14
     2f6:	ec 0f       	add	r30, r28
     2f8:	f1 1d       	adc	r31, r1
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	91 e0       	ldi	r25, 0x01	; 1
     2fe:	80 83       	st	Z, r24

	//  Reception Disable
	cbi(UCSR1B,RXEN1);
     300:	e9 ec       	ldi	r30, 0xC9	; 201
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	80 81       	ld	r24, Z
     306:	8f 7e       	andi	r24, 0xEF	; 239
     308:	80 83       	st	Z, r24
} 
     30a:	cf 91       	pop	r28
     30c:	1f 91       	pop	r17
     30e:	0f 91       	pop	r16
     310:	ff 90       	pop	r15
     312:	ef 90       	pop	r14
     314:	08 95       	ret

00000316 <sim900_cmd>:
	else{
		return 0;
	}
}

void sim900_cmd(char* str,char* response){	
     316:	0f 93       	push	r16
     318:	1f 93       	push	r17
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	ec 01       	movw	r28, r24
     320:	8b 01       	movw	r16, r22
	uint8_t i=0;
	char initial[]={'0','0'};

	//  Send Command
	while( *str != '\0' ){
     322:	88 81       	ld	r24, Y
     324:	88 23       	and	r24, r24
     326:	31 f0       	breq	.+12     	; 0x334 <sim900_cmd+0x1e>
     328:	21 96       	adiw	r28, 0x01	; 1
		UART_1_putc( *str++ );
     32a:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <UART_1_putc>
void sim900_cmd(char* str,char* response){	
	uint8_t i=0;
	char initial[]={'0','0'};

	//  Send Command
	while( *str != '\0' ){
     32e:	89 91       	ld	r24, Y+
     330:	81 11       	cpse	r24, r1
     332:	fb cf       	rjmp	.-10     	; 0x32a <sim900_cmd+0x14>
		UART_1_putc( *str++ );
	}
	
	//  Reception Enable
	sbi(UCSR1B,RXEN1);
     334:	e9 ec       	ldi	r30, 0xC9	; 201
     336:	f0 e0       	ldi	r31, 0x00	; 0
     338:	90 81       	ld	r25, Z
     33a:	90 61       	ori	r25, 0x10	; 16
     33c:	90 83       	st	Z, r25
	
	sim900_response(response);
     33e:	c8 01       	movw	r24, r16
     340:	b1 df       	rcall	.-158    	; 0x2a4 <sim900_response>
}
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	1f 91       	pop	r17
     348:	0f 91       	pop	r16
     34a:	08 95       	ret

0000034c <get_apn>:
		
		_delay_ms(60000);  // Delay between 2 data logging samples
	}	
 }
 
uint8_t get_apn(char* apn,char* user){
     34c:	ef 92       	push	r14
     34e:	ff 92       	push	r15
     350:	0f 93       	push	r16
     352:	1f 93       	push	r17
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
     358:	cd b7       	in	r28, 0x3d	; 61
     35a:	de b7       	in	r29, 0x3e	; 62
     35c:	c8 5c       	subi	r28, 0xC8	; 200
     35e:	d1 09       	sbc	r29, r1
     360:	0f b6       	in	r0, 0x3f	; 63
     362:	f8 94       	cli
     364:	de bf       	out	0x3e, r29	; 62
     366:	0f be       	out	0x3f, r0	; 63
     368:	cd bf       	out	0x3d, r28	; 61
     36a:	7c 01       	movw	r14, r24
     36c:	8b 01       	movw	r16, r22
	 
	uint8_t i=0,p=0;
	char simresponse[200];
	
	// SIM900 Echo disabled in response
	UART_1_puts("ATE0\r\n\0");  
     36e:	82 e0       	ldi	r24, 0x02	; 2
     370:	91 e0       	ldi	r25, 0x01	; 1
     372:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <UART_1_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     376:	2f ef       	ldi	r18, 0xFF	; 255
     378:	84 e3       	ldi	r24, 0x34	; 52
     37a:	9c e0       	ldi	r25, 0x0C	; 12
     37c:	21 50       	subi	r18, 0x01	; 1
     37e:	80 40       	sbci	r24, 0x00	; 0
     380:	90 40       	sbci	r25, 0x00	; 0
     382:	e1 f7       	brne	.-8      	; 0x37c <get_apn+0x30>
     384:	00 c0       	rjmp	.+0      	; 0x386 <get_apn+0x3a>
     386:	00 00       	nop
	_delay_ms(500);
	
	// SIM900 module check
	sim900_cmd("AT\r\n\0",simresponse);
     388:	be 01       	movw	r22, r28
     38a:	6f 5f       	subi	r22, 0xFF	; 255
     38c:	7f 4f       	sbci	r23, 0xFF	; 255
     38e:	8a e0       	ldi	r24, 0x0A	; 10
     390:	91 e0       	ldi	r25, 0x01	; 1
     392:	c1 df       	rcall	.-126    	; 0x316 <sim900_cmd>
	if (strcmp(simresponse,"OK\0")!=0){
     394:	60 e1       	ldi	r22, 0x10	; 16
     396:	71 e0       	ldi	r23, 0x01	; 1
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	0e 94 29 0b 	call	0x1652	; 0x1652 <strcmp>
     3a0:	89 2b       	or	r24, r25
     3a2:	09 f0       	breq	.+2      	; 0x3a6 <get_apn+0x5a>
     3a4:	f0 c0       	rjmp	.+480    	; 0x586 <get_apn+0x23a>
		return 0;
	}
	
	// To check if SIM card is present	 
	sim900_cmd("AT+CSMINS?\r\n\0",simresponse); 
     3a6:	be 01       	movw	r22, r28
     3a8:	6f 5f       	subi	r22, 0xFF	; 255
     3aa:	7f 4f       	sbci	r23, 0xFF	; 255
     3ac:	84 e1       	ldi	r24, 0x14	; 20
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	b2 df       	rcall	.-156    	; 0x316 <sim900_cmd>
	if (strcmp(simresponse,"+CSMINS: 0\,1\0")!=0){
     3b2:	62 e2       	ldi	r22, 0x22	; 34
     3b4:	71 e0       	ldi	r23, 0x01	; 1
     3b6:	ce 01       	movw	r24, r28
     3b8:	01 96       	adiw	r24, 0x01	; 1
     3ba:	0e 94 29 0b 	call	0x1652	; 0x1652 <strcmp>
     3be:	89 2b       	or	r24, r25
     3c0:	09 f0       	breq	.+2      	; 0x3c4 <get_apn+0x78>
     3c2:	e3 c0       	rjmp	.+454    	; 0x58a <get_apn+0x23e>
		return 0;
	}
	
	// To check if SIM card is registered
	sim900_cmd("AT+CREG?\r\n\0",simresponse);  
     3c4:	be 01       	movw	r22, r28
     3c6:	6f 5f       	subi	r22, 0xFF	; 255
     3c8:	7f 4f       	sbci	r23, 0xFF	; 255
     3ca:	80 e3       	ldi	r24, 0x30	; 48
     3cc:	91 e0       	ldi	r25, 0x01	; 1
     3ce:	a3 df       	rcall	.-186    	; 0x316 <sim900_cmd>
	if (!((strcmp(simresponse,"+CREG: 0\,1\0")==0) || (strcmp(simresponse,"+CREG: 0\,5\0")==0))){
     3d0:	6c e3       	ldi	r22, 0x3C	; 60
     3d2:	71 e0       	ldi	r23, 0x01	; 1
     3d4:	ce 01       	movw	r24, r28
     3d6:	01 96       	adiw	r24, 0x01	; 1
     3d8:	0e 94 29 0b 	call	0x1652	; 0x1652 <strcmp>
     3dc:	89 2b       	or	r24, r25
     3de:	81 f0       	breq	.+32     	; 0x400 <get_apn+0xb4>
     3e0:	68 e4       	ldi	r22, 0x48	; 72
     3e2:	71 e0       	ldi	r23, 0x01	; 1
     3e4:	ce 01       	movw	r24, r28
     3e6:	01 96       	adiw	r24, 0x01	; 1
     3e8:	0e 94 29 0b 	call	0x1652	; 0x1652 <strcmp>
     3ec:	89 2b       	or	r24, r25
     3ee:	41 f0       	breq	.+16     	; 0x400 <get_apn+0xb4>
		sim900_cmd("AT+CREG?\r\n\0",simresponse);
     3f0:	be 01       	movw	r22, r28
     3f2:	6f 5f       	subi	r22, 0xFF	; 255
     3f4:	7f 4f       	sbci	r23, 0xFF	; 255
     3f6:	80 e3       	ldi	r24, 0x30	; 48
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	8d df       	rcall	.-230    	; 0x316 <sim900_cmd>
		return 0;
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	c8 c0       	rjmp	.+400    	; 0x590 <get_apn+0x244>
	}
	
	// Returns name of Network Provider
	sim900_cmd("AT+CSPN?\r\n\0",simresponse);  
     400:	be 01       	movw	r22, r28
     402:	6f 5f       	subi	r22, 0xFF	; 255
     404:	7f 4f       	sbci	r23, 0xFF	; 255
     406:	84 e5       	ldi	r24, 0x54	; 84
     408:	91 e0       	ldi	r25, 0x01	; 1
     40a:	85 df       	rcall	.-246    	; 0x316 <sim900_cmd>
	i=0;p=0;
	while (simresponse[i]!='\"' && i<200){
     40c:	89 81       	ldd	r24, Y+1	; 0x01
     40e:	82 32       	cpi	r24, 0x22	; 34
     410:	41 f0       	breq	.+16     	; 0x422 <get_apn+0xd6>
     412:	fe 01       	movw	r30, r28
     414:	32 96       	adiw	r30, 0x02	; 2
     416:	20 e0       	ldi	r18, 0x00	; 0
		i++;
     418:	2f 5f       	subi	r18, 0xFF	; 255
	}
	
	// Returns name of Network Provider
	sim900_cmd("AT+CSPN?\r\n\0",simresponse);  
	i=0;p=0;
	while (simresponse[i]!='\"' && i<200){
     41a:	81 91       	ld	r24, Z+
     41c:	82 32       	cpi	r24, 0x22	; 34
     41e:	e1 f7       	brne	.-8      	; 0x418 <get_apn+0xcc>
     420:	01 c0       	rjmp	.+2      	; 0x424 <get_apn+0xd8>
		return 0;
	}
	
	// Returns name of Network Provider
	sim900_cmd("AT+CSPN?\r\n\0",simresponse);  
	i=0;p=0;
     422:	20 e0       	ldi	r18, 0x00	; 0
	while (simresponse[i]!='\"' && i<200){
		i++;
	}
	i++;
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	92 0f       	add	r25, r18
	while (simresponse[i]!='\"' && p<30){
     428:	fe 01       	movw	r30, r28
     42a:	e9 0f       	add	r30, r25
     42c:	f1 1d       	adc	r31, r1
     42e:	31 81       	ldd	r19, Z+1	; 0x01
     430:	32 32       	cpi	r19, 0x22	; 34
     432:	99 f0       	breq	.+38     	; 0x45a <get_apn+0x10e>
     434:	f8 01       	movw	r30, r16
     436:	4f e1       	ldi	r20, 0x1F	; 31
     438:	42 0f       	add	r20, r18
		user[p]=simresponse[i];
     43a:	31 93       	st	Z+, r19
		p++;i++;
     43c:	89 2f       	mov	r24, r25
     43e:	82 1b       	sub	r24, r18
     440:	9f 5f       	subi	r25, 0xFF	; 255
	i=0;p=0;
	while (simresponse[i]!='\"' && i<200){
		i++;
	}
	i++;
	while (simresponse[i]!='\"' && p<30){
     442:	a1 e0       	ldi	r26, 0x01	; 1
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	ac 0f       	add	r26, r28
     448:	bd 1f       	adc	r27, r29
     44a:	a9 0f       	add	r26, r25
     44c:	b1 1d       	adc	r27, r1
     44e:	3c 91       	ld	r19, X
     450:	32 32       	cpi	r19, 0x22	; 34
     452:	21 f0       	breq	.+8      	; 0x45c <get_apn+0x110>
     454:	94 13       	cpse	r25, r20
     456:	f1 cf       	rjmp	.-30     	; 0x43a <get_apn+0xee>
     458:	01 c0       	rjmp	.+2      	; 0x45c <get_apn+0x110>
		return 0;
	}
	
	// Returns name of Network Provider
	sim900_cmd("AT+CSPN?\r\n\0",simresponse);  
	i=0;p=0;
     45a:	80 e0       	ldi	r24, 0x00	; 0
	i++;
	while (simresponse[i]!='\"' && p<30){
		user[p]=simresponse[i];
		p++;i++;
	}
	user[p]='\0';
     45c:	f8 01       	movw	r30, r16
     45e:	e8 0f       	add	r30, r24
     460:	f1 1d       	adc	r31, r1
     462:	10 82       	st	Z, r1
					 
	//APN Compare and Assignment
	if (strcmp(user,"Hutch\0")==0){
     464:	60 e6       	ldi	r22, 0x60	; 96
     466:	71 e0       	ldi	r23, 0x01	; 1
     468:	c8 01       	movw	r24, r16
     46a:	0e 94 29 0b 	call	0x1652	; 0x1652 <strcmp>
     46e:	89 2b       	or	r24, r25
     470:	59 f4       	brne	.+22     	; 0x488 <get_apn+0x13c>
		strcpy(apn,"www");
     472:	87 e7       	ldi	r24, 0x77	; 119
     474:	97 e7       	ldi	r25, 0x77	; 119
     476:	a7 e7       	ldi	r26, 0x77	; 119
     478:	b0 e0       	ldi	r27, 0x00	; 0
     47a:	f7 01       	movw	r30, r14
     47c:	80 83       	st	Z, r24
     47e:	91 83       	std	Z+1, r25	; 0x01
     480:	a2 83       	std	Z+2, r26	; 0x02
     482:	b3 83       	std	Z+3, r27	; 0x03
		return 1;
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	84 c0       	rjmp	.+264    	; 0x590 <get_apn+0x244>
	}
	else if (strcmp(user,"Vodafone\0")==0){
     488:	67 e6       	ldi	r22, 0x67	; 103
     48a:	71 e0       	ldi	r23, 0x01	; 1
     48c:	c8 01       	movw	r24, r16
     48e:	0e 94 29 0b 	call	0x1652	; 0x1652 <strcmp>
     492:	89 2b       	or	r24, r25
     494:	59 f4       	brne	.+22     	; 0x4ac <get_apn+0x160>
		strcpy(apn,"www");
     496:	87 e7       	ldi	r24, 0x77	; 119
     498:	97 e7       	ldi	r25, 0x77	; 119
     49a:	a7 e7       	ldi	r26, 0x77	; 119
     49c:	b0 e0       	ldi	r27, 0x00	; 0
     49e:	f7 01       	movw	r30, r14
     4a0:	80 83       	st	Z, r24
     4a2:	91 83       	std	Z+1, r25	; 0x01
     4a4:	a2 83       	std	Z+2, r26	; 0x02
     4a6:	b3 83       	std	Z+3, r27	; 0x03
		return 1;
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	72 c0       	rjmp	.+228    	; 0x590 <get_apn+0x244>
	}
	else if ((strcmp(user,"airtel\0")==0) || (strcmp(user,"Airtel\0")==0)){
     4ac:	61 e7       	ldi	r22, 0x71	; 113
     4ae:	71 e0       	ldi	r23, 0x01	; 1
     4b0:	c8 01       	movw	r24, r16
     4b2:	0e 94 29 0b 	call	0x1652	; 0x1652 <strcmp>
     4b6:	89 2b       	or	r24, r25
     4b8:	39 f0       	breq	.+14     	; 0x4c8 <get_apn+0x17c>
     4ba:	69 e7       	ldi	r22, 0x79	; 121
     4bc:	71 e0       	ldi	r23, 0x01	; 1
     4be:	c8 01       	movw	r24, r16
     4c0:	0e 94 29 0b 	call	0x1652	; 0x1652 <strcmp>
     4c4:	89 2b       	or	r24, r25
     4c6:	51 f4       	brne	.+20     	; 0x4dc <get_apn+0x190>
		strcpy(apn,"airtelgprs.com");
     4c8:	8f e0       	ldi	r24, 0x0F	; 15
     4ca:	e0 e4       	ldi	r30, 0x40	; 64
     4cc:	f3 e0       	ldi	r31, 0x03	; 3
     4ce:	d7 01       	movw	r26, r14
     4d0:	01 90       	ld	r0, Z+
     4d2:	0d 92       	st	X+, r0
     4d4:	8a 95       	dec	r24
     4d6:	e1 f7       	brne	.-8      	; 0x4d0 <get_apn+0x184>
		return 1;
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	5a c0       	rjmp	.+180    	; 0x590 <get_apn+0x244>
	}
	else if(strcmp(user,"CellOne\0")==0){
     4dc:	61 e8       	ldi	r22, 0x81	; 129
     4de:	71 e0       	ldi	r23, 0x01	; 1
     4e0:	c8 01       	movw	r24, r16
     4e2:	0e 94 29 0b 	call	0x1652	; 0x1652 <strcmp>
     4e6:	89 2b       	or	r24, r25
     4e8:	51 f4       	brne	.+20     	; 0x4fe <get_apn+0x1b2>
		strcpy(apn,"bsnlenet");
     4ea:	89 e0       	ldi	r24, 0x09	; 9
     4ec:	ef e4       	ldi	r30, 0x4F	; 79
     4ee:	f3 e0       	ldi	r31, 0x03	; 3
     4f0:	d7 01       	movw	r26, r14
     4f2:	01 90       	ld	r0, Z+
     4f4:	0d 92       	st	X+, r0
     4f6:	8a 95       	dec	r24
     4f8:	e1 f7       	brne	.-8      	; 0x4f2 <get_apn+0x1a6>
		return 1;;
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	49 c0       	rjmp	.+146    	; 0x590 <get_apn+0x244>
	}
	else if(strcmp(user,"Reliance\0")==0){
     4fe:	6a e8       	ldi	r22, 0x8A	; 138
     500:	71 e0       	ldi	r23, 0x01	; 1
     502:	c8 01       	movw	r24, r16
     504:	0e 94 29 0b 	call	0x1652	; 0x1652 <strcmp>
     508:	89 2b       	or	r24, r25
     50a:	51 f4       	brne	.+20     	; 0x520 <get_apn+0x1d4>
		strcpy(apn,"rcomwap");
     50c:	88 e0       	ldi	r24, 0x08	; 8
     50e:	e8 e5       	ldi	r30, 0x58	; 88
     510:	f3 e0       	ldi	r31, 0x03	; 3
     512:	d7 01       	movw	r26, r14
     514:	01 90       	ld	r0, Z+
     516:	0d 92       	st	X+, r0
     518:	8a 95       	dec	r24
     51a:	e1 f7       	brne	.-8      	; 0x514 <get_apn+0x1c8>
		return 1;
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	38 c0       	rjmp	.+112    	; 0x590 <get_apn+0x244>
	}
	else if(strcmp(user,"TATA\0")==0){
     520:	64 e9       	ldi	r22, 0x94	; 148
     522:	71 e0       	ldi	r23, 0x01	; 1
     524:	c8 01       	movw	r24, r16
     526:	0e 94 29 0b 	call	0x1652	; 0x1652 <strcmp>
     52a:	89 2b       	or	r24, r25
     52c:	51 f4       	brne	.+20     	; 0x542 <get_apn+0x1f6>
		strcpy(apn,"tata.docomo.internet");
     52e:	85 e1       	ldi	r24, 0x15	; 21
     530:	e0 e6       	ldi	r30, 0x60	; 96
     532:	f3 e0       	ldi	r31, 0x03	; 3
     534:	d7 01       	movw	r26, r14
     536:	01 90       	ld	r0, Z+
     538:	0d 92       	st	X+, r0
     53a:	8a 95       	dec	r24
     53c:	e1 f7       	brne	.-8      	; 0x536 <get_apn+0x1ea>
		return 1;
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	27 c0       	rjmp	.+78     	; 0x590 <get_apn+0x244>
	}
	else if(strcmp(user,"Uninor\0")==0){
     542:	6a e9       	ldi	r22, 0x9A	; 154
     544:	71 e0       	ldi	r23, 0x01	; 1
     546:	c8 01       	movw	r24, r16
     548:	0e 94 29 0b 	call	0x1652	; 0x1652 <strcmp>
     54c:	89 2b       	or	r24, r25
     54e:	51 f4       	brne	.+20     	; 0x564 <get_apn+0x218>
		strcpy(apn,"uninor");
     550:	87 e0       	ldi	r24, 0x07	; 7
     552:	e5 e7       	ldi	r30, 0x75	; 117
     554:	f3 e0       	ldi	r31, 0x03	; 3
     556:	d7 01       	movw	r26, r14
     558:	01 90       	ld	r0, Z+
     55a:	0d 92       	st	X+, r0
     55c:	8a 95       	dec	r24
     55e:	e1 f7       	brne	.-8      	; 0x558 <get_apn+0x20c>
		return 1;
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	16 c0       	rjmp	.+44     	; 0x590 <get_apn+0x244>
	}
	else if(strcmp(user,"!dea\0")==0){
     564:	62 ea       	ldi	r22, 0xA2	; 162
     566:	71 e0       	ldi	r23, 0x01	; 1
     568:	c8 01       	movw	r24, r16
     56a:	0e 94 29 0b 	call	0x1652	; 0x1652 <strcmp>
     56e:	89 2b       	or	r24, r25
     570:	71 f4       	brne	.+28     	; 0x58e <get_apn+0x242>
		strcpy(apn,"internet");
     572:	89 e0       	ldi	r24, 0x09	; 9
     574:	ec e6       	ldi	r30, 0x6C	; 108
     576:	f3 e0       	ldi	r31, 0x03	; 3
     578:	d7 01       	movw	r26, r14
     57a:	01 90       	ld	r0, Z+
     57c:	0d 92       	st	X+, r0
     57e:	8a 95       	dec	r24
     580:	e1 f7       	brne	.-8      	; 0x57a <get_apn+0x22e>
		return 1; 
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	05 c0       	rjmp	.+10     	; 0x590 <get_apn+0x244>
	_delay_ms(500);
	
	// SIM900 module check
	sim900_cmd("AT\r\n\0",simresponse);
	if (strcmp(simresponse,"OK\0")!=0){
		return 0;
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	03 c0       	rjmp	.+6      	; 0x590 <get_apn+0x244>
	}
	
	// To check if SIM card is present	 
	sim900_cmd("AT+CSMINS?\r\n\0",simresponse); 
	if (strcmp(simresponse,"+CSMINS: 0\,1\0")!=0){
		return 0;
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	01 c0       	rjmp	.+2      	; 0x590 <get_apn+0x244>
	else if(strcmp(user,"!dea\0")==0){
		strcpy(apn,"internet");
		return 1; 
	}
	else{
		return 0;
     58e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     590:	c8 53       	subi	r28, 0x38	; 56
     592:	df 4f       	sbci	r29, 0xFF	; 255
     594:	0f b6       	in	r0, 0x3f	; 63
     596:	f8 94       	cli
     598:	de bf       	out	0x3e, r29	; 62
     59a:	0f be       	out	0x3f, r0	; 63
     59c:	cd bf       	out	0x3d, r28	; 61
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	1f 91       	pop	r17
     5a4:	0f 91       	pop	r16
     5a6:	ff 90       	pop	r15
     5a8:	ef 90       	pop	r14
     5aa:	08 95       	ret

000005ac <allocate_dynaIP>:
	}
	
	return 0;
}

uint8_t allocate_dynaIP(){
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
     5b4:	64 97       	sbiw	r28, 0x14	; 20
     5b6:	0f b6       	in	r0, 0x3f	; 63
     5b8:	f8 94       	cli
     5ba:	de bf       	out	0x3e, r29	; 62
     5bc:	0f be       	out	0x3f, r0	; 63
     5be:	cd bf       	out	0x3d, r28	; 61
	char simresponse[20];
	
	//  To attach to GPRS connection
	sim900_cmd("AT+CIICR\r\n\0",simresponse);
     5c0:	be 01       	movw	r22, r28
     5c2:	6f 5f       	subi	r22, 0xFF	; 255
     5c4:	7f 4f       	sbci	r23, 0xFF	; 255
     5c6:	88 ea       	ldi	r24, 0xA8	; 168
     5c8:	91 e0       	ldi	r25, 0x01	; 1
     5ca:	a5 de       	rcall	.-694    	; 0x316 <sim900_cmd>
	if (strcmp(simresponse,"OK\0")==0){
     5cc:	60 e1       	ldi	r22, 0x10	; 16
     5ce:	71 e0       	ldi	r23, 0x01	; 1
     5d0:	ce 01       	movw	r24, r28
     5d2:	01 96       	adiw	r24, 0x01	; 1
     5d4:	0e 94 29 0b 	call	0x1652	; 0x1652 <strcmp>
     5d8:	89 2b       	or	r24, r25
     5da:	89 f4       	brne	.+34     	; 0x5fe <allocate_dynaIP+0x52>
		//  To allocate dynamic IP
		sim900_cmd("AT+CIFSR\r\n\0",simresponse);
     5dc:	be 01       	movw	r22, r28
     5de:	6f 5f       	subi	r22, 0xFF	; 255
     5e0:	7f 4f       	sbci	r23, 0xFF	; 255
     5e2:	84 eb       	ldi	r24, 0xB4	; 180
     5e4:	91 e0       	ldi	r25, 0x01	; 1
     5e6:	97 de       	rcall	.-722    	; 0x316 <sim900_cmd>
		if (strcmp(simresponse,"ERROR\0")!=0){
     5e8:	60 ec       	ldi	r22, 0xC0	; 192
     5ea:	71 e0       	ldi	r23, 0x01	; 1
     5ec:	ce 01       	movw	r24, r28
     5ee:	01 96       	adiw	r24, 0x01	; 1
     5f0:	0e 94 29 0b 	call	0x1652	; 0x1652 <strcmp>
     5f4:	21 e0       	ldi	r18, 0x01	; 1
     5f6:	89 2b       	or	r24, r25
     5f8:	19 f4       	brne	.+6      	; 0x600 <allocate_dynaIP+0x54>
     5fa:	20 e0       	ldi	r18, 0x00	; 0
     5fc:	01 c0       	rjmp	.+2      	; 0x600 <allocate_dynaIP+0x54>
			return 1;
		}
	}
	return 0;
     5fe:	20 e0       	ldi	r18, 0x00	; 0
} 
     600:	82 2f       	mov	r24, r18
     602:	64 96       	adiw	r28, 0x14	; 20
     604:	0f b6       	in	r0, 0x3f	; 63
     606:	f8 94       	cli
     608:	de bf       	out	0x3e, r29	; 62
     60a:	0f be       	out	0x3f, r0	; 63
     60c:	cd bf       	out	0x3d, r28	; 61
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	08 95       	ret

00000614 <fetch_gprs>:
	
	//  To send network info; signal status is 3: GPRS OK
	get_data(system_on,&responseimp,3,signal_strength,user);
}

uint8_t fetch_gprs(){
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	cd b7       	in	r28, 0x3d	; 61
     61a:	de b7       	in	r29, 0x3e	; 62
     61c:	64 97       	sbiw	r28, 0x14	; 20
     61e:	0f b6       	in	r0, 0x3f	; 63
     620:	f8 94       	cli
     622:	de bf       	out	0x3e, r29	; 62
     624:	0f be       	out	0x3f, r0	; 63
     626:	cd bf       	out	0x3d, r28	; 61
	char simresponse[20];
	
	sim900_cmd("AT+CGATT?\r\n",simresponse);
     628:	be 01       	movw	r22, r28
     62a:	6f 5f       	subi	r22, 0xFF	; 255
     62c:	7f 4f       	sbci	r23, 0xFF	; 255
     62e:	8c e7       	ldi	r24, 0x7C	; 124
     630:	93 e0       	ldi	r25, 0x03	; 3
     632:	71 de       	rcall	.-798    	; 0x316 <sim900_cmd>
	if(strcmp(simresponse,"+CGATT: 0\0")==0){  // If GPRS is not attached
     634:	67 ec       	ldi	r22, 0xC7	; 199
     636:	71 e0       	ldi	r23, 0x01	; 1
     638:	ce 01       	movw	r24, r28
     63a:	01 96       	adiw	r24, 0x01	; 1
     63c:	0e 94 29 0b 	call	0x1652	; 0x1652 <strcmp>
     640:	89 2b       	or	r24, r25
     642:	59 f4       	brne	.+22     	; 0x65a <fetch_gprs+0x46>
     644:	2f ef       	ldi	r18, 0xFF	; 255
     646:	83 e2       	ldi	r24, 0x23	; 35
     648:	94 ef       	ldi	r25, 0xF4	; 244
     64a:	21 50       	subi	r18, 0x01	; 1
     64c:	80 40       	sbci	r24, 0x00	; 0
     64e:	90 40       	sbci	r25, 0x00	; 0
     650:	e1 f7       	brne	.-8      	; 0x64a <fetch_gprs+0x36>
     652:	00 c0       	rjmp	.+0      	; 0x654 <fetch_gprs+0x40>
     654:	00 00       	nop
		sbi(UCSR1B,RXEN1);
		
		sim900_response(simresponse);
		return 1;
	}
	return 0;
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	12 c0       	rjmp	.+36     	; 0x67e <fetch_gprs+0x6a>
	char simresponse[20];
	
	sim900_cmd("AT+CGATT?\r\n",simresponse);
	if(strcmp(simresponse,"+CGATT: 0\0")==0){  // If GPRS is not attached
		_delay_ms(10000);
	}else if(strcmp(simresponse,"+CGATT: 1\0")==0){  // GPRS is attached properly
     65a:	62 ed       	ldi	r22, 0xD2	; 210
     65c:	71 e0       	ldi	r23, 0x01	; 1
     65e:	ce 01       	movw	r24, r28
     660:	01 96       	adiw	r24, 0x01	; 1
     662:	f7 d7       	rcall	.+4078   	; 0x1652 <strcmp>
     664:	89 2b       	or	r24, r25
     666:	51 f4       	brne	.+20     	; 0x67c <fetch_gprs+0x68>
		//  Reception Enable again for OK
		sbi(UCSR1B,RXEN1);
     668:	e9 ec       	ldi	r30, 0xC9	; 201
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	80 81       	ld	r24, Z
     66e:	80 61       	ori	r24, 0x10	; 16
     670:	80 83       	st	Z, r24
		
		sim900_response(simresponse);
     672:	ce 01       	movw	r24, r28
     674:	01 96       	adiw	r24, 0x01	; 1
     676:	16 de       	rcall	.-980    	; 0x2a4 <sim900_response>
		return 1;
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	01 c0       	rjmp	.+2      	; 0x67e <fetch_gprs+0x6a>
	}
	return 0;
     67c:	80 e0       	ldi	r24, 0x00	; 0
}
     67e:	64 96       	adiw	r28, 0x14	; 20
     680:	0f b6       	in	r0, 0x3f	; 63
     682:	f8 94       	cli
     684:	de bf       	out	0x3e, r29	; 62
     686:	0f be       	out	0x3f, r0	; 63
     688:	cd bf       	out	0x3d, r28	; 61
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	08 95       	ret

00000690 <set_apn>:
			takedata=1;
		}
	}
}

uint8_t set_apn(char* apn){
     690:	0f 93       	push	r16
     692:	1f 93       	push	r17
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	cd b7       	in	r28, 0x3d	; 61
     69a:	de b7       	in	r29, 0x3e	; 62
     69c:	2a 97       	sbiw	r28, 0x0a	; 10
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	f8 94       	cli
     6a2:	de bf       	out	0x3e, r29	; 62
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	cd bf       	out	0x3d, r28	; 61
     6a8:	8c 01       	movw	r16, r24
	char simresponse[10];
	
	//  Closing PDP connection
	sim900_cmd("AT+CIPSHUT\r\n\0",simresponse);	
     6aa:	be 01       	movw	r22, r28
     6ac:	6f 5f       	subi	r22, 0xFF	; 255
     6ae:	7f 4f       	sbci	r23, 0xFF	; 255
     6b0:	8d ed       	ldi	r24, 0xDD	; 221
     6b2:	91 e0       	ldi	r25, 0x01	; 1
     6b4:	30 de       	rcall	.-928    	; 0x316 <sim900_cmd>
	if (strcmp(simresponse,"SHUT OK\0")!=0){  //  Previous PDP connection not closed properly
     6b6:	6b ee       	ldi	r22, 0xEB	; 235
     6b8:	71 e0       	ldi	r23, 0x01	; 1
     6ba:	ce 01       	movw	r24, r28
     6bc:	01 96       	adiw	r24, 0x01	; 1
     6be:	c9 d7       	rcall	.+3986   	; 0x1652 <strcmp>
     6c0:	89 2b       	or	r24, r25
     6c2:	d1 f4       	brne	.+52     	; 0x6f8 <set_apn+0x68>
		return 0;
	}
	
	//  Reception Enable
	sbi(UCSR1B,RXEN1);
     6c4:	e9 ec       	ldi	r30, 0xC9	; 201
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	90 81       	ld	r25, Z
     6ca:	90 61       	ori	r25, 0x10	; 16
     6cc:	90 83       	st	Z, r25
	
	//  Setting APN
	UART_1_puts("AT+CSTT=\"");  //  To assign the APN username and password
     6ce:	88 e8       	ldi	r24, 0x88	; 136
     6d0:	93 e0       	ldi	r25, 0x03	; 3
     6d2:	76 d7       	rcall	.+3820   	; 0x15c0 <UART_1_puts>
	UART_1_puts(apn);
     6d4:	c8 01       	movw	r24, r16
     6d6:	74 d7       	rcall	.+3816   	; 0x15c0 <UART_1_puts>
	UART_1_puts("\"\,\"\"\,\"\"\r\n");
     6d8:	82 e9       	ldi	r24, 0x92	; 146
     6da:	93 e0       	ldi	r25, 0x03	; 3
     6dc:	71 d7       	rcall	.+3810   	; 0x15c0 <UART_1_puts>
		
	// Getting response
	sim900_response(simresponse);
     6de:	ce 01       	movw	r24, r28
     6e0:	01 96       	adiw	r24, 0x01	; 1
     6e2:	e0 dd       	rcall	.-1088   	; 0x2a4 <sim900_response>
	
	if (strcmp(simresponse,"OK\0")==0){  //  All good
     6e4:	60 e1       	ldi	r22, 0x10	; 16
     6e6:	71 e0       	ldi	r23, 0x01	; 1
     6e8:	ce 01       	movw	r24, r28
     6ea:	01 96       	adiw	r24, 0x01	; 1
     6ec:	b2 d7       	rcall	.+3940   	; 0x1652 <strcmp>
     6ee:	21 e0       	ldi	r18, 0x01	; 1
     6f0:	89 2b       	or	r24, r25
     6f2:	19 f0       	breq	.+6      	; 0x6fa <set_apn+0x6a>
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	01 c0       	rjmp	.+2      	; 0x6fa <set_apn+0x6a>
	char simresponse[10];
	
	//  Closing PDP connection
	sim900_cmd("AT+CIPSHUT\r\n\0",simresponse);	
	if (strcmp(simresponse,"SHUT OK\0")!=0){  //  Previous PDP connection not closed properly
		return 0;
     6f8:	20 e0       	ldi	r18, 0x00	; 0
	if (strcmp(simresponse,"OK\0")==0){  //  All good
		return 1;
	}
	
	return 0;
}
     6fa:	82 2f       	mov	r24, r18
     6fc:	2a 96       	adiw	r28, 0x0a	; 10
     6fe:	0f b6       	in	r0, 0x3f	; 63
     700:	f8 94       	cli
     702:	de bf       	out	0x3e, r29	; 62
     704:	0f be       	out	0x3f, r0	; 63
     706:	cd bf       	out	0x3d, r28	; 61
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	1f 91       	pop	r17
     70e:	0f 91       	pop	r16
     710:	08 95       	ret

00000712 <Log_data>:
		}
	}
	return 0;
} 

uint8_t Log_data(char* responseimp,char* Serial_num,char* loc_lat,char* loc_long){
     712:	4f 92       	push	r4
     714:	5f 92       	push	r5
     716:	6f 92       	push	r6
     718:	7f 92       	push	r7
     71a:	8f 92       	push	r8
     71c:	9f 92       	push	r9
     71e:	af 92       	push	r10
     720:	bf 92       	push	r11
     722:	cf 92       	push	r12
     724:	df 92       	push	r13
     726:	ef 92       	push	r14
     728:	ff 92       	push	r15
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	cd b7       	in	r28, 0x3d	; 61
     734:	de b7       	in	r29, 0x3e	; 62
     736:	d2 50       	subi	r29, 0x02	; 2
     738:	0f b6       	in	r0, 0x3f	; 63
     73a:	f8 94       	cli
     73c:	de bf       	out	0x3e, r29	; 62
     73e:	0f be       	out	0x3f, r0	; 63
     740:	cd bf       	out	0x3d, r28	; 61
     742:	4c 01       	movw	r8, r24
     744:	5b 01       	movw	r10, r22
     746:	3a 01       	movw	r6, r20
     748:	29 01       	movw	r4, r18
	char simresponse[512];
	uint8_t tabname_length=0,e=32,l=0,i=0;
	
	tabname_length=strlen(Serial_num);
     74a:	fb 01       	movw	r30, r22
     74c:	01 90       	ld	r0, Z+
     74e:	00 20       	and	r0, r0
     750:	e9 f7       	brne	.-6      	; 0x74c <Log_data+0x3a>
     752:	ee 50       	subi	r30, 0x0E	; 14
	if (tabname_length!=13){
     754:	e6 17       	cp	r30, r22
     756:	b1 f0       	breq	.+44     	; 0x784 <Log_data+0x72>
     758:	6b 01       	movw	r12, r22
     75a:	2d e0       	ldi	r18, 0x0D	; 13
     75c:	c2 0e       	add	r12, r18
     75e:	d1 1c       	adc	r13, r1
     760:	8b 01       	movw	r16, r22
     762:	80 e2       	ldi	r24, 0x20	; 32
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	7c 01       	movw	r14, r24
     768:	e6 1a       	sub	r14, r22
     76a:	f7 0a       	sbc	r15, r23
		while (l<13){
			Serial_num[i]=eeprom_read_byte((uint8_t*)e);
     76c:	c7 01       	movw	r24, r14
     76e:	80 0f       	add	r24, r16
     770:	91 1f       	adc	r25, r17
     772:	e0 d7       	rcall	.+4032   	; 0x1734 <eeprom_read_byte>
     774:	f8 01       	movw	r30, r16
     776:	81 93       	st	Z+, r24
     778:	8f 01       	movw	r16, r30
	char simresponse[512];
	uint8_t tabname_length=0,e=32,l=0,i=0;
	
	tabname_length=strlen(Serial_num);
	if (tabname_length!=13){
		while (l<13){
     77a:	ec 15       	cp	r30, r12
     77c:	fd 05       	cpc	r31, r13
     77e:	b1 f7       	brne	.-20     	; 0x76c <Log_data+0x5a>
			Serial_num[i]=eeprom_read_byte((uint8_t*)e);
			i++;e++;l++;
		}
		Serial_num[i]='\0';
     780:	f5 01       	movw	r30, r10
     782:	15 86       	std	Z+13, r1	; 0x0d
	}
	//  GPRS services connected and getting ready to Log
	sim900_cmd("AT+CIPSTART=\"TCP\"\,\"52.74.151.81\"\,\"80\"\r\n\0",simresponse);
     784:	be 01       	movw	r22, r28
     786:	6f 5f       	subi	r22, 0xFF	; 255
     788:	7f 4f       	sbci	r23, 0xFF	; 255
     78a:	84 ef       	ldi	r24, 0xF4	; 244
     78c:	91 e0       	ldi	r25, 0x01	; 1
     78e:	c3 dd       	rcall	.-1146   	; 0x316 <sim900_cmd>
	if (strcmp(simresponse,"OK\0")==0){
     790:	60 e1       	ldi	r22, 0x10	; 16
     792:	71 e0       	ldi	r23, 0x01	; 1
     794:	ce 01       	movw	r24, r28
     796:	01 96       	adiw	r24, 0x01	; 1
     798:	5c d7       	rcall	.+3768   	; 0x1652 <strcmp>
     79a:	89 2b       	or	r24, r25
     79c:	09 f0       	breq	.+2      	; 0x7a0 <Log_data+0x8e>
     79e:	37 c0       	rjmp	.+110    	; 0x80e <Log_data+0xfc>
		
		//  Enabling data reception again to verify connection
		sbi(UCSR1B,RXEN1);
     7a0:	09 ec       	ldi	r16, 0xC9	; 201
     7a2:	10 e0       	ldi	r17, 0x00	; 0
     7a4:	f8 01       	movw	r30, r16
     7a6:	80 81       	ld	r24, Z
     7a8:	80 61       	ori	r24, 0x10	; 16
     7aa:	80 83       	st	Z, r24
		
		//  Verifying connection
		sim900_response(simresponse);
     7ac:	ce 01       	movw	r24, r28
     7ae:	01 96       	adiw	r24, 0x01	; 1
     7b0:	79 dd       	rcall	.-1294   	; 0x2a4 <sim900_response>
		
		//  Start sending the data							
		UART_1_puts("AT+CIPSEND\r\n\0");
     7b2:	8d e1       	ldi	r24, 0x1D	; 29
     7b4:	92 e0       	ldi	r25, 0x02	; 2
     7b6:	04 d7       	rcall	.+3592   	; 0x15c0 <UART_1_puts>
     7b8:	ff ef       	ldi	r31, 0xFF	; 255
     7ba:	24 e3       	ldi	r18, 0x34	; 52
     7bc:	8c e0       	ldi	r24, 0x0C	; 12
     7be:	f1 50       	subi	r31, 0x01	; 1
     7c0:	20 40       	sbci	r18, 0x00	; 0
     7c2:	80 40       	sbci	r24, 0x00	; 0
     7c4:	e1 f7       	brne	.-8      	; 0x7be <Log_data+0xac>
     7c6:	00 c0       	rjmp	.+0      	; 0x7c8 <Log_data+0xb6>
     7c8:	00 00       	nop
		_delay_ms(500);
		
		// Sending data
		UART_1_puts("GET /datalogging/write.php?tabname=\0");
     7ca:	8b e2       	ldi	r24, 0x2B	; 43
     7cc:	92 e0       	ldi	r25, 0x02	; 2
     7ce:	f8 d6       	rcall	.+3568   	; 0x15c0 <UART_1_puts>
 		UART_1_puts(Serial_num);
     7d0:	c5 01       	movw	r24, r10
     7d2:	f6 d6       	rcall	.+3564   	; 0x15c0 <UART_1_puts>
 		UART_1_putc('&');
     7d4:	86 e2       	ldi	r24, 0x26	; 38
     7d6:	ec d6       	rcall	.+3544   	; 0x15b0 <UART_1_putc>
		UART_1_puts(responseimp);
     7d8:	c4 01       	movw	r24, r8
     7da:	f2 d6       	rcall	.+3556   	; 0x15c0 <UART_1_puts>
		UART_1_puts("&A08=");
     7dc:	8c e9       	ldi	r24, 0x9C	; 156
     7de:	93 e0       	ldi	r25, 0x03	; 3
     7e0:	ef d6       	rcall	.+3550   	; 0x15c0 <UART_1_puts>
		UART_1_puts(loc_lat);
     7e2:	c3 01       	movw	r24, r6
     7e4:	ed d6       	rcall	.+3546   	; 0x15c0 <UART_1_puts>
		UART_1_puts("&A09=");
     7e6:	82 ea       	ldi	r24, 0xA2	; 162
     7e8:	93 e0       	ldi	r25, 0x03	; 3
     7ea:	ea d6       	rcall	.+3540   	; 0x15c0 <UART_1_puts>
		UART_1_puts(loc_long);
     7ec:	c2 01       	movw	r24, r4
     7ee:	e8 d6       	rcall	.+3536   	; 0x15c0 <UART_1_puts>
		UART_1_puts(" HTTP/1.1\r\n\0");
     7f0:	80 e5       	ldi	r24, 0x50	; 80
     7f2:	92 e0       	ldi	r25, 0x02	; 2
     7f4:	e5 d6       	rcall	.+3530   	; 0x15c0 <UART_1_puts>
		UART_1_puts("Host:52.74.151.81\r\nAccept: */*\r\nAccept-Language: en-us\r\nConnection: Keep-Alive\r\n\r\n\x1A\0");
     7f6:	8d e5       	ldi	r24, 0x5D	; 93
     7f8:	92 e0       	ldi	r25, 0x02	; 2
     7fa:	e2 d6       	rcall	.+3524   	; 0x15c0 <UART_1_puts>
		
		//  Enabling data reception
		sbi(UCSR1B,RXEN1);
     7fc:	f8 01       	movw	r30, r16
     7fe:	80 81       	ld	r24, Z
     800:	80 61       	ori	r24, 0x10	; 16
     802:	80 83       	st	Z, r24
				
		//  Confirm response from SIM900
		sim900_response(simresponse);
     804:	ce 01       	movw	r24, r28
     806:	01 96       	adiw	r24, 0x01	; 1
     808:	4d dd       	rcall	.-1382   	; 0x2a4 <sim900_response>
				
		return 1;
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	01 c0       	rjmp	.+2      	; 0x810 <Log_data+0xfe>
	}
	
	return 0;
     80e:	80 e0       	ldi	r24, 0x00	; 0
}
     810:	de 5f       	subi	r29, 0xFE	; 254
     812:	0f b6       	in	r0, 0x3f	; 63
     814:	f8 94       	cli
     816:	de bf       	out	0x3e, r29	; 62
     818:	0f be       	out	0x3f, r0	; 63
     81a:	cd bf       	out	0x3d, r28	; 61
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	1f 91       	pop	r17
     822:	0f 91       	pop	r16
     824:	ff 90       	pop	r15
     826:	ef 90       	pop	r14
     828:	df 90       	pop	r13
     82a:	cf 90       	pop	r12
     82c:	bf 90       	pop	r11
     82e:	af 90       	pop	r10
     830:	9f 90       	pop	r9
     832:	8f 90       	pop	r8
     834:	7f 90       	pop	r7
     836:	6f 90       	pop	r6
     838:	5f 90       	pop	r5
     83a:	4f 90       	pop	r4
     83c:	08 95       	ret

0000083e <dataLog>:
	sim900_cmd("AT+CMGDA=\"DEL READ\"\r\n",simresponse);
	
	return 1;
}

void dataLog(uint8_t system_on,char* apn,char* Serial_num,uint8_t signal_strength,char* user,char* loc_lat,char* loc_long){
     83e:	3f 92       	push	r3
     840:	4f 92       	push	r4
     842:	5f 92       	push	r5
     844:	6f 92       	push	r6
     846:	7f 92       	push	r7
     848:	8f 92       	push	r8
     84a:	9f 92       	push	r9
     84c:	af 92       	push	r10
     84e:	bf 92       	push	r11
     850:	cf 92       	push	r12
     852:	df 92       	push	r13
     854:	ef 92       	push	r14
     856:	ff 92       	push	r15
     858:	0f 93       	push	r16
     85a:	1f 93       	push	r17
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
     860:	cd b7       	in	r28, 0x3d	; 61
     862:	de b7       	in	r29, 0x3e	; 62
     864:	d2 50       	subi	r29, 0x02	; 2
     866:	0f b6       	in	r0, 0x3f	; 63
     868:	f8 94       	cli
     86a:	de bf       	out	0x3e, r29	; 62
     86c:	0f be       	out	0x3f, r0	; 63
     86e:	cd bf       	out	0x3d, r28	; 61
     870:	b8 2e       	mov	r11, r24
     872:	3b 01       	movw	r6, r22
     874:	2a 01       	movw	r4, r20
     876:	a2 2e       	mov	r10, r18
     878:	48 01       	movw	r8, r16
     87a:	1a e0       	ldi	r17, 0x0A	; 10
	char responseimp[512];
	
	// To acquire GPRS settings
	data_counter=NumberOfAttempts;  // Number of attempts to be made if APN fetch fails
	while (data_counter!=0){
		flag_fetch_gprs = fetch_gprs();
     87c:	cb de       	rcall	.-618    	; 0x614 <fetch_gprs>
		data_counter--;
		if(flag_fetch_gprs==1){  // GPRS settings Fetch successful
     87e:	81 30       	cpi	r24, 0x01	; 1
     880:	19 f0       	breq	.+6      	; 0x888 <dataLog+0x4a>
     882:	11 50       	subi	r17, 0x01	; 1
			break;
		}
		else if(data_counter==0){  // Number of attempts exhausted
     884:	d9 f7       	brne	.-10     	; 0x87c <dataLog+0x3e>
     886:	2f c0       	rjmp	.+94     	; 0x8e6 <dataLog+0xa8>
     888:	0f 2e       	mov	r0, r31
     88a:	fa e0       	ldi	r31, 0x0A	; 10
     88c:	3f 2e       	mov	r3, r31
     88e:	f0 2d       	mov	r31, r0
	
	// Acquiring data for logging and setting APN
	data_counter=NumberOfAttempts;  // Number of attempts to be made if APN set fails
	while (data_counter!=0){
		// Acquiring data for logging		
		get_data(system_on,&responseimp,2,signal_strength,user);
     890:	84 01       	movw	r16, r8
     892:	2a 2d       	mov	r18, r10
     894:	42 e0       	ldi	r20, 0x02	; 2
     896:	be 01       	movw	r22, r28
     898:	6f 5f       	subi	r22, 0xFF	; 255
     89a:	7f 4f       	sbci	r23, 0xFF	; 255
     89c:	8b 2d       	mov	r24, r11
     89e:	16 dc       	rcall	.-2004   	; 0xcc <get_data>
		
		//Setting APN
		flag_set_apn = set_apn(apn);
     8a0:	c3 01       	movw	r24, r6
     8a2:	f6 de       	rcall	.-532    	; 0x690 <set_apn>
		data_counter--;
		if(flag_set_apn==1){  // APN set successful
     8a4:	81 30       	cpi	r24, 0x01	; 1
     8a6:	21 f0       	breq	.+8      	; 0x8b0 <dataLog+0x72>
     8a8:	3a 94       	dec	r3
			break;
		}
		else if(data_counter==0){  // Number of attempts exhausted
     8aa:	31 10       	cpse	r3, r1
     8ac:	f1 cf       	rjmp	.-30     	; 0x890 <dataLog+0x52>
     8ae:	1b c0       	rjmp	.+54     	; 0x8e6 <dataLog+0xa8>
     8b0:	1a e0       	ldi	r17, 0x0A	; 10
	}
	
	// Allocating dynamic IP
	data_counter=NumberOfAttempts;  // Number of attempts to be made if Dynamic IP allocation fails
	while (data_counter!=0){
		flag_allocate_dynaIP = allocate_dynaIP();
     8b2:	7c de       	rcall	.-776    	; 0x5ac <allocate_dynaIP>
		data_counter--;
		if(flag_allocate_dynaIP==1){  // Dynamic IP allocation successful
     8b4:	81 30       	cpi	r24, 0x01	; 1
     8b6:	19 f0       	breq	.+6      	; 0x8be <dataLog+0x80>
     8b8:	11 50       	subi	r17, 0x01	; 1
			break;
		}
		else if(data_counter==0){  // Number of attempts exhausted
     8ba:	d9 f7       	brne	.-10     	; 0x8b2 <dataLog+0x74>
     8bc:	14 c0       	rjmp	.+40     	; 0x8e6 <dataLog+0xa8>
     8be:	1a e0       	ldi	r17, 0x0A	; 10
	}
	
	// Data Logging
	data_counter=NumberOfAttempts;  // Number of attempts to be made if Dynamic IP allocation fails
	while (data_counter!=0){
		flag_Log_data = Log_data(responseimp,Serial_num,loc_lat,loc_long);
     8c0:	96 01       	movw	r18, r12
     8c2:	a7 01       	movw	r20, r14
     8c4:	b2 01       	movw	r22, r4
     8c6:	ce 01       	movw	r24, r28
     8c8:	01 96       	adiw	r24, 0x01	; 1
     8ca:	23 df       	rcall	.-442    	; 0x712 <Log_data>
		data_counter--;
		if(flag_Log_data==1){  // Data Logging successful
     8cc:	81 30       	cpi	r24, 0x01	; 1
     8ce:	19 f0       	breq	.+6      	; 0x8d6 <dataLog+0x98>
     8d0:	11 50       	subi	r17, 0x01	; 1
			break;
		}
		else if(data_counter==0){  // Number of attempts exhausted
     8d2:	b1 f7       	brne	.-20     	; 0x8c0 <dataLog+0x82>
     8d4:	08 c0       	rjmp	.+16     	; 0x8e6 <dataLog+0xa8>
			return;
		}		
	}
	
	//  To send network info; signal status is 3: GPRS OK
	get_data(system_on,&responseimp,3,signal_strength,user);
     8d6:	84 01       	movw	r16, r8
     8d8:	2a 2d       	mov	r18, r10
     8da:	43 e0       	ldi	r20, 0x03	; 3
     8dc:	be 01       	movw	r22, r28
     8de:	6f 5f       	subi	r22, 0xFF	; 255
     8e0:	7f 4f       	sbci	r23, 0xFF	; 255
     8e2:	8b 2d       	mov	r24, r11
     8e4:	f3 db       	rcall	.-2074   	; 0xcc <get_data>
}
     8e6:	de 5f       	subi	r29, 0xFE	; 254
     8e8:	0f b6       	in	r0, 0x3f	; 63
     8ea:	f8 94       	cli
     8ec:	de bf       	out	0x3e, r29	; 62
     8ee:	0f be       	out	0x3f, r0	; 63
     8f0:	cd bf       	out	0x3d, r28	; 61
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	1f 91       	pop	r17
     8f8:	0f 91       	pop	r16
     8fa:	ff 90       	pop	r15
     8fc:	ef 90       	pop	r14
     8fe:	df 90       	pop	r13
     900:	cf 90       	pop	r12
     902:	bf 90       	pop	r11
     904:	af 90       	pop	r10
     906:	9f 90       	pop	r9
     908:	8f 90       	pop	r8
     90a:	7f 90       	pop	r7
     90c:	6f 90       	pop	r6
     90e:	5f 90       	pop	r5
     910:	4f 90       	pop	r4
     912:	3f 90       	pop	r3
     914:	08 95       	ret

00000916 <get_signalstrength>:

	//  Reception Disable
	cbi(UCSR1B,RXEN1);
} 

uint8_t get_signalstrength(){
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	cd b7       	in	r28, 0x3d	; 61
     91c:	de b7       	in	r29, 0x3e	; 62
     91e:	c0 5d       	subi	r28, 0xD0	; 208
     920:	d1 09       	sbc	r29, r1
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	f8 94       	cli
     926:	de bf       	out	0x3e, r29	; 62
     928:	0f be       	out	0x3f, r0	; 63
     92a:	cd bf       	out	0x3d, r28	; 61
	char dummy[5],strength[3],simresponse[200];
	uint8_t signalstrength;
	
	//  To get signal strength
	sim900_cmd("AT+CSQ\r\n\0",simresponse); 
     92c:	be 01       	movw	r22, r28
     92e:	67 5f       	subi	r22, 0xF7	; 247
     930:	7f 4f       	sbci	r23, 0xFF	; 255
     932:	82 eb       	ldi	r24, 0xB2	; 178
     934:	92 e0       	ldi	r25, 0x02	; 2
     936:	ef dc       	rcall	.-1570   	; 0x316 <sim900_cmd>
	
	//  Re-enabling reception for OK
	sbi(UCSR1B,RXEN1);
     938:	e9 ec       	ldi	r30, 0xC9	; 201
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	80 81       	ld	r24, Z
     93e:	80 61       	ori	r24, 0x10	; 16
     940:	80 83       	st	Z, r24
	
	sim900_response(dummy);
     942:	ce 01       	movw	r24, r28
     944:	01 96       	adiw	r24, 0x01	; 1
     946:	ae dc       	rcall	.-1700   	; 0x2a4 <sim900_response>
	
	strength[0]=simresponse[6];
     948:	8f 85       	ldd	r24, Y+15	; 0x0f
     94a:	8e 83       	std	Y+6, r24	; 0x06
	if (simresponse[7]!=','){
     94c:	88 89       	ldd	r24, Y+16	; 0x10
     94e:	8c 32       	cpi	r24, 0x2C	; 44
     950:	19 f0       	breq	.+6      	; 0x958 <get_signalstrength+0x42>
		strength[1]=simresponse[7];
     952:	8f 83       	std	Y+7, r24	; 0x07
		strength[2]='\0';
     954:	18 86       	std	Y+8, r1	; 0x08
     956:	01 c0       	rjmp	.+2      	; 0x95a <get_signalstrength+0x44>
	} else {
		strength[1]='\0';
     958:	1f 82       	std	Y+7, r1	; 0x07
	}	
	
	signalstrength=atoi(strength);
     95a:	ce 01       	movw	r24, r28
     95c:	06 96       	adiw	r24, 0x06	; 6
     95e:	3e d6       	rcall	.+3196   	; 0x15dc <atoi>
	
	if (signalstrength<10 || signalstrength==99){
     960:	8a 30       	cpi	r24, 0x0A	; 10
     962:	68 f0       	brcs	.+26     	; 0x97e <get_signalstrength+0x68>
     964:	83 36       	cpi	r24, 0x63	; 99
     966:	69 f0       	breq	.+26     	; 0x982 <get_signalstrength+0x6c>
		return 0;
	} else if (signalstrength>=10 && signalstrength<20){
     968:	96 ef       	ldi	r25, 0xF6	; 246
     96a:	98 0f       	add	r25, r24
     96c:	9a 30       	cpi	r25, 0x0A	; 10
     96e:	58 f0       	brcs	.+22     	; 0x986 <get_signalstrength+0x70>
		return 1;
	} else if (signalstrength>=20 && signalstrength<30){
     970:	9c ee       	ldi	r25, 0xEC	; 236
     972:	98 0f       	add	r25, r24
     974:	9a 30       	cpi	r25, 0x0A	; 10
     976:	48 f0       	brcs	.+18     	; 0x98a <get_signalstrength+0x74>
		return 2;
	} else if (signalstrength>30){
     978:	8f 31       	cpi	r24, 0x1F	; 31
     97a:	48 f4       	brcc	.+18     	; 0x98e <get_signalstrength+0x78>
     97c:	09 c0       	rjmp	.+18     	; 0x990 <get_signalstrength+0x7a>
	}	
	
	signalstrength=atoi(strength);
	
	if (signalstrength<10 || signalstrength==99){
		return 0;
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	07 c0       	rjmp	.+14     	; 0x990 <get_signalstrength+0x7a>
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	05 c0       	rjmp	.+10     	; 0x990 <get_signalstrength+0x7a>
	} else if (signalstrength>=10 && signalstrength<20){
		return 1;
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	03 c0       	rjmp	.+6      	; 0x990 <get_signalstrength+0x7a>
	} else if (signalstrength>=20 && signalstrength<30){
		return 2;
     98a:	82 e0       	ldi	r24, 0x02	; 2
     98c:	01 c0       	rjmp	.+2      	; 0x990 <get_signalstrength+0x7a>
	} else if (signalstrength>30){
		return 3;
     98e:	83 e0       	ldi	r24, 0x03	; 3
	}
}
     990:	c0 53       	subi	r28, 0x30	; 48
     992:	df 4f       	sbci	r29, 0xFF	; 255
     994:	0f b6       	in	r0, 0x3f	; 63
     996:	f8 94       	cli
     998:	de bf       	out	0x3e, r29	; 62
     99a:	0f be       	out	0x3f, r0	; 63
     99c:	cd bf       	out	0x3d, r28	; 61
     99e:	df 91       	pop	r29
     9a0:	cf 91       	pop	r28
     9a2:	08 95       	ret

000009a4 <get_sms>:
	sbi(UCSR1B,RXEN1);
	
	sim900_response(response);
}

uint8_t get_sms(uint8_t* system_on,char* customer_no,char* Serial_num,int* no_litres){
     9a4:	2f 92       	push	r2
     9a6:	3f 92       	push	r3
     9a8:	4f 92       	push	r4
     9aa:	5f 92       	push	r5
     9ac:	6f 92       	push	r6
     9ae:	7f 92       	push	r7
     9b0:	8f 92       	push	r8
     9b2:	9f 92       	push	r9
     9b4:	af 92       	push	r10
     9b6:	bf 92       	push	r11
     9b8:	cf 92       	push	r12
     9ba:	df 92       	push	r13
     9bc:	ef 92       	push	r14
     9be:	ff 92       	push	r15
     9c0:	0f 93       	push	r16
     9c2:	1f 93       	push	r17
     9c4:	cf 93       	push	r28
     9c6:	df 93       	push	r29
     9c8:	cd b7       	in	r28, 0x3d	; 61
     9ca:	de b7       	in	r29, 0x3e	; 62
     9cc:	c5 59       	subi	r28, 0x95	; 149
     9ce:	d1 40       	sbci	r29, 0x01	; 1
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	f8 94       	cli
     9d4:	de bf       	out	0x3e, r29	; 62
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	cd bf       	out	0x3d, r28	; 61
     9da:	c3 57       	subi	r28, 0x73	; 115
     9dc:	de 4f       	sbci	r29, 0xFE	; 254
     9de:	99 83       	std	Y+1, r25	; 0x01
     9e0:	88 83       	st	Y, r24
     9e2:	cd 58       	subi	r28, 0x8D	; 141
     9e4:	d1 40       	sbci	r29, 0x01	; 1
     9e6:	c5 57       	subi	r28, 0x75	; 117
     9e8:	de 4f       	sbci	r29, 0xFE	; 254
     9ea:	79 83       	std	Y+1, r23	; 0x01
     9ec:	68 83       	st	Y, r22
     9ee:	cb 58       	subi	r28, 0x8B	; 139
     9f0:	d1 40       	sbci	r29, 0x01	; 1
     9f2:	c1 57       	subi	r28, 0x71	; 113
     9f4:	de 4f       	sbci	r29, 0xFE	; 254
     9f6:	59 83       	std	Y+1, r21	; 0x01
     9f8:	48 83       	st	Y, r20
     9fa:	cf 58       	subi	r28, 0x8F	; 143
     9fc:	d1 40       	sbci	r29, 0x01	; 1
	int no_of_msg,message_number;
	char no_msg[6],response_number[150],contact_no[20],simresponse[30],msg[160],dummy[5];
	char initial[]={'0','0'};
	char litres[20];
	// Check no. of messages
	sim900_cmd("AT+CPMS=\"SM\"\r\n\0",simresponse);
     9fe:	be 01       	movw	r22, r28
     a00:	6f 54       	subi	r22, 0x4F	; 79
     a02:	7f 4f       	sbci	r23, 0xFF	; 255
     a04:	8c eb       	ldi	r24, 0xBC	; 188
     a06:	92 e0       	ldi	r25, 0x02	; 2
     a08:	86 dc       	rcall	.-1780   	; 0x316 <sim900_cmd>
	
	//  For re-enabling reception for OK
	sbi(UCSR1B,RXEN1);
     a0a:	e9 ec       	ldi	r30, 0xC9	; 201
     a0c:	f0 e0       	ldi	r31, 0x00	; 0
     a0e:	80 81       	ld	r24, Z
     a10:	80 61       	ori	r24, 0x10	; 16
     a12:	80 83       	st	Z, r24
	
	sim900_response(dummy);
     a14:	ce 01       	movw	r24, r28
     a16:	81 59       	subi	r24, 0x91	; 145
     a18:	9e 4f       	sbci	r25, 0xFE	; 254
     a1a:	44 dc       	rcall	.-1912   	; 0x2a4 <sim900_response>
	
	i=0;p=0;
	while (simresponse[i]!='\:' && i<30){
     a1c:	cf 54       	subi	r28, 0x4F	; 79
     a1e:	df 4f       	sbci	r29, 0xFF	; 255
     a20:	88 81       	ld	r24, Y
     a22:	c1 5b       	subi	r28, 0xB1	; 177
     a24:	d0 40       	sbci	r29, 0x00	; 0
     a26:	8a 33       	cpi	r24, 0x3A	; 58
     a28:	49 f0       	breq	.+18     	; 0xa3c <get_sms+0x98>
     a2a:	fe 01       	movw	r30, r28
     a2c:	ee 54       	subi	r30, 0x4E	; 78
     a2e:	ff 4f       	sbci	r31, 0xFF	; 255
     a30:	80 e0       	ldi	r24, 0x00	; 0
		i++;
     a32:	8f 5f       	subi	r24, 0xFF	; 255
	sbi(UCSR1B,RXEN1);
	
	sim900_response(dummy);
	
	i=0;p=0;
	while (simresponse[i]!='\:' && i<30){
     a34:	91 91       	ld	r25, Z+
     a36:	9a 33       	cpi	r25, 0x3A	; 58
     a38:	e1 f7       	brne	.-8      	; 0xa32 <get_sms+0x8e>
     a3a:	01 c0       	rjmp	.+2      	; 0xa3e <get_sms+0x9a>
	//  For re-enabling reception for OK
	sbi(UCSR1B,RXEN1);
	
	sim900_response(dummy);
	
	i=0;p=0;
     a3c:	80 e0       	ldi	r24, 0x00	; 0
	while (simresponse[i]!='\:' && i<30){
		i++;
	}
	i++;i++;
     a3e:	92 e0       	ldi	r25, 0x02	; 2
     a40:	98 0f       	add	r25, r24
	while (simresponse[i]!='\,' && p<6){
     a42:	e1 eb       	ldi	r30, 0xB1	; 177
     a44:	f0 e0       	ldi	r31, 0x00	; 0
     a46:	ec 0f       	add	r30, r28
     a48:	fd 1f       	adc	r31, r29
     a4a:	e9 0f       	add	r30, r25
     a4c:	f1 1d       	adc	r31, r1
     a4e:	20 81       	ld	r18, Z
     a50:	2c 32       	cpi	r18, 0x2C	; 44
     a52:	a9 f0       	breq	.+42     	; 0xa7e <get_sms+0xda>
     a54:	ae 01       	movw	r20, r28
     a56:	4f 5f       	subi	r20, 0xFF	; 255
     a58:	5f 4f       	sbci	r21, 0xFF	; 255
     a5a:	88 5f       	subi	r24, 0xF8	; 248
     a5c:	fa 01       	movw	r30, r20
		no_msg[p]=simresponse[i];
     a5e:	21 93       	st	Z+, r18
     a60:	3e 2f       	mov	r19, r30
     a62:	34 1b       	sub	r19, r20
		p++;i++;
     a64:	9f 5f       	subi	r25, 0xFF	; 255
	i=0;p=0;
	while (simresponse[i]!='\:' && i<30){
		i++;
	}
	i++;i++;
	while (simresponse[i]!='\,' && p<6){
     a66:	a1 eb       	ldi	r26, 0xB1	; 177
     a68:	b0 e0       	ldi	r27, 0x00	; 0
     a6a:	ac 0f       	add	r26, r28
     a6c:	bd 1f       	adc	r27, r29
     a6e:	a9 0f       	add	r26, r25
     a70:	b1 1d       	adc	r27, r1
     a72:	2c 91       	ld	r18, X
     a74:	2c 32       	cpi	r18, 0x2C	; 44
     a76:	21 f0       	breq	.+8      	; 0xa80 <get_sms+0xdc>
     a78:	98 13       	cpse	r25, r24
     a7a:	f1 cf       	rjmp	.-30     	; 0xa5e <get_sms+0xba>
     a7c:	01 c0       	rjmp	.+2      	; 0xa80 <get_sms+0xdc>
	//  For re-enabling reception for OK
	sbi(UCSR1B,RXEN1);
	
	sim900_response(dummy);
	
	i=0;p=0;
     a7e:	30 e0       	ldi	r19, 0x00	; 0
	i++;i++;
	while (simresponse[i]!='\,' && p<6){
		no_msg[p]=simresponse[i];
		p++;i++;
	}
	no_msg[p]='\0';
     a80:	e1 e0       	ldi	r30, 0x01	; 1
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	ec 0f       	add	r30, r28
     a86:	fd 1f       	adc	r31, r29
     a88:	e3 0f       	add	r30, r19
     a8a:	f1 1d       	adc	r31, r1
     a8c:	10 82       	st	Z, r1
	no_of_msg = atoi(no_msg);  
     a8e:	ce 01       	movw	r24, r28
     a90:	01 96       	adiw	r24, 0x01	; 1
     a92:	a4 d5       	rcall	.+2888   	; 0x15dc <atoi>
     a94:	c7 57       	subi	r28, 0x77	; 119
     a96:	de 4f       	sbci	r29, 0xFE	; 254
     a98:	99 83       	std	Y+1, r25	; 0x01
     a9a:	88 83       	st	Y, r24
     a9c:	c9 58       	subi	r28, 0x89	; 137
     a9e:	d1 40       	sbci	r29, 0x01	; 1
	
	// Exiting the function if no new messages have arrived
	if (no_of_msg==0){
     aa0:	89 2b       	or	r24, r25
     aa2:	09 f4       	brne	.+2      	; 0xaa6 <get_sms+0x102>
     aa4:	7f c2       	rjmp	.+1278   	; 0xfa4 <get_sms+0x600>
		return 1;
	}
	
	// Changing the message to readable format
	sim900_cmd("AT+CMGF=1\r\n",simresponse);
     aa6:	be 01       	movw	r22, r28
     aa8:	6f 54       	subi	r22, 0x4F	; 79
     aaa:	7f 4f       	sbci	r23, 0xFF	; 255
     aac:	88 ea       	ldi	r24, 0xA8	; 168
     aae:	93 e0       	ldi	r25, 0x03	; 3
     ab0:	32 dc       	rcall	.-1948   	; 0x316 <sim900_cmd>
	if (strcmp(simresponse,"OK\0")!=0){
     ab2:	60 e1       	ldi	r22, 0x10	; 16
     ab4:	71 e0       	ldi	r23, 0x01	; 1
     ab6:	ce 01       	movw	r24, r28
     ab8:	8f 54       	subi	r24, 0x4F	; 79
     aba:	9f 4f       	sbci	r25, 0xFF	; 255
     abc:	ca d5       	rcall	.+2964   	; 0x1652 <strcmp>
     abe:	89 2b       	or	r24, r25
     ac0:	09 f0       	breq	.+2      	; 0xac4 <get_sms+0x120>
     ac2:	72 c2       	rjmp	.+1252   	; 0xfa8 <get_sms+0x604>
		return 0;
	}
	
	// To fetch SMS messages
	message_number=1;
	while (message_number<=no_of_msg){
     ac4:	c7 57       	subi	r28, 0x77	; 119
     ac6:	de 4f       	sbci	r29, 0xFE	; 254
     ac8:	28 81       	ld	r18, Y
     aca:	39 81       	ldd	r19, Y+1	; 0x01
     acc:	c9 58       	subi	r28, 0x89	; 137
     ace:	d1 40       	sbci	r29, 0x01	; 1
     ad0:	12 16       	cp	r1, r18
     ad2:	13 06       	cpc	r1, r19
     ad4:	0c f0       	brlt	.+2      	; 0xad8 <get_sms+0x134>
     ad6:	42 c2       	rjmp	.+1156   	; 0xf5c <get_sms+0x5b8>
     ad8:	68 94       	set
     ada:	22 24       	eor	r2, r2
     adc:	21 f8       	bld	r2, 1
     ade:	31 2c       	mov	r3, r1
     ae0:	cf 56       	subi	r28, 0x6F	; 111
     ae2:	de 4f       	sbci	r29, 0xFE	; 254
     ae4:	18 82       	st	Y, r1
     ae6:	c1 59       	subi	r28, 0x91	; 145
     ae8:	d1 40       	sbci	r29, 0x01	; 1
     aea:	ce 56       	subi	r28, 0x6E	; 110
     aec:	de 4f       	sbci	r29, 0xFE	; 254
     aee:	18 82       	st	Y, r1
     af0:	c2 59       	subi	r28, 0x92	; 146
     af2:	d1 40       	sbci	r29, 0x01	; 1
     af4:	cd 56       	subi	r28, 0x6D	; 109
     af6:	de 4f       	sbci	r29, 0xFE	; 254
     af8:	18 82       	st	Y, r1
     afa:	c3 59       	subi	r28, 0x93	; 147
     afc:	d1 40       	sbci	r29, 0x01	; 1
			initial[0]=initial[1];
			dataarrived=wait_for_data();
			if (dataarrived==0){
				break;
			}
			initial[1]=UDR1;
     afe:	0e ec       	ldi	r16, 0xCE	; 206
     b00:	10 e0       	ldi	r17, 0x00	; 0
     b02:	7e 01       	movw	r14, r28
     b04:	37 e0       	ldi	r19, 0x07	; 7
     b06:	e3 0e       	add	r14, r19
     b08:	f1 1c       	adc	r15, r1
     b0a:	5e 01       	movw	r10, r28
     b0c:	8e e9       	ldi	r24, 0x9E	; 158
     b0e:	a8 0e       	add	r10, r24
     b10:	b1 1c       	adc	r11, r1
     b12:	c8 57       	subi	r28, 0x78	; 120
     b14:	de 4f       	sbci	r29, 0xFE	; 254
     b16:	e8 82       	st	Y, r14
     b18:	c8 58       	subi	r28, 0x88	; 136
     b1a:	d1 40       	sbci	r29, 0x01	; 1
     b1c:	8f 2c       	mov	r8, r15
     b1e:	3e 01       	movw	r6, r28
     b20:	9f ec       	ldi	r25, 0xCF	; 207
     b22:	69 0e       	add	r6, r25
     b24:	71 1c       	adc	r7, r1
     b26:	2e 01       	movw	r4, r28
     b28:	e0 e9       	ldi	r30, 0x90	; 144
     b2a:	4e 1a       	sub	r4, r30
     b2c:	ee ef       	ldi	r30, 0xFE	; 254
     b2e:	5e 0a       	sbc	r5, r30
		else if ((strncmp(msg,"EZMCI",5)==0) && (strcmp(contact_no,MASTER_NUMBER)==0)){  //  To change serial number by Master
			strcpy(Serial_num,msg);
			update_serial_no=1;
		}
		else if ((strncasecmp(msg,"litres:",7)==0))	{
			strcpy(litres,msg+7);
     b30:	93 01       	movw	r18, r6
     b32:	29 5f       	subi	r18, 0xF9	; 249
     b34:	3f 4f       	sbci	r19, 0xFF	; 255
     b36:	cc 56       	subi	r28, 0x6C	; 108
     b38:	de 4f       	sbci	r29, 0xFE	; 254
     b3a:	39 83       	std	Y+1, r19	; 0x01
     b3c:	28 83       	st	Y, r18
     b3e:	c4 59       	subi	r28, 0x94	; 148
     b40:	d1 40       	sbci	r29, 0x01	; 1
     b42:	4a e0       	ldi	r20, 0x0A	; 10
     b44:	be 01       	movw	r22, r28
     b46:	6f 5f       	subi	r22, 0xFF	; 255
     b48:	7f 4f       	sbci	r23, 0xFF	; 255
     b4a:	c1 01       	movw	r24, r2
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	b7 d5       	rcall	.+2926   	; 0x16be <__itoa_ncheck>
	while (message_number<=no_of_msg){
		initial[0]='0';initial[1]='0';  // Re-initializing initial variable
		
		// Send command for reading the particular message
		itoa(message_number,no_msg,10);
		UART_1_puts("AT+CMGR=");
     b50:	84 eb       	ldi	r24, 0xB4	; 180
     b52:	93 e0       	ldi	r25, 0x03	; 3
     b54:	35 d5       	rcall	.+2666   	; 0x15c0 <UART_1_puts>
		UART_1_puts(no_msg);
     b56:	ce 01       	movw	r24, r28
     b58:	01 96       	adiw	r24, 0x01	; 1
     b5a:	32 d5       	rcall	.+2660   	; 0x15c0 <UART_1_puts>
		UART_1_puts("\r\n");
     b5c:	89 e9       	ldi	r24, 0x99	; 153
     b5e:	93 e0       	ldi	r25, 0x03	; 3
     b60:	2f d5       	rcall	.+2654   	; 0x15c0 <UART_1_puts>
		
		//  For enabling reception
		sbi(UCSR1B,RXEN1);		
     b62:	e9 ec       	ldi	r30, 0xC9	; 201
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	80 81       	ld	r24, Z
     b68:	80 61       	ori	r24, 0x10	; 16
     b6a:	80 83       	st	Z, r24
	}
	
	// To fetch SMS messages
	message_number=1;
	while (message_number<=no_of_msg){
		initial[0]='0';initial[1]='0';  // Re-initializing initial variable
     b6c:	0f 2e       	mov	r0, r31
     b6e:	f0 e3       	ldi	r31, 0x30	; 48
     b70:	df 2e       	mov	r13, r31
     b72:	f0 2d       	mov	r31, r0
     b74:	03 c0       	rjmp	.+6      	; 0xb7c <get_sms+0x1d8>
     b76:	d8 2e       	mov	r13, r24
     b78:	01 c0       	rjmp	.+2      	; 0xb7c <get_sms+0x1d8>
     b7a:	d8 2e       	mov	r13, r24
		sbi(UCSR1B,RXEN1);		
		
		//  For receiving sender number
		while(!(initial[0]==0x0D && initial[1]==0x0A)){
			initial[0]=initial[1];
			dataarrived=wait_for_data();
     b7c:	7b db       	rcall	.-2314   	; 0x274 <wait_for_data>
			if (dataarrived==0){
     b7e:	81 11       	cpse	r24, r1
     b80:	07 c0       	rjmp	.+14     	; 0xb90 <get_sms+0x1ec>
     b82:	c8 57       	subi	r28, 0x78	; 120
     b84:	de 4f       	sbci	r29, 0xFE	; 254
     b86:	c8 80       	ld	r12, Y
     b88:	c8 58       	subi	r28, 0x88	; 136
     b8a:	d1 40       	sbci	r29, 0x01	; 1
     b8c:	d8 2c       	mov	r13, r8
     b8e:	08 c0       	rjmp	.+16     	; 0xba0 <get_sms+0x1fc>
				break;
			}
			initial[1]=UDR1;
     b90:	f8 01       	movw	r30, r16
     b92:	80 81       	ld	r24, Z
		
		//  For enabling reception
		sbi(UCSR1B,RXEN1);		
		
		//  For receiving sender number
		while(!(initial[0]==0x0D && initial[1]==0x0A)){
     b94:	fd e0       	ldi	r31, 0x0D	; 13
     b96:	df 12       	cpse	r13, r31
     b98:	ee cf       	rjmp	.-36     	; 0xb76 <get_sms+0x1d2>
     b9a:	8a 30       	cpi	r24, 0x0A	; 10
     b9c:	71 f7       	brne	.-36     	; 0xb7a <get_sms+0x1d6>
     b9e:	f1 cf       	rjmp	.-30     	; 0xb82 <get_sms+0x1de>
     ba0:	9c 2c       	mov	r9, r12
     ba2:	9e 18       	sub	r9, r14
		}

		i=0;
		
		while(1){
			dataarrived=wait_for_data();
     ba4:	67 db       	rcall	.-2354   	; 0x274 <wait_for_data>
			if (dataarrived==0){
     ba6:	88 23       	and	r24, r24
     ba8:	51 f0       	breq	.+20     	; 0xbbe <get_sms+0x21a>
				break;
			}
			response_number[i]=UDR1;
     baa:	f8 01       	movw	r30, r16
     bac:	80 81       	ld	r24, Z
     bae:	f6 01       	movw	r30, r12
     bb0:	81 93       	st	Z+, r24
     bb2:	6f 01       	movw	r12, r30
			if(response_number[i]==0x0D || i>=150){
     bb4:	8d 30       	cpi	r24, 0x0D	; 13
     bb6:	19 f0       	breq	.+6      	; 0xbbe <get_sms+0x21a>
     bb8:	ea 15       	cp	r30, r10
     bba:	fb 05       	cpc	r31, r11
     bbc:	89 f7       	brne	.-30     	; 0xba0 <get_sms+0x1fc>
			}
			i++;
		}
		
		//  Terminating strings
		response_number[i]="\0";
     bbe:	f7 01       	movw	r30, r14
     bc0:	e9 0d       	add	r30, r9
     bc2:	f1 1d       	adc	r31, r1
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	31 e0       	ldi	r19, 0x01	; 1
     bc8:	20 83       	st	Z, r18
		
		//  For those odd unexplainable cases where this response comes empty with OK
		if (strcmp(response_number,"OK\0")==0){
     bca:	60 e1       	ldi	r22, 0x10	; 16
     bcc:	71 e0       	ldi	r23, 0x01	; 1
     bce:	c8 57       	subi	r28, 0x78	; 120
     bd0:	de 4f       	sbci	r29, 0xFE	; 254
     bd2:	88 81       	ld	r24, Y
     bd4:	c8 58       	subi	r28, 0x88	; 136
     bd6:	d1 40       	sbci	r29, 0x01	; 1
     bd8:	98 2d       	mov	r25, r8
     bda:	3b d5       	rcall	.+2678   	; 0x1652 <strcmp>
     bdc:	89 2b       	or	r24, r25
     bde:	11 f4       	brne	.+4      	; 0xbe4 <get_sms+0x240>
			message_number++;
     be0:	c1 01       	movw	r24, r2
			continue;
     be2:	65 c1       	rjmp	.+714    	; 0xeae <get_sms+0x50a>
		}
		
		//  Receiving message
		p=0;
		
		dataarrived=wait_for_data();
     be4:	47 db       	rcall	.-2418   	; 0x274 <wait_for_data>
		if (dataarrived==1){
     be6:	81 30       	cpi	r24, 0x01	; 1
     be8:	11 f4       	brne	.+4      	; 0xbee <get_sms+0x24a>
			initial[1]=UDR1;  // To eliminate Lf that comes after Cr but before message starts;
     bea:	f8 01       	movw	r30, r16
     bec:	80 81       	ld	r24, Z
     bee:	63 01       	movw	r12, r6
     bf0:	9c 2c       	mov	r9, r12
     bf2:	96 18       	sub	r9, r6
		}
		
		while(1){
			dataarrived=wait_for_data();
     bf4:	3f db       	rcall	.-2434   	; 0x274 <wait_for_data>
			if (dataarrived==0){
     bf6:	88 23       	and	r24, r24
     bf8:	51 f0       	breq	.+20     	; 0xc0e <get_sms+0x26a>
				break;
			}
			msg[p]=UDR1;
     bfa:	f8 01       	movw	r30, r16
     bfc:	80 81       	ld	r24, Z
     bfe:	f6 01       	movw	r30, r12
     c00:	81 93       	st	Z+, r24
     c02:	6f 01       	movw	r12, r30
			if(msg[p]==0x0D || p>=160){
     c04:	8d 30       	cpi	r24, 0x0D	; 13
     c06:	19 f0       	breq	.+6      	; 0xc0e <get_sms+0x26a>
     c08:	e4 15       	cp	r30, r4
     c0a:	f5 05       	cpc	r31, r5
     c0c:	89 f7       	brne	.-30     	; 0xbf0 <get_sms+0x24c>
			}
			p++;
		}
		
		//  For receiving final OK
		sim900_response(dummy);
     c0e:	ce 01       	movw	r24, r28
     c10:	81 59       	subi	r24, 0x91	; 145
     c12:	9e 4f       	sbci	r25, 0xFE	; 254
     c14:	47 db       	rcall	.-2418   	; 0x2a4 <sim900_response>

		//  Terminating strings
		msg[p]="\0";	
     c16:	f3 01       	movw	r30, r6
     c18:	e9 0d       	add	r30, r9
     c1a:	f1 1d       	adc	r31, r1
     c1c:	20 e0       	ldi	r18, 0x00	; 0
     c1e:	31 e0       	ldi	r19, 0x01	; 1
     c20:	20 83       	st	Z, r18
		
		// Figuring out Phone number of SMS sender
		i=0;p=0;
		while (response_number[i]!='\"' && i<150){
     c22:	8f 81       	ldd	r24, Y+7	; 0x07
     c24:	82 32       	cpi	r24, 0x22	; 34
     c26:	09 f4       	brne	.+2      	; 0xc2a <get_sms+0x286>
     c28:	c1 c1       	rjmp	.+898    	; 0xfac <get_sms+0x608>
     c2a:	fe 01       	movw	r30, r28
     c2c:	38 96       	adiw	r30, 0x08	; 8
     c2e:	20 e0       	ldi	r18, 0x00	; 0
			i++;
     c30:	2f 5f       	subi	r18, 0xFF	; 255
		//  Terminating strings
		msg[p]="\0";	
		
		// Figuring out Phone number of SMS sender
		i=0;p=0;
		while (response_number[i]!='\"' && i<150){
     c32:	81 91       	ld	r24, Z+
     c34:	82 32       	cpi	r24, 0x22	; 34
     c36:	e1 f7       	brne	.-8      	; 0xc30 <get_sms+0x28c>
			i++;
		}
		i++;
     c38:	2f 5f       	subi	r18, 0xFF	; 255
		while (response_number[i]!='\"' && i<150){
     c3a:	f7 01       	movw	r30, r14
     c3c:	e2 0f       	add	r30, r18
     c3e:	f1 1d       	adc	r31, r1
     c40:	80 81       	ld	r24, Z
     c42:	82 32       	cpi	r24, 0x22	; 34
     c44:	69 f0       	breq	.+26     	; 0xc60 <get_sms+0x2bc>
     c46:	26 39       	cpi	r18, 0x96	; 150
     c48:	10 f0       	brcs	.+4      	; 0xc4e <get_sms+0x2aa>
     c4a:	0a c0       	rjmp	.+20     	; 0xc60 <get_sms+0x2bc>
		// Figuring out Phone number of SMS sender
		i=0;p=0;
		while (response_number[i]!='\"' && i<150){
			i++;
		}
		i++;
     c4c:	21 e0       	ldi	r18, 0x01	; 1
		while (response_number[i]!='\"' && i<150){
			i++;
     c4e:	2f 5f       	subi	r18, 0xFF	; 255
		i=0;p=0;
		while (response_number[i]!='\"' && i<150){
			i++;
		}
		i++;
		while (response_number[i]!='\"' && i<150){
     c50:	f7 01       	movw	r30, r14
     c52:	e2 0f       	add	r30, r18
     c54:	f1 1d       	adc	r31, r1
     c56:	80 81       	ld	r24, Z
     c58:	82 32       	cpi	r24, 0x22	; 34
     c5a:	11 f0       	breq	.+4      	; 0xc60 <get_sms+0x2bc>
     c5c:	26 39       	cpi	r18, 0x96	; 150
     c5e:	b8 f3       	brcs	.-18     	; 0xc4e <get_sms+0x2aa>
			i++;
		}
		i++;
     c60:	2f 5f       	subi	r18, 0xFF	; 255
		while (response_number[i]!='\"' && i<150){
     c62:	f7 01       	movw	r30, r14
     c64:	e2 0f       	add	r30, r18
     c66:	f1 1d       	adc	r31, r1
     c68:	80 81       	ld	r24, Z
     c6a:	82 32       	cpi	r24, 0x22	; 34
     c6c:	79 f0       	breq	.+30     	; 0xc8c <get_sms+0x2e8>
     c6e:	26 39       	cpi	r18, 0x96	; 150
     c70:	10 f0       	brcs	.+4      	; 0xc76 <get_sms+0x2d2>
     c72:	0c c0       	rjmp	.+24     	; 0xc8c <get_sms+0x2e8>
		}
		i++;
		while (response_number[i]!='\"' && i<150){
			i++;
		}
		i++;
     c74:	22 e0       	ldi	r18, 0x02	; 2
		while (response_number[i]!='\"' && i<150){
			i++;
     c76:	2f 5f       	subi	r18, 0xFF	; 255
		i++;
		while (response_number[i]!='\"' && i<150){
			i++;
		}
		i++;
		while (response_number[i]!='\"' && i<150){
     c78:	f7 01       	movw	r30, r14
     c7a:	e2 0f       	add	r30, r18
     c7c:	f1 1d       	adc	r31, r1
     c7e:	80 81       	ld	r24, Z
     c80:	82 32       	cpi	r24, 0x22	; 34
     c82:	21 f0       	breq	.+8      	; 0xc8c <get_sms+0x2e8>
     c84:	26 39       	cpi	r18, 0x96	; 150
     c86:	b9 f7       	brne	.-18     	; 0xc76 <get_sms+0x2d2>

		//  Terminating strings
		msg[p]="\0";	
		
		// Figuring out Phone number of SMS sender
		i=0;p=0;
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	21 c0       	rjmp	.+66     	; 0xcce <get_sms+0x32a>
		}
		i++;
		while (response_number[i]!='\"' && i<150){
			i++;
		}
		i++;
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	82 0f       	add	r24, r18
		while (response_number[i]!='\"' && p<20 && i<150){
     c90:	f7 01       	movw	r30, r14
     c92:	e8 0f       	add	r30, r24
     c94:	f1 1d       	adc	r31, r1
     c96:	90 81       	ld	r25, Z
     c98:	92 32       	cpi	r25, 0x22	; 34
     c9a:	b1 f0       	breq	.+44     	; 0xcc8 <get_sms+0x324>
     c9c:	86 39       	cpi	r24, 0x96	; 150
     c9e:	b0 f4       	brcc	.+44     	; 0xccc <get_sms+0x328>
     ca0:	fe 01       	movw	r30, r28
     ca2:	e3 56       	subi	r30, 0x63	; 99
     ca4:	ff 4f       	sbci	r31, 0xFF	; 255
     ca6:	45 e1       	ldi	r20, 0x15	; 21
     ca8:	42 0f       	add	r20, r18
			contact_no[p]=response_number[i];
     caa:	91 93       	st	Z+, r25
			p++;i++;
     cac:	38 2f       	mov	r19, r24
     cae:	32 1b       	sub	r19, r18
     cb0:	8f 5f       	subi	r24, 0xFF	; 255
		i++;
		while (response_number[i]!='\"' && i<150){
			i++;
		}
		i++;
		while (response_number[i]!='\"' && p<20 && i<150){
     cb2:	d7 01       	movw	r26, r14
     cb4:	a8 0f       	add	r26, r24
     cb6:	b1 1d       	adc	r27, r1
     cb8:	9c 91       	ld	r25, X
     cba:	92 32       	cpi	r25, 0x22	; 34
     cbc:	41 f0       	breq	.+16     	; 0xcce <get_sms+0x32a>
     cbe:	84 17       	cp	r24, r20
     cc0:	31 f0       	breq	.+12     	; 0xcce <get_sms+0x32a>
     cc2:	86 39       	cpi	r24, 0x96	; 150
     cc4:	91 f7       	brne	.-28     	; 0xcaa <get_sms+0x306>
     cc6:	03 c0       	rjmp	.+6      	; 0xcce <get_sms+0x32a>

		//  Terminating strings
		msg[p]="\0";	
		
		// Figuring out Phone number of SMS sender
		i=0;p=0;
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	01 c0       	rjmp	.+2      	; 0xcce <get_sms+0x32a>
     ccc:	30 e0       	ldi	r19, 0x00	; 0
		i++;
		while (response_number[i]!='\"' && p<20 && i<150){
			contact_no[p]=response_number[i];
			p++;i++;
		}
		contact_no[p]='\0';
     cce:	ed e9       	ldi	r30, 0x9D	; 157
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	ec 0f       	add	r30, r28
     cd4:	fd 1f       	adc	r31, r29
     cd6:	e3 0f       	add	r30, r19
     cd8:	f1 1d       	adc	r31, r1
     cda:	10 82       	st	Z, r1
		 UART_1_puts(contact_no);
     cdc:	ce 01       	movw	r24, r28
     cde:	83 56       	subi	r24, 0x63	; 99
     ce0:	9f 4f       	sbci	r25, 0xFF	; 255
     ce2:	6e d4       	rcall	.+2268   	; 0x15c0 <UART_1_puts>
 	     UART_1_puts(msg);
     ce4:	c3 01       	movw	r24, r6
     ce6:	6c d4       	rcall	.+2264   	; 0x15c0 <UART_1_puts>
		 UART_1_puts("\r\n");
     ce8:	89 e9       	ldi	r24, 0x99	; 153
     cea:	93 e0       	ldi	r25, 0x03	; 3
     cec:	69 d4       	rcall	.+2258   	; 0x15c0 <UART_1_puts>
     cee:	3f ef       	ldi	r19, 0xFF	; 255
     cf0:	81 e1       	ldi	r24, 0x11	; 17
     cf2:	9a e7       	ldi	r25, 0x7A	; 122
     cf4:	31 50       	subi	r19, 0x01	; 1
     cf6:	80 40       	sbci	r24, 0x00	; 0
     cf8:	90 40       	sbci	r25, 0x00	; 0
     cfa:	e1 f7       	brne	.-8      	; 0xcf4 <get_sms+0x350>
     cfc:	00 c0       	rjmp	.+0      	; 0xcfe <get_sms+0x35a>
     cfe:	00 00       	nop
		 _delay_ms(5000);
		// If message doesn't match authenticated source, move to next message
		if (!((strcmp(contact_no,customer_no)==0) || (strcmp(contact_no,MASTER_NUMBER)==0) || (strcmp(contact_no,"VK-040060")==0) || (strcmp(contact_no,"VM-040060")==0))){
     d00:	c5 57       	subi	r28, 0x75	; 117
     d02:	de 4f       	sbci	r29, 0xFE	; 254
     d04:	68 81       	ld	r22, Y
     d06:	79 81       	ldd	r23, Y+1	; 0x01
     d08:	cb 58       	subi	r28, 0x8B	; 139
     d0a:	d1 40       	sbci	r29, 0x01	; 1
     d0c:	ce 01       	movw	r24, r28
     d0e:	83 56       	subi	r24, 0x63	; 99
     d10:	9f 4f       	sbci	r25, 0xFF	; 255
     d12:	9f d4       	rcall	.+2366   	; 0x1652 <strcmp>
     d14:	6c 01       	movw	r12, r24
     d16:	89 2b       	or	r24, r25
     d18:	e9 f0       	breq	.+58     	; 0xd54 <get_sms+0x3b0>
     d1a:	6c ec       	ldi	r22, 0xCC	; 204
     d1c:	72 e0       	ldi	r23, 0x02	; 2
     d1e:	ce 01       	movw	r24, r28
     d20:	83 56       	subi	r24, 0x63	; 99
     d22:	9f 4f       	sbci	r25, 0xFF	; 255
     d24:	96 d4       	rcall	.+2348   	; 0x1652 <strcmp>
     d26:	89 2b       	or	r24, r25
     d28:	09 f4       	brne	.+2      	; 0xd2c <get_sms+0x388>
     d2a:	45 c1       	rjmp	.+650    	; 0xfb6 <get_sms+0x612>
     d2c:	6d eb       	ldi	r22, 0xBD	; 189
     d2e:	73 e0       	ldi	r23, 0x03	; 3
     d30:	ce 01       	movw	r24, r28
     d32:	83 56       	subi	r24, 0x63	; 99
     d34:	9f 4f       	sbci	r25, 0xFF	; 255
     d36:	8d d4       	rcall	.+2330   	; 0x1652 <strcmp>
     d38:	89 2b       	or	r24, r25
     d3a:	09 f4       	brne	.+2      	; 0xd3e <get_sms+0x39a>
     d3c:	6f c1       	rjmp	.+734    	; 0x101c <get_sms+0x678>
     d3e:	67 ec       	ldi	r22, 0xC7	; 199
     d40:	73 e0       	ldi	r23, 0x03	; 3
     d42:	ce 01       	movw	r24, r28
     d44:	83 56       	subi	r24, 0x63	; 99
     d46:	9f 4f       	sbci	r25, 0xFF	; 255
     d48:	84 d4       	rcall	.+2312   	; 0x1652 <strcmp>
     d4a:	89 2b       	or	r24, r25
     d4c:	09 f4       	brne	.+2      	; 0xd50 <get_sms+0x3ac>
     d4e:	66 c1       	rjmp	.+716    	; 0x101c <get_sms+0x678>
			message_number++;
     d50:	c1 01       	movw	r24, r2
			continue;
     d52:	ad c0       	rjmp	.+346    	; 0xeae <get_sms+0x50a>
		}
		
		if ((msg[0]=='+') && (strcmp(contact_no,MASTER_NUMBER)==0)){  //  Changing customer number by Master
     d54:	f3 01       	movw	r30, r6
     d56:	80 81       	ld	r24, Z
     d58:	8b 32       	cpi	r24, 0x2B	; 43
     d5a:	c1 f4       	brne	.+48     	; 0xd8c <get_sms+0x3e8>
     d5c:	6c ec       	ldi	r22, 0xCC	; 204
     d5e:	72 e0       	ldi	r23, 0x02	; 2
     d60:	ce 01       	movw	r24, r28
     d62:	83 56       	subi	r24, 0x63	; 99
     d64:	9f 4f       	sbci	r25, 0xFF	; 255
     d66:	75 d4       	rcall	.+2282   	; 0x1652 <strcmp>
     d68:	89 2b       	or	r24, r25
     d6a:	09 f0       	breq	.+2      	; 0xd6e <get_sms+0x3ca>
     d6c:	29 c1       	rjmp	.+594    	; 0xfc0 <get_sms+0x61c>
			strcpy(customer_no,msg);
     d6e:	b3 01       	movw	r22, r6
     d70:	c5 57       	subi	r28, 0x75	; 117
     d72:	de 4f       	sbci	r29, 0xFE	; 254
     d74:	88 81       	ld	r24, Y
     d76:	99 81       	ldd	r25, Y+1	; 0x01
     d78:	cb 58       	subi	r28, 0x8B	; 139
     d7a:	d1 40       	sbci	r29, 0x01	; 1
     d7c:	73 d4       	rcall	.+2278   	; 0x1664 <strcpy>
			update_customer_no=1;
     d7e:	f1 e0       	ldi	r31, 0x01	; 1
     d80:	cd 56       	subi	r28, 0x6D	; 109
     d82:	de 4f       	sbci	r29, 0xFE	; 254
     d84:	f8 83       	st	Y, r31
     d86:	c3 59       	subi	r28, 0x93	; 147
     d88:	d1 40       	sbci	r29, 0x01	; 1
     d8a:	90 c0       	rjmp	.+288    	; 0xeac <get_sms+0x508>
		}
		else if ((strcasecmp(msg,"on")==0) && ((strcmp(contact_no,MASTER_NUMBER)==0) || (strcmp(contact_no,customer_no)==0) || (strcmp(contact_no,"VK-040060")==0) || (strcmp(contact_no,"VM-040060")==0))){  //  Commanding system to Switch on by Customer/Master
     d8c:	61 ed       	ldi	r22, 0xD1	; 209
     d8e:	73 e0       	ldi	r23, 0x03	; 3
     d90:	c3 01       	movw	r24, r6
     d92:	41 d4       	rcall	.+2178   	; 0x1616 <strcasecmp>
     d94:	89 2b       	or	r24, r25
     d96:	51 f5       	brne	.+84     	; 0xdec <get_sms+0x448>
     d98:	6c ec       	ldi	r22, 0xCC	; 204
     d9a:	72 e0       	ldi	r23, 0x02	; 2
     d9c:	ce 01       	movw	r24, r28
     d9e:	83 56       	subi	r24, 0x63	; 99
     da0:	9f 4f       	sbci	r25, 0xFF	; 255
     da2:	57 d4       	rcall	.+2222   	; 0x1652 <strcmp>
     da4:	89 2b       	or	r24, r25
     da6:	99 f0       	breq	.+38     	; 0xdce <get_sms+0x42a>
     da8:	cd 28       	or	r12, r13
     daa:	89 f0       	breq	.+34     	; 0xdce <get_sms+0x42a>
     dac:	6d eb       	ldi	r22, 0xBD	; 189
     dae:	73 e0       	ldi	r23, 0x03	; 3
     db0:	ce 01       	movw	r24, r28
     db2:	83 56       	subi	r24, 0x63	; 99
     db4:	9f 4f       	sbci	r25, 0xFF	; 255
     db6:	4d d4       	rcall	.+2202   	; 0x1652 <strcmp>
     db8:	89 2b       	or	r24, r25
     dba:	49 f0       	breq	.+18     	; 0xdce <get_sms+0x42a>
     dbc:	67 ec       	ldi	r22, 0xC7	; 199
     dbe:	73 e0       	ldi	r23, 0x03	; 3
     dc0:	ce 01       	movw	r24, r28
     dc2:	83 56       	subi	r24, 0x63	; 99
     dc4:	9f 4f       	sbci	r25, 0xFF	; 255
     dc6:	45 d4       	rcall	.+2186   	; 0x1652 <strcmp>
     dc8:	89 2b       	or	r24, r25
     dca:	09 f0       	breq	.+2      	; 0xdce <get_sms+0x42a>
     dcc:	01 c1       	rjmp	.+514    	; 0xfd0 <get_sms+0x62c>
			*system_on=0x31;
     dce:	81 e3       	ldi	r24, 0x31	; 49
     dd0:	c3 57       	subi	r28, 0x73	; 115
     dd2:	de 4f       	sbci	r29, 0xFE	; 254
     dd4:	e8 81       	ld	r30, Y
     dd6:	f9 81       	ldd	r31, Y+1	; 0x01
     dd8:	cd 58       	subi	r28, 0x8D	; 141
     dda:	d1 40       	sbci	r29, 0x01	; 1
     ddc:	80 83       	st	Z, r24
			update_remote_control=1;
     dde:	f1 e0       	ldi	r31, 0x01	; 1
     de0:	cf 56       	subi	r28, 0x6F	; 111
     de2:	de 4f       	sbci	r29, 0xFE	; 254
     de4:	f8 83       	st	Y, r31
     de6:	c1 59       	subi	r28, 0x91	; 145
     de8:	d1 40       	sbci	r29, 0x01	; 1
     dea:	60 c0       	rjmp	.+192    	; 0xeac <get_sms+0x508>
		}
		else if((strcasecmp(msg,"off")==0) && ((strcmp(contact_no,MASTER_NUMBER)==0) || (strcmp(contact_no,customer_no)==0) || (strcmp(contact_no,"VK-040060")==0) || (strcmp(contact_no,"VM-040060")==0))){  //  Commanding system to Switch off by Customer/Master
     dec:	64 ed       	ldi	r22, 0xD4	; 212
     dee:	73 e0       	ldi	r23, 0x03	; 3
     df0:	c3 01       	movw	r24, r6
     df2:	11 d4       	rcall	.+2082   	; 0x1616 <strcasecmp>
     df4:	89 2b       	or	r24, r25
     df6:	49 f5       	brne	.+82     	; 0xe4a <get_sms+0x4a6>
     df8:	6c ec       	ldi	r22, 0xCC	; 204
     dfa:	72 e0       	ldi	r23, 0x02	; 2
     dfc:	ce 01       	movw	r24, r28
     dfe:	83 56       	subi	r24, 0x63	; 99
     e00:	9f 4f       	sbci	r25, 0xFF	; 255
     e02:	27 d4       	rcall	.+2126   	; 0x1652 <strcmp>
     e04:	89 2b       	or	r24, r25
     e06:	91 f0       	breq	.+36     	; 0xe2c <get_sms+0x488>
     e08:	cd 28       	or	r12, r13
     e0a:	81 f0       	breq	.+32     	; 0xe2c <get_sms+0x488>
     e0c:	6d eb       	ldi	r22, 0xBD	; 189
     e0e:	73 e0       	ldi	r23, 0x03	; 3
     e10:	ce 01       	movw	r24, r28
     e12:	83 56       	subi	r24, 0x63	; 99
     e14:	9f 4f       	sbci	r25, 0xFF	; 255
     e16:	1d d4       	rcall	.+2106   	; 0x1652 <strcmp>
     e18:	89 2b       	or	r24, r25
     e1a:	41 f0       	breq	.+16     	; 0xe2c <get_sms+0x488>
     e1c:	67 ec       	ldi	r22, 0xC7	; 199
     e1e:	73 e0       	ldi	r23, 0x03	; 3
     e20:	ce 01       	movw	r24, r28
     e22:	83 56       	subi	r24, 0x63	; 99
     e24:	9f 4f       	sbci	r25, 0xFF	; 255
     e26:	15 d4       	rcall	.+2090   	; 0x1652 <strcmp>
     e28:	89 2b       	or	r24, r25
     e2a:	71 f5       	brne	.+92     	; 0xe88 <get_sms+0x4e4>
			*system_on=0x30;
     e2c:	80 e3       	ldi	r24, 0x30	; 48
     e2e:	c3 57       	subi	r28, 0x73	; 115
     e30:	de 4f       	sbci	r29, 0xFE	; 254
     e32:	e8 81       	ld	r30, Y
     e34:	f9 81       	ldd	r31, Y+1	; 0x01
     e36:	cd 58       	subi	r28, 0x8D	; 141
     e38:	d1 40       	sbci	r29, 0x01	; 1
     e3a:	80 83       	st	Z, r24
			update_remote_control=1;
     e3c:	f1 e0       	ldi	r31, 0x01	; 1
     e3e:	cf 56       	subi	r28, 0x6F	; 111
     e40:	de 4f       	sbci	r29, 0xFE	; 254
     e42:	f8 83       	st	Y, r31
     e44:	c1 59       	subi	r28, 0x91	; 145
     e46:	d1 40       	sbci	r29, 0x01	; 1
     e48:	31 c0       	rjmp	.+98     	; 0xeac <get_sms+0x508>
		}
		else if ((strncmp(msg,"EZMCI",5)==0) && (strcmp(contact_no,MASTER_NUMBER)==0)){  //  To change serial number by Master
     e4a:	45 e0       	ldi	r20, 0x05	; 5
     e4c:	50 e0       	ldi	r21, 0x00	; 0
     e4e:	68 ed       	ldi	r22, 0xD8	; 216
     e50:	73 e0       	ldi	r23, 0x03	; 3
     e52:	c3 01       	movw	r24, r6
     e54:	26 d4       	rcall	.+2124   	; 0x16a2 <strncmp>
     e56:	89 2b       	or	r24, r25
     e58:	b9 f4       	brne	.+46     	; 0xe88 <get_sms+0x4e4>
     e5a:	6c ec       	ldi	r22, 0xCC	; 204
     e5c:	72 e0       	ldi	r23, 0x02	; 2
     e5e:	ce 01       	movw	r24, r28
     e60:	83 56       	subi	r24, 0x63	; 99
     e62:	9f 4f       	sbci	r25, 0xFF	; 255
     e64:	f6 d3       	rcall	.+2028   	; 0x1652 <strcmp>
     e66:	89 2b       	or	r24, r25
     e68:	79 f4       	brne	.+30     	; 0xe88 <get_sms+0x4e4>
			strcpy(Serial_num,msg);
     e6a:	b3 01       	movw	r22, r6
     e6c:	c1 57       	subi	r28, 0x71	; 113
     e6e:	de 4f       	sbci	r29, 0xFE	; 254
     e70:	88 81       	ld	r24, Y
     e72:	99 81       	ldd	r25, Y+1	; 0x01
     e74:	cf 58       	subi	r28, 0x8F	; 143
     e76:	d1 40       	sbci	r29, 0x01	; 1
     e78:	f5 d3       	rcall	.+2026   	; 0x1664 <strcpy>
			update_serial_no=1;
     e7a:	21 e0       	ldi	r18, 0x01	; 1
     e7c:	ce 56       	subi	r28, 0x6E	; 110
     e7e:	de 4f       	sbci	r29, 0xFE	; 254
     e80:	28 83       	st	Y, r18
     e82:	c2 59       	subi	r28, 0x92	; 146
     e84:	d1 40       	sbci	r29, 0x01	; 1
     e86:	12 c0       	rjmp	.+36     	; 0xeac <get_sms+0x508>
		}
		else if ((strncasecmp(msg,"litres:",7)==0))	{
     e88:	47 e0       	ldi	r20, 0x07	; 7
     e8a:	50 e0       	ldi	r21, 0x00	; 0
     e8c:	6e ed       	ldi	r22, 0xDE	; 222
     e8e:	73 e0       	ldi	r23, 0x03	; 3
     e90:	c3 01       	movw	r24, r6
     e92:	ef d3       	rcall	.+2014   	; 0x1672 <strncasecmp>
     e94:	89 2b       	or	r24, r25
     e96:	51 f4       	brne	.+20     	; 0xeac <get_sms+0x508>
			strcpy(litres,msg+7);
     e98:	cc 56       	subi	r28, 0x6C	; 108
     e9a:	de 4f       	sbci	r29, 0xFE	; 254
     e9c:	68 81       	ld	r22, Y
     e9e:	79 81       	ldd	r23, Y+1	; 0x01
     ea0:	c4 59       	subi	r28, 0x94	; 148
     ea2:	d1 40       	sbci	r29, 0x01	; 1
     ea4:	ce 01       	movw	r24, r28
     ea6:	8c 58       	subi	r24, 0x8C	; 140
     ea8:	9e 4f       	sbci	r25, 0xFE	; 254
     eaa:	dc d3       	rcall	.+1976   	; 0x1664 <strcpy>
			no_litres=atoi(litres);
		}
		message_number++;
     eac:	c1 01       	movw	r24, r2
     eae:	3f ef       	ldi	r19, 0xFF	; 255
     eb0:	23 1a       	sub	r2, r19
     eb2:	33 0a       	sbc	r3, r19
		return 0;
	}
	
	// To fetch SMS messages
	message_number=1;
	while (message_number<=no_of_msg){
     eb4:	c7 57       	subi	r28, 0x77	; 119
     eb6:	de 4f       	sbci	r29, 0xFE	; 254
     eb8:	e8 81       	ld	r30, Y
     eba:	f9 81       	ldd	r31, Y+1	; 0x01
     ebc:	c9 58       	subi	r28, 0x89	; 137
     ebe:	d1 40       	sbci	r29, 0x01	; 1
     ec0:	e8 17       	cp	r30, r24
     ec2:	f9 07       	cpc	r31, r25
     ec4:	0c f0       	brlt	.+2      	; 0xec8 <get_sms+0x524>
     ec6:	3d ce       	rjmp	.-902    	; 0xb42 <get_sms+0x19e>
     ec8:	ce 56       	subi	r28, 0x6E	; 110
     eca:	de 4f       	sbci	r29, 0xFE	; 254
     ecc:	b8 80       	ld	r11, Y
     ece:	c2 59       	subi	r28, 0x92	; 146
     ed0:	d1 40       	sbci	r29, 0x01	; 1
		}
		message_number++;
	}
	
	// To update customer number in EEPROM
	if (update_customer_no){
     ed2:	cd 56       	subi	r28, 0x6D	; 109
     ed4:	de 4f       	sbci	r29, 0xFE	; 254
     ed6:	f8 81       	ld	r31, Y
     ed8:	c3 59       	subi	r28, 0x93	; 147
     eda:	d1 40       	sbci	r29, 0x01	; 1
     edc:	f1 11       	cpse	r31, r1
     ede:	80 c0       	rjmp	.+256    	; 0xfe0 <get_sms+0x63c>
     ee0:	11 c0       	rjmp	.+34     	; 0xf04 <get_sms+0x560>
		i=0;
		while (i<=12){
			eeprom_update_byte((uint8_t*)(i+16),customer_no[i]);
     ee2:	f8 01       	movw	r30, r16
     ee4:	61 91       	ld	r22, Z+
     ee6:	8f 01       	movw	r16, r30
     ee8:	c6 01       	movw	r24, r12
     eea:	8e 0f       	add	r24, r30
     eec:	9f 1f       	adc	r25, r31
     eee:	2a d4       	rcall	.+2132   	; 0x1744 <eeprom_update_byte>
     ef0:	8f e0       	ldi	r24, 0x0F	; 15
     ef2:	97 e2       	ldi	r25, 0x27	; 39
     ef4:	01 97       	sbiw	r24, 0x01	; 1
     ef6:	f1 f7       	brne	.-4      	; 0xef4 <get_sms+0x550>
     ef8:	00 c0       	rjmp	.+0      	; 0xefa <get_sms+0x556>
     efa:	00 00       	nop
	}
	
	// To update customer number in EEPROM
	if (update_customer_no){
		i=0;
		while (i<=12){
     efc:	0e 15       	cp	r16, r14
     efe:	1f 05       	cpc	r17, r15
     f00:	81 f7       	brne	.-32     	; 0xee2 <get_sms+0x53e>
     f02:	83 c0       	rjmp	.+262    	; 0x100a <get_sms+0x666>
			i++;
		}
	}
	
	// To update serial number in EEPROM
	if (update_serial_no){
     f04:	ce 56       	subi	r28, 0x6E	; 110
     f06:	de 4f       	sbci	r29, 0xFE	; 254
     f08:	98 81       	ld	r25, Y
     f0a:	c2 59       	subi	r28, 0x92	; 146
     f0c:	d1 40       	sbci	r29, 0x01	; 1
     f0e:	99 23       	and	r25, r25
     f10:	51 f1       	breq	.+84     	; 0xf66 <get_sms+0x5c2>
     f12:	c1 57       	subi	r28, 0x71	; 113
     f14:	de 4f       	sbci	r29, 0xFE	; 254
     f16:	e8 80       	ld	r14, Y
     f18:	f9 80       	ldd	r15, Y+1	; 0x01
     f1a:	cf 58       	subi	r28, 0x8F	; 143
     f1c:	d1 40       	sbci	r29, 0x01	; 1
     f1e:	ed e0       	ldi	r30, 0x0D	; 13
     f20:	ee 0e       	add	r14, r30
     f22:	f1 1c       	adc	r15, r1
		}
		message_number++;
	}
	
	// To update customer number in EEPROM
	if (update_customer_no){
     f24:	c1 57       	subi	r28, 0x71	; 113
     f26:	de 4f       	sbci	r29, 0xFE	; 254
     f28:	08 81       	ld	r16, Y
     f2a:	19 81       	ldd	r17, Y+1	; 0x01
     f2c:	cf 58       	subi	r28, 0x8F	; 143
     f2e:	d1 40       	sbci	r29, 0x01	; 1
     f30:	8f e1       	ldi	r24, 0x1F	; 31
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	6c 01       	movw	r12, r24
     f36:	c0 1a       	sub	r12, r16
     f38:	d1 0a       	sbc	r13, r17
	
	// To update serial number in EEPROM
	if (update_serial_no){
		i=0;
		while (i<=12){
			eeprom_update_byte((uint8_t*)(i+32),Serial_num[i]);
     f3a:	f8 01       	movw	r30, r16
     f3c:	61 91       	ld	r22, Z+
     f3e:	8f 01       	movw	r16, r30
     f40:	c6 01       	movw	r24, r12
     f42:	8e 0f       	add	r24, r30
     f44:	9f 1f       	adc	r25, r31
     f46:	fe d3       	rcall	.+2044   	; 0x1744 <eeprom_update_byte>
     f48:	8f e0       	ldi	r24, 0x0F	; 15
     f4a:	97 e2       	ldi	r25, 0x27	; 39
     f4c:	01 97       	sbiw	r24, 0x01	; 1
     f4e:	f1 f7       	brne	.-4      	; 0xf4c <get_sms+0x5a8>
     f50:	00 c0       	rjmp	.+0      	; 0xf52 <get_sms+0x5ae>
     f52:	00 00       	nop
	}
	
	// To update serial number in EEPROM
	if (update_serial_no){
		i=0;
		while (i<=12){
     f54:	0e 15       	cp	r16, r14
     f56:	1f 05       	cpc	r17, r15
     f58:	81 f7       	brne	.-32     	; 0xf3a <get_sms+0x596>
     f5a:	05 c0       	rjmp	.+10     	; 0xf66 <get_sms+0x5c2>
		return 0;
	}
	
	// To fetch SMS messages
	message_number=1;
	while (message_number<=no_of_msg){
     f5c:	cf 56       	subi	r28, 0x6F	; 111
     f5e:	de 4f       	sbci	r29, 0xFE	; 254
     f60:	18 82       	st	Y, r1
     f62:	c1 59       	subi	r28, 0x91	; 145
     f64:	d1 40       	sbci	r29, 0x01	; 1
			i++;
		}
	}
	
	// To update system on/off status in EEPROM
	if (update_remote_control){
     f66:	cf 56       	subi	r28, 0x6F	; 111
     f68:	de 4f       	sbci	r29, 0xFE	; 254
     f6a:	98 81       	ld	r25, Y
     f6c:	c1 59       	subi	r28, 0x91	; 145
     f6e:	d1 40       	sbci	r29, 0x01	; 1
     f70:	99 23       	and	r25, r25
     f72:	81 f0       	breq	.+32     	; 0xf94 <get_sms+0x5f0>
		eeprom_update_byte((uint8_t*)30,*system_on);
     f74:	c3 57       	subi	r28, 0x73	; 115
     f76:	de 4f       	sbci	r29, 0xFE	; 254
     f78:	e8 81       	ld	r30, Y
     f7a:	f9 81       	ldd	r31, Y+1	; 0x01
     f7c:	cd 58       	subi	r28, 0x8D	; 141
     f7e:	d1 40       	sbci	r29, 0x01	; 1
     f80:	60 81       	ld	r22, Z
     f82:	8e e1       	ldi	r24, 0x1E	; 30
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	de d3       	rcall	.+1980   	; 0x1744 <eeprom_update_byte>
     f88:	8f e0       	ldi	r24, 0x0F	; 15
     f8a:	97 e2       	ldi	r25, 0x27	; 39
     f8c:	01 97       	sbiw	r24, 0x01	; 1
     f8e:	f1 f7       	brne	.-4      	; 0xf8c <get_sms+0x5e8>
     f90:	00 c0       	rjmp	.+0      	; 0xf92 <get_sms+0x5ee>
     f92:	00 00       	nop
		_delay_ms(5);  //  EEPROM write time is 3.3ms in data sheet
	}
		
	// To delete all messages
	sim900_cmd("AT+CMGDA=\"DEL READ\"\r\n",simresponse);
     f94:	be 01       	movw	r22, r28
     f96:	6f 54       	subi	r22, 0x4F	; 79
     f98:	7f 4f       	sbci	r23, 0xFF	; 255
     f9a:	86 ee       	ldi	r24, 0xE6	; 230
     f9c:	93 e0       	ldi	r25, 0x03	; 3
     f9e:	bb d9       	rcall	.-3210   	; 0x316 <sim900_cmd>
	
	return 1;
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	54 c0       	rjmp	.+168    	; 0x104c <get_sms+0x6a8>
	no_msg[p]='\0';
	no_of_msg = atoi(no_msg);  
	
	// Exiting the function if no new messages have arrived
	if (no_of_msg==0){
		return 1;
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	52 c0       	rjmp	.+164    	; 0x104c <get_sms+0x6a8>
	}
	
	// Changing the message to readable format
	sim900_cmd("AT+CMGF=1\r\n",simresponse);
	if (strcmp(simresponse,"OK\0")!=0){
		return 0;
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	50 c0       	rjmp	.+160    	; 0x104c <get_sms+0x6a8>
		i=0;p=0;
		while (response_number[i]!='\"' && i<150){
			i++;
		}
		i++;
		while (response_number[i]!='\"' && i<150){
     fac:	88 85       	ldd	r24, Y+8	; 0x08
     fae:	82 32       	cpi	r24, 0x22	; 34
     fb0:	09 f0       	breq	.+2      	; 0xfb4 <get_sms+0x610>
     fb2:	4c ce       	rjmp	.-872    	; 0xc4c <get_sms+0x2a8>
     fb4:	2d c0       	rjmp	.+90     	; 0x1010 <get_sms+0x66c>
		if (!((strcmp(contact_no,customer_no)==0) || (strcmp(contact_no,MASTER_NUMBER)==0) || (strcmp(contact_no,"VK-040060")==0) || (strcmp(contact_no,"VM-040060")==0))){
			message_number++;
			continue;
		}
		
		if ((msg[0]=='+') && (strcmp(contact_no,MASTER_NUMBER)==0)){  //  Changing customer number by Master
     fb6:	f3 01       	movw	r30, r6
     fb8:	80 81       	ld	r24, Z
     fba:	8b 32       	cpi	r24, 0x2B	; 43
     fbc:	b9 f5       	brne	.+110    	; 0x102c <get_sms+0x688>
     fbe:	d7 ce       	rjmp	.-594    	; 0xd6e <get_sms+0x3ca>
			strcpy(customer_no,msg);
			update_customer_no=1;
		}
		else if ((strcasecmp(msg,"on")==0) && ((strcmp(contact_no,MASTER_NUMBER)==0) || (strcmp(contact_no,customer_no)==0) || (strcmp(contact_no,"VK-040060")==0) || (strcmp(contact_no,"VM-040060")==0))){  //  Commanding system to Switch on by Customer/Master
     fc0:	61 ed       	ldi	r22, 0xD1	; 209
     fc2:	73 e0       	ldi	r23, 0x03	; 3
     fc4:	c3 01       	movw	r24, r6
     fc6:	27 d3       	rcall	.+1614   	; 0x1616 <strcasecmp>
     fc8:	89 2b       	or	r24, r25
     fca:	09 f4       	brne	.+2      	; 0xfce <get_sms+0x62a>
     fcc:	00 cf       	rjmp	.-512    	; 0xdce <get_sms+0x42a>
     fce:	36 c0       	rjmp	.+108    	; 0x103c <get_sms+0x698>
			*system_on=0x31;
			update_remote_control=1;
		}
		else if((strcasecmp(msg,"off")==0) && ((strcmp(contact_no,MASTER_NUMBER)==0) || (strcmp(contact_no,customer_no)==0) || (strcmp(contact_no,"VK-040060")==0) || (strcmp(contact_no,"VM-040060")==0))){  //  Commanding system to Switch off by Customer/Master
     fd0:	64 ed       	ldi	r22, 0xD4	; 212
     fd2:	73 e0       	ldi	r23, 0x03	; 3
     fd4:	c3 01       	movw	r24, r6
     fd6:	1f d3       	rcall	.+1598   	; 0x1616 <strcasecmp>
     fd8:	89 2b       	or	r24, r25
     fda:	09 f4       	brne	.+2      	; 0xfde <get_sms+0x63a>
     fdc:	1f cf       	rjmp	.-450    	; 0xe1c <get_sms+0x478>
     fde:	35 cf       	rjmp	.-406    	; 0xe4a <get_sms+0x4a6>
     fe0:	c5 57       	subi	r28, 0x75	; 117
     fe2:	de 4f       	sbci	r29, 0xFE	; 254
     fe4:	e8 80       	ld	r14, Y
     fe6:	f9 80       	ldd	r15, Y+1	; 0x01
     fe8:	cb 58       	subi	r28, 0x8B	; 139
     fea:	d1 40       	sbci	r29, 0x01	; 1
     fec:	fd e0       	ldi	r31, 0x0D	; 13
     fee:	ef 0e       	add	r14, r31
     ff0:	f1 1c       	adc	r15, r1
		}
		message_number++;
	}
	
	// To update customer number in EEPROM
	if (update_customer_no){
     ff2:	c5 57       	subi	r28, 0x75	; 117
     ff4:	de 4f       	sbci	r29, 0xFE	; 254
     ff6:	08 81       	ld	r16, Y
     ff8:	19 81       	ldd	r17, Y+1	; 0x01
     ffa:	cb 58       	subi	r28, 0x8B	; 139
     ffc:	d1 40       	sbci	r29, 0x01	; 1
     ffe:	8f e0       	ldi	r24, 0x0F	; 15
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	6c 01       	movw	r12, r24
    1004:	c0 1a       	sub	r12, r16
    1006:	d1 0a       	sbc	r13, r17
    1008:	6c cf       	rjmp	.-296    	; 0xee2 <get_sms+0x53e>
			i++;
		}
	}
	
	// To update serial number in EEPROM
	if (update_serial_no){
    100a:	b1 10       	cpse	r11, r1
    100c:	82 cf       	rjmp	.-252    	; 0xf12 <get_sms+0x56e>
    100e:	ab cf       	rjmp	.-170    	; 0xf66 <get_sms+0x5c2>
		i++;
		while (response_number[i]!='\"' && i<150){
			i++;
		}
		i++;
		while (response_number[i]!='\"' && i<150){
    1010:	89 85       	ldd	r24, Y+9	; 0x09
    1012:	82 32       	cpi	r24, 0x22	; 34
    1014:	09 f0       	breq	.+2      	; 0x1018 <get_sms+0x674>
    1016:	2e ce       	rjmp	.-932    	; 0xc74 <get_sms+0x2d0>
		}
		i++;
		while (response_number[i]!='\"' && i<150){
			i++;
		}
		i++;
    1018:	22 e0       	ldi	r18, 0x02	; 2
    101a:	38 ce       	rjmp	.-912    	; 0xc8c <get_sms+0x2e8>
		
		if ((msg[0]=='+') && (strcmp(contact_no,MASTER_NUMBER)==0)){  //  Changing customer number by Master
			strcpy(customer_no,msg);
			update_customer_no=1;
		}
		else if ((strcasecmp(msg,"on")==0) && ((strcmp(contact_no,MASTER_NUMBER)==0) || (strcmp(contact_no,customer_no)==0) || (strcmp(contact_no,"VK-040060")==0) || (strcmp(contact_no,"VM-040060")==0))){  //  Commanding system to Switch on by Customer/Master
    101c:	61 ed       	ldi	r22, 0xD1	; 209
    101e:	73 e0       	ldi	r23, 0x03	; 3
    1020:	c3 01       	movw	r24, r6
    1022:	f9 d2       	rcall	.+1522   	; 0x1616 <strcasecmp>
    1024:	89 2b       	or	r24, r25
    1026:	09 f4       	brne	.+2      	; 0x102a <get_sms+0x686>
    1028:	c1 ce       	rjmp	.-638    	; 0xdac <get_sms+0x408>
    102a:	e0 ce       	rjmp	.-576    	; 0xdec <get_sms+0x448>
    102c:	61 ed       	ldi	r22, 0xD1	; 209
    102e:	73 e0       	ldi	r23, 0x03	; 3
    1030:	c3 01       	movw	r24, r6
    1032:	f1 d2       	rcall	.+1506   	; 0x1616 <strcasecmp>
    1034:	89 2b       	or	r24, r25
    1036:	09 f4       	brne	.+2      	; 0x103a <get_sms+0x696>
    1038:	ca ce       	rjmp	.-620    	; 0xdce <get_sms+0x42a>
    103a:	d8 ce       	rjmp	.-592    	; 0xdec <get_sms+0x448>
			*system_on=0x31;
			update_remote_control=1;
		}
		else if((strcasecmp(msg,"off")==0) && ((strcmp(contact_no,MASTER_NUMBER)==0) || (strcmp(contact_no,customer_no)==0) || (strcmp(contact_no,"VK-040060")==0) || (strcmp(contact_no,"VM-040060")==0))){  //  Commanding system to Switch off by Customer/Master
    103c:	64 ed       	ldi	r22, 0xD4	; 212
    103e:	73 e0       	ldi	r23, 0x03	; 3
    1040:	c3 01       	movw	r24, r6
    1042:	e9 d2       	rcall	.+1490   	; 0x1616 <strcasecmp>
    1044:	89 2b       	or	r24, r25
    1046:	09 f4       	brne	.+2      	; 0x104a <get_sms+0x6a6>
    1048:	f1 ce       	rjmp	.-542    	; 0xe2c <get_sms+0x488>
    104a:	ff ce       	rjmp	.-514    	; 0xe4a <get_sms+0x4a6>
		
	// To delete all messages
	sim900_cmd("AT+CMGDA=\"DEL READ\"\r\n",simresponse);
	
	return 1;
}
    104c:	cb 56       	subi	r28, 0x6B	; 107
    104e:	de 4f       	sbci	r29, 0xFE	; 254
    1050:	0f b6       	in	r0, 0x3f	; 63
    1052:	f8 94       	cli
    1054:	de bf       	out	0x3e, r29	; 62
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	cd bf       	out	0x3d, r28	; 61
    105a:	df 91       	pop	r29
    105c:	cf 91       	pop	r28
    105e:	1f 91       	pop	r17
    1060:	0f 91       	pop	r16
    1062:	ff 90       	pop	r15
    1064:	ef 90       	pop	r14
    1066:	df 90       	pop	r13
    1068:	cf 90       	pop	r12
    106a:	bf 90       	pop	r11
    106c:	af 90       	pop	r10
    106e:	9f 90       	pop	r9
    1070:	8f 90       	pop	r8
    1072:	7f 90       	pop	r7
    1074:	6f 90       	pop	r6
    1076:	5f 90       	pop	r5
    1078:	4f 90       	pop	r4
    107a:	3f 90       	pop	r3
    107c:	2f 90       	pop	r2
    107e:	08 95       	ret

00001080 <get_loc>:
	cbi(TCCR1B,CS12);
	
	return 1;  //  Data arrived
}

 void get_loc(char* apn,char* loc_lat,char* loc_long){
    1080:	2f 92       	push	r2
    1082:	3f 92       	push	r3
    1084:	4f 92       	push	r4
    1086:	5f 92       	push	r5
    1088:	6f 92       	push	r6
    108a:	7f 92       	push	r7
    108c:	8f 92       	push	r8
    108e:	9f 92       	push	r9
    1090:	af 92       	push	r10
    1092:	bf 92       	push	r11
    1094:	cf 92       	push	r12
    1096:	df 92       	push	r13
    1098:	ef 92       	push	r14
    109a:	ff 92       	push	r15
    109c:	0f 93       	push	r16
    109e:	1f 93       	push	r17
    10a0:	cf 93       	push	r28
    10a2:	df 93       	push	r29
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
    10a8:	ca 58       	subi	r28, 0x8A	; 138
    10aa:	d1 09       	sbc	r29, r1
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	de bf       	out	0x3e, r29	; 62
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	cd bf       	out	0x3d, r28	; 61
    10b6:	4c 01       	movw	r8, r24
    10b8:	6b 01       	movw	r12, r22
    10ba:	5a 01       	movw	r10, r20
	char simresponse[70],set_apn_str[60],dummy[5];
	uint8_t i=0,p=0,number_attempts=0,allokay=1;
	
	//  Initializing Latitude and Longitude if fetch is unsuccessful
	loc_lat[0]='0';loc_lat[1]='\0';
    10bc:	80 e3       	ldi	r24, 0x30	; 48
    10be:	fb 01       	movw	r30, r22
    10c0:	80 83       	st	Z, r24
    10c2:	11 82       	std	Z+1, r1	; 0x01
	loc_long[0]='0';loc_long[1]='\0';
    10c4:	fa 01       	movw	r30, r20
    10c6:	80 83       	st	Z, r24
    10c8:	11 82       	std	Z+1, r1	; 0x01
    10ca:	1a e0       	ldi	r17, 0x0A	; 10
	return 1;  //  Data arrived
}

 void get_loc(char* apn,char* loc_lat,char* loc_long){
	char simresponse[70],set_apn_str[60],dummy[5];
	uint8_t i=0,p=0,number_attempts=0,allokay=1;
    10cc:	01 e0       	ldi	r16, 0x01	; 1
		if (strcmp(simresponse,"OK\0")!=0){
			continue;
		}
	 
		//  Setting APN
		set_apn_str[0]='\0';
    10ce:	7e 01       	movw	r14, r28
    10d0:	f7 e4       	ldi	r31, 0x47	; 71
    10d2:	ef 0e       	add	r14, r31
    10d4:	f1 1c       	adc	r15, r1
		strcat(set_apn_str,"AT+SAPBR=3,1,\"APN\",\"");
    10d6:	0f 2e       	mov	r0, r31
    10d8:	f5 e1       	ldi	r31, 0x15	; 21
    10da:	2f 2e       	mov	r2, r31
    10dc:	f0 2d       	mov	r31, r0
		strcat(set_apn_str,apn);
		strcat(set_apn_str,"\"\r\n\0");
    10de:	0f 2e       	mov	r0, r31
    10e0:	f2 e2       	ldi	r31, 0x22	; 34
    10e2:	4f 2e       	mov	r4, r31
    10e4:	fd e0       	ldi	r31, 0x0D	; 13
    10e6:	5f 2e       	mov	r5, r31
    10e8:	fa e0       	ldi	r31, 0x0A	; 10
    10ea:	6f 2e       	mov	r6, r31
    10ec:	71 2c       	mov	r7, r1
    10ee:	f0 2d       	mov	r31, r0
	 
		i=0;p=0;
		while (simresponse[i]!=0x2C && i<70){  //  0x2C IS FOR ,
			i++;
		}
		i++;
    10f0:	33 24       	eor	r3, r3
    10f2:	33 94       	inc	r3
    10f4:	c7 57       	subi	r28, 0x77	; 119
    10f6:	df 4f       	sbci	r29, 0xFF	; 255
    10f8:	68 83       	st	Y, r22
    10fa:	c9 58       	subi	r28, 0x89	; 137
    10fc:	d0 40       	sbci	r29, 0x00	; 0
    10fe:	c6 57       	subi	r28, 0x76	; 118
    1100:	df 4f       	sbci	r29, 0xFF	; 255
    1102:	d8 82       	st	Y, r13
    1104:	ca 58       	subi	r28, 0x8A	; 138
    1106:	d0 40       	sbci	r29, 0x00	; 0
    1108:	c8 57       	subi	r28, 0x78	; 120
    110a:	df 4f       	sbci	r29, 0xFF	; 255
    110c:	48 83       	st	Y, r20
    110e:	c8 58       	subi	r28, 0x88	; 136
    1110:	d0 40       	sbci	r29, 0x00	; 0
    1112:	12 c0       	rjmp	.+36     	; 0x1138 <get_loc+0xb8>
	number_attempts=NumberOfAttempts;
	
	while (number_attempts>0){
		number_attempts--;
		
		if (allokay==0){
    1114:	01 11       	cpse	r16, r1
    1116:	10 c0       	rjmp	.+32     	; 0x1138 <get_loc+0xb8>
			allokay=1;
			//  Deactivitate Bearer
			sim900_cmd("AT+SAPBR=0,1\r\n\0",simresponse);
    1118:	be 01       	movw	r22, r28
    111a:	6f 5f       	subi	r22, 0xFF	; 255
    111c:	7f 4f       	sbci	r23, 0xFF	; 255
    111e:	8b ed       	ldi	r24, 0xDB	; 219
    1120:	92 e0       	ldi	r25, 0x02	; 2
    1122:	f9 d8       	rcall	.-3598   	; 0x316 <sim900_cmd>
    1124:	2f ef       	ldi	r18, 0xFF	; 255
    1126:	84 e3       	ldi	r24, 0x34	; 52
    1128:	9c e0       	ldi	r25, 0x0C	; 12
    112a:	21 50       	subi	r18, 0x01	; 1
    112c:	80 40       	sbci	r24, 0x00	; 0
    112e:	90 40       	sbci	r25, 0x00	; 0
    1130:	e1 f7       	brne	.-8      	; 0x112a <get_loc+0xaa>
    1132:	00 c0       	rjmp	.+0      	; 0x1134 <get_loc+0xb4>
    1134:	00 00       	nop
	
	while (number_attempts>0){
		number_attempts--;
		
		if (allokay==0){
			allokay=1;
    1136:	03 2d       	mov	r16, r3
			sim900_cmd("AT+SAPBR=0,1\r\n\0",simresponse);
			_delay_ms(500);  //  Waiting for response
		}
	
		//  Setting connection type as GPRS
		sim900_cmd("AT+SAPBR=3,1,\"CONTYPE\",\"GPRS\"\r\n\0",simresponse);
    1138:	be 01       	movw	r22, r28
    113a:	6f 5f       	subi	r22, 0xFF	; 255
    113c:	7f 4f       	sbci	r23, 0xFF	; 255
    113e:	8b ee       	ldi	r24, 0xEB	; 235
    1140:	92 e0       	ldi	r25, 0x02	; 2
    1142:	e9 d8       	rcall	.-3630   	; 0x316 <sim900_cmd>
		if (strcmp(simresponse,"OK\0")!=0){
    1144:	60 e1       	ldi	r22, 0x10	; 16
    1146:	71 e0       	ldi	r23, 0x01	; 1
    1148:	ce 01       	movw	r24, r28
    114a:	01 96       	adiw	r24, 0x01	; 1
    114c:	82 d2       	rcall	.+1284   	; 0x1652 <strcmp>
    114e:	89 2b       	or	r24, r25
    1150:	09 f0       	breq	.+2      	; 0x1154 <get_loc+0xd4>
    1152:	e8 c0       	rjmp	.+464    	; 0x1324 <get_loc+0x2a4>
			continue;
		}
	 
		//  Setting APN
		set_apn_str[0]='\0';
    1154:	f7 01       	movw	r30, r14
    1156:	10 82       	st	Z, r1
		strcat(set_apn_str,"AT+SAPBR=3,1,\"APN\",\"");
    1158:	d7 01       	movw	r26, r14
    115a:	0d 90       	ld	r0, X+
    115c:	00 20       	and	r0, r0
    115e:	e9 f7       	brne	.-6      	; 0x115a <get_loc+0xda>
    1160:	11 97       	sbiw	r26, 0x01	; 1
    1162:	ec ef       	ldi	r30, 0xFC	; 252
    1164:	f3 e0       	ldi	r31, 0x03	; 3
    1166:	82 2d       	mov	r24, r2
    1168:	01 90       	ld	r0, Z+
    116a:	0d 92       	st	X+, r0
    116c:	8a 95       	dec	r24
    116e:	e1 f7       	brne	.-8      	; 0x1168 <get_loc+0xe8>
		strcat(set_apn_str,apn);
    1170:	b4 01       	movw	r22, r8
    1172:	c7 01       	movw	r24, r14
    1174:	63 d2       	rcall	.+1222   	; 0x163c <strcat>
		strcat(set_apn_str,"\"\r\n\0");
    1176:	f7 01       	movw	r30, r14
    1178:	01 90       	ld	r0, Z+
    117a:	00 20       	and	r0, r0
    117c:	e9 f7       	brne	.-6      	; 0x1178 <get_loc+0xf8>
    117e:	31 97       	sbiw	r30, 0x01	; 1
    1180:	40 82       	st	Z, r4
    1182:	51 82       	std	Z+1, r5	; 0x01
    1184:	62 82       	std	Z+2, r6	; 0x02
    1186:	73 82       	std	Z+3, r7	; 0x03
		sim900_cmd(set_apn_str,simresponse);
    1188:	be 01       	movw	r22, r28
    118a:	6f 5f       	subi	r22, 0xFF	; 255
    118c:	7f 4f       	sbci	r23, 0xFF	; 255
    118e:	c7 01       	movw	r24, r14
    1190:	c2 d8       	rcall	.-3708   	; 0x316 <sim900_cmd>
		if (strcmp(simresponse,"OK\0")!=0){
    1192:	60 e1       	ldi	r22, 0x10	; 16
    1194:	71 e0       	ldi	r23, 0x01	; 1
    1196:	ce 01       	movw	r24, r28
    1198:	01 96       	adiw	r24, 0x01	; 1
    119a:	5b d2       	rcall	.+1206   	; 0x1652 <strcmp>
    119c:	89 2b       	or	r24, r25
    119e:	09 f0       	breq	.+2      	; 0x11a2 <get_loc+0x122>
    11a0:	c1 c0       	rjmp	.+386    	; 0x1324 <get_loc+0x2a4>
			continue;
		}
	 
		//  Open Bearer
		sim900_cmd("AT+SAPBR=1,1\r\n\0",simresponse);
    11a2:	be 01       	movw	r22, r28
    11a4:	6f 5f       	subi	r22, 0xFF	; 255
    11a6:	7f 4f       	sbci	r23, 0xFF	; 255
    11a8:	8c e0       	ldi	r24, 0x0C	; 12
    11aa:	93 e0       	ldi	r25, 0x03	; 3
    11ac:	b4 d8       	rcall	.-3736   	; 0x316 <sim900_cmd>
		if (strcmp(simresponse,"OK\0")!=0){
    11ae:	60 e1       	ldi	r22, 0x10	; 16
    11b0:	71 e0       	ldi	r23, 0x01	; 1
    11b2:	ce 01       	movw	r24, r28
    11b4:	01 96       	adiw	r24, 0x01	; 1
    11b6:	4d d2       	rcall	.+1178   	; 0x1652 <strcmp>
    11b8:	89 2b       	or	r24, r25
    11ba:	09 f0       	breq	.+2      	; 0x11be <get_loc+0x13e>
    11bc:	c3 c0       	rjmp	.+390    	; 0x1344 <get_loc+0x2c4>
			allokay=0;
			continue;
		}
	
		//  Query Bearer
		sim900_cmd("AT+SAPBR=2,1\r\n\0",simresponse);
    11be:	be 01       	movw	r22, r28
    11c0:	6f 5f       	subi	r22, 0xFF	; 255
    11c2:	7f 4f       	sbci	r23, 0xFF	; 255
    11c4:	8c e1       	ldi	r24, 0x1C	; 28
    11c6:	93 e0       	ldi	r25, 0x03	; 3
    11c8:	a6 d8       	rcall	.-3764   	; 0x316 <sim900_cmd>
		if(strcmp(simresponse,"ERROR\0")==0){
    11ca:	60 ec       	ldi	r22, 0xC0	; 192
    11cc:	71 e0       	ldi	r23, 0x01	; 1
    11ce:	ce 01       	movw	r24, r28
    11d0:	01 96       	adiw	r24, 0x01	; 1
    11d2:	3f d2       	rcall	.+1150   	; 0x1652 <strcmp>
    11d4:	89 2b       	or	r24, r25
    11d6:	09 f4       	brne	.+2      	; 0x11da <get_loc+0x15a>
    11d8:	a5 c0       	rjmp	.+330    	; 0x1324 <get_loc+0x2a4>
			continue;
		}
		//  Enable reception again for OK
		sbi(UCSR1B,RXEN1);
    11da:	e9 ec       	ldi	r30, 0xC9	; 201
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	80 61       	ori	r24, 0x10	; 16
    11e2:	80 83       	st	Z, r24
		sim900_response(simresponse);
    11e4:	ce 01       	movw	r24, r28
    11e6:	01 96       	adiw	r24, 0x01	; 1
    11e8:	5d d8       	rcall	.-3910   	; 0x2a4 <sim900_response>
		if (strcmp(simresponse,"OK\0")!=0){
    11ea:	60 e1       	ldi	r22, 0x10	; 16
    11ec:	71 e0       	ldi	r23, 0x01	; 1
    11ee:	ce 01       	movw	r24, r28
    11f0:	01 96       	adiw	r24, 0x01	; 1
    11f2:	2f d2       	rcall	.+1118   	; 0x1652 <strcmp>
    11f4:	89 2b       	or	r24, r25
    11f6:	09 f0       	breq	.+2      	; 0x11fa <get_loc+0x17a>
    11f8:	a5 c0       	rjmp	.+330    	; 0x1344 <get_loc+0x2c4>
			allokay=0;
			continue;
		}
	
		//  Get Latitude and Longitude
		sim900_cmd("AT+CIPGSMLOC=1,1\r\n\0",simresponse);
    11fa:	be 01       	movw	r22, r28
    11fc:	6f 5f       	subi	r22, 0xFF	; 255
    11fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1200:	8c e2       	ldi	r24, 0x2C	; 44
    1202:	93 e0       	ldi	r25, 0x03	; 3
    1204:	88 d8       	rcall	.-3824   	; 0x316 <sim900_cmd>
	    if(strcmp(simresponse,"ERROR\0")==0){
    1206:	60 ec       	ldi	r22, 0xC0	; 192
    1208:	71 e0       	ldi	r23, 0x01	; 1
    120a:	ce 01       	movw	r24, r28
    120c:	01 96       	adiw	r24, 0x01	; 1
    120e:	21 d2       	rcall	.+1090   	; 0x1652 <strcmp>
    1210:	89 2b       	or	r24, r25
    1212:	09 f4       	brne	.+2      	; 0x1216 <get_loc+0x196>
    1214:	87 c0       	rjmp	.+270    	; 0x1324 <get_loc+0x2a4>
			continue;
		}
		//  Enable reception again for OK
		sbi(UCSR1B,RXEN1);
    1216:	e9 ec       	ldi	r30, 0xC9	; 201
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	80 61       	ori	r24, 0x10	; 16
    121e:	80 83       	st	Z, r24
		sim900_response(dummy);
    1220:	ce 01       	movw	r24, r28
    1222:	8d 57       	subi	r24, 0x7D	; 125
    1224:	9f 4f       	sbci	r25, 0xFF	; 255
    1226:	3e d8       	rcall	.-3972   	; 0x2a4 <sim900_response>
		if (strcmp(dummy,"OK\0")!=0){
    1228:	60 e1       	ldi	r22, 0x10	; 16
    122a:	71 e0       	ldi	r23, 0x01	; 1
    122c:	ce 01       	movw	r24, r28
    122e:	8d 57       	subi	r24, 0x7D	; 125
    1230:	9f 4f       	sbci	r25, 0xFF	; 255
    1232:	0f d2       	rcall	.+1054   	; 0x1652 <strcmp>
    1234:	89 2b       	or	r24, r25
    1236:	09 f0       	breq	.+2      	; 0x123a <get_loc+0x1ba>
    1238:	85 c0       	rjmp	.+266    	; 0x1344 <get_loc+0x2c4>
			allokay=0;
			continue;
		}
	 
		i=0;p=0;
		while (simresponse[i]!=0x2C && i<70){  //  0x2C IS FOR ,
    123a:	89 81       	ldd	r24, Y+1	; 0x01
    123c:	8c 32       	cpi	r24, 0x2C	; 44
    123e:	09 f4       	brne	.+2      	; 0x1242 <get_loc+0x1c2>
    1240:	75 c0       	rjmp	.+234    	; 0x132c <get_loc+0x2ac>
    1242:	fe 01       	movw	r30, r28
    1244:	32 96       	adiw	r30, 0x02	; 2
    1246:	80 e0       	ldi	r24, 0x00	; 0
			i++;
    1248:	8f 5f       	subi	r24, 0xFF	; 255
			allokay=0;
			continue;
		}
	 
		i=0;p=0;
		while (simresponse[i]!=0x2C && i<70){  //  0x2C IS FOR ,
    124a:	91 91       	ld	r25, Z+
    124c:	9c 32       	cpi	r25, 0x2C	; 44
    124e:	e1 f7       	brne	.-8      	; 0x1248 <get_loc+0x1c8>
			i++;
		}
		i++;
    1250:	8f 5f       	subi	r24, 0xFF	; 255
		while (simresponse[i]!=0x2C && i<70){
    1252:	e1 e0       	ldi	r30, 0x01	; 1
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	ec 0f       	add	r30, r28
    1258:	fd 1f       	adc	r31, r29
    125a:	e8 0f       	add	r30, r24
    125c:	f1 1d       	adc	r31, r1
    125e:	90 81       	ld	r25, Z
    1260:	9c 32       	cpi	r25, 0x2C	; 44
    1262:	d9 f0       	breq	.+54     	; 0x129a <get_loc+0x21a>
    1264:	86 34       	cpi	r24, 0x46	; 70
    1266:	10 f0       	brcs	.+4      	; 0x126c <get_loc+0x1ec>
    1268:	1a c0       	rjmp	.+52     	; 0x129e <get_loc+0x21e>
	 
		i=0;p=0;
		while (simresponse[i]!=0x2C && i<70){  //  0x2C IS FOR ,
			i++;
		}
		i++;
    126a:	83 2d       	mov	r24, r3
    126c:	ea 2d       	mov	r30, r10
    126e:	fb 2d       	mov	r31, r11
		while (simresponse[i]!=0x2C && i<70){
			loc_long[p]=simresponse[i];
    1270:	91 93       	st	Z+, r25
    1272:	2e 2f       	mov	r18, r30
    1274:	c8 57       	subi	r28, 0x78	; 120
    1276:	df 4f       	sbci	r29, 0xFF	; 255
    1278:	98 81       	ld	r25, Y
    127a:	c8 58       	subi	r28, 0x88	; 136
    127c:	d0 40       	sbci	r29, 0x00	; 0
    127e:	29 1b       	sub	r18, r25
			p++;i++;	 
    1280:	8f 5f       	subi	r24, 0xFF	; 255
		i=0;p=0;
		while (simresponse[i]!=0x2C && i<70){  //  0x2C IS FOR ,
			i++;
		}
		i++;
		while (simresponse[i]!=0x2C && i<70){
    1282:	a1 e0       	ldi	r26, 0x01	; 1
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	ac 0f       	add	r26, r28
    1288:	bd 1f       	adc	r27, r29
    128a:	a8 0f       	add	r26, r24
    128c:	b1 1d       	adc	r27, r1
    128e:	9c 91       	ld	r25, X
    1290:	9c 32       	cpi	r25, 0x2C	; 44
    1292:	31 f0       	breq	.+12     	; 0x12a0 <get_loc+0x220>
    1294:	86 34       	cpi	r24, 0x46	; 70
    1296:	60 f3       	brcs	.-40     	; 0x1270 <get_loc+0x1f0>
    1298:	03 c0       	rjmp	.+6      	; 0x12a0 <get_loc+0x220>
		if (strcmp(dummy,"OK\0")!=0){
			allokay=0;
			continue;
		}
	 
		i=0;p=0;
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	01 c0       	rjmp	.+2      	; 0x12a0 <get_loc+0x220>
    129e:	20 e0       	ldi	r18, 0x00	; 0
		i++;
		while (simresponse[i]!=0x2C && i<70){
			loc_long[p]=simresponse[i];
			p++;i++;	 
		}
		loc_long[p]='\0';
    12a0:	f5 01       	movw	r30, r10
    12a2:	e2 0f       	add	r30, r18
    12a4:	f1 1d       	adc	r31, r1
    12a6:	10 82       	st	Z, r1
		i++;
    12a8:	91 e0       	ldi	r25, 0x01	; 1
    12aa:	98 0f       	add	r25, r24
		p=0;
		while (simresponse[i]!=0x2C && i<70){
    12ac:	e1 e0       	ldi	r30, 0x01	; 1
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	ec 0f       	add	r30, r28
    12b2:	fd 1f       	adc	r31, r29
    12b4:	e9 0f       	add	r30, r25
    12b6:	f1 1d       	adc	r31, r1
    12b8:	20 81       	ld	r18, Z
    12ba:	2c 32       	cpi	r18, 0x2C	; 44
    12bc:	f9 f0       	breq	.+62     	; 0x12fc <get_loc+0x27c>
    12be:	96 34       	cpi	r25, 0x46	; 70
    12c0:	18 f0       	brcs	.+6      	; 0x12c8 <get_loc+0x248>
    12c2:	1e c0       	rjmp	.+60     	; 0x1300 <get_loc+0x280>
	 
		i=0;p=0;
		while (simresponse[i]!=0x2C && i<70){  //  0x2C IS FOR ,
			i++;
		}
		i++;
    12c4:	83 2d       	mov	r24, r3
		while (simresponse[i]!=0x2C && i<70){
			loc_long[p]=simresponse[i];
			p++;i++;	 
		}
		loc_long[p]='\0';
		i++;
    12c6:	92 e0       	ldi	r25, 0x02	; 2
    12c8:	c7 57       	subi	r28, 0x77	; 119
    12ca:	df 4f       	sbci	r29, 0xFF	; 255
    12cc:	e8 81       	ld	r30, Y
    12ce:	c9 58       	subi	r28, 0x89	; 137
    12d0:	d0 40       	sbci	r29, 0x00	; 0
    12d2:	c6 57       	subi	r28, 0x76	; 118
    12d4:	df 4f       	sbci	r29, 0xFF	; 255
    12d6:	f8 81       	ld	r31, Y
    12d8:	ca 58       	subi	r28, 0x8A	; 138
    12da:	d0 40       	sbci	r29, 0x00	; 0
		p=0;
		while (simresponse[i]!=0x2C && i<70){
			loc_lat[p]=simresponse[i];
    12dc:	21 93       	st	Z+, r18
			p++;i++;
    12de:	39 2f       	mov	r19, r25
    12e0:	38 1b       	sub	r19, r24
    12e2:	9f 5f       	subi	r25, 0xFF	; 255
			p++;i++;	 
		}
		loc_long[p]='\0';
		i++;
		p=0;
		while (simresponse[i]!=0x2C && i<70){
    12e4:	a1 e0       	ldi	r26, 0x01	; 1
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	ac 0f       	add	r26, r28
    12ea:	bd 1f       	adc	r27, r29
    12ec:	a9 0f       	add	r26, r25
    12ee:	b1 1d       	adc	r27, r1
    12f0:	2c 91       	ld	r18, X
    12f2:	2c 32       	cpi	r18, 0x2C	; 44
    12f4:	31 f0       	breq	.+12     	; 0x1302 <get_loc+0x282>
    12f6:	96 34       	cpi	r25, 0x46	; 70
    12f8:	89 f7       	brne	.-30     	; 0x12dc <get_loc+0x25c>
    12fa:	03 c0       	rjmp	.+6      	; 0x1302 <get_loc+0x282>
			loc_long[p]=simresponse[i];
			p++;i++;	 
		}
		loc_long[p]='\0';
		i++;
		p=0;
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	01 c0       	rjmp	.+2      	; 0x1302 <get_loc+0x282>
    1300:	30 e0       	ldi	r19, 0x00	; 0
		while (simresponse[i]!=0x2C && i<70){
			loc_lat[p]=simresponse[i];
			p++;i++;
		}
		loc_lat[p]='\0';
    1302:	f6 01       	movw	r30, r12
    1304:	e3 0f       	add	r30, r19
    1306:	f1 1d       	adc	r31, r1
    1308:	10 82       	st	Z, r1
	
		//  Deactivitate Bearer 
		sim900_cmd("AT+SAPBR=0,1\r\n\0",simresponse);
    130a:	be 01       	movw	r22, r28
    130c:	6f 5f       	subi	r22, 0xFF	; 255
    130e:	7f 4f       	sbci	r23, 0xFF	; 255
    1310:	8b ed       	ldi	r24, 0xDB	; 219
    1312:	92 e0       	ldi	r25, 0x02	; 2
    1314:	00 d8       	rcall	.-4096   	; 0x316 <sim900_cmd>
		if (strcmp(simresponse,"OK\0")==0){
    1316:	60 e1       	ldi	r22, 0x10	; 16
    1318:	71 e0       	ldi	r23, 0x01	; 1
    131a:	ce 01       	movw	r24, r28
    131c:	01 96       	adiw	r24, 0x01	; 1
    131e:	99 d1       	rcall	.+818    	; 0x1652 <strcmp>
    1320:	89 2b       	or	r24, r25
    1322:	99 f0       	breq	.+38     	; 0x134a <get_loc+0x2ca>
    1324:	11 50       	subi	r17, 0x01	; 1
	loc_long[0]='0';loc_long[1]='\0';
	
	//  No. of attempts
	number_attempts=NumberOfAttempts;
	
	while (number_attempts>0){
    1326:	09 f0       	breq	.+2      	; 0x132a <get_loc+0x2aa>
    1328:	f5 ce       	rjmp	.-534    	; 0x1114 <get_loc+0x94>
    132a:	0f c0       	rjmp	.+30     	; 0x134a <get_loc+0x2ca>
		i=0;p=0;
		while (simresponse[i]!=0x2C && i<70){  //  0x2C IS FOR ,
			i++;
		}
		i++;
		while (simresponse[i]!=0x2C && i<70){
    132c:	9a 81       	ldd	r25, Y+2	; 0x02
    132e:	9c 32       	cpi	r25, 0x2C	; 44
    1330:	09 f0       	breq	.+2      	; 0x1334 <get_loc+0x2b4>
    1332:	9b cf       	rjmp	.-202    	; 0x126a <get_loc+0x1ea>
			loc_long[p]=simresponse[i];
			p++;i++;	 
		}
		loc_long[p]='\0';
    1334:	f5 01       	movw	r30, r10
    1336:	10 82       	st	Z, r1
		i++;
		p=0;
		while (simresponse[i]!=0x2C && i<70){
    1338:	2b 81       	ldd	r18, Y+3	; 0x03
    133a:	2c 32       	cpi	r18, 0x2C	; 44
    133c:	09 f0       	breq	.+2      	; 0x1340 <get_loc+0x2c0>
    133e:	c2 cf       	rjmp	.-124    	; 0x12c4 <get_loc+0x244>
			loc_long[p]=simresponse[i];
			p++;i++;	 
		}
		loc_long[p]='\0';
		i++;
		p=0;
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	df cf       	rjmp	.-66     	; 0x1302 <get_loc+0x282>
    1344:	11 50       	subi	r17, 0x01	; 1
	loc_long[0]='0';loc_long[1]='\0';
	
	//  No. of attempts
	number_attempts=NumberOfAttempts;
	
	while (number_attempts>0){
    1346:	09 f0       	breq	.+2      	; 0x134a <get_loc+0x2ca>
    1348:	e7 ce       	rjmp	.-562    	; 0x1118 <get_loc+0x98>
		}
	}
 
	return;
	 
    134a:	c6 57       	subi	r28, 0x76	; 118
    134c:	df 4f       	sbci	r29, 0xFF	; 255
    134e:	0f b6       	in	r0, 0x3f	; 63
    1350:	f8 94       	cli
    1352:	de bf       	out	0x3e, r29	; 62
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	cd bf       	out	0x3d, r28	; 61
    1358:	df 91       	pop	r29
    135a:	cf 91       	pop	r28
    135c:	1f 91       	pop	r17
    135e:	0f 91       	pop	r16
    1360:	ff 90       	pop	r15
    1362:	ef 90       	pop	r14
    1364:	df 90       	pop	r13
    1366:	cf 90       	pop	r12
    1368:	bf 90       	pop	r11
    136a:	af 90       	pop	r10
    136c:	9f 90       	pop	r9
    136e:	8f 90       	pop	r8
    1370:	7f 90       	pop	r7
    1372:	6f 90       	pop	r6
    1374:	5f 90       	pop	r5
    1376:	4f 90       	pop	r4
    1378:	3f 90       	pop	r3
    137a:	2f 90       	pop	r2
    137c:	08 95       	ret

0000137e <main>:
uint8_t wait_for_data();
void get_loc(char* apn,char* loc_lat,char* loc_long);



void main(){
    137e:	cf 93       	push	r28
    1380:	df 93       	push	r29
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
    1386:	c5 58       	subi	r28, 0x85	; 133
    1388:	d2 40       	sbci	r29, 0x02	; 2
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	de bf       	out	0x3e, r29	; 62
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t flag_get_apn=0,flag_get_sms=0,system_on,signal_strength=0;
	uint8_t dummy,data_counter=0;
	int e=0,l=0,i=0,no_litres=0;
    1394:	1b 82       	std	Y+3, r1	; 0x03
    1396:	1a 82       	std	Y+2, r1	; 0x02
	char Serial_num[20],customer_no[20],apn[30],user[30],responseimp[512],loc_lat[15],loc_long[15];
		
	DDRD = 0xFA;
    1398:	8a ef       	ldi	r24, 0xFA	; 250
    139a:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;
    139c:	8f ef       	ldi	r24, 0xFF	; 255
    139e:	84 b9       	out	0x04, r24	; 4
	
	UART_0_init();
    13a0:	d3 d0       	rcall	.+422    	; 0x1548 <UART_0_init>
	UART_1_init();
    13a2:	f6 d0       	rcall	.+492    	; 0x1590 <UART_1_init>
    13a4:	8f ec       	ldi	r24, 0xCF	; 207
    13a6:	97 e0       	ldi	r25, 0x07	; 7
    13a8:	01 97       	sbiw	r24, 0x01	; 1
    13aa:	f1 f7       	brne	.-4      	; 0x13a8 <main+0x2a>
    13ac:	00 c0       	rjmp	.+0      	; 0x13ae <main+0x30>
    13ae:	00 00       	nop
	
	// Enable Timer Interrupt
	_delay_ms(1);
	sbi(TIMSK1,TOIE1);
    13b0:	ef e6       	ldi	r30, 0x6F	; 111
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	81 60       	ori	r24, 0x01	; 1
    13b8:	80 83       	st	Z, r24
    13ba:	ef ec       	ldi	r30, 0xCF	; 207
    13bc:	f7 e0       	ldi	r31, 0x07	; 7
    13be:	31 97       	sbiw	r30, 0x01	; 1
    13c0:	f1 f7       	brne	.-4      	; 0x13be <main+0x40>
    13c2:	00 c0       	rjmp	.+0      	; 0x13c4 <main+0x46>
    13c4:	00 00       	nop
	_delay_ms(1);
	
	//  Enabling interrupts
	sei();
    13c6:	78 94       	sei
	
	// To read previous system on/off status
	system_on=eeprom_read_byte((uint8_t*)30);
    13c8:	8e e1       	ldi	r24, 0x1E	; 30
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	b3 d1       	rcall	.+870    	; 0x1734 <eeprom_read_byte>
    13ce:	89 83       	std	Y+1, r24	; 0x01
	
	//  Reception Enable 
	sbi(UCSR0B,RXEN0);
    13d0:	e1 ec       	ldi	r30, 0xC1	; 193
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	80 61       	ori	r24, 0x10	; 16
    13d8:	80 83       	st	Z, r24
	
	// Start Timer
	start_timer();
    13da:	0e 94 2e 01 	call	0x25c	; 0x25c <start_timer>
	while(skip==0){  //  skip is global timer variable
		UART_0_puts("\r\n\n");
		UART_0_putc(system_on);
		UART_0_puts("\r\n");
		_delay_ms(1000);
		if (UCSR0A & (1<<RXC0)){
    13de:	0f 2e       	mov	r0, r31
    13e0:	f0 ec       	ldi	r31, 0xC0	; 192
    13e2:	af 2e       	mov	r10, r31
    13e4:	b1 2c       	mov	r11, r1
    13e6:	f0 2d       	mov	r31, r0
			dummy=UDR0;
    13e8:	06 ec       	ldi	r16, 0xC6	; 198
    13ea:	10 e0       	ldi	r17, 0x00	; 0
	
	// Start Timer
	start_timer();
	
	//Sending the EEPROM data and waiting for the acknowledgement
	while(skip==0){  //  skip is global timer variable
    13ec:	1f c0       	rjmp	.+62     	; 0x142c <main+0xae>
		UART_0_puts("\r\n\n");
    13ee:	81 e1       	ldi	r24, 0x11	; 17
    13f0:	94 e0       	ldi	r25, 0x04	; 4
    13f2:	c0 d0       	rcall	.+384    	; 0x1574 <UART_0_puts>
		UART_0_putc(system_on);
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	b6 d0       	rcall	.+364    	; 0x1564 <UART_0_putc>
		UART_0_puts("\r\n");
    13f8:	89 e9       	ldi	r24, 0x99	; 153
    13fa:	93 e0       	ldi	r25, 0x03	; 3
    13fc:	bb d0       	rcall	.+374    	; 0x1574 <UART_0_puts>
    13fe:	ff ef       	ldi	r31, 0xFF	; 255
    1400:	29 e6       	ldi	r18, 0x69	; 105
    1402:	38 e1       	ldi	r19, 0x18	; 24
    1404:	f1 50       	subi	r31, 0x01	; 1
    1406:	20 40       	sbci	r18, 0x00	; 0
    1408:	30 40       	sbci	r19, 0x00	; 0
    140a:	e1 f7       	brne	.-8      	; 0x1404 <main+0x86>
    140c:	00 c0       	rjmp	.+0      	; 0x140e <main+0x90>
    140e:	00 00       	nop
		_delay_ms(1000);
		if (UCSR0A & (1<<RXC0)){
    1410:	f5 01       	movw	r30, r10
    1412:	80 81       	ld	r24, Z
    1414:	88 23       	and	r24, r24
    1416:	54 f4       	brge	.+20     	; 0x142c <main+0xae>
			dummy=UDR0;
    1418:	f8 01       	movw	r30, r16
    141a:	80 81       	ld	r24, Z
			if(dummy=='*'){
    141c:	8a 32       	cpi	r24, 0x2A	; 42
    141e:	31 f4       	brne	.+12     	; 0x142c <main+0xae>
				//  Reception Disable
				cbi(UCSR0B,RXEN0); 
    1420:	e1 ec       	ldi	r30, 0xC1	; 193
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	8f 7e       	andi	r24, 0xEF	; 239
    1428:	80 83       	st	Z, r24
				break;
    142a:	04 c0       	rjmp	.+8      	; 0x1434 <main+0xb6>
	
	// Start Timer
	start_timer();
	
	//Sending the EEPROM data and waiting for the acknowledgement
	while(skip==0){  //  skip is global timer variable
    142c:	80 91 17 04 	lds	r24, 0x0417
    1430:	88 23       	and	r24, r24
    1432:	e9 f2       	breq	.-70     	; 0x13ee <main+0x70>
			}
		}
	}
	
	//  Stop Timer
	cbi(TCCR1B,CS12);
    1434:	e1 e8       	ldi	r30, 0x81	; 129
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	8b 7f       	andi	r24, 0xFB	; 251
    143c:	80 83       	st	Z, r24
    143e:	8e 01       	movw	r16, r28
    1440:	0c 5f       	subi	r16, 0xFC	; 252
    1442:	1f 4f       	sbci	r17, 0xFF	; 255
	
	// To read last updated Serial No. of controller
	e=32;l=0;i=0;
    1444:	68 94       	set
    1446:	aa 24       	eor	r10, r10
    1448:	a5 f8       	bld	r10, 5
    144a:	b1 2c       	mov	r11, r1
	while (l<13){
		Serial_num[i]=eeprom_read_byte((uint8_t*)e);
    144c:	c5 01       	movw	r24, r10
    144e:	72 d1       	rcall	.+740    	; 0x1734 <eeprom_read_byte>
    1450:	f8 01       	movw	r30, r16
    1452:	81 93       	st	Z+, r24
    1454:	8f 01       	movw	r16, r30
		i++;e++;l++;
    1456:	ff ef       	ldi	r31, 0xFF	; 255
    1458:	af 1a       	sub	r10, r31
    145a:	bf 0a       	sbc	r11, r31
	//  Stop Timer
	cbi(TCCR1B,CS12);
	
	// To read last updated Serial No. of controller
	e=32;l=0;i=0;
	while (l<13){
    145c:	2d e2       	ldi	r18, 0x2D	; 45
    145e:	a2 16       	cp	r10, r18
    1460:	b1 04       	cpc	r11, r1
    1462:	a1 f7       	brne	.-24     	; 0x144c <main+0xce>
		Serial_num[i]=eeprom_read_byte((uint8_t*)e);
		i++;e++;l++;
	}
	Serial_num[i]='\0';
    1464:	19 8a       	std	Y+17, r1	; 0x11
    1466:	8e 01       	movw	r16, r28
    1468:	08 5e       	subi	r16, 0xE8	; 232
    146a:	1f 4f       	sbci	r17, 0xFF	; 255
	
	// To read last updated customer number
	e=16;i=0;
    146c:	68 94       	set
    146e:	aa 24       	eor	r10, r10
    1470:	a4 f8       	bld	r10, 4
    1472:	b1 2c       	mov	r11, r1
	while (i<13){
		customer_no[i]=eeprom_read_byte((uint8_t*)e);
    1474:	c5 01       	movw	r24, r10
    1476:	5e d1       	rcall	.+700    	; 0x1734 <eeprom_read_byte>
    1478:	f8 01       	movw	r30, r16
    147a:	81 93       	st	Z+, r24
    147c:	8f 01       	movw	r16, r30
		i++;e++;
    147e:	ff ef       	ldi	r31, 0xFF	; 255
    1480:	af 1a       	sub	r10, r31
    1482:	bf 0a       	sbc	r11, r31
	}
	Serial_num[i]='\0';
	
	// To read last updated customer number
	e=16;i=0;
	while (i<13){
    1484:	2d e1       	ldi	r18, 0x1D	; 29
    1486:	a2 16       	cp	r10, r18
    1488:	b1 04       	cpc	r11, r1
    148a:	a1 f7       	brne	.-24     	; 0x1474 <main+0xf6>
		customer_no[i]=eeprom_read_byte((uint8_t*)e);
		i++;e++;
	}
	customer_no[i]='\0';
    148c:	1d a2       	std	Y+37, r1	; 0x25
    148e:	3f ef       	ldi	r19, 0xFF	; 255
    1490:	83 e2       	ldi	r24, 0x23	; 35
    1492:	94 ef       	ldi	r25, 0xF4	; 244
    1494:	31 50       	subi	r19, 0x01	; 1
    1496:	80 40       	sbci	r24, 0x00	; 0
    1498:	90 40       	sbci	r25, 0x00	; 0
    149a:	e1 f7       	brne	.-8      	; 0x1494 <main+0x116>
    149c:	00 c0       	rjmp	.+0      	; 0x149e <main+0x120>
    149e:	00 00       	nop



void main(){
	
	uint8_t flag_get_apn=0,flag_get_sms=0,system_on,signal_strength=0;
    14a0:	b1 2c       	mov	r11, r1
    14a2:	08 c0       	rjmp	.+16     	; 0x14b4 <main+0x136>
	
	while(1){
		
		// To fetch APN
		while (flag_get_apn!=1){
			flag_get_apn = get_apn(apn,user);
    14a4:	be 01       	movw	r22, r28
    14a6:	66 5b       	subi	r22, 0xB6	; 182
    14a8:	7f 4f       	sbci	r23, 0xFF	; 255
    14aa:	ce 01       	movw	r24, r28
    14ac:	8c 96       	adiw	r24, 0x2c	; 44
    14ae:	0e 94 a6 01 	call	0x34c	; 0x34c <get_apn>
    14b2:	b8 2e       	mov	r11, r24
	_delay_ms(10000);
	
	while(1){
		
		// To fetch APN
		while (flag_get_apn!=1){
    14b4:	e1 e0       	ldi	r30, 0x01	; 1
    14b6:	be 12       	cpse	r11, r30
    14b8:	f5 cf       	rjmp	.-22     	; 0x14a4 <main+0x126>
			flag_get_apn = get_apn(apn,user);
		}
		
		//  Get Location
		get_loc(apn,loc_lat,loc_long);
    14ba:	ae 01       	movw	r20, r28
    14bc:	49 58       	subi	r20, 0x89	; 137
    14be:	5d 4f       	sbci	r21, 0xFD	; 253
    14c0:	be 01       	movw	r22, r28
    14c2:	68 59       	subi	r22, 0x98	; 152
    14c4:	7d 4f       	sbci	r23, 0xFD	; 253
    14c6:	ce 01       	movw	r24, r28
    14c8:	8c 96       	adiw	r24, 0x2c	; 44
    14ca:	da dd       	rcall	.-1100   	; 0x1080 <get_loc>
		
		//  To get signal strength
		signal_strength=get_signalstrength();
    14cc:	24 da       	rcall	.-3000   	; 0x916 <get_signalstrength>
    14ce:	a8 2e       	mov	r10, r24
		
		//  To send network info; signal status is 2: GPRS acquiring...
		get_data(system_on,&responseimp,2,signal_strength,user);
    14d0:	8e 01       	movw	r16, r28
    14d2:	06 5b       	subi	r16, 0xB6	; 182
    14d4:	1f 4f       	sbci	r17, 0xFF	; 255
    14d6:	28 2f       	mov	r18, r24
    14d8:	42 e0       	ldi	r20, 0x02	; 2
    14da:	be 01       	movw	r22, r28
    14dc:	68 59       	subi	r22, 0x98	; 152
    14de:	7f 4f       	sbci	r23, 0xFF	; 255
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	0e 94 66 00 	call	0xcc	; 0xcc <get_data>
    14e6:	1a e0       	ldi	r17, 0x0A	; 10

		// To fetch SMS 	
		data_counter=NumberOfAttempts; // Number of attempts to be made if SMS fetch fails
		while (data_counter!=0){
			flag_get_sms = get_sms(&system_on,customer_no,Serial_num,&no_litres);
    14e8:	9e 01       	movw	r18, r28
    14ea:	2e 5f       	subi	r18, 0xFE	; 254
    14ec:	3f 4f       	sbci	r19, 0xFF	; 255
    14ee:	ae 01       	movw	r20, r28
    14f0:	4c 5f       	subi	r20, 0xFC	; 252
    14f2:	5f 4f       	sbci	r21, 0xFF	; 255
    14f4:	be 01       	movw	r22, r28
    14f6:	68 5e       	subi	r22, 0xE8	; 232
    14f8:	7f 4f       	sbci	r23, 0xFF	; 255
    14fa:	ce 01       	movw	r24, r28
    14fc:	01 96       	adiw	r24, 0x01	; 1
    14fe:	52 da       	rcall	.-2908   	; 0x9a4 <get_sms>
			data_counter--;
			if(flag_get_sms==1){  // SMS Fetch successful
    1500:	81 30       	cpi	r24, 0x01	; 1
    1502:	11 f0       	breq	.+4      	; 0x1508 <main+0x18a>
    1504:	11 50       	subi	r17, 0x01	; 1
		//  To send network info; signal status is 2: GPRS acquiring...
		get_data(system_on,&responseimp,2,signal_strength,user);

		// To fetch SMS 	
		data_counter=NumberOfAttempts; // Number of attempts to be made if SMS fetch fails
		while (data_counter!=0){
    1506:	81 f7       	brne	.-32     	; 0x14e8 <main+0x16a>
		}
		
	//	UART_1_puts("\r\n\r\n");  // String terminators to eliminate noise etc.
		
 		// Logging Data
		dataLog(system_on,apn,Serial_num,signal_strength,user,loc_lat,loc_long);	
    1508:	9e 01       	movw	r18, r28
    150a:	29 58       	subi	r18, 0x89	; 137
    150c:	3d 4f       	sbci	r19, 0xFD	; 253
    150e:	69 01       	movw	r12, r18
    1510:	ce 01       	movw	r24, r28
    1512:	88 59       	subi	r24, 0x98	; 152
    1514:	9d 4f       	sbci	r25, 0xFD	; 253
    1516:	7c 01       	movw	r14, r24
    1518:	8e 01       	movw	r16, r28
    151a:	06 5b       	subi	r16, 0xB6	; 182
    151c:	1f 4f       	sbci	r17, 0xFF	; 255
    151e:	2a 2d       	mov	r18, r10
    1520:	ae 01       	movw	r20, r28
    1522:	4c 5f       	subi	r20, 0xFC	; 252
    1524:	5f 4f       	sbci	r21, 0xFF	; 255
    1526:	be 01       	movw	r22, r28
    1528:	64 5d       	subi	r22, 0xD4	; 212
    152a:	7f 4f       	sbci	r23, 0xFF	; 255
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	87 d9       	rcall	.-3314   	; 0x83e <dataLog>
    1530:	9f ef       	ldi	r25, 0xFF	; 255
    1532:	e3 eb       	ldi	r30, 0xB3	; 179
    1534:	f4 ec       	ldi	r31, 0xC4	; 196
    1536:	24 e0       	ldi	r18, 0x04	; 4
    1538:	91 50       	subi	r25, 0x01	; 1
    153a:	e0 40       	sbci	r30, 0x00	; 0
    153c:	f0 40       	sbci	r31, 0x00	; 0
    153e:	20 40       	sbci	r18, 0x00	; 0
    1540:	d9 f7       	brne	.-10     	; 0x1538 <main+0x1ba>
    1542:	00 c0       	rjmp	.+0      	; 0x1544 <main+0x1c6>
    1544:	00 00       	nop
    1546:	b6 cf       	rjmp	.-148    	; 0x14b4 <main+0x136>

00001548 <UART_0_init>:
#include <util/delay.h>
#include "UART_0.h"

void UART_0_init()
{
	UBRR0H = (unsigned char) (((F_CPU/(BAUD*16UL))-1)>>8) ;
    1548:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char) (F_CPU/(BAUD*16UL))-1;
    154c:	83 e3       	ldi	r24, 0x33	; 51
    154e:	80 93 c4 00 	sts	0x00C4, r24
	
	UCSR0A=0x00;
    1552:	10 92 c0 00 	sts	0x00C0, r1

	UCSR0C=0b10000110;
    1556:	86 e8       	ldi	r24, 0x86	; 134
    1558:	80 93 c2 00 	sts	0x00C2, r24
	// Set frame format: asynchronous, 8data, no parity, 1 stop bit
	UCSR0B=0x18; 
    155c:	88 e1       	ldi	r24, 0x18	; 24
    155e:	80 93 c1 00 	sts	0x00C1, r24
    1562:	08 95       	ret

00001564 <UART_0_putc>:
}
void UART_0_putc(unsigned char data)
{

	while ( !(UCSR0A & (1<<UDRE0)) );  /* Wait for empty transmit buffer */
    1564:	e0 ec       	ldi	r30, 0xC0	; 192
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	90 81       	ld	r25, Z
    156a:	95 ff       	sbrs	r25, 5
    156c:	fd cf       	rjmp	.-6      	; 0x1568 <UART_0_putc+0x4>

	UDR0 = data;         /* Start transmition */
    156e:	80 93 c6 00 	sts	0x00C6, r24
    1572:	08 95       	ret

00001574 <UART_0_puts>:

}
void UART_0_puts(char *str)
{
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	ec 01       	movw	r28, r24
	
	while( *str != '\0' ){
    157a:	88 81       	ld	r24, Y
    157c:	88 23       	and	r24, r24
    157e:	29 f0       	breq	.+10     	; 0x158a <UART_0_puts+0x16>
    1580:	21 96       	adiw	r28, 0x01	; 1
		
		UART_0_putc( *str++ );
    1582:	f0 df       	rcall	.-32     	; 0x1564 <UART_0_putc>

}
void UART_0_puts(char *str)
{
	
	while( *str != '\0' ){
    1584:	89 91       	ld	r24, Y+
    1586:	81 11       	cpse	r24, r1
    1588:	fc cf       	rjmp	.-8      	; 0x1582 <UART_0_puts+0xe>
		
		UART_0_putc( *str++ );
	}
}
    158a:	df 91       	pop	r29
    158c:	cf 91       	pop	r28
    158e:	08 95       	ret

00001590 <UART_1_init>:
#include <util/delay.h>
#include "UART_1.h"

void UART_1_init()
{
	UBRR1H = (unsigned char) (((F_CPU/(BAUD*16UL))-1)>>8) ;
    1590:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = (unsigned char) (F_CPU/(BAUD*16UL))-1;
    1594:	83 e3       	ldi	r24, 0x33	; 51
    1596:	80 93 cc 00 	sts	0x00CC, r24
	
	UCSR1A=0x00;
    159a:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1B=0x00;
    159e:	e9 ec       	ldi	r30, 0xC9	; 201
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	10 82       	st	Z, r1

	UCSR1C=0b10000110;
    15a4:	86 e8       	ldi	r24, 0x86	; 134
    15a6:	80 93 ca 00 	sts	0x00CA, r24
	// Set frame format: asynchronous, 8data, no parity, 1 stop bit
	UCSR1B=0x18;
    15aa:	88 e1       	ldi	r24, 0x18	; 24
    15ac:	80 83       	st	Z, r24
    15ae:	08 95       	ret

000015b0 <UART_1_putc>:
}
void UART_1_putc(unsigned char data)
{

	while ( !(UCSR1A & (1<<UDRE1)) );  /* Wait for empty transmit buffer */
    15b0:	e8 ec       	ldi	r30, 0xC8	; 200
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	90 81       	ld	r25, Z
    15b6:	95 ff       	sbrs	r25, 5
    15b8:	fd cf       	rjmp	.-6      	; 0x15b4 <UART_1_putc+0x4>

	UDR1 = data;         /* Start transmition */
    15ba:	80 93 ce 00 	sts	0x00CE, r24
    15be:	08 95       	ret

000015c0 <UART_1_puts>:

}
void UART_1_puts(char *str)
{
    15c0:	cf 93       	push	r28
    15c2:	df 93       	push	r29
    15c4:	ec 01       	movw	r28, r24
	
	while( *str != '\0' ){
    15c6:	88 81       	ld	r24, Y
    15c8:	88 23       	and	r24, r24
    15ca:	29 f0       	breq	.+10     	; 0x15d6 <UART_1_puts+0x16>
    15cc:	21 96       	adiw	r28, 0x01	; 1
		
		UART_1_putc( *str++ );
    15ce:	f0 df       	rcall	.-32     	; 0x15b0 <UART_1_putc>

}
void UART_1_puts(char *str)
{
	
	while( *str != '\0' ){
    15d0:	89 91       	ld	r24, Y+
    15d2:	81 11       	cpse	r24, r1
    15d4:	fc cf       	rjmp	.-8      	; 0x15ce <UART_1_puts+0xe>
		
		UART_1_putc( *str++ );
	}
}
    15d6:	df 91       	pop	r29
    15d8:	cf 91       	pop	r28
    15da:	08 95       	ret

000015dc <atoi>:
    15dc:	fc 01       	movw	r30, r24
    15de:	88 27       	eor	r24, r24
    15e0:	99 27       	eor	r25, r25
    15e2:	e8 94       	clt
    15e4:	21 91       	ld	r18, Z+
    15e6:	20 32       	cpi	r18, 0x20	; 32
    15e8:	e9 f3       	breq	.-6      	; 0x15e4 <atoi+0x8>
    15ea:	29 30       	cpi	r18, 0x09	; 9
    15ec:	10 f0       	brcs	.+4      	; 0x15f2 <atoi+0x16>
    15ee:	2e 30       	cpi	r18, 0x0E	; 14
    15f0:	c8 f3       	brcs	.-14     	; 0x15e4 <atoi+0x8>
    15f2:	2b 32       	cpi	r18, 0x2B	; 43
    15f4:	39 f0       	breq	.+14     	; 0x1604 <atoi+0x28>
    15f6:	2d 32       	cpi	r18, 0x2D	; 45
    15f8:	31 f4       	brne	.+12     	; 0x1606 <atoi+0x2a>
    15fa:	68 94       	set
    15fc:	03 c0       	rjmp	.+6      	; 0x1604 <atoi+0x28>
    15fe:	69 d0       	rcall	.+210    	; 0x16d2 <__mulhi_const_10>
    1600:	82 0f       	add	r24, r18
    1602:	91 1d       	adc	r25, r1
    1604:	21 91       	ld	r18, Z+
    1606:	20 53       	subi	r18, 0x30	; 48
    1608:	2a 30       	cpi	r18, 0x0A	; 10
    160a:	c8 f3       	brcs	.-14     	; 0x15fe <atoi+0x22>
    160c:	1e f4       	brtc	.+6      	; 0x1614 <atoi+0x38>
    160e:	90 95       	com	r25
    1610:	81 95       	neg	r24
    1612:	9f 4f       	sbci	r25, 0xFF	; 255
    1614:	08 95       	ret

00001616 <strcasecmp>:
    1616:	fb 01       	movw	r30, r22
    1618:	dc 01       	movw	r26, r24
    161a:	8d 91       	ld	r24, X+
    161c:	81 34       	cpi	r24, 0x41	; 65
    161e:	1c f0       	brlt	.+6      	; 0x1626 <strcasecmp+0x10>
    1620:	8b 35       	cpi	r24, 0x5B	; 91
    1622:	0c f4       	brge	.+2      	; 0x1626 <strcasecmp+0x10>
    1624:	80 5e       	subi	r24, 0xE0	; 224
    1626:	61 91       	ld	r22, Z+
    1628:	61 34       	cpi	r22, 0x41	; 65
    162a:	1c f0       	brlt	.+6      	; 0x1632 <strcasecmp+0x1c>
    162c:	6b 35       	cpi	r22, 0x5B	; 91
    162e:	0c f4       	brge	.+2      	; 0x1632 <strcasecmp+0x1c>
    1630:	60 5e       	subi	r22, 0xE0	; 224
    1632:	86 1b       	sub	r24, r22
    1634:	61 11       	cpse	r22, r1
    1636:	89 f3       	breq	.-30     	; 0x161a <strcasecmp+0x4>
    1638:	99 0b       	sbc	r25, r25
    163a:	08 95       	ret

0000163c <strcat>:
    163c:	fb 01       	movw	r30, r22
    163e:	dc 01       	movw	r26, r24
    1640:	0d 90       	ld	r0, X+
    1642:	00 20       	and	r0, r0
    1644:	e9 f7       	brne	.-6      	; 0x1640 <strcat+0x4>
    1646:	11 97       	sbiw	r26, 0x01	; 1
    1648:	01 90       	ld	r0, Z+
    164a:	0d 92       	st	X+, r0
    164c:	00 20       	and	r0, r0
    164e:	e1 f7       	brne	.-8      	; 0x1648 <strcat+0xc>
    1650:	08 95       	ret

00001652 <strcmp>:
    1652:	fb 01       	movw	r30, r22
    1654:	dc 01       	movw	r26, r24
    1656:	8d 91       	ld	r24, X+
    1658:	01 90       	ld	r0, Z+
    165a:	80 19       	sub	r24, r0
    165c:	01 10       	cpse	r0, r1
    165e:	d9 f3       	breq	.-10     	; 0x1656 <strcmp+0x4>
    1660:	99 0b       	sbc	r25, r25
    1662:	08 95       	ret

00001664 <strcpy>:
    1664:	fb 01       	movw	r30, r22
    1666:	dc 01       	movw	r26, r24
    1668:	01 90       	ld	r0, Z+
    166a:	0d 92       	st	X+, r0
    166c:	00 20       	and	r0, r0
    166e:	e1 f7       	brne	.-8      	; 0x1668 <strcpy+0x4>
    1670:	08 95       	ret

00001672 <strncasecmp>:
    1672:	fb 01       	movw	r30, r22
    1674:	dc 01       	movw	r26, r24
    1676:	41 50       	subi	r20, 0x01	; 1
    1678:	50 40       	sbci	r21, 0x00	; 0
    167a:	88 f0       	brcs	.+34     	; 0x169e <strncasecmp+0x2c>
    167c:	8d 91       	ld	r24, X+
    167e:	81 34       	cpi	r24, 0x41	; 65
    1680:	1c f0       	brlt	.+6      	; 0x1688 <strncasecmp+0x16>
    1682:	8b 35       	cpi	r24, 0x5B	; 91
    1684:	0c f4       	brge	.+2      	; 0x1688 <strncasecmp+0x16>
    1686:	80 5e       	subi	r24, 0xE0	; 224
    1688:	61 91       	ld	r22, Z+
    168a:	61 34       	cpi	r22, 0x41	; 65
    168c:	1c f0       	brlt	.+6      	; 0x1694 <strncasecmp+0x22>
    168e:	6b 35       	cpi	r22, 0x5B	; 91
    1690:	0c f4       	brge	.+2      	; 0x1694 <strncasecmp+0x22>
    1692:	60 5e       	subi	r22, 0xE0	; 224
    1694:	86 1b       	sub	r24, r22
    1696:	61 11       	cpse	r22, r1
    1698:	71 f3       	breq	.-36     	; 0x1676 <strncasecmp+0x4>
    169a:	99 0b       	sbc	r25, r25
    169c:	08 95       	ret
    169e:	88 1b       	sub	r24, r24
    16a0:	fc cf       	rjmp	.-8      	; 0x169a <strncasecmp+0x28>

000016a2 <strncmp>:
    16a2:	fb 01       	movw	r30, r22
    16a4:	dc 01       	movw	r26, r24
    16a6:	41 50       	subi	r20, 0x01	; 1
    16a8:	50 40       	sbci	r21, 0x00	; 0
    16aa:	30 f0       	brcs	.+12     	; 0x16b8 <strncmp+0x16>
    16ac:	8d 91       	ld	r24, X+
    16ae:	01 90       	ld	r0, Z+
    16b0:	80 19       	sub	r24, r0
    16b2:	19 f4       	brne	.+6      	; 0x16ba <strncmp+0x18>
    16b4:	00 20       	and	r0, r0
    16b6:	b9 f7       	brne	.-18     	; 0x16a6 <strncmp+0x4>
    16b8:	88 1b       	sub	r24, r24
    16ba:	99 0b       	sbc	r25, r25
    16bc:	08 95       	ret

000016be <__itoa_ncheck>:
    16be:	bb 27       	eor	r27, r27
    16c0:	4a 30       	cpi	r20, 0x0A	; 10
    16c2:	31 f4       	brne	.+12     	; 0x16d0 <__itoa_ncheck+0x12>
    16c4:	99 23       	and	r25, r25
    16c6:	22 f4       	brpl	.+8      	; 0x16d0 <__itoa_ncheck+0x12>
    16c8:	bd e2       	ldi	r27, 0x2D	; 45
    16ca:	90 95       	com	r25
    16cc:	81 95       	neg	r24
    16ce:	9f 4f       	sbci	r25, 0xFF	; 255
    16d0:	09 c0       	rjmp	.+18     	; 0x16e4 <__utoa_common>

000016d2 <__mulhi_const_10>:
    16d2:	7a e0       	ldi	r23, 0x0A	; 10
    16d4:	97 9f       	mul	r25, r23
    16d6:	90 2d       	mov	r25, r0
    16d8:	87 9f       	mul	r24, r23
    16da:	80 2d       	mov	r24, r0
    16dc:	91 0d       	add	r25, r1
    16de:	11 24       	eor	r1, r1
    16e0:	08 95       	ret

000016e2 <__utoa_ncheck>:
    16e2:	bb 27       	eor	r27, r27

000016e4 <__utoa_common>:
    16e4:	fb 01       	movw	r30, r22
    16e6:	55 27       	eor	r21, r21
    16e8:	aa 27       	eor	r26, r26
    16ea:	88 0f       	add	r24, r24
    16ec:	99 1f       	adc	r25, r25
    16ee:	aa 1f       	adc	r26, r26
    16f0:	a4 17       	cp	r26, r20
    16f2:	10 f0       	brcs	.+4      	; 0x16f8 <__utoa_common+0x14>
    16f4:	a4 1b       	sub	r26, r20
    16f6:	83 95       	inc	r24
    16f8:	50 51       	subi	r21, 0x10	; 16
    16fa:	b9 f7       	brne	.-18     	; 0x16ea <__utoa_common+0x6>
    16fc:	a0 5d       	subi	r26, 0xD0	; 208
    16fe:	aa 33       	cpi	r26, 0x3A	; 58
    1700:	08 f0       	brcs	.+2      	; 0x1704 <__utoa_common+0x20>
    1702:	a9 5d       	subi	r26, 0xD9	; 217
    1704:	a1 93       	st	Z+, r26
    1706:	00 97       	sbiw	r24, 0x00	; 0
    1708:	79 f7       	brne	.-34     	; 0x16e8 <__utoa_common+0x4>
    170a:	b1 11       	cpse	r27, r1
    170c:	b1 93       	st	Z+, r27
    170e:	11 92       	st	Z+, r1
    1710:	cb 01       	movw	r24, r22
    1712:	00 c0       	rjmp	.+0      	; 0x1714 <strrev>

00001714 <strrev>:
    1714:	dc 01       	movw	r26, r24
    1716:	fc 01       	movw	r30, r24
    1718:	67 2f       	mov	r22, r23
    171a:	71 91       	ld	r23, Z+
    171c:	77 23       	and	r23, r23
    171e:	e1 f7       	brne	.-8      	; 0x1718 <strrev+0x4>
    1720:	32 97       	sbiw	r30, 0x02	; 2
    1722:	04 c0       	rjmp	.+8      	; 0x172c <strrev+0x18>
    1724:	7c 91       	ld	r23, X
    1726:	6d 93       	st	X+, r22
    1728:	70 83       	st	Z, r23
    172a:	62 91       	ld	r22, -Z
    172c:	ae 17       	cp	r26, r30
    172e:	bf 07       	cpc	r27, r31
    1730:	c8 f3       	brcs	.-14     	; 0x1724 <strrev+0x10>
    1732:	08 95       	ret

00001734 <eeprom_read_byte>:
    1734:	f9 99       	sbic	0x1f, 1	; 31
    1736:	fe cf       	rjmp	.-4      	; 0x1734 <eeprom_read_byte>
    1738:	92 bd       	out	0x22, r25	; 34
    173a:	81 bd       	out	0x21, r24	; 33
    173c:	f8 9a       	sbi	0x1f, 0	; 31
    173e:	99 27       	eor	r25, r25
    1740:	80 b5       	in	r24, 0x20	; 32
    1742:	08 95       	ret

00001744 <eeprom_update_byte>:
    1744:	26 2f       	mov	r18, r22

00001746 <eeprom_update_r18>:
    1746:	f9 99       	sbic	0x1f, 1	; 31
    1748:	fe cf       	rjmp	.-4      	; 0x1746 <eeprom_update_r18>
    174a:	92 bd       	out	0x22, r25	; 34
    174c:	81 bd       	out	0x21, r24	; 33
    174e:	f8 9a       	sbi	0x1f, 0	; 31
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	00 b4       	in	r0, 0x20	; 32
    1754:	02 16       	cp	r0, r18
    1756:	39 f0       	breq	.+14     	; 0x1766 <eeprom_update_r18+0x20>
    1758:	1f ba       	out	0x1f, r1	; 31
    175a:	20 bd       	out	0x20, r18	; 32
    175c:	0f b6       	in	r0, 0x3f	; 63
    175e:	f8 94       	cli
    1760:	fa 9a       	sbi	0x1f, 2	; 31
    1762:	f9 9a       	sbi	0x1f, 1	; 31
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	08 95       	ret

00001768 <_exit>:
    1768:	f8 94       	cli

0000176a <__stop_program>:
    176a:	ff cf       	rjmp	.-2      	; 0x176a <__stop_program>
