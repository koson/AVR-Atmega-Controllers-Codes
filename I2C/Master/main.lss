
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000254  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800200  00800200  000002c8  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000da  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002d3  00000000  00000000  000003c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000159  00000000  00000000  00000695  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002de  00000000  00000000  000007ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c0  00000000  00000000  00000acc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000159  00000000  00000000  00000b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000ab  00000000  00000000  00000ce5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  10:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  14:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  18:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  1c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  20:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  24:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  28:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  2c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  30:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  34:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  38:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  3c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  40:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  44:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  48:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  4c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  50:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  54:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  58:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  5c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  60:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  64:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  68:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  6c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  70:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  74:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  78:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  7c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  80:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  84:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  88:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  8c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  90:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  94:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  98:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  9c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  ac:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  bc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  cc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  dc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_clear_bss>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	01 c0       	rjmp	.+2      	; 0xfa <.do_clear_bss_start>

000000f8 <.do_clear_bss_loop>:
  f8:	1d 92       	st	X+, r1

000000fa <.do_clear_bss_start>:
  fa:	a1 30       	cpi	r26, 0x01	; 1
  fc:	b1 07       	cpc	r27, r17
  fe:	e1 f7       	brne	.-8      	; 0xf8 <.do_clear_bss_loop>
 100:	0e 94 0f 01 	call	0x21e	; 0x21e <main>
 104:	0c 94 28 01 	jmp	0x250	; 0x250 <_exit>

00000108 <__bad_interrupt>:
 108:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010c <TWI_init_master>:
//#include "LCD_640.h"
uint8_t recv_data;

void TWI_init_master(void) // Function to initialize master
{
	TWBR=0x01; // Bit rate
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	80 93 b8 00 	sts	0x00B8, r24
	TWSR&=~(1<<TWPS1); // Setting prescalar bits
 112:	e9 eb       	ldi	r30, 0xB9	; 185
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	8d 7f       	andi	r24, 0xFD	; 253
 11a:	80 83       	st	Z, r24
	TWSR&=~(1<<TWPS0);
 11c:	80 81       	ld	r24, Z
 11e:	8e 7f       	andi	r24, 0xFE	; 254
 120:	80 83       	st	Z, r24
	// SCL freq= F_CPU/(16+2(TWBR).4^TWPS)
}
 122:	08 95       	ret

00000124 <TWI_start>:

void TWI_start(void)
{
	// Clear TWI interrupt flag, Put start condition on SDA, Enable TWI
	TWCR= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); 
 124:	84 ea       	ldi	r24, 0xA4	; 164
 126:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))); // Wait till start condition is transmitted
 12a:	80 91 bc 00 	lds	r24, 0x00BC
 12e:	87 ff       	sbrs	r24, 7
 130:	fc cf       	rjmp	.-8      	; 0x12a <TWI_start+0x6>
	while((TWSR & 0xF8)!= 0x08); // Check for the acknowledgement
 132:	80 91 b9 00 	lds	r24, 0x00B9
 136:	88 7f       	andi	r24, 0xF8	; 248
 138:	88 30       	cpi	r24, 0x08	; 8
 13a:	d9 f7       	brne	.-10     	; 0x132 <TWI_start+0xe>
}
 13c:	08 95       	ret

0000013e <TWI_repeated_start>:

void TWI_repeated_start(void)
{
	// Clear TWI interrupt flag, Put start condition on SDA, Enable TWI
	TWCR= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); 
 13e:	84 ea       	ldi	r24, 0xA4	; 164
 140:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))); // wait till restart condition is transmitted
 144:	80 91 bc 00 	lds	r24, 0x00BC
 148:	87 ff       	sbrs	r24, 7
 14a:	fc cf       	rjmp	.-8      	; 0x144 <TWI_repeated_start+0x6>
	while((TWSR & 0xF8)!= 0x10); // Check for the acknoledgement
 14c:	80 91 b9 00 	lds	r24, 0x00B9
 150:	88 7f       	andi	r24, 0xF8	; 248
 152:	80 31       	cpi	r24, 0x10	; 16
 154:	d9 f7       	brne	.-10     	; 0x14c <TWI_repeated_start+0xe>
}
 156:	08 95       	ret

00000158 <TWI_write_address>:

void TWI_write_address(unsigned char data)
{
	TWDR=data; // Address and write instruction
 158:	80 93 bb 00 	sts	0x00BB, r24
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
 15c:	84 e8       	ldi	r24, 0x84	; 132
 15e:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
 162:	80 91 bc 00 	lds	r24, 0x00BC
 166:	87 ff       	sbrs	r24, 7
 168:	fc cf       	rjmp	.-8      	; 0x162 <TWI_write_address+0xa>
	while((TWSR & 0xF8)!= 0x18);  // Check for the acknoledgement
 16a:	80 91 b9 00 	lds	r24, 0x00B9
 16e:	88 7f       	andi	r24, 0xF8	; 248
 170:	88 31       	cpi	r24, 0x18	; 24
 172:	d9 f7       	brne	.-10     	; 0x16a <TWI_write_address+0x12>
}	
 174:	08 95       	ret

00000176 <TWI_write_data>:

void TWI_write_data(unsigned char data)
{
	TWDR=data; // put data in TWDR
 176:	80 93 bb 00 	sts	0x00BB, r24
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
 17a:	84 e8       	ldi	r24, 0x84	; 132
 17c:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
 180:	80 91 bc 00 	lds	r24, 0x00BC
 184:	87 ff       	sbrs	r24, 7
 186:	fc cf       	rjmp	.-8      	; 0x180 <TWI_write_data+0xa>
	while((TWSR & 0xF8) != 0x28); // Check for the acknoledgement
 188:	80 91 b9 00 	lds	r24, 0x00B9
 18c:	88 7f       	andi	r24, 0xF8	; 248
 18e:	88 32       	cpi	r24, 0x28	; 40
 190:	d9 f7       	brne	.-10     	; 0x188 <TWI_write_data+0x12>
}
 192:	08 95       	ret

00000194 <TWI_read_address>:

void TWI_read_address(unsigned char data)
{
	TWDR=data; // Address and read instruction
 194:	80 93 bb 00 	sts	0x00BB, r24
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
 198:	84 e8       	ldi	r24, 0x84	; 132
 19a:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte received
 19e:	80 91 bc 00 	lds	r24, 0x00BC
 1a2:	87 ff       	sbrs	r24, 7
 1a4:	fc cf       	rjmp	.-8      	; 0x19e <TWI_read_address+0xa>
	while((TWSR & 0xF8)!= 0x40);  // Check for the acknoledgement
 1a6:	80 91 b9 00 	lds	r24, 0x00B9
 1aa:	88 7f       	andi	r24, 0xF8	; 248
 1ac:	80 34       	cpi	r24, 0x40	; 64
 1ae:	d9 f7       	brne	.-10     	; 0x1a6 <TWI_read_address+0x12>
}
 1b0:	08 95       	ret

000001b2 <TWI_read_data>:

uint8_t TWI_read_data(void)
{
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
 1b2:	84 e8       	ldi	r24, 0x84	; 132
 1b4:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
 1b8:	80 91 bc 00 	lds	r24, 0x00BC
 1bc:	87 ff       	sbrs	r24, 7
 1be:	fc cf       	rjmp	.-8      	; 0x1b8 <TWI_read_data+0x6>
	while((TWSR & 0xF8) != 0x58); // Check for the acknoledgement
 1c0:	80 91 b9 00 	lds	r24, 0x00B9
 1c4:	88 7f       	andi	r24, 0xF8	; 248
 1c6:	88 35       	cpi	r24, 0x58	; 88
 1c8:	d9 f7       	brne	.-10     	; 0x1c0 <TWI_read_data+0xe>
	recv_data=TWDR;
 1ca:	80 91 bb 00 	lds	r24, 0x00BB
 1ce:	80 93 00 02 	sts	0x0200, r24
	return recv_data;
}
 1d2:	08 95       	ret

000001d4 <TWI_stop>:

void TWI_stop(void)
{
	// Clear TWI interrupt flag, Put stop condition on SDA, Enable TWI
	TWCR= (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 1d4:	84 e9       	ldi	r24, 0x94	; 148
 1d6:	80 93 bc 00 	sts	0x00BC, r24
}
 1da:	08 95       	ret

000001dc <I2C_Write>:

void I2C_Write(uint8_t address, uint8_t data)
{
 1dc:	0f 93       	push	r16
 1de:	1f 93       	push	r17
 1e0:	18 2f       	mov	r17, r24
 1e2:	06 2f       	mov	r16, r22
	TWI_start();
 1e4:	0e 94 92 00 	call	0x124	; 0x124 <TWI_start>
	TWI_write_address(address);
 1e8:	81 2f       	mov	r24, r17
 1ea:	0e 94 ac 00 	call	0x158	; 0x158 <TWI_write_address>
	TWI_write_data(data);
 1ee:	80 2f       	mov	r24, r16
 1f0:	0e 94 bb 00 	call	0x176	; 0x176 <TWI_write_data>
}

void TWI_stop(void)
{
	// Clear TWI interrupt flag, Put stop condition on SDA, Enable TWI
	TWCR= (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 1f4:	84 e9       	ldi	r24, 0x94	; 148
 1f6:	80 93 bc 00 	sts	0x00BC, r24
{
	TWI_start();
	TWI_write_address(address);
	TWI_write_data(data);
	TWI_stop();
}
 1fa:	1f 91       	pop	r17
 1fc:	0f 91       	pop	r16
 1fe:	08 95       	ret

00000200 <I2C_Read>:

uint8_t I2C_Read(uint8_t address)
{	
 200:	1f 93       	push	r17
 202:	18 2f       	mov	r17, r24
	uint8_t data_from_slave;
	TWI_start(); 
 204:	0e 94 92 00 	call	0x124	; 0x124 <TWI_start>
	TWI_read_address(address+1); // Function to write address and data direction bit(read) on SDA
 208:	81 2f       	mov	r24, r17
 20a:	8f 5f       	subi	r24, 0xFF	; 255
 20c:	0e 94 ca 00 	call	0x194	; 0x194 <TWI_read_address>
	data_from_slave = TWI_read_data(); // Function to read data from slave 
 210:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <TWI_read_data>
}

void TWI_stop(void)
{
	// Clear TWI interrupt flag, Put stop condition on SDA, Enable TWI
	TWCR= (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 214:	94 e9       	ldi	r25, 0x94	; 148
 216:	90 93 bc 00 	sts	0x00BC, r25
	TWI_start(); 
	TWI_read_address(address+1); // Function to write address and data direction bit(read) on SDA
	data_from_slave = TWI_read_data(); // Function to read data from slave 
	TWI_stop();
	return data_from_slave;
}
 21a:	1f 91       	pop	r17
 21c:	08 95       	ret

0000021e <main>:

int main(void)
{
 21e:	80 e2       	ldi	r24, 0x20	; 32
 220:	9e e4       	ldi	r25, 0x4E	; 78
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 222:	20 e7       	ldi	r18, 0x70	; 112
 224:	31 e0       	ldi	r19, 0x01	; 1
 226:	f9 01       	movw	r30, r18
 228:	31 97       	sbiw	r30, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <main+0xa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 22c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 22e:	d9 f7       	brne	.-10     	; 0x226 <main+0x8>
	_delay_ms(2000);
	//lcd_init();
	DDRB = 0xFF;
 230:	8f ef       	ldi	r24, 0xFF	; 255
 232:	84 b9       	out	0x04, r24	; 4
//#include "LCD_640.h"
uint8_t recv_data;

void TWI_init_master(void) // Function to initialize master
{
	TWBR=0x01; // Bit rate
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	80 93 b8 00 	sts	0x00B8, r24
	TWSR&=~(1<<TWPS1); // Setting prescalar bits
 23a:	80 91 b9 00 	lds	r24, 0x00B9
 23e:	8d 7f       	andi	r24, 0xFD	; 253
 240:	80 93 b9 00 	sts	0x00B9, r24
	TWSR&=~(1<<TWPS0);
 244:	80 91 b9 00 	lds	r24, 0x00B9
 248:	8e 7f       	andi	r24, 0xFE	; 254
 24a:	80 93 b9 00 	sts	0x00B9, r24
 24e:	ff cf       	rjmp	.-2      	; 0x24e <main+0x30>

00000250 <_exit>:
 250:	f8 94       	cli

00000252 <__stop_program>:
 252:	ff cf       	rjmp	.-2      	; 0x252 <__stop_program>
