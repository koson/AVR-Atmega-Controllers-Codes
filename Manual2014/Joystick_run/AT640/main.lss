
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800200  00000e3a  00000ece  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  0080020a  0080020a  00000ed8  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000243  00000000  00000000  00000ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cf6  00000000  00000000  0000113b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000029c  00000000  00000000  00001e31  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bf4  00000000  00000000  000020cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b0  00000000  00000000  00002cc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000283  00000000  00000000  00002e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004b7  00000000  00000000  000030f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  000035ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	ea e3       	ldi	r30, 0x3A	; 58
  f8:	fe e0       	ldi	r31, 0x0E	; 14
  fa:	02 c0       	rjmp	.+4      	; 0x100 <.do_copy_data_start>

000000fc <.do_copy_data_loop>:
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0

00000100 <.do_copy_data_start>:
 100:	aa 30       	cpi	r26, 0x0A	; 10
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <.do_copy_data_loop>

00000106 <__do_clear_bss>:
 106:	12 e0       	ldi	r17, 0x02	; 2
 108:	aa e0       	ldi	r26, 0x0A	; 10
 10a:	b2 e0       	ldi	r27, 0x02	; 2
 10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
 10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
 110:	a4 32       	cpi	r26, 0x24	; 36
 112:	b1 07       	cpc	r27, r17
 114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
 116:	0e 94 bc 04 	call	0x978	; 0x978 <main>
 11a:	0c 94 1b 07 	jmp	0xe36	; 0xe36 <_exit>

0000011e <__bad_interrupt>:
 11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <WaitMs>:

unsigned char ch[10] = {'0','1','2','3','4','5','6','7','8','9'};
unsigned char tenthousand=0,thousand=0,hundred=0,ten=0,one=0;

void WaitMs(unsigned int ms)
{
 122:	0a c0       	rjmp	.+20     	; 0x138 <WaitMs+0x16>
	int i;

	while (ms-- > 0)
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	30 e0       	ldi	r19, 0x00	; 0
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 128:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 12a:	2f 5f       	subi	r18, 0xFF	; 255
 12c:	3f 4f       	sbci	r19, 0xFF	; 255
 12e:	4c e0       	ldi	r20, 0x0C	; 12
 130:	2c 3c       	cpi	r18, 0xCC	; 204
 132:	34 07       	cpc	r19, r20
 134:	c9 f7       	brne	.-14     	; 0x128 <WaitMs+0x6>
 136:	01 97       	sbiw	r24, 0x01	; 1

void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 138:	00 97       	sbiw	r24, 0x00	; 0
 13a:	a1 f7       	brne	.-24     	; 0x124 <WaitMs+0x2>
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
	}
}
 13c:	08 95       	ret

0000013e <toggleE>:

void toggleE(void)
{
	SETBIT(PORTE,BIT(0));
 13e:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 140:	83 e3       	ldi	r24, 0x33	; 51
 142:	97 e0       	ldi	r25, 0x07	; 7
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <toggleE+0x6>
	_delay_us(500);
	CLEARBIT(PORTE,BIT(0));
 148:	70 98       	cbi	0x0e, 0	; 14
}
 14a:	08 95       	ret

0000014c <CheckTemp>:


void CheckTemp(uint8_t temp)
{
 14c:	df 93       	push	r29
 14e:	cf 93       	push	r28
 150:	0f 92       	push	r0
 152:	cd b7       	in	r28, 0x3d	; 61
 154:	de b7       	in	r29, 0x3e	; 62
 156:	89 83       	std	Y+1, r24	; 0x01
	if (bit_is_set(temp, 7))
 158:	fe 01       	movw	r30, r28
 15a:	31 96       	adiw	r30, 0x01	; 1
 15c:	89 81       	ldd	r24, Y+1	; 0x01
 15e:	87 ff       	sbrs	r24, 7
 160:	02 c0       	rjmp	.+4      	; 0x166 <CheckTemp+0x1a>
	{
		SETBIT(PORTE, BIT(7))
 162:	77 9a       	sbi	0x0e, 7	; 14
 164:	01 c0       	rjmp	.+2      	; 0x168 <CheckTemp+0x1c>
	}
	else
	{
		CLEARBIT(PORTE, BIT(7))
 166:	77 98       	cbi	0x0e, 7	; 14
	}
	
	if (bit_is_set(temp, 6))
 168:	80 81       	ld	r24, Z
 16a:	86 ff       	sbrs	r24, 6
 16c:	02 c0       	rjmp	.+4      	; 0x172 <CheckTemp+0x26>
	{
		SETBIT(PORTE, BIT(6))
 16e:	76 9a       	sbi	0x0e, 6	; 14
 170:	01 c0       	rjmp	.+2      	; 0x174 <CheckTemp+0x28>
	}
	else
	{
		CLEARBIT(PORTE, BIT(6))
 172:	76 98       	cbi	0x0e, 6	; 14
	}
	if (bit_is_set(temp, 1))
 174:	80 81       	ld	r24, Z
 176:	81 ff       	sbrs	r24, 1
 178:	02 c0       	rjmp	.+4      	; 0x17e <CheckTemp+0x32>
	{
		SETBIT(PORTE, BIT(1))
 17a:	71 9a       	sbi	0x0e, 1	; 14
 17c:	01 c0       	rjmp	.+2      	; 0x180 <CheckTemp+0x34>
	}
	else
	{
		CLEARBIT(PORTE, BIT(1))
 17e:	71 98       	cbi	0x0e, 1	; 14
	}
	
	if (bit_is_set(temp, 2))
 180:	80 81       	ld	r24, Z
 182:	82 ff       	sbrs	r24, 2
 184:	02 c0       	rjmp	.+4      	; 0x18a <CheckTemp+0x3e>
	{
		SETBIT(PORTE, BIT(2))
 186:	72 9a       	sbi	0x0e, 2	; 14
 188:	01 c0       	rjmp	.+2      	; 0x18c <CheckTemp+0x40>
	}
	else
	{
		CLEARBIT(PORTE, BIT(2))
 18a:	72 98       	cbi	0x0e, 2	; 14
	}
	
	if (bit_is_set(temp, 0))
 18c:	80 81       	ld	r24, Z
 18e:	80 ff       	sbrs	r24, 0
 190:	02 c0       	rjmp	.+4      	; 0x196 <CheckTemp+0x4a>
	{
		SETBIT(PORTE, BIT(0))
 192:	70 9a       	sbi	0x0e, 0	; 14
 194:	01 c0       	rjmp	.+2      	; 0x198 <CheckTemp+0x4c>
	}
	else
	{
		CLEARBIT(PORTE, BIT(0))
 196:	70 98       	cbi	0x0e, 0	; 14
	}
}
 198:	0f 90       	pop	r0
 19a:	cf 91       	pop	r28
 19c:	df 91       	pop	r29
 19e:	08 95       	ret

000001a0 <lcd_cmd>:

void lcd_cmd(unsigned char ch)
{
 1a0:	df 92       	push	r13
 1a2:	ef 92       	push	r14
 1a4:	ff 92       	push	r15
 1a6:	0f 93       	push	r16
 1a8:	1f 93       	push	r17
 1aa:	08 2f       	mov	r16, r24
	int temp;
	CLEARBIT(PORTG,BIT(5));
 1ac:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 1ae:	70 98       	cbi	0x0e, 0	; 14

	temp= ch & 0b11000000; // '10'000000
 1b0:	e8 2e       	mov	r14, r24
 1b2:	ff 24       	eor	r15, r15
	CheckTemp(temp);	
 1b4:	80 7c       	andi	r24, 0xC0	; 192
 1b6:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
	//PORTE=temp;
	
	temp=(ch >> 3) & 0b00000110; // 00000'11'0
 1ba:	06 95       	lsr	r16
 1bc:	06 95       	lsr	r16
 1be:	06 95       	lsr	r16
 1c0:	10 e0       	ldi	r17, 0x00	; 0
 1c2:	06 70       	andi	r16, 0x06	; 6
 1c4:	10 70       	andi	r17, 0x00	; 0
	temp = PORTE | temp;
 1c6:	8e b1       	in	r24, 0x0e	; 14
	
	CheckTemp(temp);
 1c8:	80 2b       	or	r24, r16
 1ca:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1ce:	38 e1       	ldi	r19, 0x18	; 24
 1d0:	d3 2e       	mov	r13, r19
 1d2:	8d 2d       	mov	r24, r13
 1d4:	8a 95       	dec	r24
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_cmd+0x34>
	}
}

void toggleE(void)
{
	SETBIT(PORTE,BIT(0));
 1d8:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1da:	03 e3       	ldi	r16, 0x33	; 51
 1dc:	17 e0       	ldi	r17, 0x07	; 7
 1de:	c8 01       	movw	r24, r16
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <lcd_cmd+0x40>
	_delay_us(500);
	CLEARBIT(PORTE,BIT(0));
 1e4:	70 98       	cbi	0x0e, 0	; 14
	CheckTemp(temp);
	_delay_us(5);
	
	toggleE();
   // Extract lower nibble
	SETBIT(PORTG,BIT(5));
 1e6:	a5 9a       	sbi	0x14, 5	; 20
   	CLEARBIT(PORTG,BIT(5));
 1e8:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 1ea:	70 98       	cbi	0x0e, 0	; 14

	temp=(ch << 4) & 0b11000000; // '10'000000
	CheckTemp(temp);
 1ec:	c7 01       	movw	r24, r14
 1ee:	24 e0       	ldi	r18, 0x04	; 4
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	2a 95       	dec	r18
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <lcd_cmd+0x50>
 1f8:	80 7c       	andi	r24, 0xC0	; 192
 1fa:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
	temp=(ch << 1) & 0b00000110; // 00000'01'0 
 1fe:	ee 0c       	add	r14, r14
 200:	ff 1c       	adc	r15, r15
 202:	86 e0       	ldi	r24, 0x06	; 6
 204:	e8 22       	and	r14, r24
 206:	ff 24       	eor	r15, r15
	temp= PORTE | temp;
 208:	8e b1       	in	r24, 0x0e	; 14
	CheckTemp(temp);
 20a:	8e 29       	or	r24, r14
 20c:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 210:	da 94       	dec	r13
 212:	f1 f7       	brne	.-4      	; 0x210 <lcd_cmd+0x70>
	}
}

void toggleE(void)
{
	SETBIT(PORTE,BIT(0));
 214:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 216:	c8 01       	movw	r24, r16
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <lcd_cmd+0x78>
	_delay_us(500);
	CLEARBIT(PORTE,BIT(0));
 21c:	70 98       	cbi	0x0e, 0	; 14
	temp= PORTE | temp;
	CheckTemp(temp);
	_delay_us(5);
	toggleE();
   	//PORTE = 0x00;
	CLEARBIT(PORTE,BIT(0));			//Enable
 21e:	70 98       	cbi	0x0e, 0	; 14
	CLEARBIT(PORTE,BIT(1));
 220:	71 98       	cbi	0x0e, 1	; 14
	CLEARBIT(PORTE,BIT(2));
 222:	72 98       	cbi	0x0e, 2	; 14
	CLEARBIT(PORTE,BIT(6));
 224:	76 98       	cbi	0x0e, 6	; 14
	CLEARBIT(PORTE,BIT(7));
 226:	77 98       	cbi	0x0e, 7	; 14
   	WaitMs(10);
 228:	8a e0       	ldi	r24, 0x0A	; 10
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
}
 230:	1f 91       	pop	r17
 232:	0f 91       	pop	r16
 234:	ff 90       	pop	r15
 236:	ef 90       	pop	r14
 238:	df 90       	pop	r13
 23a:	08 95       	ret

0000023c <lcd_init>:

void lcd_init(void)
{
	DDRE |= (1<<0) | (1<<1) | (1<<2) | (1<<6) | (1<<7);
 23c:	8d b1       	in	r24, 0x0d	; 13
 23e:	87 6c       	ori	r24, 0xC7	; 199
 240:	8d b9       	out	0x0d, r24	; 13
	DDRG |= (1<<5);
 242:	9d 9a       	sbi	0x13, 5	; 19
	WaitMs(15);
 244:	8f e0       	ldi	r24, 0x0F	; 15
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
	CLEARBIT(PORTG,BIT(5));			//RS
 24c:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));			//Enable
 24e:	70 98       	cbi	0x0e, 0	; 14
	CLEARBIT(PORTE,BIT(1));
 250:	71 98       	cbi	0x0e, 1	; 14
	CLEARBIT(PORTE,BIT(2));
 252:	72 98       	cbi	0x0e, 2	; 14
	CLEARBIT(PORTE,BIT(6));
 254:	76 98       	cbi	0x0e, 6	; 14
	CLEARBIT(PORTE,BIT(7));
 256:	77 98       	cbi	0x0e, 7	; 14
	lcd_cmd(0x20);		//data is 8-bit length
 258:	80 e2       	ldi	r24, 0x20	; 32
 25a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
	WaitMs(1);
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
	lcd_cmd(0x20);		//data is 8-bit length
 266:	80 e2       	ldi	r24, 0x20	; 32
 268:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
	WaitMs(1);
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
	lcd_cmd(0x20);		//data is 8-bit length
 274:	80 e2       	ldi	r24, 0x20	; 32
 276:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
	WaitMs(1);
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
	lcd_cmd(0x28);		//sets character font
 282:	88 e2       	ldi	r24, 0x28	; 40
 284:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
	WaitMs(1);
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
	lcd_cmd(0x0E);		//display off(d,c,b=0) 08
 290:	8e e0       	ldi	r24, 0x0E	; 14
 292:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
	WaitMs(1);
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
	lcd_cmd(0x01);		//clears the data
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
	WaitMs(1);
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
	lcd_cmd(0x6);		//entry mode--increment
 2ac:	86 e0       	ldi	r24, 0x06	; 6
 2ae:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
	WaitMs(1);
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
}
 2ba:	08 95       	ret

000002bc <lcd_char>:



void lcd_char(unsigned char data)
{	
 2bc:	df 92       	push	r13
 2be:	ef 92       	push	r14
 2c0:	ff 92       	push	r15
 2c2:	0f 93       	push	r16
 2c4:	1f 93       	push	r17
 2c6:	08 2f       	mov	r16, r24
	int temp;
	WaitMs(15);
 2c8:	8f e0       	ldi	r24, 0x0F	; 15
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
	SETBIT(PORTG,BIT(5));
 2d0:	a5 9a       	sbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 2d2:	70 98       	cbi	0x0e, 0	; 14
	temp= (data & 0b11000000); // '10'000000
 2d4:	e0 2e       	mov	r14, r16
 2d6:	ff 24       	eor	r15, r15
	CheckTemp(temp);
 2d8:	80 2f       	mov	r24, r16
 2da:	80 7c       	andi	r24, 0xC0	; 192
 2dc:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
	temp=(data>>3) & 0b00000110; // 00000'11'0
 2e0:	06 95       	lsr	r16
 2e2:	06 95       	lsr	r16
 2e4:	06 95       	lsr	r16
 2e6:	10 e0       	ldi	r17, 0x00	; 0
 2e8:	06 70       	andi	r16, 0x06	; 6
 2ea:	10 70       	andi	r17, 0x00	; 0
	temp = PORTE | temp;
 2ec:	8e b1       	in	r24, 0x0e	; 14
	CheckTemp(temp);
 2ee:	80 2b       	or	r24, r16
 2f0:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2f4:	68 e1       	ldi	r22, 0x18	; 24
 2f6:	d6 2e       	mov	r13, r22
 2f8:	8d 2d       	mov	r24, r13
 2fa:	8a 95       	dec	r24
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <lcd_char+0x3e>
	}
}

void toggleE(void)
{
	SETBIT(PORTE,BIT(0));
 2fe:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 300:	03 e3       	ldi	r16, 0x33	; 51
 302:	17 e0       	ldi	r17, 0x07	; 7
 304:	c8 01       	movw	r24, r16
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <lcd_char+0x4a>
	_delay_us(500);
	CLEARBIT(PORTE,BIT(0));
 30a:	70 98       	cbi	0x0e, 0	; 14
	temp = PORTE | temp;
	CheckTemp(temp);
	_delay_us(5);
	toggleE();	
	
	CLEARBIT(PORTG,BIT(5));
 30c:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 30e:	70 98       	cbi	0x0e, 0	; 14
	SETBIT(PORTG,BIT(5));
 310:	a5 9a       	sbi	0x14, 5	; 20
	temp=(data << 4) & 0b11000000; // '10'000000
	CheckTemp(temp);
 312:	c7 01       	movw	r24, r14
 314:	54 e0       	ldi	r21, 0x04	; 4
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	5a 95       	dec	r21
 31c:	e1 f7       	brne	.-8      	; 0x316 <lcd_char+0x5a>
 31e:	80 7c       	andi	r24, 0xC0	; 192
 320:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
	temp=(data << 1) & 0b00000110; // 00000'01'0 
 324:	ee 0c       	add	r14, r14
 326:	ff 1c       	adc	r15, r15
 328:	86 e0       	ldi	r24, 0x06	; 6
 32a:	e8 22       	and	r14, r24
 32c:	ff 24       	eor	r15, r15
	temp = PORTE | temp;
 32e:	8e b1       	in	r24, 0x0e	; 14
	CheckTemp(temp);
 330:	8e 29       	or	r24, r14
 332:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 336:	da 94       	dec	r13
 338:	f1 f7       	brne	.-4      	; 0x336 <lcd_char+0x7a>
	}
}

void toggleE(void)
{
	SETBIT(PORTE,BIT(0));
 33a:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 33c:	c8 01       	movw	r24, r16
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <lcd_char+0x82>
	_delay_us(500);
	CLEARBIT(PORTE,BIT(0));
 342:	70 98       	cbi	0x0e, 0	; 14
	temp=(data << 1) & 0b00000110; // 00000'01'0 
	temp = PORTE | temp;
	CheckTemp(temp);
	_delay_us(5);				
	toggleE();
}
 344:	1f 91       	pop	r17
 346:	0f 91       	pop	r16
 348:	ff 90       	pop	r15
 34a:	ef 90       	pop	r14
 34c:	df 90       	pop	r13
 34e:	08 95       	ret

00000350 <lcd_string>:

void lcd_string(unsigned char str[32])
{
 350:	af 92       	push	r10
 352:	bf 92       	push	r11
 354:	cf 92       	push	r12
 356:	df 92       	push	r13
 358:	ff 92       	push	r15
 35a:	0f 93       	push	r16
 35c:	1f 93       	push	r17
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	6c 01       	movw	r12, r24
	int poop,bitch;
	unsigned char k=0;
	SETBIT(PORTG,BIT(5));
 364:	a5 9a       	sbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 366:	70 98       	cbi	0x0e, 0	; 14
 368:	ff 24       	eor	r15, r15
 36a:	a3 e3       	ldi	r26, 0x33	; 51
 36c:	aa 2e       	mov	r10, r26
 36e:	a7 e0       	ldi	r26, 0x07	; 7
 370:	ba 2e       	mov	r11, r26
 372:	3e c0       	rjmp	.+124    	; 0x3f0 <lcd_string+0xa0>
	while(str[k]!='\0')	//Till null character is encountered
	{
		if(k==16)
 374:	80 e1       	ldi	r24, 0x10	; 16
 376:	f8 16       	cp	r15, r24
 378:	19 f4       	brne	.+6      	; 0x380 <lcd_string+0x30>
		lcd_cmd(LINE2);
 37a:	80 ec       	ldi	r24, 0xC0	; 192
 37c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
		SETBIT(PORTG,BIT(5));
 380:	a5 9a       	sbi	0x14, 5	; 20
		CLEARBIT(PORTE,BIT(0));
 382:	70 98       	cbi	0x0e, 0	; 14
		bitch=str[k]; //10111001
 384:	08 81       	ld	r16, Y
 386:	10 e0       	ldi	r17, 0x00	; 0
		poop= bitch & 0b11000000; // '10'000000
		CheckTemp(poop);
 388:	80 2f       	mov	r24, r16
 38a:	80 7c       	andi	r24, 0xC0	; 192
 38c:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
		//PORTE=poop;
		poop=(bitch>>3) & 0b00000110; // 00000'11'0
 390:	f3 e0       	ldi	r31, 0x03	; 3
 392:	15 95       	asr	r17
 394:	07 95       	ror	r16
 396:	fa 95       	dec	r31
 398:	e1 f7       	brne	.-8      	; 0x392 <lcd_string+0x42>
 39a:	06 70       	andi	r16, 0x06	; 6
 39c:	10 70       	andi	r17, 0x00	; 0
		poop = PORTE | poop;
 39e:	8e b1       	in	r24, 0x0e	; 14
		CheckTemp(poop);
 3a0:	80 2b       	or	r24, r16
 3a2:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
	}
}

void toggleE(void)
{
	SETBIT(PORTE,BIT(0));
 3a6:	70 9a       	sbi	0x0e, 0	; 14
 3a8:	c5 01       	movw	r24, r10
 3aa:	01 97       	sbiw	r24, 0x01	; 1
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <lcd_string+0x5a>
	_delay_us(500);
	CLEARBIT(PORTE,BIT(0));
 3ae:	70 98       	cbi	0x0e, 0	; 14
		poop=(bitch>>3) & 0b00000110; // 00000'11'0
		poop = PORTE | poop;
		CheckTemp(poop);
		
		toggleE();
		CLEARBIT(PORTG,BIT(5))
 3b0:	a5 98       	cbi	0x14, 5	; 20
		SETBIT(PORTG,BIT(5));
 3b2:	a5 9a       	sbi	0x14, 5	; 20
		CLEARBIT(PORTE,BIT(0));
 3b4:	70 98       	cbi	0x0e, 0	; 14
		bitch=str[k];
 3b6:	08 81       	ld	r16, Y
 3b8:	10 e0       	ldi	r17, 0x00	; 0
		poop=(bitch << 4) & 0b11000000; // '10'000000
		CheckTemp(poop);
 3ba:	c8 01       	movw	r24, r16
 3bc:	e4 e0       	ldi	r30, 0x04	; 4
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	ea 95       	dec	r30
 3c4:	e1 f7       	brne	.-8      	; 0x3be <lcd_string+0x6e>
 3c6:	80 7c       	andi	r24, 0xC0	; 192
 3c8:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
		poop=(bitch << 1) & 0b00000110; // 00000'01'0
 3cc:	00 0f       	add	r16, r16
 3ce:	11 1f       	adc	r17, r17
 3d0:	06 70       	andi	r16, 0x06	; 6
 3d2:	10 70       	andi	r17, 0x00	; 0
		poop = PORTE | poop;
 3d4:	8e b1       	in	r24, 0x0e	; 14
		CheckTemp(poop);
 3d6:	80 2b       	or	r24, r16
 3d8:	0e 94 a6 00 	call	0x14c	; 0x14c <CheckTemp>
	}
}

void toggleE(void)
{
	SETBIT(PORTE,BIT(0));
 3dc:	70 9a       	sbi	0x0e, 0	; 14
 3de:	c5 01       	movw	r24, r10
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <lcd_string+0x90>
	_delay_us(500);
	CLEARBIT(PORTE,BIT(0));
 3e4:	70 98       	cbi	0x0e, 0	; 14
		CheckTemp(poop);
		poop=(bitch << 1) & 0b00000110; // 00000'01'0
		poop = PORTE | poop;
		CheckTemp(poop);
		toggleE();
		k++;
 3e6:	f3 94       	inc	r15
		WaitMs(1);
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 91 00 	call	0x122	; 0x122 <WaitMs>
{
	int poop,bitch;
	unsigned char k=0;
	SETBIT(PORTG,BIT(5));
	CLEARBIT(PORTE,BIT(0));
	while(str[k]!='\0')	//Till null character is encountered
 3f0:	e6 01       	movw	r28, r12
 3f2:	cf 0d       	add	r28, r15
 3f4:	d1 1d       	adc	r29, r1
 3f6:	88 81       	ld	r24, Y
 3f8:	88 23       	and	r24, r24
 3fa:	09 f0       	breq	.+2      	; 0x3fe <lcd_string+0xae>
 3fc:	bb cf       	rjmp	.-138    	; 0x374 <lcd_string+0x24>
		CheckTemp(poop);
		toggleE();
		k++;
		WaitMs(1);
	}
}
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	1f 91       	pop	r17
 404:	0f 91       	pop	r16
 406:	ff 90       	pop	r15
 408:	df 90       	pop	r13
 40a:	cf 90       	pop	r12
 40c:	bf 90       	pop	r11
 40e:	af 90       	pop	r10
 410:	08 95       	ret

00000412 <lcd_showvalue>:

void lcd_showvalue(long int num)
{
 412:	8f 92       	push	r8
 414:	9f 92       	push	r9
 416:	af 92       	push	r10
 418:	bf 92       	push	r11
 41a:	cf 92       	push	r12
 41c:	df 92       	push	r13
 41e:	ef 92       	push	r14
 420:	ff 92       	push	r15
 422:	1f 93       	push	r17
 424:	cf 93       	push	r28
 426:	df 93       	push	r29
 428:	6b 01       	movw	r12, r22
 42a:	7c 01       	movw	r14, r24
	if (num < 0)
 42c:	97 ff       	sbrs	r25, 7
 42e:	0b c0       	rjmp	.+22     	; 0x446 <lcd_showvalue+0x34>
	{
		lcd_char('-');
 430:	8d e2       	ldi	r24, 0x2D	; 45
 432:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_char>
		num = -num;
 436:	f0 94       	com	r15
 438:	e0 94       	com	r14
 43a:	d0 94       	com	r13
 43c:	c0 94       	com	r12
 43e:	c1 1c       	adc	r12, r1
 440:	d1 1c       	adc	r13, r1
 442:	e1 1c       	adc	r14, r1
 444:	f1 1c       	adc	r15, r1
	
	unsigned long int n = 0;
	int flag = 0;


	if(num%100000 == 0)
 446:	c7 01       	movw	r24, r14
 448:	b6 01       	movw	r22, r12
 44a:	20 ea       	ldi	r18, 0xA0	; 160
 44c:	36 e8       	ldi	r19, 0x86	; 134
 44e:	41 e0       	ldi	r20, 0x01	; 1
 450:	50 e0       	ldi	r21, 0x00	; 0
 452:	0e 94 00 07 	call	0xe00	; 0xe00 <__divmodsi4>
 456:	61 15       	cp	r22, r1
 458:	71 05       	cpc	r23, r1
 45a:	81 05       	cpc	r24, r1
 45c:	91 05       	cpc	r25, r1
 45e:	19 f4       	brne	.+6      	; 0x466 <lcd_showvalue+0x54>
 460:	c5 e0       	ldi	r28, 0x05	; 5
 462:	d0 e0       	ldi	r29, 0x00	; 0
 464:	41 c0       	rjmp	.+130    	; 0x4e8 <lcd_showvalue+0xd6>
	{
		flag = 5;
	}
	
	else if(num%10000 == 0)
 466:	c7 01       	movw	r24, r14
 468:	b6 01       	movw	r22, r12
 46a:	20 e1       	ldi	r18, 0x10	; 16
 46c:	37 e2       	ldi	r19, 0x27	; 39
 46e:	40 e0       	ldi	r20, 0x00	; 0
 470:	50 e0       	ldi	r21, 0x00	; 0
 472:	0e 94 00 07 	call	0xe00	; 0xe00 <__divmodsi4>
 476:	61 15       	cp	r22, r1
 478:	71 05       	cpc	r23, r1
 47a:	81 05       	cpc	r24, r1
 47c:	91 05       	cpc	r25, r1
 47e:	19 f4       	brne	.+6      	; 0x486 <lcd_showvalue+0x74>
 480:	c4 e0       	ldi	r28, 0x04	; 4
 482:	d0 e0       	ldi	r29, 0x00	; 0
 484:	31 c0       	rjmp	.+98     	; 0x4e8 <lcd_showvalue+0xd6>
	{
		flag = 4;
	}

	else if(num%1000 == 0)
 486:	c7 01       	movw	r24, r14
 488:	b6 01       	movw	r22, r12
 48a:	28 ee       	ldi	r18, 0xE8	; 232
 48c:	33 e0       	ldi	r19, 0x03	; 3
 48e:	40 e0       	ldi	r20, 0x00	; 0
 490:	50 e0       	ldi	r21, 0x00	; 0
 492:	0e 94 00 07 	call	0xe00	; 0xe00 <__divmodsi4>
 496:	61 15       	cp	r22, r1
 498:	71 05       	cpc	r23, r1
 49a:	81 05       	cpc	r24, r1
 49c:	91 05       	cpc	r25, r1
 49e:	19 f4       	brne	.+6      	; 0x4a6 <lcd_showvalue+0x94>
 4a0:	c3 e0       	ldi	r28, 0x03	; 3
 4a2:	d0 e0       	ldi	r29, 0x00	; 0
 4a4:	21 c0       	rjmp	.+66     	; 0x4e8 <lcd_showvalue+0xd6>
	{
		flag = 3;
	}

	else if(num%100 == 0)
 4a6:	c7 01       	movw	r24, r14
 4a8:	b6 01       	movw	r22, r12
 4aa:	24 e6       	ldi	r18, 0x64	; 100
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	40 e0       	ldi	r20, 0x00	; 0
 4b0:	50 e0       	ldi	r21, 0x00	; 0
 4b2:	0e 94 00 07 	call	0xe00	; 0xe00 <__divmodsi4>
 4b6:	61 15       	cp	r22, r1
 4b8:	71 05       	cpc	r23, r1
 4ba:	81 05       	cpc	r24, r1
 4bc:	91 05       	cpc	r25, r1
 4be:	19 f4       	brne	.+6      	; 0x4c6 <lcd_showvalue+0xb4>
 4c0:	c2 e0       	ldi	r28, 0x02	; 2
 4c2:	d0 e0       	ldi	r29, 0x00	; 0
 4c4:	11 c0       	rjmp	.+34     	; 0x4e8 <lcd_showvalue+0xd6>
 4c6:	c0 e0       	ldi	r28, 0x00	; 0
 4c8:	d0 e0       	ldi	r29, 0x00	; 0
 4ca:	c7 01       	movw	r24, r14
 4cc:	b6 01       	movw	r22, r12
 4ce:	2a e0       	ldi	r18, 0x0A	; 10
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	40 e0       	ldi	r20, 0x00	; 0
 4d4:	50 e0       	ldi	r21, 0x00	; 0
 4d6:	0e 94 00 07 	call	0xe00	; 0xe00 <__divmodsi4>
 4da:	61 15       	cp	r22, r1
 4dc:	71 05       	cpc	r23, r1
 4de:	81 05       	cpc	r24, r1
 4e0:	91 05       	cpc	r25, r1
 4e2:	11 f4       	brne	.+4      	; 0x4e8 <lcd_showvalue+0xd6>
 4e4:	c1 e0       	ldi	r28, 0x01	; 1
 4e6:	d0 e0       	ldi	r29, 0x00	; 0
 4e8:	88 24       	eor	r8, r8
 4ea:	99 24       	eor	r9, r9
 4ec:	54 01       	movw	r10, r8
 4ee:	23 c0       	rjmp	.+70     	; 0x536 <lcd_showvalue+0x124>


	while(num!=0)
	{
		
		H = num%10;
 4f0:	c7 01       	movw	r24, r14
 4f2:	b6 01       	movw	r22, r12
 4f4:	2a e0       	ldi	r18, 0x0A	; 10
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	40 e0       	ldi	r20, 0x00	; 0
 4fa:	50 e0       	ldi	r21, 0x00	; 0
 4fc:	0e 94 00 07 	call	0xe00	; 0xe00 <__divmodsi4>
 500:	16 2f       	mov	r17, r22
		num = num/10;
 502:	c7 01       	movw	r24, r14
 504:	b6 01       	movw	r22, r12
 506:	2a e0       	ldi	r18, 0x0A	; 10
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	40 e0       	ldi	r20, 0x00	; 0
 50c:	50 e0       	ldi	r21, 0x00	; 0
 50e:	0e 94 00 07 	call	0xe00	; 0xe00 <__divmodsi4>
 512:	c9 01       	movw	r24, r18
 514:	da 01       	movw	r26, r20
 516:	6c 01       	movw	r12, r24
 518:	7d 01       	movw	r14, r26
		n = (n*10)+H;
 51a:	c5 01       	movw	r24, r10
 51c:	b4 01       	movw	r22, r8
 51e:	2a e0       	ldi	r18, 0x0A	; 10
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	40 e0       	ldi	r20, 0x00	; 0
 524:	50 e0       	ldi	r21, 0x00	; 0
 526:	0e 94 ab 06 	call	0xd56	; 0xd56 <__mulsi3>
 52a:	4b 01       	movw	r8, r22
 52c:	5c 01       	movw	r10, r24
 52e:	81 0e       	add	r8, r17
 530:	91 1c       	adc	r9, r1
 532:	a1 1c       	adc	r10, r1
 534:	b1 1c       	adc	r11, r1
		flag = 0;
	}



	while(num!=0)
 536:	c1 14       	cp	r12, r1
 538:	d1 04       	cpc	r13, r1
 53a:	e1 04       	cpc	r14, r1
 53c:	f1 04       	cpc	r15, r1
 53e:	c1 f6       	brne	.-80     	; 0x4f0 <lcd_showvalue+0xde>
 540:	19 c0       	rjmp	.+50     	; 0x574 <lcd_showvalue+0x162>
	}
	
	while(n!=0)
	{
		
		H = n%10;
 542:	c5 01       	movw	r24, r10
 544:	b4 01       	movw	r22, r8
 546:	2a e0       	ldi	r18, 0x0A	; 10
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	40 e0       	ldi	r20, 0x00	; 0
 54c:	50 e0       	ldi	r21, 0x00	; 0
 54e:	0e 94 de 06 	call	0xdbc	; 0xdbc <__udivmodsi4>
 552:	16 2f       	mov	r17, r22
		n = n/10;
 554:	c5 01       	movw	r24, r10
 556:	b4 01       	movw	r22, r8
 558:	2a e0       	ldi	r18, 0x0A	; 10
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	40 e0       	ldi	r20, 0x00	; 0
 55e:	50 e0       	ldi	r21, 0x00	; 0
 560:	0e 94 de 06 	call	0xdbc	; 0xdbc <__udivmodsi4>
 564:	c9 01       	movw	r24, r18
 566:	da 01       	movw	r26, r20
 568:	4c 01       	movw	r8, r24
 56a:	5d 01       	movw	r10, r26
		lcd_char(H+48);
 56c:	81 2f       	mov	r24, r17
 56e:	80 5d       	subi	r24, 0xD0	; 208
 570:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_char>
		num = num/10;
		n = (n*10)+H;

	}
	
	while(n!=0)
 574:	81 14       	cp	r8, r1
 576:	91 04       	cpc	r9, r1
 578:	a1 04       	cpc	r10, r1
 57a:	b1 04       	cpc	r11, r1
 57c:	11 f7       	brne	.-60     	; 0x542 <lcd_showvalue+0x130>
 57e:	04 c0       	rjmp	.+8      	; 0x588 <lcd_showvalue+0x176>
	}
	
	
	while(flag > 0)
	{
		lcd_char(48);
 580:	80 e3       	ldi	r24, 0x30	; 48
 582:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_char>
		flag--;
 586:	21 97       	sbiw	r28, 0x01	; 1
		lcd_char(H+48);

	}
	
	
	while(flag > 0)
 588:	20 97       	sbiw	r28, 0x00	; 0
 58a:	d1 f7       	brne	.-12     	; 0x580 <lcd_showvalue+0x16e>
	{
		lcd_char(48);
		flag--;
	}

}
 58c:	df 91       	pop	r29
 58e:	cf 91       	pop	r28
 590:	1f 91       	pop	r17
 592:	ff 90       	pop	r15
 594:	ef 90       	pop	r14
 596:	df 90       	pop	r13
 598:	cf 90       	pop	r12
 59a:	bf 90       	pop	r11
 59c:	af 90       	pop	r10
 59e:	9f 90       	pop	r9
 5a0:	8f 90       	pop	r8
 5a2:	08 95       	ret

000005a4 <lcd_gotoxy1>:

}

void lcd_gotoxy1(unsigned char pos)
{
	lcd_cmd(LINE1+pos);
 5a4:	80 58       	subi	r24, 0x80	; 128
 5a6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
}
 5aa:	08 95       	ret

000005ac <lcd_gotoxy2>:

void lcd_gotoxy2(unsigned char pos)
{
	lcd_cmd(LINE2+pos);
 5ac:	80 54       	subi	r24, 0x40	; 64
 5ae:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_cmd>
}
 5b2:	08 95       	ret

000005b4 <lcd_showvalueh>:

void lcd_showvalueh(unsigned int num)	//prints the decimal 3digit value of num
{
 5b4:	ef 92       	push	r14
 5b6:	ff 92       	push	r15
 5b8:	0f 93       	push	r16
 5ba:	1f 93       	push	r17
 5bc:	8c 01       	movw	r16, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
 5be:	64 e6       	ldi	r22, 0x64	; 100
 5c0:	70 e0       	ldi	r23, 0x00	; 0
 5c2:	0e 94 ca 06 	call	0xd94	; 0xd94 <__udivmodhi4>
 5c6:	46 2f       	mov	r20, r22
	T=(num - (H*100))/10;
 5c8:	26 2f       	mov	r18, r22
 5ca:	30 e0       	ldi	r19, 0x00	; 0
 5cc:	8c e9       	ldi	r24, 0x9C	; 156
 5ce:	9f ef       	ldi	r25, 0xFF	; 255
 5d0:	28 9f       	mul	r18, r24
 5d2:	70 01       	movw	r14, r0
 5d4:	29 9f       	mul	r18, r25
 5d6:	f0 0c       	add	r15, r0
 5d8:	38 9f       	mul	r19, r24
 5da:	f0 0c       	add	r15, r0
 5dc:	11 24       	eor	r1, r1
 5de:	c7 01       	movw	r24, r14
 5e0:	80 0f       	add	r24, r16
 5e2:	91 1f       	adc	r25, r17
 5e4:	6a e0       	ldi	r22, 0x0A	; 10
 5e6:	70 e0       	ldi	r23, 0x00	; 0
 5e8:	0e 94 ca 06 	call	0xd94	; 0xd94 <__udivmodhi4>
 5ec:	16 2f       	mov	r17, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+48);
 5ee:	84 2f       	mov	r24, r20
 5f0:	80 5d       	subi	r24, 0xD0	; 208
 5f2:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_char>
	lcd_char(T+48);
 5f6:	81 2f       	mov	r24, r17
 5f8:	80 5d       	subi	r24, 0xD0	; 208
 5fa:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_char>
	lcd_char(O+48);
 5fe:	00 5d       	subi	r16, 0xD0	; 208
 600:	0e 0d       	add	r16, r14
 602:	86 ef       	ldi	r24, 0xF6	; 246
 604:	9f ef       	ldi	r25, 0xFF	; 255
 606:	18 9f       	mul	r17, r24
 608:	60 2d       	mov	r22, r0
 60a:	11 24       	eor	r1, r1
 60c:	86 2f       	mov	r24, r22
 60e:	80 0f       	add	r24, r16
 610:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_char>
}
 614:	1f 91       	pop	r17
 616:	0f 91       	pop	r16
 618:	ff 90       	pop	r15
 61a:	ef 90       	pop	r14
 61c:	08 95       	ret

0000061e <gameByte>:

unsigned char chk_ana = 0;
int data0=0,data1=0,data2=0,data3=0,data4=0,data5=0,temp=0;

int gameByte(int command)
{
 61e:	bc 01       	movw	r22, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 620:	84 e0       	ldi	r24, 0x04	; 4
 622:	8a 95       	dec	r24
 624:	f1 f7       	brne	.-4      	; 0x622 <gameByte+0x4>
 626:	20 e0       	ldi	r18, 0x00	; 0
 628:	30 e0       	ldi	r19, 0x00	; 0
 62a:	40 e0       	ldi	r20, 0x00	; 0
 62c:	50 e0       	ldi	r21, 0x00	; 0
				}
                PORTD&=~(1<<PSclock);                             // CLOCK LOW
                _delay_us(1);                                              // wait for output to stabilise
                if((PIND & _BV(PSdata)))
				{
					data|=(1<<i);  // read PSdata pin and store
 62e:	a4 e0       	ldi	r26, 0x04	; 4
 630:	e1 e0       	ldi	r30, 0x01	; 1
 632:	f0 e0       	ldi	r31, 0x00	; 0
        int i ;
        _delay_us(1);
        int data = 0x00;                             // clear data variable to save setting low bits later.
        for(i=0;i<8;i++)
        {
                if(command & _BV(i)) 
 634:	cb 01       	movw	r24, r22
 636:	02 2e       	mov	r0, r18
 638:	02 c0       	rjmp	.+4      	; 0x63e <gameByte+0x20>
 63a:	95 95       	asr	r25
 63c:	87 95       	ror	r24
 63e:	0a 94       	dec	r0
 640:	e2 f7       	brpl	.-8      	; 0x63a <gameByte+0x1c>
 642:	80 ff       	sbrs	r24, 0
 644:	02 c0       	rjmp	.+4      	; 0x64a <gameByte+0x2c>
				{
				PORTD|=(1<<PScommand);//sbi(PORTD, PScommand);
 646:	5b 9a       	sbi	0x0b, 3	; 11
 648:	01 c0       	rjmp	.+2      	; 0x64c <gameByte+0x2e>
				}// bit bang "command" out on PScommand wire.
                else
				{
				PORTD&=~(1<<PScommand);
 64a:	5b 98       	cbi	0x0b, 3	; 11
				}
                PORTD&=~(1<<PSclock);                             // CLOCK LOW
 64c:	58 98       	cbi	0x0b, 0	; 11
 64e:	8a 2f       	mov	r24, r26
 650:	8a 95       	dec	r24
 652:	f1 f7       	brne	.-4      	; 0x650 <gameByte+0x32>
                _delay_us(1);                                              // wait for output to stabilise
                if((PIND & _BV(PSdata)))
 654:	49 9b       	sbis	0x09, 1	; 9
 656:	09 c0       	rjmp	.+18     	; 0x66a <gameByte+0x4c>
				{
					data|=(1<<i);  // read PSdata pin and store
 658:	cf 01       	movw	r24, r30
 65a:	02 2e       	mov	r0, r18
 65c:	02 c0       	rjmp	.+4      	; 0x662 <gameByte+0x44>
 65e:	88 0f       	add	r24, r24
 660:	99 1f       	adc	r25, r25
 662:	0a 94       	dec	r0
 664:	e2 f7       	brpl	.-8      	; 0x65e <gameByte+0x40>
 666:	48 2b       	or	r20, r24
 668:	59 2b       	or	r21, r25
                }//else cbi(data, i);
                PORTD|=(1<<PSclock);                             // CLOCK HIGH
 66a:	58 9a       	sbi	0x0b, 0	; 11
int gameByte(int command)
{
        int i ;
        _delay_us(1);
        int data = 0x00;                             // clear data variable to save setting low bits later.
        for(i=0;i<8;i++)
 66c:	2f 5f       	subi	r18, 0xFF	; 255
 66e:	3f 4f       	sbci	r19, 0xFF	; 255
 670:	28 30       	cpi	r18, 0x08	; 8
 672:	31 05       	cpc	r19, r1
 674:	f9 f6       	brne	.-66     	; 0x634 <gameByte+0x16>
				{
					data|=(1<<i);  // read PSdata pin and store
                }//else cbi(data, i);
                PORTD|=(1<<PSclock);                             // CLOCK HIGH
        }
        PORTD|=(1<<PScommand);
 676:	5b 9a       	sbi	0x0b, 3	; 11
 678:	82 e6       	ldi	r24, 0x62	; 98
 67a:	8a 95       	dec	r24
 67c:	f1 f7       	brne	.-4      	; 0x67a <gameByte+0x5c>

        _delay_us(20);                                                   // wait for ACK to pass.

        return(data);
}
 67e:	ca 01       	movw	r24, r20
 680:	08 95       	ret

00000682 <joystick_config>:


void joystick_config()
{
 682:	ef 92       	push	r14
 684:	ff 92       	push	r15
 686:	0f 93       	push	r16
 688:	1f 93       	push	r17
	 // put controller in config mode
       PORTD|=(1<<PScommand);
 68a:	5b 9a       	sbi	0x0b, 3	; 11
       PORTD|=(1<<PSclock);
 68c:	58 9a       	sbi	0x0b, 0	; 11
       PORTD&=~(1<<PSattention);
 68e:	5c 98       	cbi	0x0b, 4	; 11

       gameByte(0x01);
 690:	81 e0       	ldi	r24, 0x01	; 1
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>
       gameByte(0x43);
 698:	83 e4       	ldi	r24, 0x43	; 67
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>
       gameByte(0x00);
 6a0:	80 e0       	ldi	r24, 0x00	; 0
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>
       gameByte(0x01);
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>
       gameByte(0x00);
 6b0:	80 e0       	ldi	r24, 0x00	; 0
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>

       PORTD|=(1<<PScommand);
 6b8:	5b 9a       	sbi	0x0b, 3	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 6ba:	b6 e6       	ldi	r27, 0x66	; 102
 6bc:	eb 2e       	mov	r14, r27
 6be:	be e0       	ldi	r27, 0x0E	; 14
 6c0:	fb 2e       	mov	r15, r27
 6c2:	c7 01       	movw	r24, r14
 6c4:	01 97       	sbiw	r24, 0x01	; 1
 6c6:	f1 f7       	brne	.-4      	; 0x6c4 <joystick_config+0x42>
       _delay_ms(1);
       PORTD|=(1<<PSattention);
 6c8:	5c 9a       	sbi	0x0b, 4	; 11
 6ca:	00 e0       	ldi	r16, 0x00	; 0
 6cc:	10 e9       	ldi	r17, 0x90	; 144
 6ce:	c8 01       	movw	r24, r16
 6d0:	01 97       	sbiw	r24, 0x01	; 1
 6d2:	f1 f7       	brne	.-4      	; 0x6d0 <joystick_config+0x4e>

       _delay_ms(10);

       // put controller in analouge mode
       PORTD|=(1<<PScommand);
 6d4:	5b 9a       	sbi	0x0b, 3	; 11
       PORTD|=(1<<PSclock);
 6d6:	58 9a       	sbi	0x0b, 0	; 11
       PORTD&=~(1<<PSattention);
 6d8:	5c 98       	cbi	0x0b, 4	; 11

       gameByte(0x01);
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>
       gameByte(0x44);
 6e2:	84 e4       	ldi	r24, 0x44	; 68
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>
       gameByte(0x00);
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>
       gameByte(0x01);
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>
       gameByte(0x03);
 6fa:	83 e0       	ldi	r24, 0x03	; 3
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>
       gameByte(0x00);
 702:	80 e0       	ldi	r24, 0x00	; 0
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>
       gameByte(0x00);
 70a:	80 e0       	ldi	r24, 0x00	; 0
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>
       gameByte(0x00);
 712:	80 e0       	ldi	r24, 0x00	; 0
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>
       gameByte(0x00);
 71a:	80 e0       	ldi	r24, 0x00	; 0
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>

       PORTD|=(1<<PScommand);
 722:	5b 9a       	sbi	0x0b, 3	; 11
 724:	c7 01       	movw	r24, r14
 726:	01 97       	sbiw	r24, 0x01	; 1
 728:	f1 f7       	brne	.-4      	; 0x726 <joystick_config+0xa4>
       _delay_ms(1);
       PORTD|=(1<<PSattention);
 72a:	5c 9a       	sbi	0x0b, 4	; 11
 72c:	c8 01       	movw	r24, r16
 72e:	01 97       	sbiw	r24, 0x01	; 1
 730:	f1 f7       	brne	.-4      	; 0x72e <joystick_config+0xac>

       _delay_ms(10);

       // exit config mode
       PORTD|=(1<<PScommand);
 732:	5b 9a       	sbi	0x0b, 3	; 11
       PORTD|=(1<<PSclock);
 734:	58 9a       	sbi	0x0b, 0	; 11
       PORTD&=~(1<<PSattention);
 736:	5c 98       	cbi	0x0b, 4	; 11

       gameByte(0x01);
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>
       gameByte(0x43);
 740:	83 e4       	ldi	r24, 0x43	; 67
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>
       gameByte(0x00);
 748:	80 e0       	ldi	r24, 0x00	; 0
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>
       gameByte(0x00);
 750:	80 e0       	ldi	r24, 0x00	; 0
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>
       gameByte(0x5A);
 758:	8a e5       	ldi	r24, 0x5A	; 90
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>
       gameByte(0x5A);
 760:	8a e5       	ldi	r24, 0x5A	; 90
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>
       gameByte(0x5A);
 768:	8a e5       	ldi	r24, 0x5A	; 90
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>
       gameByte(0x5A);
 770:	8a e5       	ldi	r24, 0x5A	; 90
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>
       gameByte(0x5A);
 778:	8a e5       	ldi	r24, 0x5A	; 90
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>

       PORTD|=(1<<PScommand);
 780:	5b 9a       	sbi	0x0b, 3	; 11
 782:	c7 01       	movw	r24, r14
 784:	01 97       	sbiw	r24, 0x01	; 1
 786:	f1 f7       	brne	.-4      	; 0x784 <joystick_config+0x102>
       _delay_ms(1);
       PORTD|=(1<<PSattention);
 788:	5c 9a       	sbi	0x0b, 4	; 11
 78a:	c8 01       	movw	r24, r16
 78c:	01 97       	sbiw	r24, 0x01	; 1
 78e:	f1 f7       	brne	.-4      	; 0x78c <joystick_config+0x10a>

       _delay_ms(10);

       // poll controller and check in analouge mode.
       PORTD|=(1<<PScommand);
 790:	5b 9a       	sbi	0x0b, 3	; 11
       PORTD|=(1<<PSclock);
 792:	58 9a       	sbi	0x0b, 0	; 11
       PORTD&=~(1<<PSattention);
 794:	5c 98       	cbi	0x0b, 4	; 11

       gameByte(0x01);
 796:	81 e0       	ldi	r24, 0x01	; 1
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>
       chk_ana = gameByte(0x42);            // the 2nd byte to be returned from the controller should = 0x73 for "red" analouge controller.
 79e:	82 e4       	ldi	r24, 0x42	; 66
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>
 7a6:	80 93 11 02 	sts	0x0211, r24
       gameByte(0x00);
 7aa:	80 e0       	ldi	r24, 0x00	; 0
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>
       gameByte(0x00);
 7b2:	80 e0       	ldi	r24, 0x00	; 0
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>
       gameByte(0x00);
 7ba:	80 e0       	ldi	r24, 0x00	; 0
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>
       gameByte(0x00);
 7c2:	80 e0       	ldi	r24, 0x00	; 0
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>
       gameByte(0x00);
 7ca:	80 e0       	ldi	r24, 0x00	; 0
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>
       gameByte(0x00);
 7d2:	80 e0       	ldi	r24, 0x00	; 0
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>
       gameByte(0x00);
 7da:	80 e0       	ldi	r24, 0x00	; 0
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>

       PORTD|=(1<<PScommand);
 7e2:	5b 9a       	sbi	0x0b, 3	; 11
 7e4:	c7 01       	movw	r24, r14
 7e6:	01 97       	sbiw	r24, 0x01	; 1
 7e8:	f1 f7       	brne	.-4      	; 0x7e6 <joystick_config+0x164>
       _delay_ms(1);
       PORTD|=(1<<PSattention);
 7ea:	5c 9a       	sbi	0x0b, 4	; 11
 7ec:	c8 01       	movw	r24, r16
 7ee:	01 97       	sbiw	r24, 0x01	; 1
 7f0:	f1 f7       	brne	.-4      	; 0x7ee <joystick_config+0x16c>
       _delay_ms(10);
		
}
 7f2:	1f 91       	pop	r17
 7f4:	0f 91       	pop	r16
 7f6:	ff 90       	pop	r15
 7f8:	ef 90       	pop	r14
 7fa:	08 95       	ret

000007fc <ps2_init>:

void ps2_init()
{
	DDRD|=(1<<PD0);                 // clock. output. (blue)
 7fc:	50 9a       	sbi	0x0a, 0	; 10

   DDRD&=~(1<<PD1);                 // data. input. (brown)
 7fe:	51 98       	cbi	0x0a, 1	; 10
   PORTD|=(1<<PD1);               //    enable pullup resistor
 800:	59 9a       	sbi	0x0b, 1	; 11

   DDRD&=~(1<<PD2);                 // acknolage. input. (green)
 802:	52 98       	cbi	0x0a, 2	; 10
  PORTD|=(1<<PD2);               //    enable pullup resistor
 804:	5a 9a       	sbi	0x0b, 2	; 11

   DDRD|=(1<<PD3);                 // command. output. (orange)
 806:	53 9a       	sbi	0x0a, 3	; 10

   DDRD|=(1<<PD4);                 // attention. output. (yellow)
 808:	54 9a       	sbi	0x0a, 4	; 10
}
 80a:	08 95       	ret

0000080c <joystick_poll>:

void joystick_poll()
{
		PORTD|=(1<<PScommand);                          // start communication with PSx controller
 80c:	5b 9a       	sbi	0x0b, 3	; 11
        PORTD|=(1<<PSclock);
 80e:	58 9a       	sbi	0x0b, 0	; 11
        PORTD&=~(1<<PSattention);
 810:	5c 98       	cbi	0x0b, 4	; 11

        gameByte(0x01);                                       // bite 0. header.
 812:	81 e0       	ldi	r24, 0x01	; 1
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>
        temp = gameByte(0x42);                          // bite 1. header. (should possibly put test on this byte to detect unplugging of controller.)
 81a:	82 e4       	ldi	r24, 0x42	; 66
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>
 822:	90 93 1f 02 	sts	0x021F, r25
 826:	80 93 1e 02 	sts	0x021E, r24
        gameByte(0x00);                                       // bite 2. header.
 82a:	80 e0       	ldi	r24, 0x00	; 0
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>

        data0 = gameByte(0x00);                         // bite 3. first data bite.
 832:	80 e0       	ldi	r24, 0x00	; 0
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>
 83a:	90 93 13 02 	sts	0x0213, r25
 83e:	80 93 12 02 	sts	0x0212, r24
        data1 = gameByte(0x00);                         // bite 4.
 842:	80 e0       	ldi	r24, 0x00	; 0
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>
 84a:	90 93 15 02 	sts	0x0215, r25
 84e:	80 93 14 02 	sts	0x0214, r24
        data2 = gameByte(0x00);                         // bite 5.
 852:	80 e0       	ldi	r24, 0x00	; 0
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>
 85a:	90 93 17 02 	sts	0x0217, r25
 85e:	80 93 16 02 	sts	0x0216, r24
        data3 = gameByte(0x00);                         // bite 6.
 862:	80 e0       	ldi	r24, 0x00	; 0
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>
 86a:	90 93 19 02 	sts	0x0219, r25
 86e:	80 93 18 02 	sts	0x0218, r24
        data4 = gameByte(0x00);                         // bite 7.
 872:	80 e0       	ldi	r24, 0x00	; 0
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>
 87a:	90 93 1b 02 	sts	0x021B, r25
 87e:	80 93 1a 02 	sts	0x021A, r24
        data5 = gameByte(0x00);                         // bite 8.
 882:	80 e0       	ldi	r24, 0x00	; 0
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	0e 94 0f 03 	call	0x61e	; 0x61e <gameByte>
 88a:	90 93 1d 02 	sts	0x021D, r25
 88e:	80 93 1c 02 	sts	0x021C, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 892:	84 e0       	ldi	r24, 0x04	; 4
 894:	98 2f       	mov	r25, r24
 896:	9a 95       	dec	r25
 898:	f1 f7       	brne	.-4      	; 0x896 <joystick_poll+0x8a>

        _delay_us(1);
        PORTD|=(1<<PScommand);                      // close communication with PSx controller
 89a:	5b 9a       	sbi	0x0b, 3	; 11
 89c:	8a 95       	dec	r24
 89e:	f1 f7       	brne	.-4      	; 0x89c <joystick_poll+0x90>
        _delay_us(1);
        PORTD|=(1<<PSattention);                        // all done.
 8a0:	5c 9a       	sbi	0x0b, 4	; 11
 8a2:	08 95       	ret

000008a4 <trace_circular_curve>:
void trace_circular_curve()
{
	while(1)
	{
		PORTL |= (1<<0) | (1<<1);
		OCR4B = 737;
 8a4:	41 ee       	ldi	r20, 0xE1	; 225
 8a6:	52 e0       	ldi	r21, 0x02	; 2
		OCR4C = 646;
 8a8:	26 e8       	ldi	r18, 0x86	; 134
 8aa:	32 e0       	ldi	r19, 0x02	; 2
int i_data1 = 0, i_check = 0;
void trace_circular_curve()
{
	while(1)
	{
		PORTL |= (1<<0) | (1<<1);
 8ac:	80 91 0b 01 	lds	r24, 0x010B
 8b0:	83 60       	ori	r24, 0x03	; 3
 8b2:	80 93 0b 01 	sts	0x010B, r24
		OCR4B = 737;
 8b6:	50 93 ab 00 	sts	0x00AB, r21
 8ba:	40 93 aa 00 	sts	0x00AA, r20
		OCR4C = 646;
 8be:	30 93 ad 00 	sts	0x00AD, r19
 8c2:	20 93 ac 00 	sts	0x00AC, r18
 8c6:	f2 cf       	rjmp	.-28     	; 0x8ac <trace_circular_curve+0x8>

000008c8 <pwm_init>:
	}
}
void pwm_init()
{
	TCCR4A = 0xA8;
 8c8:	88 ea       	ldi	r24, 0xA8	; 168
 8ca:	80 93 a0 00 	sts	0x00A0, r24
	TCCR4B = 0x11;
 8ce:	81 e1       	ldi	r24, 0x11	; 17
 8d0:	80 93 a1 00 	sts	0x00A1, r24
	ICR4 = 737;
 8d4:	81 ee       	ldi	r24, 0xE1	; 225
 8d6:	92 e0       	ldi	r25, 0x02	; 2
 8d8:	90 93 a7 00 	sts	0x00A7, r25
 8dc:	80 93 a6 00 	sts	0x00A6, r24
}
 8e0:	08 95       	ret

000008e2 <port_init>:

void port_init()
{
	DDRH |= (1 << PH4) | (1 << PH5);		//OC3B	//OC3A	DIRECTION BITS
 8e2:	e1 e0       	ldi	r30, 0x01	; 1
 8e4:	f1 e0       	ldi	r31, 0x01	; 1
 8e6:	80 81       	ld	r24, Z
 8e8:	80 63       	ori	r24, 0x30	; 48
 8ea:	80 83       	st	Z, r24
	DDRL |= (1<<PL0)   | (1<<PL1);	//OC3A, 3B O/P DECLARATION
 8ec:	ea e0       	ldi	r30, 0x0A	; 10
 8ee:	f1 e0       	ldi	r31, 0x01	; 1
 8f0:	80 81       	ld	r24, Z
 8f2:	83 60       	ori	r24, 0x03	; 3
 8f4:	80 83       	st	Z, r24
}
 8f6:	08 95       	ret

000008f8 <leftREV>:

void leftREV(int x)
{
	PORTL &= ~(1<<1);
 8f8:	eb e0       	ldi	r30, 0x0B	; 11
 8fa:	f1 e0       	ldi	r31, 0x01	; 1
 8fc:	20 81       	ld	r18, Z
 8fe:	2d 7f       	andi	r18, 0xFD	; 253
 900:	20 83       	st	Z, r18
	OCR4C = x;
 902:	90 93 ad 00 	sts	0x00AD, r25
 906:	80 93 ac 00 	sts	0x00AC, r24
}
 90a:	08 95       	ret

0000090c <rightREV>:

void rightREV(int x)
{
	PORTL &= ~(1<<0);
 90c:	eb e0       	ldi	r30, 0x0B	; 11
 90e:	f1 e0       	ldi	r31, 0x01	; 1
 910:	20 81       	ld	r18, Z
 912:	2e 7f       	andi	r18, 0xFE	; 254
 914:	20 83       	st	Z, r18
	OCR4B = x;	
 916:	90 93 ab 00 	sts	0x00AB, r25
 91a:	80 93 aa 00 	sts	0x00AA, r24
}
 91e:	08 95       	ret

00000920 <leftFWD>:
void leftFWD(int x)
{
	PORTL |= (1<<1);
 920:	eb e0       	ldi	r30, 0x0B	; 11
 922:	f1 e0       	ldi	r31, 0x01	; 1
 924:	20 81       	ld	r18, Z
 926:	22 60       	ori	r18, 0x02	; 2
 928:	20 83       	st	Z, r18
	OCR4C = x;
 92a:	90 93 ad 00 	sts	0x00AD, r25
 92e:	80 93 ac 00 	sts	0x00AC, r24
}
 932:	08 95       	ret

00000934 <rightFWD>:
void rightFWD(int x)
{
	PORTL |= (1<<0);
 934:	eb e0       	ldi	r30, 0x0B	; 11
 936:	f1 e0       	ldi	r31, 0x01	; 1
 938:	20 81       	ld	r18, Z
 93a:	21 60       	ori	r18, 0x01	; 1
 93c:	20 83       	st	Z, r18
	OCR4B = x;
 93e:	90 93 ab 00 	sts	0x00AB, r25
 942:	80 93 aa 00 	sts	0x00AA, r24
}
 946:	08 95       	ret

00000948 <bot_stop>:
void bot_stop()
{
	OCR4B = 0;
 948:	10 92 ab 00 	sts	0x00AB, r1
 94c:	10 92 aa 00 	sts	0x00AA, r1
	OCR4C = 0;
 950:	10 92 ad 00 	sts	0x00AD, r1
 954:	10 92 ac 00 	sts	0x00AC, r1
	PORTL ^= _BV(0) ^ _BV(1);
 958:	eb e0       	ldi	r30, 0x0B	; 11
 95a:	f1 e0       	ldi	r31, 0x01	; 1
 95c:	80 81       	ld	r24, Z
 95e:	93 e0       	ldi	r25, 0x03	; 3
 960:	89 27       	eor	r24, r25
 962:	80 83       	st	Z, r24
}
 964:	08 95       	ret

00000966 <bot_stop2>:

void bot_stop2()
{
	OCR4B = 0;
 966:	10 92 ab 00 	sts	0x00AB, r1
 96a:	10 92 aa 00 	sts	0x00AA, r1
	OCR4C = 0;
 96e:	10 92 ad 00 	sts	0x00AD, r1
 972:	10 92 ac 00 	sts	0x00AC, r1
}
 976:	08 95       	ret

00000978 <main>:
	CLEAR = 0, SET = 1
}_bit;

int main(void)
{
	lcd_init();
 978:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_init>
	
	unsigned int x;
	enum _bit y = 0;
	lcd_showvalue(sizeof(y));
 97c:	61 e0       	ldi	r22, 0x01	; 1
 97e:	70 e0       	ldi	r23, 0x00	; 0
 980:	80 e0       	ldi	r24, 0x00	; 0
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	0e 94 09 02 	call	0x412	; 0x412 <lcd_showvalue>
		}
		i_data1 = data1;
		data1 = 255;
	}
	return 0;
}
 988:	80 e0       	ldi	r24, 0x00	; 0
 98a:	90 e0       	ldi	r25, 0x00	; 0
 98c:	08 95       	ret

0000098e <lcd_showvaluef>:
	}

}

void lcd_showvaluef(float num)
{
 98e:	ef 92       	push	r14
 990:	ff 92       	push	r15
 992:	0f 93       	push	r16
 994:	1f 93       	push	r17
 996:	df 93       	push	r29
 998:	cf 93       	push	r28
 99a:	00 d0       	rcall	.+0      	; 0x99c <lcd_showvaluef+0xe>
 99c:	00 d0       	rcall	.+0      	; 0x99e <lcd_showvaluef+0x10>
 99e:	cd b7       	in	r28, 0x3d	; 61
 9a0:	de b7       	in	r29, 0x3e	; 62
 9a2:	7b 01       	movw	r14, r22
 9a4:	8c 01       	movw	r16, r24
	if (num < 0)
 9a6:	20 e0       	ldi	r18, 0x00	; 0
 9a8:	30 e0       	ldi	r19, 0x00	; 0
 9aa:	40 e0       	ldi	r20, 0x00	; 0
 9ac:	50 e0       	ldi	r21, 0x00	; 0
 9ae:	0e 94 0b 05 	call	0xa16	; 0xa16 <__cmpsf2>
 9b2:	88 23       	and	r24, r24
 9b4:	3c f4       	brge	.+14     	; 0x9c4 <lcd_showvaluef+0x36>
	{
		lcd_char('-');
 9b6:	8d e2       	ldi	r24, 0x2D	; 45
 9b8:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_char>
		num = -num;
 9bc:	17 fb       	bst	r17, 7
 9be:	10 95       	com	r17
 9c0:	17 f9       	bld	r17, 7
 9c2:	10 95       	com	r17
	unsigned long int l;
	double fraction,integer;

	l = (unsigned long int)num;

	lcd_showvalue(l);
 9c4:	c8 01       	movw	r24, r16
 9c6:	b7 01       	movw	r22, r14
 9c8:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__fixunssfsi>
 9cc:	0e 94 09 02 	call	0x412	; 0x412 <lcd_showvalue>

	fraction = modf((double)num,&integer);
 9d0:	c8 01       	movw	r24, r16
 9d2:	b7 01       	movw	r22, r14
 9d4:	ae 01       	movw	r20, r28
 9d6:	4f 5f       	subi	r20, 0xFF	; 255
 9d8:	5f 4f       	sbci	r21, 0xFF	; 255
 9da:	0e 94 88 05 	call	0xb10	; 0xb10 <modf>
 9de:	7b 01       	movw	r14, r22
 9e0:	8c 01       	movw	r16, r24

	l = (unsigned long int)(fraction * 100000);

	lcd_char('.');
 9e2:	8e e2       	ldi	r24, 0x2E	; 46
 9e4:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_char>

	lcd_showvalue(l);
 9e8:	c8 01       	movw	r24, r16
 9ea:	b7 01       	movw	r22, r14
 9ec:	20 e0       	ldi	r18, 0x00	; 0
 9ee:	30 e5       	ldi	r19, 0x50	; 80
 9f0:	43 ec       	ldi	r20, 0xC3	; 195
 9f2:	57 e4       	ldi	r21, 0x47	; 71
 9f4:	0e 94 bb 05 	call	0xb76	; 0xb76 <__mulsf3>
 9f8:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__fixunssfsi>
 9fc:	0e 94 09 02 	call	0x412	; 0x412 <lcd_showvalue>

}
 a00:	0f 90       	pop	r0
 a02:	0f 90       	pop	r0
 a04:	0f 90       	pop	r0
 a06:	0f 90       	pop	r0
 a08:	cf 91       	pop	r28
 a0a:	df 91       	pop	r29
 a0c:	1f 91       	pop	r17
 a0e:	0f 91       	pop	r16
 a10:	ff 90       	pop	r15
 a12:	ef 90       	pop	r14
 a14:	08 95       	ret

00000a16 <__cmpsf2>:
 a16:	2f d0       	rcall	.+94     	; 0xa76 <__fp_cmp>
 a18:	08 f4       	brcc	.+2      	; 0xa1c <__cmpsf2+0x6>
 a1a:	81 e0       	ldi	r24, 0x01	; 1
 a1c:	08 95       	ret

00000a1e <__fixunssfsi>:
 a1e:	57 d0       	rcall	.+174    	; 0xace <__fp_splitA>
 a20:	88 f0       	brcs	.+34     	; 0xa44 <__fixunssfsi+0x26>
 a22:	9f 57       	subi	r25, 0x7F	; 127
 a24:	90 f0       	brcs	.+36     	; 0xa4a <__fixunssfsi+0x2c>
 a26:	b9 2f       	mov	r27, r25
 a28:	99 27       	eor	r25, r25
 a2a:	b7 51       	subi	r27, 0x17	; 23
 a2c:	a0 f0       	brcs	.+40     	; 0xa56 <__fixunssfsi+0x38>
 a2e:	d1 f0       	breq	.+52     	; 0xa64 <__fixunssfsi+0x46>
 a30:	66 0f       	add	r22, r22
 a32:	77 1f       	adc	r23, r23
 a34:	88 1f       	adc	r24, r24
 a36:	99 1f       	adc	r25, r25
 a38:	1a f0       	brmi	.+6      	; 0xa40 <__fixunssfsi+0x22>
 a3a:	ba 95       	dec	r27
 a3c:	c9 f7       	brne	.-14     	; 0xa30 <__fixunssfsi+0x12>
 a3e:	12 c0       	rjmp	.+36     	; 0xa64 <__fixunssfsi+0x46>
 a40:	b1 30       	cpi	r27, 0x01	; 1
 a42:	81 f0       	breq	.+32     	; 0xa64 <__fixunssfsi+0x46>
 a44:	5e d0       	rcall	.+188    	; 0xb02 <__fp_zero>
 a46:	b1 e0       	ldi	r27, 0x01	; 1
 a48:	08 95       	ret
 a4a:	5b c0       	rjmp	.+182    	; 0xb02 <__fp_zero>
 a4c:	67 2f       	mov	r22, r23
 a4e:	78 2f       	mov	r23, r24
 a50:	88 27       	eor	r24, r24
 a52:	b8 5f       	subi	r27, 0xF8	; 248
 a54:	39 f0       	breq	.+14     	; 0xa64 <__fixunssfsi+0x46>
 a56:	b9 3f       	cpi	r27, 0xF9	; 249
 a58:	cc f3       	brlt	.-14     	; 0xa4c <__fixunssfsi+0x2e>
 a5a:	86 95       	lsr	r24
 a5c:	77 95       	ror	r23
 a5e:	67 95       	ror	r22
 a60:	b3 95       	inc	r27
 a62:	d9 f7       	brne	.-10     	; 0xa5a <__fixunssfsi+0x3c>
 a64:	3e f4       	brtc	.+14     	; 0xa74 <__fixunssfsi+0x56>
 a66:	90 95       	com	r25
 a68:	80 95       	com	r24
 a6a:	70 95       	com	r23
 a6c:	61 95       	neg	r22
 a6e:	7f 4f       	sbci	r23, 0xFF	; 255
 a70:	8f 4f       	sbci	r24, 0xFF	; 255
 a72:	9f 4f       	sbci	r25, 0xFF	; 255
 a74:	08 95       	ret

00000a76 <__fp_cmp>:
 a76:	99 0f       	add	r25, r25
 a78:	00 08       	sbc	r0, r0
 a7a:	55 0f       	add	r21, r21
 a7c:	aa 0b       	sbc	r26, r26
 a7e:	e0 e8       	ldi	r30, 0x80	; 128
 a80:	fe ef       	ldi	r31, 0xFE	; 254
 a82:	16 16       	cp	r1, r22
 a84:	17 06       	cpc	r1, r23
 a86:	e8 07       	cpc	r30, r24
 a88:	f9 07       	cpc	r31, r25
 a8a:	c0 f0       	brcs	.+48     	; 0xabc <__fp_cmp+0x46>
 a8c:	12 16       	cp	r1, r18
 a8e:	13 06       	cpc	r1, r19
 a90:	e4 07       	cpc	r30, r20
 a92:	f5 07       	cpc	r31, r21
 a94:	98 f0       	brcs	.+38     	; 0xabc <__fp_cmp+0x46>
 a96:	62 1b       	sub	r22, r18
 a98:	73 0b       	sbc	r23, r19
 a9a:	84 0b       	sbc	r24, r20
 a9c:	95 0b       	sbc	r25, r21
 a9e:	39 f4       	brne	.+14     	; 0xaae <__fp_cmp+0x38>
 aa0:	0a 26       	eor	r0, r26
 aa2:	61 f0       	breq	.+24     	; 0xabc <__fp_cmp+0x46>
 aa4:	23 2b       	or	r18, r19
 aa6:	24 2b       	or	r18, r20
 aa8:	25 2b       	or	r18, r21
 aaa:	21 f4       	brne	.+8      	; 0xab4 <__fp_cmp+0x3e>
 aac:	08 95       	ret
 aae:	0a 26       	eor	r0, r26
 ab0:	09 f4       	brne	.+2      	; 0xab4 <__fp_cmp+0x3e>
 ab2:	a1 40       	sbci	r26, 0x01	; 1
 ab4:	a6 95       	lsr	r26
 ab6:	8f ef       	ldi	r24, 0xFF	; 255
 ab8:	81 1d       	adc	r24, r1
 aba:	81 1d       	adc	r24, r1
 abc:	08 95       	ret

00000abe <__fp_split3>:
 abe:	57 fd       	sbrc	r21, 7
 ac0:	90 58       	subi	r25, 0x80	; 128
 ac2:	44 0f       	add	r20, r20
 ac4:	55 1f       	adc	r21, r21
 ac6:	59 f0       	breq	.+22     	; 0xade <__fp_splitA+0x10>
 ac8:	5f 3f       	cpi	r21, 0xFF	; 255
 aca:	71 f0       	breq	.+28     	; 0xae8 <__fp_splitA+0x1a>
 acc:	47 95       	ror	r20

00000ace <__fp_splitA>:
 ace:	88 0f       	add	r24, r24
 ad0:	97 fb       	bst	r25, 7
 ad2:	99 1f       	adc	r25, r25
 ad4:	61 f0       	breq	.+24     	; 0xaee <__fp_splitA+0x20>
 ad6:	9f 3f       	cpi	r25, 0xFF	; 255
 ad8:	79 f0       	breq	.+30     	; 0xaf8 <__fp_splitA+0x2a>
 ada:	87 95       	ror	r24
 adc:	08 95       	ret
 ade:	12 16       	cp	r1, r18
 ae0:	13 06       	cpc	r1, r19
 ae2:	14 06       	cpc	r1, r20
 ae4:	55 1f       	adc	r21, r21
 ae6:	f2 cf       	rjmp	.-28     	; 0xacc <__fp_split3+0xe>
 ae8:	46 95       	lsr	r20
 aea:	f1 df       	rcall	.-30     	; 0xace <__fp_splitA>
 aec:	08 c0       	rjmp	.+16     	; 0xafe <__fp_splitA+0x30>
 aee:	16 16       	cp	r1, r22
 af0:	17 06       	cpc	r1, r23
 af2:	18 06       	cpc	r1, r24
 af4:	99 1f       	adc	r25, r25
 af6:	f1 cf       	rjmp	.-30     	; 0xada <__fp_splitA+0xc>
 af8:	86 95       	lsr	r24
 afa:	71 05       	cpc	r23, r1
 afc:	61 05       	cpc	r22, r1
 afe:	08 94       	sec
 b00:	08 95       	ret

00000b02 <__fp_zero>:
 b02:	e8 94       	clt

00000b04 <__fp_szero>:
 b04:	bb 27       	eor	r27, r27
 b06:	66 27       	eor	r22, r22
 b08:	77 27       	eor	r23, r23
 b0a:	cb 01       	movw	r24, r22
 b0c:	97 f9       	bld	r25, 7
 b0e:	08 95       	ret

00000b10 <modf>:
 b10:	fa 01       	movw	r30, r20
 b12:	dc 01       	movw	r26, r24
 b14:	aa 0f       	add	r26, r26
 b16:	bb 1f       	adc	r27, r27
 b18:	9b 01       	movw	r18, r22
 b1a:	ac 01       	movw	r20, r24
 b1c:	bf 57       	subi	r27, 0x7F	; 127
 b1e:	28 f4       	brcc	.+10     	; 0xb2a <modf+0x1a>
 b20:	22 27       	eor	r18, r18
 b22:	33 27       	eor	r19, r19
 b24:	44 27       	eor	r20, r20
 b26:	50 78       	andi	r21, 0x80	; 128
 b28:	1f c0       	rjmp	.+62     	; 0xb68 <modf+0x58>
 b2a:	b7 51       	subi	r27, 0x17	; 23
 b2c:	88 f4       	brcc	.+34     	; 0xb50 <modf+0x40>
 b2e:	ab 2f       	mov	r26, r27
 b30:	00 24       	eor	r0, r0
 b32:	46 95       	lsr	r20
 b34:	37 95       	ror	r19
 b36:	27 95       	ror	r18
 b38:	01 1c       	adc	r0, r1
 b3a:	a3 95       	inc	r26
 b3c:	d2 f3       	brmi	.-12     	; 0xb32 <modf+0x22>
 b3e:	00 20       	and	r0, r0
 b40:	69 f0       	breq	.+26     	; 0xb5c <modf+0x4c>
 b42:	22 0f       	add	r18, r18
 b44:	33 1f       	adc	r19, r19
 b46:	44 1f       	adc	r20, r20
 b48:	b3 95       	inc	r27
 b4a:	da f3       	brmi	.-10     	; 0xb42 <modf+0x32>
 b4c:	0d d0       	rcall	.+26     	; 0xb68 <modf+0x58>
 b4e:	76 c0       	rjmp	.+236    	; 0xc3c <__subsf3>
 b50:	61 30       	cpi	r22, 0x01	; 1
 b52:	71 05       	cpc	r23, r1
 b54:	a0 e8       	ldi	r26, 0x80	; 128
 b56:	8a 07       	cpc	r24, r26
 b58:	b9 46       	sbci	r27, 0x69	; 105
 b5a:	30 f4       	brcc	.+12     	; 0xb68 <modf+0x58>
 b5c:	9b 01       	movw	r18, r22
 b5e:	ac 01       	movw	r20, r24
 b60:	66 27       	eor	r22, r22
 b62:	77 27       	eor	r23, r23
 b64:	88 27       	eor	r24, r24
 b66:	90 78       	andi	r25, 0x80	; 128
 b68:	30 96       	adiw	r30, 0x00	; 0
 b6a:	21 f0       	breq	.+8      	; 0xb74 <modf+0x64>
 b6c:	20 83       	st	Z, r18
 b6e:	31 83       	std	Z+1, r19	; 0x01
 b70:	42 83       	std	Z+2, r20	; 0x02
 b72:	53 83       	std	Z+3, r21	; 0x03
 b74:	08 95       	ret

00000b76 <__mulsf3>:
 b76:	0b d0       	rcall	.+22     	; 0xb8e <__mulsf3x>
 b78:	dd c0       	rjmp	.+442    	; 0xd34 <__fp_round>
 b7a:	ce d0       	rcall	.+412    	; 0xd18 <__fp_pscA>
 b7c:	28 f0       	brcs	.+10     	; 0xb88 <__mulsf3+0x12>
 b7e:	d3 d0       	rcall	.+422    	; 0xd26 <__fp_pscB>
 b80:	18 f0       	brcs	.+6      	; 0xb88 <__mulsf3+0x12>
 b82:	95 23       	and	r25, r21
 b84:	09 f0       	breq	.+2      	; 0xb88 <__mulsf3+0x12>
 b86:	bf c0       	rjmp	.+382    	; 0xd06 <__fp_inf>
 b88:	c4 c0       	rjmp	.+392    	; 0xd12 <__fp_nan>
 b8a:	11 24       	eor	r1, r1
 b8c:	bb cf       	rjmp	.-138    	; 0xb04 <__fp_szero>

00000b8e <__mulsf3x>:
 b8e:	97 df       	rcall	.-210    	; 0xabe <__fp_split3>
 b90:	a0 f3       	brcs	.-24     	; 0xb7a <__mulsf3+0x4>

00000b92 <__mulsf3_pse>:
 b92:	95 9f       	mul	r25, r21
 b94:	d1 f3       	breq	.-12     	; 0xb8a <__mulsf3+0x14>
 b96:	95 0f       	add	r25, r21
 b98:	50 e0       	ldi	r21, 0x00	; 0
 b9a:	55 1f       	adc	r21, r21
 b9c:	62 9f       	mul	r22, r18
 b9e:	f0 01       	movw	r30, r0
 ba0:	72 9f       	mul	r23, r18
 ba2:	bb 27       	eor	r27, r27
 ba4:	f0 0d       	add	r31, r0
 ba6:	b1 1d       	adc	r27, r1
 ba8:	63 9f       	mul	r22, r19
 baa:	aa 27       	eor	r26, r26
 bac:	f0 0d       	add	r31, r0
 bae:	b1 1d       	adc	r27, r1
 bb0:	aa 1f       	adc	r26, r26
 bb2:	64 9f       	mul	r22, r20
 bb4:	66 27       	eor	r22, r22
 bb6:	b0 0d       	add	r27, r0
 bb8:	a1 1d       	adc	r26, r1
 bba:	66 1f       	adc	r22, r22
 bbc:	82 9f       	mul	r24, r18
 bbe:	22 27       	eor	r18, r18
 bc0:	b0 0d       	add	r27, r0
 bc2:	a1 1d       	adc	r26, r1
 bc4:	62 1f       	adc	r22, r18
 bc6:	73 9f       	mul	r23, r19
 bc8:	b0 0d       	add	r27, r0
 bca:	a1 1d       	adc	r26, r1
 bcc:	62 1f       	adc	r22, r18
 bce:	83 9f       	mul	r24, r19
 bd0:	a0 0d       	add	r26, r0
 bd2:	61 1d       	adc	r22, r1
 bd4:	22 1f       	adc	r18, r18
 bd6:	74 9f       	mul	r23, r20
 bd8:	33 27       	eor	r19, r19
 bda:	a0 0d       	add	r26, r0
 bdc:	61 1d       	adc	r22, r1
 bde:	23 1f       	adc	r18, r19
 be0:	84 9f       	mul	r24, r20
 be2:	60 0d       	add	r22, r0
 be4:	21 1d       	adc	r18, r1
 be6:	82 2f       	mov	r24, r18
 be8:	76 2f       	mov	r23, r22
 bea:	6a 2f       	mov	r22, r26
 bec:	11 24       	eor	r1, r1
 bee:	9f 57       	subi	r25, 0x7F	; 127
 bf0:	50 40       	sbci	r21, 0x00	; 0
 bf2:	8a f0       	brmi	.+34     	; 0xc16 <__mulsf3_pse+0x84>
 bf4:	e1 f0       	breq	.+56     	; 0xc2e <__mulsf3_pse+0x9c>
 bf6:	88 23       	and	r24, r24
 bf8:	4a f0       	brmi	.+18     	; 0xc0c <__mulsf3_pse+0x7a>
 bfa:	ee 0f       	add	r30, r30
 bfc:	ff 1f       	adc	r31, r31
 bfe:	bb 1f       	adc	r27, r27
 c00:	66 1f       	adc	r22, r22
 c02:	77 1f       	adc	r23, r23
 c04:	88 1f       	adc	r24, r24
 c06:	91 50       	subi	r25, 0x01	; 1
 c08:	50 40       	sbci	r21, 0x00	; 0
 c0a:	a9 f7       	brne	.-22     	; 0xbf6 <__mulsf3_pse+0x64>
 c0c:	9e 3f       	cpi	r25, 0xFE	; 254
 c0e:	51 05       	cpc	r21, r1
 c10:	70 f0       	brcs	.+28     	; 0xc2e <__mulsf3_pse+0x9c>
 c12:	79 c0       	rjmp	.+242    	; 0xd06 <__fp_inf>
 c14:	77 cf       	rjmp	.-274    	; 0xb04 <__fp_szero>
 c16:	5f 3f       	cpi	r21, 0xFF	; 255
 c18:	ec f3       	brlt	.-6      	; 0xc14 <__mulsf3_pse+0x82>
 c1a:	98 3e       	cpi	r25, 0xE8	; 232
 c1c:	dc f3       	brlt	.-10     	; 0xc14 <__mulsf3_pse+0x82>
 c1e:	86 95       	lsr	r24
 c20:	77 95       	ror	r23
 c22:	67 95       	ror	r22
 c24:	b7 95       	ror	r27
 c26:	f7 95       	ror	r31
 c28:	e7 95       	ror	r30
 c2a:	9f 5f       	subi	r25, 0xFF	; 255
 c2c:	c1 f7       	brne	.-16     	; 0xc1e <__mulsf3_pse+0x8c>
 c2e:	fe 2b       	or	r31, r30
 c30:	88 0f       	add	r24, r24
 c32:	91 1d       	adc	r25, r1
 c34:	96 95       	lsr	r25
 c36:	87 95       	ror	r24
 c38:	97 f9       	bld	r25, 7
 c3a:	08 95       	ret

00000c3c <__subsf3>:
 c3c:	50 58       	subi	r21, 0x80	; 128

00000c3e <__addsf3>:
 c3e:	bb 27       	eor	r27, r27
 c40:	aa 27       	eor	r26, r26
 c42:	0e d0       	rcall	.+28     	; 0xc60 <__addsf3x>
 c44:	77 c0       	rjmp	.+238    	; 0xd34 <__fp_round>
 c46:	68 d0       	rcall	.+208    	; 0xd18 <__fp_pscA>
 c48:	30 f0       	brcs	.+12     	; 0xc56 <__addsf3+0x18>
 c4a:	6d d0       	rcall	.+218    	; 0xd26 <__fp_pscB>
 c4c:	20 f0       	brcs	.+8      	; 0xc56 <__addsf3+0x18>
 c4e:	31 f4       	brne	.+12     	; 0xc5c <__addsf3+0x1e>
 c50:	9f 3f       	cpi	r25, 0xFF	; 255
 c52:	11 f4       	brne	.+4      	; 0xc58 <__addsf3+0x1a>
 c54:	1e f4       	brtc	.+6      	; 0xc5c <__addsf3+0x1e>
 c56:	5d c0       	rjmp	.+186    	; 0xd12 <__fp_nan>
 c58:	0e f4       	brtc	.+2      	; 0xc5c <__addsf3+0x1e>
 c5a:	e0 95       	com	r30
 c5c:	e7 fb       	bst	r30, 7
 c5e:	53 c0       	rjmp	.+166    	; 0xd06 <__fp_inf>

00000c60 <__addsf3x>:
 c60:	e9 2f       	mov	r30, r25
 c62:	2d df       	rcall	.-422    	; 0xabe <__fp_split3>
 c64:	80 f3       	brcs	.-32     	; 0xc46 <__addsf3+0x8>
 c66:	ba 17       	cp	r27, r26
 c68:	62 07       	cpc	r22, r18
 c6a:	73 07       	cpc	r23, r19
 c6c:	84 07       	cpc	r24, r20
 c6e:	95 07       	cpc	r25, r21
 c70:	18 f0       	brcs	.+6      	; 0xc78 <__addsf3x+0x18>
 c72:	71 f4       	brne	.+28     	; 0xc90 <__addsf3x+0x30>
 c74:	9e f5       	brtc	.+102    	; 0xcdc <__addsf3x+0x7c>
 c76:	45 cf       	rjmp	.-374    	; 0xb02 <__fp_zero>
 c78:	0e f4       	brtc	.+2      	; 0xc7c <__addsf3x+0x1c>
 c7a:	e0 95       	com	r30
 c7c:	0b 2e       	mov	r0, r27
 c7e:	ba 2f       	mov	r27, r26
 c80:	a0 2d       	mov	r26, r0
 c82:	0b 01       	movw	r0, r22
 c84:	b9 01       	movw	r22, r18
 c86:	90 01       	movw	r18, r0
 c88:	0c 01       	movw	r0, r24
 c8a:	ca 01       	movw	r24, r20
 c8c:	a0 01       	movw	r20, r0
 c8e:	11 24       	eor	r1, r1
 c90:	ff 27       	eor	r31, r31
 c92:	59 1b       	sub	r21, r25
 c94:	99 f0       	breq	.+38     	; 0xcbc <__addsf3x+0x5c>
 c96:	59 3f       	cpi	r21, 0xF9	; 249
 c98:	50 f4       	brcc	.+20     	; 0xcae <__addsf3x+0x4e>
 c9a:	50 3e       	cpi	r21, 0xE0	; 224
 c9c:	68 f1       	brcs	.+90     	; 0xcf8 <__addsf3x+0x98>
 c9e:	1a 16       	cp	r1, r26
 ca0:	f0 40       	sbci	r31, 0x00	; 0
 ca2:	a2 2f       	mov	r26, r18
 ca4:	23 2f       	mov	r18, r19
 ca6:	34 2f       	mov	r19, r20
 ca8:	44 27       	eor	r20, r20
 caa:	58 5f       	subi	r21, 0xF8	; 248
 cac:	f3 cf       	rjmp	.-26     	; 0xc94 <__addsf3x+0x34>
 cae:	46 95       	lsr	r20
 cb0:	37 95       	ror	r19
 cb2:	27 95       	ror	r18
 cb4:	a7 95       	ror	r26
 cb6:	f0 40       	sbci	r31, 0x00	; 0
 cb8:	53 95       	inc	r21
 cba:	c9 f7       	brne	.-14     	; 0xcae <__addsf3x+0x4e>
 cbc:	7e f4       	brtc	.+30     	; 0xcdc <__addsf3x+0x7c>
 cbe:	1f 16       	cp	r1, r31
 cc0:	ba 0b       	sbc	r27, r26
 cc2:	62 0b       	sbc	r22, r18
 cc4:	73 0b       	sbc	r23, r19
 cc6:	84 0b       	sbc	r24, r20
 cc8:	ba f0       	brmi	.+46     	; 0xcf8 <__addsf3x+0x98>
 cca:	91 50       	subi	r25, 0x01	; 1
 ccc:	a1 f0       	breq	.+40     	; 0xcf6 <__addsf3x+0x96>
 cce:	ff 0f       	add	r31, r31
 cd0:	bb 1f       	adc	r27, r27
 cd2:	66 1f       	adc	r22, r22
 cd4:	77 1f       	adc	r23, r23
 cd6:	88 1f       	adc	r24, r24
 cd8:	c2 f7       	brpl	.-16     	; 0xcca <__addsf3x+0x6a>
 cda:	0e c0       	rjmp	.+28     	; 0xcf8 <__addsf3x+0x98>
 cdc:	ba 0f       	add	r27, r26
 cde:	62 1f       	adc	r22, r18
 ce0:	73 1f       	adc	r23, r19
 ce2:	84 1f       	adc	r24, r20
 ce4:	48 f4       	brcc	.+18     	; 0xcf8 <__addsf3x+0x98>
 ce6:	87 95       	ror	r24
 ce8:	77 95       	ror	r23
 cea:	67 95       	ror	r22
 cec:	b7 95       	ror	r27
 cee:	f7 95       	ror	r31
 cf0:	9e 3f       	cpi	r25, 0xFE	; 254
 cf2:	08 f0       	brcs	.+2      	; 0xcf6 <__addsf3x+0x96>
 cf4:	b3 cf       	rjmp	.-154    	; 0xc5c <__addsf3+0x1e>
 cf6:	93 95       	inc	r25
 cf8:	88 0f       	add	r24, r24
 cfa:	08 f0       	brcs	.+2      	; 0xcfe <__addsf3x+0x9e>
 cfc:	99 27       	eor	r25, r25
 cfe:	ee 0f       	add	r30, r30
 d00:	97 95       	ror	r25
 d02:	87 95       	ror	r24
 d04:	08 95       	ret

00000d06 <__fp_inf>:
 d06:	97 f9       	bld	r25, 7
 d08:	9f 67       	ori	r25, 0x7F	; 127
 d0a:	80 e8       	ldi	r24, 0x80	; 128
 d0c:	70 e0       	ldi	r23, 0x00	; 0
 d0e:	60 e0       	ldi	r22, 0x00	; 0
 d10:	08 95       	ret

00000d12 <__fp_nan>:
 d12:	9f ef       	ldi	r25, 0xFF	; 255
 d14:	80 ec       	ldi	r24, 0xC0	; 192
 d16:	08 95       	ret

00000d18 <__fp_pscA>:
 d18:	00 24       	eor	r0, r0
 d1a:	0a 94       	dec	r0
 d1c:	16 16       	cp	r1, r22
 d1e:	17 06       	cpc	r1, r23
 d20:	18 06       	cpc	r1, r24
 d22:	09 06       	cpc	r0, r25
 d24:	08 95       	ret

00000d26 <__fp_pscB>:
 d26:	00 24       	eor	r0, r0
 d28:	0a 94       	dec	r0
 d2a:	12 16       	cp	r1, r18
 d2c:	13 06       	cpc	r1, r19
 d2e:	14 06       	cpc	r1, r20
 d30:	05 06       	cpc	r0, r21
 d32:	08 95       	ret

00000d34 <__fp_round>:
 d34:	09 2e       	mov	r0, r25
 d36:	03 94       	inc	r0
 d38:	00 0c       	add	r0, r0
 d3a:	11 f4       	brne	.+4      	; 0xd40 <__fp_round+0xc>
 d3c:	88 23       	and	r24, r24
 d3e:	52 f0       	brmi	.+20     	; 0xd54 <__fp_round+0x20>
 d40:	bb 0f       	add	r27, r27
 d42:	40 f4       	brcc	.+16     	; 0xd54 <__fp_round+0x20>
 d44:	bf 2b       	or	r27, r31
 d46:	11 f4       	brne	.+4      	; 0xd4c <__fp_round+0x18>
 d48:	60 ff       	sbrs	r22, 0
 d4a:	04 c0       	rjmp	.+8      	; 0xd54 <__fp_round+0x20>
 d4c:	6f 5f       	subi	r22, 0xFF	; 255
 d4e:	7f 4f       	sbci	r23, 0xFF	; 255
 d50:	8f 4f       	sbci	r24, 0xFF	; 255
 d52:	9f 4f       	sbci	r25, 0xFF	; 255
 d54:	08 95       	ret

00000d56 <__mulsi3>:
 d56:	62 9f       	mul	r22, r18
 d58:	d0 01       	movw	r26, r0
 d5a:	73 9f       	mul	r23, r19
 d5c:	f0 01       	movw	r30, r0
 d5e:	82 9f       	mul	r24, r18
 d60:	e0 0d       	add	r30, r0
 d62:	f1 1d       	adc	r31, r1
 d64:	64 9f       	mul	r22, r20
 d66:	e0 0d       	add	r30, r0
 d68:	f1 1d       	adc	r31, r1
 d6a:	92 9f       	mul	r25, r18
 d6c:	f0 0d       	add	r31, r0
 d6e:	83 9f       	mul	r24, r19
 d70:	f0 0d       	add	r31, r0
 d72:	74 9f       	mul	r23, r20
 d74:	f0 0d       	add	r31, r0
 d76:	65 9f       	mul	r22, r21
 d78:	f0 0d       	add	r31, r0
 d7a:	99 27       	eor	r25, r25
 d7c:	72 9f       	mul	r23, r18
 d7e:	b0 0d       	add	r27, r0
 d80:	e1 1d       	adc	r30, r1
 d82:	f9 1f       	adc	r31, r25
 d84:	63 9f       	mul	r22, r19
 d86:	b0 0d       	add	r27, r0
 d88:	e1 1d       	adc	r30, r1
 d8a:	f9 1f       	adc	r31, r25
 d8c:	bd 01       	movw	r22, r26
 d8e:	cf 01       	movw	r24, r30
 d90:	11 24       	eor	r1, r1
 d92:	08 95       	ret

00000d94 <__udivmodhi4>:
 d94:	aa 1b       	sub	r26, r26
 d96:	bb 1b       	sub	r27, r27
 d98:	51 e1       	ldi	r21, 0x11	; 17
 d9a:	07 c0       	rjmp	.+14     	; 0xdaa <__udivmodhi4_ep>

00000d9c <__udivmodhi4_loop>:
 d9c:	aa 1f       	adc	r26, r26
 d9e:	bb 1f       	adc	r27, r27
 da0:	a6 17       	cp	r26, r22
 da2:	b7 07       	cpc	r27, r23
 da4:	10 f0       	brcs	.+4      	; 0xdaa <__udivmodhi4_ep>
 da6:	a6 1b       	sub	r26, r22
 da8:	b7 0b       	sbc	r27, r23

00000daa <__udivmodhi4_ep>:
 daa:	88 1f       	adc	r24, r24
 dac:	99 1f       	adc	r25, r25
 dae:	5a 95       	dec	r21
 db0:	a9 f7       	brne	.-22     	; 0xd9c <__udivmodhi4_loop>
 db2:	80 95       	com	r24
 db4:	90 95       	com	r25
 db6:	bc 01       	movw	r22, r24
 db8:	cd 01       	movw	r24, r26
 dba:	08 95       	ret

00000dbc <__udivmodsi4>:
 dbc:	a1 e2       	ldi	r26, 0x21	; 33
 dbe:	1a 2e       	mov	r1, r26
 dc0:	aa 1b       	sub	r26, r26
 dc2:	bb 1b       	sub	r27, r27
 dc4:	fd 01       	movw	r30, r26
 dc6:	0d c0       	rjmp	.+26     	; 0xde2 <__udivmodsi4_ep>

00000dc8 <__udivmodsi4_loop>:
 dc8:	aa 1f       	adc	r26, r26
 dca:	bb 1f       	adc	r27, r27
 dcc:	ee 1f       	adc	r30, r30
 dce:	ff 1f       	adc	r31, r31
 dd0:	a2 17       	cp	r26, r18
 dd2:	b3 07       	cpc	r27, r19
 dd4:	e4 07       	cpc	r30, r20
 dd6:	f5 07       	cpc	r31, r21
 dd8:	20 f0       	brcs	.+8      	; 0xde2 <__udivmodsi4_ep>
 dda:	a2 1b       	sub	r26, r18
 ddc:	b3 0b       	sbc	r27, r19
 dde:	e4 0b       	sbc	r30, r20
 de0:	f5 0b       	sbc	r31, r21

00000de2 <__udivmodsi4_ep>:
 de2:	66 1f       	adc	r22, r22
 de4:	77 1f       	adc	r23, r23
 de6:	88 1f       	adc	r24, r24
 de8:	99 1f       	adc	r25, r25
 dea:	1a 94       	dec	r1
 dec:	69 f7       	brne	.-38     	; 0xdc8 <__udivmodsi4_loop>
 dee:	60 95       	com	r22
 df0:	70 95       	com	r23
 df2:	80 95       	com	r24
 df4:	90 95       	com	r25
 df6:	9b 01       	movw	r18, r22
 df8:	ac 01       	movw	r20, r24
 dfa:	bd 01       	movw	r22, r26
 dfc:	cf 01       	movw	r24, r30
 dfe:	08 95       	ret

00000e00 <__divmodsi4>:
 e00:	97 fb       	bst	r25, 7
 e02:	09 2e       	mov	r0, r25
 e04:	05 26       	eor	r0, r21
 e06:	0e d0       	rcall	.+28     	; 0xe24 <__divmodsi4_neg1>
 e08:	57 fd       	sbrc	r21, 7
 e0a:	04 d0       	rcall	.+8      	; 0xe14 <__divmodsi4_neg2>
 e0c:	d7 df       	rcall	.-82     	; 0xdbc <__udivmodsi4>
 e0e:	0a d0       	rcall	.+20     	; 0xe24 <__divmodsi4_neg1>
 e10:	00 1c       	adc	r0, r0
 e12:	38 f4       	brcc	.+14     	; 0xe22 <__divmodsi4_exit>

00000e14 <__divmodsi4_neg2>:
 e14:	50 95       	com	r21
 e16:	40 95       	com	r20
 e18:	30 95       	com	r19
 e1a:	21 95       	neg	r18
 e1c:	3f 4f       	sbci	r19, 0xFF	; 255
 e1e:	4f 4f       	sbci	r20, 0xFF	; 255
 e20:	5f 4f       	sbci	r21, 0xFF	; 255

00000e22 <__divmodsi4_exit>:
 e22:	08 95       	ret

00000e24 <__divmodsi4_neg1>:
 e24:	f6 f7       	brtc	.-4      	; 0xe22 <__divmodsi4_exit>
 e26:	90 95       	com	r25
 e28:	80 95       	com	r24
 e2a:	70 95       	com	r23
 e2c:	61 95       	neg	r22
 e2e:	7f 4f       	sbci	r23, 0xFF	; 255
 e30:	8f 4f       	sbci	r24, 0xFF	; 255
 e32:	9f 4f       	sbci	r25, 0xFF	; 255
 e34:	08 95       	ret

00000e36 <_exit>:
 e36:	f8 94       	cli

00000e38 <__stop_program>:
 e38:	ff cf       	rjmp	.-2      	; 0xe38 <__stop_program>
