
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800200  000009f2  00000a86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800214  00800214  00000a9a  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000a9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000014a  00000000  00000000  00000aba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000855  00000000  00000000  00000c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002a4  00000000  00000000  00001459  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000682  00000000  00000000  000016fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  00001d80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d7  00000000  00000000  00001e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b8  00000000  00000000  00002067  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  0000231f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	e2 ef       	ldi	r30, 0xF2	; 242
  f8:	f9 e0       	ldi	r31, 0x09	; 9
  fa:	02 c0       	rjmp	.+4      	; 0x100 <.do_copy_data_start>

000000fc <.do_copy_data_loop>:
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0

00000100 <.do_copy_data_start>:
 100:	a4 31       	cpi	r26, 0x14	; 20
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <.do_copy_data_loop>

00000106 <__do_clear_bss>:
 106:	12 e0       	ldi	r17, 0x02	; 2
 108:	a4 e1       	ldi	r26, 0x14	; 20
 10a:	b2 e0       	ldi	r27, 0x02	; 2
 10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
 10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
 110:	ac 31       	cpi	r26, 0x1C	; 28
 112:	b1 07       	cpc	r27, r17
 114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
 116:	0e 94 cc 02 	call	0x598	; 0x598 <main>
 11a:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <_exit>

0000011e <__bad_interrupt>:
 11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <toggleE>:
}


void toggleE(void)
{
SETBIT(PORTE,BIT(0));
 122:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 124:	83 e3       	ldi	r24, 0x33	; 51
 126:	97 e0       	ldi	r25, 0x07	; 7
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <toggleE+0x6>
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
 12c:	70 98       	cbi	0x0e, 0	; 14
}
 12e:	08 95       	ret

00000130 <dely_ns>:

void dely_ns(unsigned char tim)
{
 130:	20 91 14 02 	lds	r18, 0x0214
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 c0       	rjmp	.+4      	; 0x13c <dely_ns+0xc>
	for(j=0;j<tim;j++)
 138:	9f 5f       	subi	r25, 0xFF	; 255
 13a:	2a e0       	ldi	r18, 0x0A	; 10
 13c:	98 17       	cp	r25, r24
 13e:	e0 f3       	brcs	.-8      	; 0x138 <dely_ns+0x8>
 140:	20 93 14 02 	sts	0x0214, r18
 144:	90 93 15 02 	sts	0x0215, r25
	{
		for(k=0;k<10;k++)
		{};
	}
}
 148:	08 95       	ret

0000014a <lcd_exit>:
}
		

void lcd_exit(void)
{
	PORTA=save;
 14a:	80 91 16 02 	lds	r24, 0x0216
 14e:	82 b9       	out	0x02, r24	; 2
}
 150:	08 95       	ret

00000152 <WaitMs>:

/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
 152:	0a c0       	rjmp	.+20     	; 0x168 <WaitMs+0x16>
	int i;

	while (ms-- > 0)
 154:	20 e0       	ldi	r18, 0x00	; 0
 156:	30 e0       	ldi	r19, 0x00	; 0
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 158:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 15a:	2f 5f       	subi	r18, 0xFF	; 255
 15c:	3f 4f       	sbci	r19, 0xFF	; 255
 15e:	4c e0       	ldi	r20, 0x0C	; 12
 160:	2c 3c       	cpi	r18, 0xCC	; 204
 162:	34 07       	cpc	r19, r20
 164:	c9 f7       	brne	.-14     	; 0x158 <WaitMs+0x6>
 166:	01 97       	sbiw	r24, 0x01	; 1
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 168:	00 97       	sbiw	r24, 0x00	; 0
 16a:	a1 f7       	brne	.-24     	; 0x154 <WaitMs+0x2>
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
	}
}
 16c:	08 95       	ret

0000016e <lcd_char>:

}


void lcd_char(unsigned char data)
{	
 16e:	1f 93       	push	r17
 170:	18 2f       	mov	r17, r24
	int temp;
	WaitMs(15);
 172:	8f e0       	ldi	r24, 0x0F	; 15
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 a9 00 	call	0x152	; 0x152 <WaitMs>
	SETBIT(PORTG,BIT(5));
 17a:	a5 9a       	sbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 17c:	70 98       	cbi	0x0e, 0	; 14
	temp= (data & 0b11000000); // '10'000000
 17e:	21 2f       	mov	r18, r17
 180:	30 e0       	ldi	r19, 0x00	; 0
	PORTE=temp;
 182:	c9 01       	movw	r24, r18
 184:	80 7c       	andi	r24, 0xC0	; 192
 186:	90 70       	andi	r25, 0x00	; 0
 188:	8e b9       	out	0x0e, r24	; 14
	temp=(data>>3) & 0b00000110; // 00000'11'0
	PORTE= PORTE | temp;
 18a:	8e b1       	in	r24, 0x0e	; 14
 18c:	16 95       	lsr	r17
 18e:	16 95       	lsr	r17
 190:	16 95       	lsr	r17
 192:	16 70       	andi	r17, 0x06	; 6
 194:	81 2b       	or	r24, r17
 196:	8e b9       	out	0x0e, r24	; 14
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 198:	68 e1       	ldi	r22, 0x18	; 24
 19a:	86 2f       	mov	r24, r22
 19c:	8a 95       	dec	r24
 19e:	f1 f7       	brne	.-4      	; 0x19c <lcd_char+0x2e>
}


void toggleE(void)
{
SETBIT(PORTE,BIT(0));
 1a0:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1a2:	43 e3       	ldi	r20, 0x33	; 51
 1a4:	57 e0       	ldi	r21, 0x07	; 7
 1a6:	ca 01       	movw	r24, r20
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <lcd_char+0x3a>
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
 1ac:	70 98       	cbi	0x0e, 0	; 14
	toggleE();				// '10'000'11'0 (first nibble Done)
							/* PORTA = (data & 0xF0);
							PORTA = (data & 0xF0);
							PORTA = (data & 0xF0);*/

	CLEARBIT(PORTG,BIT(5));
 1ae:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 1b0:	70 98       	cbi	0x0e, 0	; 14
	SETBIT(PORTG,BIT(5));
 1b2:	a5 9a       	sbi	0x14, 5	; 20
	temp=(data << 4) & 0b11000000; // '10'000000
	PORTE=temp;
 1b4:	c9 01       	movw	r24, r18
 1b6:	74 e0       	ldi	r23, 0x04	; 4
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	7a 95       	dec	r23
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <lcd_char+0x4a>
 1c0:	80 7c       	andi	r24, 0xC0	; 192
 1c2:	90 70       	andi	r25, 0x00	; 0
 1c4:	8e b9       	out	0x0e, r24	; 14
	temp=(data << 1) & 0b00000110; // 00000'01'0 
	PORTE= PORTE | temp;
 1c6:	8e b1       	in	r24, 0x0e	; 14
 1c8:	22 0f       	add	r18, r18
 1ca:	33 1f       	adc	r19, r19
 1cc:	26 70       	andi	r18, 0x06	; 6
 1ce:	30 70       	andi	r19, 0x00	; 0
 1d0:	82 2b       	or	r24, r18
 1d2:	8e b9       	out	0x0e, r24	; 14
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1d4:	6a 95       	dec	r22
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_char+0x66>
}


void toggleE(void)
{
SETBIT(PORTE,BIT(0));
 1d8:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1da:	ca 01       	movw	r24, r20
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <lcd_char+0x6e>
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
 1e0:	70 98       	cbi	0x0e, 0	; 14
	_delay_us(5);
						/*PORTA = (data << 4);
						PORTA = (data << 4);
						PORTA = (data << 4);	*/					
	toggleE();
}
 1e2:	1f 91       	pop	r17
 1e4:	08 95       	ret

000001e6 <lcd_showvalueh>:
{
	lcd_cmd(LINE2+pos);
}

void lcd_showvalueh(unsigned int num)	//prints the decimal 3digit value of num
{
 1e6:	ef 92       	push	r14
 1e8:	ff 92       	push	r15
 1ea:	0f 93       	push	r16
 1ec:	1f 93       	push	r17
 1ee:	8c 01       	movw	r16, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
 1f0:	64 e6       	ldi	r22, 0x64	; 100
 1f2:	70 e0       	ldi	r23, 0x00	; 0
 1f4:	0e 94 c1 04 	call	0x982	; 0x982 <__udivmodhi4>
 1f8:	46 2f       	mov	r20, r22
	T=(num - (H*100))/10;
 1fa:	26 2f       	mov	r18, r22
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	8c e9       	ldi	r24, 0x9C	; 156
 200:	9f ef       	ldi	r25, 0xFF	; 255
 202:	28 9f       	mul	r18, r24
 204:	70 01       	movw	r14, r0
 206:	29 9f       	mul	r18, r25
 208:	f0 0c       	add	r15, r0
 20a:	38 9f       	mul	r19, r24
 20c:	f0 0c       	add	r15, r0
 20e:	11 24       	eor	r1, r1
 210:	c7 01       	movw	r24, r14
 212:	80 0f       	add	r24, r16
 214:	91 1f       	adc	r25, r17
 216:	6a e0       	ldi	r22, 0x0A	; 10
 218:	70 e0       	ldi	r23, 0x00	; 0
 21a:	0e 94 c1 04 	call	0x982	; 0x982 <__udivmodhi4>
 21e:	16 2f       	mov	r17, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+48);
 220:	84 2f       	mov	r24, r20
 222:	80 5d       	subi	r24, 0xD0	; 208
 224:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_char>
	lcd_char(T+48);
 228:	81 2f       	mov	r24, r17
 22a:	80 5d       	subi	r24, 0xD0	; 208
 22c:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_char>
	lcd_char(O+48);
 230:	00 5d       	subi	r16, 0xD0	; 208
 232:	0e 0d       	add	r16, r14
 234:	86 ef       	ldi	r24, 0xF6	; 246
 236:	9f ef       	ldi	r25, 0xFF	; 255
 238:	18 9f       	mul	r17, r24
 23a:	60 2d       	mov	r22, r0
 23c:	11 24       	eor	r1, r1
 23e:	86 2f       	mov	r24, r22
 240:	80 0f       	add	r24, r16
 242:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_char>
}
 246:	1f 91       	pop	r17
 248:	0f 91       	pop	r16
 24a:	ff 90       	pop	r15
 24c:	ef 90       	pop	r14
 24e:	08 95       	ret

00000250 <lcd_showvalue>:
		}
}


void lcd_showvalue(unsigned long int num)
{
 250:	8f 92       	push	r8
 252:	9f 92       	push	r9
 254:	af 92       	push	r10
 256:	bf 92       	push	r11
 258:	cf 92       	push	r12
 25a:	df 92       	push	r13
 25c:	ef 92       	push	r14
 25e:	ff 92       	push	r15
 260:	1f 93       	push	r17
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	4b 01       	movw	r8, r22
 268:	5c 01       	movw	r10, r24
	
	unsigned long int n = 0;
	int flag = 0;


	if(num%100000 == 0)
 26a:	20 ea       	ldi	r18, 0xA0	; 160
 26c:	36 e8       	ldi	r19, 0x86	; 134
 26e:	41 e0       	ldi	r20, 0x01	; 1
 270:	50 e0       	ldi	r21, 0x00	; 0
 272:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__udivmodsi4>
 276:	61 15       	cp	r22, r1
 278:	71 05       	cpc	r23, r1
 27a:	81 05       	cpc	r24, r1
 27c:	91 05       	cpc	r25, r1
 27e:	19 f4       	brne	.+6      	; 0x286 <lcd_showvalue+0x36>
 280:	c5 e0       	ldi	r28, 0x05	; 5
 282:	d0 e0       	ldi	r29, 0x00	; 0
 284:	41 c0       	rjmp	.+130    	; 0x308 <lcd_showvalue+0xb8>
	{
		flag = 5;
	}
	
	else if(num%10000 == 0)
 286:	c5 01       	movw	r24, r10
 288:	b4 01       	movw	r22, r8
 28a:	20 e1       	ldi	r18, 0x10	; 16
 28c:	37 e2       	ldi	r19, 0x27	; 39
 28e:	40 e0       	ldi	r20, 0x00	; 0
 290:	50 e0       	ldi	r21, 0x00	; 0
 292:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__udivmodsi4>
 296:	61 15       	cp	r22, r1
 298:	71 05       	cpc	r23, r1
 29a:	81 05       	cpc	r24, r1
 29c:	91 05       	cpc	r25, r1
 29e:	19 f4       	brne	.+6      	; 0x2a6 <lcd_showvalue+0x56>
 2a0:	c4 e0       	ldi	r28, 0x04	; 4
 2a2:	d0 e0       	ldi	r29, 0x00	; 0
 2a4:	31 c0       	rjmp	.+98     	; 0x308 <lcd_showvalue+0xb8>
	{
		flag = 4;
	}

	else if(num%1000 == 0) 
 2a6:	c5 01       	movw	r24, r10
 2a8:	b4 01       	movw	r22, r8
 2aa:	28 ee       	ldi	r18, 0xE8	; 232
 2ac:	33 e0       	ldi	r19, 0x03	; 3
 2ae:	40 e0       	ldi	r20, 0x00	; 0
 2b0:	50 e0       	ldi	r21, 0x00	; 0
 2b2:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__udivmodsi4>
 2b6:	61 15       	cp	r22, r1
 2b8:	71 05       	cpc	r23, r1
 2ba:	81 05       	cpc	r24, r1
 2bc:	91 05       	cpc	r25, r1
 2be:	19 f4       	brne	.+6      	; 0x2c6 <lcd_showvalue+0x76>
 2c0:	c3 e0       	ldi	r28, 0x03	; 3
 2c2:	d0 e0       	ldi	r29, 0x00	; 0
 2c4:	21 c0       	rjmp	.+66     	; 0x308 <lcd_showvalue+0xb8>
	{
		flag = 3;
	}

	else if(num%100 == 0) 
 2c6:	c5 01       	movw	r24, r10
 2c8:	b4 01       	movw	r22, r8
 2ca:	24 e6       	ldi	r18, 0x64	; 100
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	40 e0       	ldi	r20, 0x00	; 0
 2d0:	50 e0       	ldi	r21, 0x00	; 0
 2d2:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__udivmodsi4>
 2d6:	61 15       	cp	r22, r1
 2d8:	71 05       	cpc	r23, r1
 2da:	81 05       	cpc	r24, r1
 2dc:	91 05       	cpc	r25, r1
 2de:	19 f4       	brne	.+6      	; 0x2e6 <lcd_showvalue+0x96>
 2e0:	c2 e0       	ldi	r28, 0x02	; 2
 2e2:	d0 e0       	ldi	r29, 0x00	; 0
 2e4:	11 c0       	rjmp	.+34     	; 0x308 <lcd_showvalue+0xb8>
 2e6:	c0 e0       	ldi	r28, 0x00	; 0
 2e8:	d0 e0       	ldi	r29, 0x00	; 0
 2ea:	c5 01       	movw	r24, r10
 2ec:	b4 01       	movw	r22, r8
 2ee:	2a e0       	ldi	r18, 0x0A	; 10
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	40 e0       	ldi	r20, 0x00	; 0
 2f4:	50 e0       	ldi	r21, 0x00	; 0
 2f6:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__udivmodsi4>
 2fa:	61 15       	cp	r22, r1
 2fc:	71 05       	cpc	r23, r1
 2fe:	81 05       	cpc	r24, r1
 300:	91 05       	cpc	r25, r1
 302:	11 f4       	brne	.+4      	; 0x308 <lcd_showvalue+0xb8>
 304:	c1 e0       	ldi	r28, 0x01	; 1
 306:	d0 e0       	ldi	r29, 0x00	; 0
 308:	cc 24       	eor	r12, r12
 30a:	dd 24       	eor	r13, r13
 30c:	76 01       	movw	r14, r12
 30e:	23 c0       	rjmp	.+70     	; 0x356 <lcd_showvalue+0x106>


	while(num!=0)
	{
	
			H = num%10;
 310:	c5 01       	movw	r24, r10
 312:	b4 01       	movw	r22, r8
 314:	2a e0       	ldi	r18, 0x0A	; 10
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	40 e0       	ldi	r20, 0x00	; 0
 31a:	50 e0       	ldi	r21, 0x00	; 0
 31c:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__udivmodsi4>
 320:	16 2f       	mov	r17, r22
			num = num/10;
 322:	c5 01       	movw	r24, r10
 324:	b4 01       	movw	r22, r8
 326:	2a e0       	ldi	r18, 0x0A	; 10
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	40 e0       	ldi	r20, 0x00	; 0
 32c:	50 e0       	ldi	r21, 0x00	; 0
 32e:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__udivmodsi4>
 332:	c9 01       	movw	r24, r18
 334:	da 01       	movw	r26, r20
 336:	4c 01       	movw	r8, r24
 338:	5d 01       	movw	r10, r26
			n = (n*10)+H;
 33a:	c7 01       	movw	r24, r14
 33c:	b6 01       	movw	r22, r12
 33e:	2a e0       	ldi	r18, 0x0A	; 10
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	40 e0       	ldi	r20, 0x00	; 0
 344:	50 e0       	ldi	r21, 0x00	; 0
 346:	0e 94 a2 04 	call	0x944	; 0x944 <__mulsi3>
 34a:	6b 01       	movw	r12, r22
 34c:	7c 01       	movw	r14, r24
 34e:	c1 0e       	add	r12, r17
 350:	d1 1c       	adc	r13, r1
 352:	e1 1c       	adc	r14, r1
 354:	f1 1c       	adc	r15, r1
		flag = 0;
	}



	while(num!=0)
 356:	81 14       	cp	r8, r1
 358:	91 04       	cpc	r9, r1
 35a:	a1 04       	cpc	r10, r1
 35c:	b1 04       	cpc	r11, r1
 35e:	c1 f6       	brne	.-80     	; 0x310 <lcd_showvalue+0xc0>
 360:	19 c0       	rjmp	.+50     	; 0x394 <lcd_showvalue+0x144>
	}
	
	while(n!=0)
	{
	
			H = n%10;
 362:	c7 01       	movw	r24, r14
 364:	b6 01       	movw	r22, r12
 366:	2a e0       	ldi	r18, 0x0A	; 10
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	40 e0       	ldi	r20, 0x00	; 0
 36c:	50 e0       	ldi	r21, 0x00	; 0
 36e:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__udivmodsi4>
 372:	16 2f       	mov	r17, r22
			n = n/10;
 374:	c7 01       	movw	r24, r14
 376:	b6 01       	movw	r22, r12
 378:	2a e0       	ldi	r18, 0x0A	; 10
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	40 e0       	ldi	r20, 0x00	; 0
 37e:	50 e0       	ldi	r21, 0x00	; 0
 380:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__udivmodsi4>
 384:	c9 01       	movw	r24, r18
 386:	da 01       	movw	r26, r20
 388:	6c 01       	movw	r12, r24
 38a:	7d 01       	movw	r14, r26
			lcd_char(H+48);
 38c:	81 2f       	mov	r24, r17
 38e:	80 5d       	subi	r24, 0xD0	; 208
 390:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_char>
			num = num/10;
			n = (n*10)+H;

	}
	
	while(n!=0)
 394:	c1 14       	cp	r12, r1
 396:	d1 04       	cpc	r13, r1
 398:	e1 04       	cpc	r14, r1
 39a:	f1 04       	cpc	r15, r1
 39c:	11 f7       	brne	.-60     	; 0x362 <lcd_showvalue+0x112>
 39e:	04 c0       	rjmp	.+8      	; 0x3a8 <lcd_showvalue+0x158>
	}
	
	
	while(flag > 0)
	{
		lcd_char(48);
 3a0:	80 e3       	ldi	r24, 0x30	; 48
 3a2:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_char>
		flag--;
 3a6:	21 97       	sbiw	r28, 0x01	; 1
			lcd_char(H+48);

	}
	
	
	while(flag > 0)
 3a8:	20 97       	sbiw	r28, 0x00	; 0
 3aa:	d1 f7       	brne	.-12     	; 0x3a0 <lcd_showvalue+0x150>
	{
		lcd_char(48);
		flag--;
	}	

}
 3ac:	df 91       	pop	r29
 3ae:	cf 91       	pop	r28
 3b0:	1f 91       	pop	r17
 3b2:	ff 90       	pop	r15
 3b4:	ef 90       	pop	r14
 3b6:	df 90       	pop	r13
 3b8:	cf 90       	pop	r12
 3ba:	bf 90       	pop	r11
 3bc:	af 90       	pop	r10
 3be:	9f 90       	pop	r9
 3c0:	8f 90       	pop	r8
 3c2:	08 95       	ret

000003c4 <lcd_cmd>:
}

void lcd_cmd(unsigned char ch)
{
	int temp;
	CLEARBIT(PORTG,BIT(5));
 3c4:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 3c6:	70 98       	cbi	0x0e, 0	; 14
					/*PORTA = (ch & 0xF0);			// Send twice because ATMEGA is too fast 
  					PORTA = (ch & 0xF0); 			// for the LCD display !
  					PORTA = ch & 0xF0;
   					PORTA = ch & 0xF0;*/

	temp= ch & 0b11000000; // '10'000000
 3c8:	48 2f       	mov	r20, r24
 3ca:	50 e0       	ldi	r21, 0x00	; 0
	PORTE=temp;
 3cc:	9a 01       	movw	r18, r20
 3ce:	20 7c       	andi	r18, 0xC0	; 192
 3d0:	30 70       	andi	r19, 0x00	; 0
 3d2:	2e b9       	out	0x0e, r18	; 14
	temp=(ch >> 3) & 0b00000110; // 00000'11'0
	PORTE= PORTE | temp;
 3d4:	9e b1       	in	r25, 0x0e	; 14
 3d6:	86 95       	lsr	r24
 3d8:	86 95       	lsr	r24
 3da:	86 95       	lsr	r24
 3dc:	86 70       	andi	r24, 0x06	; 6
 3de:	98 2b       	or	r25, r24
 3e0:	9e b9       	out	0x0e, r25	; 14
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 3e2:	68 e1       	ldi	r22, 0x18	; 24
 3e4:	86 2f       	mov	r24, r22
 3e6:	8a 95       	dec	r24
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <lcd_cmd+0x22>
}


void toggleE(void)
{
SETBIT(PORTE,BIT(0));
 3ea:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3ec:	23 e3       	ldi	r18, 0x33	; 51
 3ee:	37 e0       	ldi	r19, 0x07	; 7
 3f0:	c9 01       	movw	r24, r18
 3f2:	01 97       	sbiw	r24, 0x01	; 1
 3f4:	f1 f7       	brne	.-4      	; 0x3f2 <lcd_cmd+0x2e>
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
 3f6:	70 98       	cbi	0x0e, 0	; 14
	temp=(ch >> 3) & 0b00000110; // 00000'11'0
	PORTE= PORTE | temp;
	_delay_us(5);
	toggleE();
   // Extract lower nibble
	SETBIT(PORTG,BIT(5));
 3f8:	a5 9a       	sbi	0x14, 5	; 20
   	CLEARBIT(PORTG,BIT(5));
 3fa:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 3fc:	70 98       	cbi	0x0e, 0	; 14
   					/*PORTA = ((ch << 4) & 0xF0); 	// Send twice because ATMEGA is too fast 
   					PORTA = ((ch << 4) & 0xF0);	// for the LCD display !
   					PORTA = (ch << 4) & 0xF0;
   					PORTA = (ch << 4) & 0xF0;*/
	temp=(ch << 4) & 0b11000000; // '10'000000
	PORTE=temp;
 3fe:	ca 01       	movw	r24, r20
 400:	f4 e0       	ldi	r31, 0x04	; 4
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	fa 95       	dec	r31
 408:	e1 f7       	brne	.-8      	; 0x402 <lcd_cmd+0x3e>
 40a:	80 7c       	andi	r24, 0xC0	; 192
 40c:	90 70       	andi	r25, 0x00	; 0
 40e:	8e b9       	out	0x0e, r24	; 14
	temp=(ch << 1) & 0b00000110; // 00000'01'0 
	PORTE= PORTE | temp;
 410:	8e b1       	in	r24, 0x0e	; 14
 412:	44 0f       	add	r20, r20
 414:	55 1f       	adc	r21, r21
 416:	46 70       	andi	r20, 0x06	; 6
 418:	50 70       	andi	r21, 0x00	; 0
 41a:	84 2b       	or	r24, r20
 41c:	8e b9       	out	0x0e, r24	; 14
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 41e:	6a 95       	dec	r22
 420:	f1 f7       	brne	.-4      	; 0x41e <lcd_cmd+0x5a>
}


void toggleE(void)
{
SETBIT(PORTE,BIT(0));
 422:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 424:	c9 01       	movw	r24, r18
 426:	01 97       	sbiw	r24, 0x01	; 1
 428:	f1 f7       	brne	.-4      	; 0x426 <lcd_cmd+0x62>
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
 42a:	70 98       	cbi	0x0e, 0	; 14
	PORTE=temp;
	temp=(ch << 1) & 0b00000110; // 00000'01'0 
	PORTE= PORTE | temp;
	_delay_us(5);
	toggleE();
   	PORTE = 0x00;
 42c:	1e b8       	out	0x0e, r1	; 14
   	WaitMs(10);
 42e:	8a e0       	ldi	r24, 0x0A	; 10
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 a9 00 	call	0x152	; 0x152 <WaitMs>


}
 436:	08 95       	ret

00000438 <lcd_gotoxy2>:
	lcd_cmd(LINE1+pos);
}

void lcd_gotoxy2(unsigned char pos)
{
	lcd_cmd(LINE2+pos);
 438:	80 54       	subi	r24, 0x40	; 64
 43a:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_cmd>
}
 43e:	08 95       	ret

00000440 <lcd_gotoxy1>:

}

void lcd_gotoxy1(unsigned char pos)
{
	lcd_cmd(LINE1+pos);
 440:	80 58       	subi	r24, 0x80	; 128
 442:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_cmd>
}
 446:	08 95       	ret

00000448 <lcd_string>:
						PORTA = (data << 4);	*/					
	toggleE();
}

void lcd_string(unsigned char str[32])
{
 448:	cf 92       	push	r12
 44a:	df 92       	push	r13
 44c:	ef 92       	push	r14
 44e:	ff 92       	push	r15
 450:	1f 93       	push	r17
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
 456:	7c 01       	movw	r14, r24
	int poop,bitch;
	unsigned char k=0;
	PORTA=0x01;
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	82 b9       	out	0x02, r24	; 2
	SETBIT(PORTG,BIT(5));
 45c:	a5 9a       	sbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 45e:	70 98       	cbi	0x0e, 0	; 14
 460:	10 e0       	ldi	r17, 0x00	; 0
 462:	63 e3       	ldi	r22, 0x33	; 51
 464:	c6 2e       	mov	r12, r22
 466:	67 e0       	ldi	r22, 0x07	; 7
 468:	d6 2e       	mov	r13, r22
 46a:	3a c0       	rjmp	.+116    	; 0x4e0 <lcd_string+0x98>
	while(str[k]!='\0')	//Till null character is encountered
		{
			if(k==16)
 46c:	10 31       	cpi	r17, 0x10	; 16
 46e:	19 f4       	brne	.+6      	; 0x476 <lcd_string+0x2e>
				lcd_cmd(LINE2);
 470:	80 ec       	ldi	r24, 0xC0	; 192
 472:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_cmd>
			SETBIT(PORTG,BIT(5));
 476:	a5 9a       	sbi	0x14, 5	; 20
			CLEARBIT(PORTE,BIT(0));
 478:	70 98       	cbi	0x0e, 0	; 14
			bitch=str[k]; //10111001
 47a:	28 81       	ld	r18, Y
 47c:	30 e0       	ldi	r19, 0x00	; 0
			poop= bitch & 0b11000000; // '10'000000
			PORTE=poop;
 47e:	c9 01       	movw	r24, r18
 480:	80 7c       	andi	r24, 0xC0	; 192
 482:	90 70       	andi	r25, 0x00	; 0
 484:	8e b9       	out	0x0e, r24	; 14
			poop=(bitch>>3) & 0b00000110; // 00000'11'0
			PORTE= PORTE | poop;
 486:	4e b1       	in	r20, 0x0e	; 14
 488:	c9 01       	movw	r24, r18
 48a:	53 e0       	ldi	r21, 0x03	; 3
 48c:	95 95       	asr	r25
 48e:	87 95       	ror	r24
 490:	5a 95       	dec	r21
 492:	e1 f7       	brne	.-8      	; 0x48c <lcd_string+0x44>
 494:	86 70       	andi	r24, 0x06	; 6
 496:	90 70       	andi	r25, 0x00	; 0
 498:	48 2b       	or	r20, r24
 49a:	4e b9       	out	0x0e, r20	; 14
}


void toggleE(void)
{
SETBIT(PORTE,BIT(0));
 49c:	70 9a       	sbi	0x0e, 0	; 14
 49e:	c6 01       	movw	r24, r12
 4a0:	01 97       	sbiw	r24, 0x01	; 1
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <lcd_string+0x58>
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
 4a4:	70 98       	cbi	0x0e, 0	; 14
			PORTE=poop;
			poop=(bitch>>3) & 0b00000110; // 00000'11'0
			PORTE= PORTE | poop;
			//PORTA=((str[k])&0xF0)|0x01;
			toggleE();
			CLEARBIT(PORTG,BIT(5))
 4a6:	a5 98       	cbi	0x14, 5	; 20
			SETBIT(PORTG,BIT(5));
 4a8:	a5 9a       	sbi	0x14, 5	; 20
			CLEARBIT(PORTE,BIT(0));
 4aa:	70 98       	cbi	0x0e, 0	; 14
			bitch=str[k];
			poop=(bitch << 4) & 0b11000000; // '10'000000
			PORTE=poop;
 4ac:	c9 01       	movw	r24, r18
 4ae:	b4 e0       	ldi	r27, 0x04	; 4
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	ba 95       	dec	r27
 4b6:	e1 f7       	brne	.-8      	; 0x4b0 <lcd_string+0x68>
 4b8:	80 7c       	andi	r24, 0xC0	; 192
 4ba:	90 70       	andi	r25, 0x00	; 0
 4bc:	8e b9       	out	0x0e, r24	; 14
			poop=(bitch << 1) & 0b00000110; // 00000'01'0 
			PORTE= PORTE | poop;
 4be:	8e b1       	in	r24, 0x0e	; 14
 4c0:	22 0f       	add	r18, r18
 4c2:	33 1f       	adc	r19, r19
 4c4:	26 70       	andi	r18, 0x06	; 6
 4c6:	30 70       	andi	r19, 0x00	; 0
 4c8:	82 2b       	or	r24, r18
 4ca:	8e b9       	out	0x0e, r24	; 14
}


void toggleE(void)
{
SETBIT(PORTE,BIT(0));
 4cc:	70 9a       	sbi	0x0e, 0	; 14
 4ce:	c6 01       	movw	r24, r12
 4d0:	01 97       	sbiw	r24, 0x01	; 1
 4d2:	f1 f7       	brne	.-4      	; 0x4d0 <lcd_string+0x88>
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
 4d4:	70 98       	cbi	0x0e, 0	; 14
			PORTE=poop;
			poop=(bitch << 1) & 0b00000110; // 00000'01'0 
			PORTE= PORTE | poop;
			//PORTA=((str[k]&(0x0F))*16)|0x01;
			toggleE();
			k++;
 4d6:	1f 5f       	subi	r17, 0xFF	; 255
			WaitMs(1);
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	0e 94 a9 00 	call	0x152	; 0x152 <WaitMs>
	int poop,bitch;
	unsigned char k=0;
	PORTA=0x01;
	SETBIT(PORTG,BIT(5));
	CLEARBIT(PORTE,BIT(0));
	while(str[k]!='\0')	//Till null character is encountered
 4e0:	e7 01       	movw	r28, r14
 4e2:	c1 0f       	add	r28, r17
 4e4:	d1 1d       	adc	r29, r1
 4e6:	88 81       	ld	r24, Y
 4e8:	88 23       	and	r24, r24
 4ea:	09 f0       	breq	.+2      	; 0x4ee <lcd_string+0xa6>
 4ec:	bf cf       	rjmp	.-130    	; 0x46c <lcd_string+0x24>
			//PORTA=((str[k]&(0x0F))*16)|0x01;
			toggleE();
			k++;
			WaitMs(1);
		}
}
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	1f 91       	pop	r17
 4f4:	ff 90       	pop	r15
 4f6:	ef 90       	pop	r14
 4f8:	df 90       	pop	r13
 4fa:	cf 90       	pop	r12
 4fc:	08 95       	ret

000004fe <lcd_init>:
void lcd_exit(void);
void WaitMs(unsigned int ms);

void lcd_init(void)	//init the lcd
{	
	DDRE=0xFF;
 4fe:	8f ef       	ldi	r24, 0xFF	; 255
 500:	8d b9       	out	0x0d, r24	; 13
	//DDRC=0x80;
	DDRG=0xFF;
 502:	83 bb       	out	0x13, r24	; 19
	WaitMs(15);
 504:	8f e0       	ldi	r24, 0x0F	; 15
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	0e 94 a9 00 	call	0x152	; 0x152 <WaitMs>
	CLEARBIT(PORTG,BIT(5));
 50c:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 50e:	70 98       	cbi	0x0e, 0	; 14
	PORTE=0x00;
 510:	1e b8       	out	0x0e, r1	; 14
	lcd_cmd(0x20);		//data is 8-bit length
 512:	80 e2       	ldi	r24, 0x20	; 32
 514:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_cmd>
	WaitMs(1);
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	0e 94 a9 00 	call	0x152	; 0x152 <WaitMs>
	lcd_cmd(0x20);		//data is 8-bit length
 520:	80 e2       	ldi	r24, 0x20	; 32
 522:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_cmd>
	WaitMs(1);
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	0e 94 a9 00 	call	0x152	; 0x152 <WaitMs>
	lcd_cmd(0x20);		//data is 8-bit length
 52e:	80 e2       	ldi	r24, 0x20	; 32
 530:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_cmd>
	WaitMs(1);
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	0e 94 a9 00 	call	0x152	; 0x152 <WaitMs>
	lcd_cmd(0x28);		//sets character font
 53c:	88 e2       	ldi	r24, 0x28	; 40
 53e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_cmd>
	WaitMs(1);
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	0e 94 a9 00 	call	0x152	; 0x152 <WaitMs>
	lcd_cmd(0x0E);		//display off(d,c,b=0) 08
 54a:	8e e0       	ldi	r24, 0x0E	; 14
 54c:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_cmd>
	WaitMs(1);
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	0e 94 a9 00 	call	0x152	; 0x152 <WaitMs>
	lcd_cmd(0x01);		//clears the data
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_cmd>
	WaitMs(1);
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	0e 94 a9 00 	call	0x152	; 0x152 <WaitMs>
	//lcd_cmd(0x02);		//home
	//WaitMs(1);
	lcd_cmd(0x6);		//entry mode--increment
 566:	86 e0       	ldi	r24, 0x06	; 6
 568:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_cmd>
	WaitMs(1);
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	0e 94 a9 00 	call	0x152	; 0x152 <WaitMs>
	//lcd_cmd(0x0C);		//display--on,cursor--on.blinking--on
	//WaitMs(1);
}
 574:	08 95       	ret

00000576 <port_init>:
}
*/

void port_init(void)
{
	DDRH |= (1 << PH4) | (1 << PH5);		//OC3B	//OC3A	DIRECTION BITS
 576:	e1 e0       	ldi	r30, 0x01	; 1
 578:	f1 e0       	ldi	r31, 0x01	; 1
 57a:	80 81       	ld	r24, Z
 57c:	80 63       	ori	r24, 0x30	; 48
 57e:	80 83       	st	Z, r24
	DDRL |= (1<<PL0)   | (1<<PL1);	//OC3A, 3B O/P DECLARATION
 580:	ea e0       	ldi	r30, 0x0A	; 10
 582:	f1 e0       	ldi	r31, 0x01	; 1
 584:	80 81       	ld	r24, Z
 586:	83 60       	ori	r24, 0x03	; 3
 588:	80 83       	st	Z, r24
}
 58a:	08 95       	ret

0000058c <timer_init>:
void timer_init(void)
{
	/*--------Timer Initialisation-------*/
	TCCR1B = 0x07;
 58c:	87 e0       	ldi	r24, 0x07	; 7
 58e:	80 93 81 00 	sts	0x0081, r24
	DDRD &= ~(1<<6);
 592:	56 98       	cbi	0x0a, 6	; 10
	PORTD |= (1<<6);		
 594:	5e 9a       	sbi	0x0b, 6	; 11
}
 596:	08 95       	ret

00000598 <main>:
	OCR4C = temp_c;
}*/

int main(void)
{
	DDRC |= (1<<6) | (1<<0);
 598:	87 b1       	in	r24, 0x07	; 7
 59a:	81 64       	ori	r24, 0x41	; 65
 59c:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1<<6)| (1<<0);
 59e:	88 b1       	in	r24, 0x08	; 8
 5a0:	81 64       	ori	r24, 0x41	; 65
 5a2:	88 b9       	out	0x08, r24	; 8
	lcd_string("hel");
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	92 e0       	ldi	r25, 0x02	; 2
 5a8:	0e 94 24 02 	call	0x448	; 0x448 <lcd_string>
	/* ----------Calling all init functn--------- */
	lcd_init();
 5ac:	0e 94 7f 02 	call	0x4fe	; 0x4fe <lcd_init>
}
*/

void port_init(void)
{
	DDRH |= (1 << PH4) | (1 << PH5);		//OC3B	//OC3A	DIRECTION BITS
 5b0:	80 91 01 01 	lds	r24, 0x0101
 5b4:	80 63       	ori	r24, 0x30	; 48
 5b6:	80 93 01 01 	sts	0x0101, r24
	DDRL |= (1<<PL0)   | (1<<PL1);	//OC3A, 3B O/P DECLARATION
 5ba:	80 91 0a 01 	lds	r24, 0x010A
 5be:	83 60       	ori	r24, 0x03	; 3
 5c0:	80 93 0a 01 	sts	0x010A, r24
}
void timer_init(void)
{
	/*--------Timer Initialisation-------*/
	TCCR1B = 0x07;
 5c4:	87 e0       	ldi	r24, 0x07	; 7
 5c6:	80 93 81 00 	sts	0x0081, r24
	DDRD &= ~(1<<6);
 5ca:	56 98       	cbi	0x0a, 6	; 10
	PORTD |= (1<<6);		
 5cc:	5e 9a       	sbi	0x0b, 6	; 11
	{
		
		//receive_encr();
	//	enc_l = TCNT1;
		
        lcd_gotoxy1(0);
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	0e 94 20 02 	call	0x440	; 0x440 <lcd_gotoxy1>
		lcd_showvalue(TCNT1);
 5d4:	60 91 84 00 	lds	r22, 0x0084
 5d8:	70 91 85 00 	lds	r23, 0x0085
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	0e 94 28 01 	call	0x250	; 0x250 <lcd_showvalue>
		lcd_string("    ");
 5e4:	84 e0       	ldi	r24, 0x04	; 4
 5e6:	92 e0       	ldi	r25, 0x02	; 2
 5e8:	0e 94 24 02 	call	0x448	; 0x448 <lcd_string>
 5ec:	f0 cf       	rjmp	.-32     	; 0x5ce <main+0x36>

000005ee <lcd_showvaluef>:

}


void lcd_showvaluef(float num)
{
 5ee:	ef 92       	push	r14
 5f0:	ff 92       	push	r15
 5f2:	0f 93       	push	r16
 5f4:	1f 93       	push	r17
 5f6:	df 93       	push	r29
 5f8:	cf 93       	push	r28
 5fa:	00 d0       	rcall	.+0      	; 0x5fc <lcd_showvaluef+0xe>
 5fc:	00 d0       	rcall	.+0      	; 0x5fe <lcd_showvaluef+0x10>
 5fe:	cd b7       	in	r28, 0x3d	; 61
 600:	de b7       	in	r29, 0x3e	; 62
 602:	7b 01       	movw	r14, r22
 604:	8c 01       	movw	r16, r24
	unsigned long int l;
	double fraction,integer;

	l = (unsigned long int)num;

	lcd_showvalue(l);
 606:	0e 94 2a 03 	call	0x654	; 0x654 <__fixunssfsi>
 60a:	0e 94 28 01 	call	0x250	; 0x250 <lcd_showvalue>

	fraction = modf((double)num,&integer);
 60e:	c8 01       	movw	r24, r16
 610:	b7 01       	movw	r22, r14
 612:	ae 01       	movw	r20, r28
 614:	4f 5f       	subi	r20, 0xFF	; 255
 616:	5f 4f       	sbci	r21, 0xFF	; 255
 618:	0e 94 7f 03 	call	0x6fe	; 0x6fe <modf>
 61c:	7b 01       	movw	r14, r22
 61e:	8c 01       	movw	r16, r24

	l = (unsigned long int)(fraction * 100000);

	lcd_char('.');
 620:	8e e2       	ldi	r24, 0x2E	; 46
 622:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_char>

	lcd_showvalue(l);
 626:	c8 01       	movw	r24, r16
 628:	b7 01       	movw	r22, r14
 62a:	20 e0       	ldi	r18, 0x00	; 0
 62c:	30 e5       	ldi	r19, 0x50	; 80
 62e:	43 ec       	ldi	r20, 0xC3	; 195
 630:	57 e4       	ldi	r21, 0x47	; 71
 632:	0e 94 b2 03 	call	0x764	; 0x764 <__mulsf3>
 636:	0e 94 2a 03 	call	0x654	; 0x654 <__fixunssfsi>
 63a:	0e 94 28 01 	call	0x250	; 0x250 <lcd_showvalue>

}
 63e:	0f 90       	pop	r0
 640:	0f 90       	pop	r0
 642:	0f 90       	pop	r0
 644:	0f 90       	pop	r0
 646:	cf 91       	pop	r28
 648:	df 91       	pop	r29
 64a:	1f 91       	pop	r17
 64c:	0f 91       	pop	r16
 64e:	ff 90       	pop	r15
 650:	ef 90       	pop	r14
 652:	08 95       	ret

00000654 <__fixunssfsi>:
 654:	33 d0       	rcall	.+102    	; 0x6bc <__fp_splitA>
 656:	88 f0       	brcs	.+34     	; 0x67a <__fixunssfsi+0x26>
 658:	9f 57       	subi	r25, 0x7F	; 127
 65a:	90 f0       	brcs	.+36     	; 0x680 <__fixunssfsi+0x2c>
 65c:	b9 2f       	mov	r27, r25
 65e:	99 27       	eor	r25, r25
 660:	b7 51       	subi	r27, 0x17	; 23
 662:	a0 f0       	brcs	.+40     	; 0x68c <__fixunssfsi+0x38>
 664:	d1 f0       	breq	.+52     	; 0x69a <__fixunssfsi+0x46>
 666:	66 0f       	add	r22, r22
 668:	77 1f       	adc	r23, r23
 66a:	88 1f       	adc	r24, r24
 66c:	99 1f       	adc	r25, r25
 66e:	1a f0       	brmi	.+6      	; 0x676 <__fixunssfsi+0x22>
 670:	ba 95       	dec	r27
 672:	c9 f7       	brne	.-14     	; 0x666 <__fixunssfsi+0x12>
 674:	12 c0       	rjmp	.+36     	; 0x69a <__fixunssfsi+0x46>
 676:	b1 30       	cpi	r27, 0x01	; 1
 678:	81 f0       	breq	.+32     	; 0x69a <__fixunssfsi+0x46>
 67a:	3a d0       	rcall	.+116    	; 0x6f0 <__fp_zero>
 67c:	b1 e0       	ldi	r27, 0x01	; 1
 67e:	08 95       	ret
 680:	37 c0       	rjmp	.+110    	; 0x6f0 <__fp_zero>
 682:	67 2f       	mov	r22, r23
 684:	78 2f       	mov	r23, r24
 686:	88 27       	eor	r24, r24
 688:	b8 5f       	subi	r27, 0xF8	; 248
 68a:	39 f0       	breq	.+14     	; 0x69a <__fixunssfsi+0x46>
 68c:	b9 3f       	cpi	r27, 0xF9	; 249
 68e:	cc f3       	brlt	.-14     	; 0x682 <__fixunssfsi+0x2e>
 690:	86 95       	lsr	r24
 692:	77 95       	ror	r23
 694:	67 95       	ror	r22
 696:	b3 95       	inc	r27
 698:	d9 f7       	brne	.-10     	; 0x690 <__fixunssfsi+0x3c>
 69a:	3e f4       	brtc	.+14     	; 0x6aa <__fixunssfsi+0x56>
 69c:	90 95       	com	r25
 69e:	80 95       	com	r24
 6a0:	70 95       	com	r23
 6a2:	61 95       	neg	r22
 6a4:	7f 4f       	sbci	r23, 0xFF	; 255
 6a6:	8f 4f       	sbci	r24, 0xFF	; 255
 6a8:	9f 4f       	sbci	r25, 0xFF	; 255
 6aa:	08 95       	ret

000006ac <__fp_split3>:
 6ac:	57 fd       	sbrc	r21, 7
 6ae:	90 58       	subi	r25, 0x80	; 128
 6b0:	44 0f       	add	r20, r20
 6b2:	55 1f       	adc	r21, r21
 6b4:	59 f0       	breq	.+22     	; 0x6cc <__fp_splitA+0x10>
 6b6:	5f 3f       	cpi	r21, 0xFF	; 255
 6b8:	71 f0       	breq	.+28     	; 0x6d6 <__fp_splitA+0x1a>
 6ba:	47 95       	ror	r20

000006bc <__fp_splitA>:
 6bc:	88 0f       	add	r24, r24
 6be:	97 fb       	bst	r25, 7
 6c0:	99 1f       	adc	r25, r25
 6c2:	61 f0       	breq	.+24     	; 0x6dc <__fp_splitA+0x20>
 6c4:	9f 3f       	cpi	r25, 0xFF	; 255
 6c6:	79 f0       	breq	.+30     	; 0x6e6 <__fp_splitA+0x2a>
 6c8:	87 95       	ror	r24
 6ca:	08 95       	ret
 6cc:	12 16       	cp	r1, r18
 6ce:	13 06       	cpc	r1, r19
 6d0:	14 06       	cpc	r1, r20
 6d2:	55 1f       	adc	r21, r21
 6d4:	f2 cf       	rjmp	.-28     	; 0x6ba <__fp_split3+0xe>
 6d6:	46 95       	lsr	r20
 6d8:	f1 df       	rcall	.-30     	; 0x6bc <__fp_splitA>
 6da:	08 c0       	rjmp	.+16     	; 0x6ec <__fp_splitA+0x30>
 6dc:	16 16       	cp	r1, r22
 6de:	17 06       	cpc	r1, r23
 6e0:	18 06       	cpc	r1, r24
 6e2:	99 1f       	adc	r25, r25
 6e4:	f1 cf       	rjmp	.-30     	; 0x6c8 <__fp_splitA+0xc>
 6e6:	86 95       	lsr	r24
 6e8:	71 05       	cpc	r23, r1
 6ea:	61 05       	cpc	r22, r1
 6ec:	08 94       	sec
 6ee:	08 95       	ret

000006f0 <__fp_zero>:
 6f0:	e8 94       	clt

000006f2 <__fp_szero>:
 6f2:	bb 27       	eor	r27, r27
 6f4:	66 27       	eor	r22, r22
 6f6:	77 27       	eor	r23, r23
 6f8:	cb 01       	movw	r24, r22
 6fa:	97 f9       	bld	r25, 7
 6fc:	08 95       	ret

000006fe <modf>:
 6fe:	fa 01       	movw	r30, r20
 700:	dc 01       	movw	r26, r24
 702:	aa 0f       	add	r26, r26
 704:	bb 1f       	adc	r27, r27
 706:	9b 01       	movw	r18, r22
 708:	ac 01       	movw	r20, r24
 70a:	bf 57       	subi	r27, 0x7F	; 127
 70c:	28 f4       	brcc	.+10     	; 0x718 <modf+0x1a>
 70e:	22 27       	eor	r18, r18
 710:	33 27       	eor	r19, r19
 712:	44 27       	eor	r20, r20
 714:	50 78       	andi	r21, 0x80	; 128
 716:	1f c0       	rjmp	.+62     	; 0x756 <modf+0x58>
 718:	b7 51       	subi	r27, 0x17	; 23
 71a:	88 f4       	brcc	.+34     	; 0x73e <modf+0x40>
 71c:	ab 2f       	mov	r26, r27
 71e:	00 24       	eor	r0, r0
 720:	46 95       	lsr	r20
 722:	37 95       	ror	r19
 724:	27 95       	ror	r18
 726:	01 1c       	adc	r0, r1
 728:	a3 95       	inc	r26
 72a:	d2 f3       	brmi	.-12     	; 0x720 <modf+0x22>
 72c:	00 20       	and	r0, r0
 72e:	69 f0       	breq	.+26     	; 0x74a <modf+0x4c>
 730:	22 0f       	add	r18, r18
 732:	33 1f       	adc	r19, r19
 734:	44 1f       	adc	r20, r20
 736:	b3 95       	inc	r27
 738:	da f3       	brmi	.-10     	; 0x730 <modf+0x32>
 73a:	0d d0       	rcall	.+26     	; 0x756 <modf+0x58>
 73c:	76 c0       	rjmp	.+236    	; 0x82a <__subsf3>
 73e:	61 30       	cpi	r22, 0x01	; 1
 740:	71 05       	cpc	r23, r1
 742:	a0 e8       	ldi	r26, 0x80	; 128
 744:	8a 07       	cpc	r24, r26
 746:	b9 46       	sbci	r27, 0x69	; 105
 748:	30 f4       	brcc	.+12     	; 0x756 <modf+0x58>
 74a:	9b 01       	movw	r18, r22
 74c:	ac 01       	movw	r20, r24
 74e:	66 27       	eor	r22, r22
 750:	77 27       	eor	r23, r23
 752:	88 27       	eor	r24, r24
 754:	90 78       	andi	r25, 0x80	; 128
 756:	30 96       	adiw	r30, 0x00	; 0
 758:	21 f0       	breq	.+8      	; 0x762 <modf+0x64>
 75a:	20 83       	st	Z, r18
 75c:	31 83       	std	Z+1, r19	; 0x01
 75e:	42 83       	std	Z+2, r20	; 0x02
 760:	53 83       	std	Z+3, r21	; 0x03
 762:	08 95       	ret

00000764 <__mulsf3>:
 764:	0b d0       	rcall	.+22     	; 0x77c <__mulsf3x>
 766:	dd c0       	rjmp	.+442    	; 0x922 <__fp_round>
 768:	ce d0       	rcall	.+412    	; 0x906 <__fp_pscA>
 76a:	28 f0       	brcs	.+10     	; 0x776 <__mulsf3+0x12>
 76c:	d3 d0       	rcall	.+422    	; 0x914 <__fp_pscB>
 76e:	18 f0       	brcs	.+6      	; 0x776 <__mulsf3+0x12>
 770:	95 23       	and	r25, r21
 772:	09 f0       	breq	.+2      	; 0x776 <__mulsf3+0x12>
 774:	bf c0       	rjmp	.+382    	; 0x8f4 <__fp_inf>
 776:	c4 c0       	rjmp	.+392    	; 0x900 <__fp_nan>
 778:	11 24       	eor	r1, r1
 77a:	bb cf       	rjmp	.-138    	; 0x6f2 <__fp_szero>

0000077c <__mulsf3x>:
 77c:	97 df       	rcall	.-210    	; 0x6ac <__fp_split3>
 77e:	a0 f3       	brcs	.-24     	; 0x768 <__mulsf3+0x4>

00000780 <__mulsf3_pse>:
 780:	95 9f       	mul	r25, r21
 782:	d1 f3       	breq	.-12     	; 0x778 <__mulsf3+0x14>
 784:	95 0f       	add	r25, r21
 786:	50 e0       	ldi	r21, 0x00	; 0
 788:	55 1f       	adc	r21, r21
 78a:	62 9f       	mul	r22, r18
 78c:	f0 01       	movw	r30, r0
 78e:	72 9f       	mul	r23, r18
 790:	bb 27       	eor	r27, r27
 792:	f0 0d       	add	r31, r0
 794:	b1 1d       	adc	r27, r1
 796:	63 9f       	mul	r22, r19
 798:	aa 27       	eor	r26, r26
 79a:	f0 0d       	add	r31, r0
 79c:	b1 1d       	adc	r27, r1
 79e:	aa 1f       	adc	r26, r26
 7a0:	64 9f       	mul	r22, r20
 7a2:	66 27       	eor	r22, r22
 7a4:	b0 0d       	add	r27, r0
 7a6:	a1 1d       	adc	r26, r1
 7a8:	66 1f       	adc	r22, r22
 7aa:	82 9f       	mul	r24, r18
 7ac:	22 27       	eor	r18, r18
 7ae:	b0 0d       	add	r27, r0
 7b0:	a1 1d       	adc	r26, r1
 7b2:	62 1f       	adc	r22, r18
 7b4:	73 9f       	mul	r23, r19
 7b6:	b0 0d       	add	r27, r0
 7b8:	a1 1d       	adc	r26, r1
 7ba:	62 1f       	adc	r22, r18
 7bc:	83 9f       	mul	r24, r19
 7be:	a0 0d       	add	r26, r0
 7c0:	61 1d       	adc	r22, r1
 7c2:	22 1f       	adc	r18, r18
 7c4:	74 9f       	mul	r23, r20
 7c6:	33 27       	eor	r19, r19
 7c8:	a0 0d       	add	r26, r0
 7ca:	61 1d       	adc	r22, r1
 7cc:	23 1f       	adc	r18, r19
 7ce:	84 9f       	mul	r24, r20
 7d0:	60 0d       	add	r22, r0
 7d2:	21 1d       	adc	r18, r1
 7d4:	82 2f       	mov	r24, r18
 7d6:	76 2f       	mov	r23, r22
 7d8:	6a 2f       	mov	r22, r26
 7da:	11 24       	eor	r1, r1
 7dc:	9f 57       	subi	r25, 0x7F	; 127
 7de:	50 40       	sbci	r21, 0x00	; 0
 7e0:	8a f0       	brmi	.+34     	; 0x804 <__mulsf3_pse+0x84>
 7e2:	e1 f0       	breq	.+56     	; 0x81c <__mulsf3_pse+0x9c>
 7e4:	88 23       	and	r24, r24
 7e6:	4a f0       	brmi	.+18     	; 0x7fa <__mulsf3_pse+0x7a>
 7e8:	ee 0f       	add	r30, r30
 7ea:	ff 1f       	adc	r31, r31
 7ec:	bb 1f       	adc	r27, r27
 7ee:	66 1f       	adc	r22, r22
 7f0:	77 1f       	adc	r23, r23
 7f2:	88 1f       	adc	r24, r24
 7f4:	91 50       	subi	r25, 0x01	; 1
 7f6:	50 40       	sbci	r21, 0x00	; 0
 7f8:	a9 f7       	brne	.-22     	; 0x7e4 <__mulsf3_pse+0x64>
 7fa:	9e 3f       	cpi	r25, 0xFE	; 254
 7fc:	51 05       	cpc	r21, r1
 7fe:	70 f0       	brcs	.+28     	; 0x81c <__mulsf3_pse+0x9c>
 800:	79 c0       	rjmp	.+242    	; 0x8f4 <__fp_inf>
 802:	77 cf       	rjmp	.-274    	; 0x6f2 <__fp_szero>
 804:	5f 3f       	cpi	r21, 0xFF	; 255
 806:	ec f3       	brlt	.-6      	; 0x802 <__mulsf3_pse+0x82>
 808:	98 3e       	cpi	r25, 0xE8	; 232
 80a:	dc f3       	brlt	.-10     	; 0x802 <__mulsf3_pse+0x82>
 80c:	86 95       	lsr	r24
 80e:	77 95       	ror	r23
 810:	67 95       	ror	r22
 812:	b7 95       	ror	r27
 814:	f7 95       	ror	r31
 816:	e7 95       	ror	r30
 818:	9f 5f       	subi	r25, 0xFF	; 255
 81a:	c1 f7       	brne	.-16     	; 0x80c <__mulsf3_pse+0x8c>
 81c:	fe 2b       	or	r31, r30
 81e:	88 0f       	add	r24, r24
 820:	91 1d       	adc	r25, r1
 822:	96 95       	lsr	r25
 824:	87 95       	ror	r24
 826:	97 f9       	bld	r25, 7
 828:	08 95       	ret

0000082a <__subsf3>:
 82a:	50 58       	subi	r21, 0x80	; 128

0000082c <__addsf3>:
 82c:	bb 27       	eor	r27, r27
 82e:	aa 27       	eor	r26, r26
 830:	0e d0       	rcall	.+28     	; 0x84e <__addsf3x>
 832:	77 c0       	rjmp	.+238    	; 0x922 <__fp_round>
 834:	68 d0       	rcall	.+208    	; 0x906 <__fp_pscA>
 836:	30 f0       	brcs	.+12     	; 0x844 <__addsf3+0x18>
 838:	6d d0       	rcall	.+218    	; 0x914 <__fp_pscB>
 83a:	20 f0       	brcs	.+8      	; 0x844 <__addsf3+0x18>
 83c:	31 f4       	brne	.+12     	; 0x84a <__addsf3+0x1e>
 83e:	9f 3f       	cpi	r25, 0xFF	; 255
 840:	11 f4       	brne	.+4      	; 0x846 <__addsf3+0x1a>
 842:	1e f4       	brtc	.+6      	; 0x84a <__addsf3+0x1e>
 844:	5d c0       	rjmp	.+186    	; 0x900 <__fp_nan>
 846:	0e f4       	brtc	.+2      	; 0x84a <__addsf3+0x1e>
 848:	e0 95       	com	r30
 84a:	e7 fb       	bst	r30, 7
 84c:	53 c0       	rjmp	.+166    	; 0x8f4 <__fp_inf>

0000084e <__addsf3x>:
 84e:	e9 2f       	mov	r30, r25
 850:	2d df       	rcall	.-422    	; 0x6ac <__fp_split3>
 852:	80 f3       	brcs	.-32     	; 0x834 <__addsf3+0x8>
 854:	ba 17       	cp	r27, r26
 856:	62 07       	cpc	r22, r18
 858:	73 07       	cpc	r23, r19
 85a:	84 07       	cpc	r24, r20
 85c:	95 07       	cpc	r25, r21
 85e:	18 f0       	brcs	.+6      	; 0x866 <__addsf3x+0x18>
 860:	71 f4       	brne	.+28     	; 0x87e <__addsf3x+0x30>
 862:	9e f5       	brtc	.+102    	; 0x8ca <__addsf3x+0x7c>
 864:	45 cf       	rjmp	.-374    	; 0x6f0 <__fp_zero>
 866:	0e f4       	brtc	.+2      	; 0x86a <__addsf3x+0x1c>
 868:	e0 95       	com	r30
 86a:	0b 2e       	mov	r0, r27
 86c:	ba 2f       	mov	r27, r26
 86e:	a0 2d       	mov	r26, r0
 870:	0b 01       	movw	r0, r22
 872:	b9 01       	movw	r22, r18
 874:	90 01       	movw	r18, r0
 876:	0c 01       	movw	r0, r24
 878:	ca 01       	movw	r24, r20
 87a:	a0 01       	movw	r20, r0
 87c:	11 24       	eor	r1, r1
 87e:	ff 27       	eor	r31, r31
 880:	59 1b       	sub	r21, r25
 882:	99 f0       	breq	.+38     	; 0x8aa <__addsf3x+0x5c>
 884:	59 3f       	cpi	r21, 0xF9	; 249
 886:	50 f4       	brcc	.+20     	; 0x89c <__addsf3x+0x4e>
 888:	50 3e       	cpi	r21, 0xE0	; 224
 88a:	68 f1       	brcs	.+90     	; 0x8e6 <__addsf3x+0x98>
 88c:	1a 16       	cp	r1, r26
 88e:	f0 40       	sbci	r31, 0x00	; 0
 890:	a2 2f       	mov	r26, r18
 892:	23 2f       	mov	r18, r19
 894:	34 2f       	mov	r19, r20
 896:	44 27       	eor	r20, r20
 898:	58 5f       	subi	r21, 0xF8	; 248
 89a:	f3 cf       	rjmp	.-26     	; 0x882 <__addsf3x+0x34>
 89c:	46 95       	lsr	r20
 89e:	37 95       	ror	r19
 8a0:	27 95       	ror	r18
 8a2:	a7 95       	ror	r26
 8a4:	f0 40       	sbci	r31, 0x00	; 0
 8a6:	53 95       	inc	r21
 8a8:	c9 f7       	brne	.-14     	; 0x89c <__addsf3x+0x4e>
 8aa:	7e f4       	brtc	.+30     	; 0x8ca <__addsf3x+0x7c>
 8ac:	1f 16       	cp	r1, r31
 8ae:	ba 0b       	sbc	r27, r26
 8b0:	62 0b       	sbc	r22, r18
 8b2:	73 0b       	sbc	r23, r19
 8b4:	84 0b       	sbc	r24, r20
 8b6:	ba f0       	brmi	.+46     	; 0x8e6 <__addsf3x+0x98>
 8b8:	91 50       	subi	r25, 0x01	; 1
 8ba:	a1 f0       	breq	.+40     	; 0x8e4 <__addsf3x+0x96>
 8bc:	ff 0f       	add	r31, r31
 8be:	bb 1f       	adc	r27, r27
 8c0:	66 1f       	adc	r22, r22
 8c2:	77 1f       	adc	r23, r23
 8c4:	88 1f       	adc	r24, r24
 8c6:	c2 f7       	brpl	.-16     	; 0x8b8 <__addsf3x+0x6a>
 8c8:	0e c0       	rjmp	.+28     	; 0x8e6 <__addsf3x+0x98>
 8ca:	ba 0f       	add	r27, r26
 8cc:	62 1f       	adc	r22, r18
 8ce:	73 1f       	adc	r23, r19
 8d0:	84 1f       	adc	r24, r20
 8d2:	48 f4       	brcc	.+18     	; 0x8e6 <__addsf3x+0x98>
 8d4:	87 95       	ror	r24
 8d6:	77 95       	ror	r23
 8d8:	67 95       	ror	r22
 8da:	b7 95       	ror	r27
 8dc:	f7 95       	ror	r31
 8de:	9e 3f       	cpi	r25, 0xFE	; 254
 8e0:	08 f0       	brcs	.+2      	; 0x8e4 <__addsf3x+0x96>
 8e2:	b3 cf       	rjmp	.-154    	; 0x84a <__addsf3+0x1e>
 8e4:	93 95       	inc	r25
 8e6:	88 0f       	add	r24, r24
 8e8:	08 f0       	brcs	.+2      	; 0x8ec <__addsf3x+0x9e>
 8ea:	99 27       	eor	r25, r25
 8ec:	ee 0f       	add	r30, r30
 8ee:	97 95       	ror	r25
 8f0:	87 95       	ror	r24
 8f2:	08 95       	ret

000008f4 <__fp_inf>:
 8f4:	97 f9       	bld	r25, 7
 8f6:	9f 67       	ori	r25, 0x7F	; 127
 8f8:	80 e8       	ldi	r24, 0x80	; 128
 8fa:	70 e0       	ldi	r23, 0x00	; 0
 8fc:	60 e0       	ldi	r22, 0x00	; 0
 8fe:	08 95       	ret

00000900 <__fp_nan>:
 900:	9f ef       	ldi	r25, 0xFF	; 255
 902:	80 ec       	ldi	r24, 0xC0	; 192
 904:	08 95       	ret

00000906 <__fp_pscA>:
 906:	00 24       	eor	r0, r0
 908:	0a 94       	dec	r0
 90a:	16 16       	cp	r1, r22
 90c:	17 06       	cpc	r1, r23
 90e:	18 06       	cpc	r1, r24
 910:	09 06       	cpc	r0, r25
 912:	08 95       	ret

00000914 <__fp_pscB>:
 914:	00 24       	eor	r0, r0
 916:	0a 94       	dec	r0
 918:	12 16       	cp	r1, r18
 91a:	13 06       	cpc	r1, r19
 91c:	14 06       	cpc	r1, r20
 91e:	05 06       	cpc	r0, r21
 920:	08 95       	ret

00000922 <__fp_round>:
 922:	09 2e       	mov	r0, r25
 924:	03 94       	inc	r0
 926:	00 0c       	add	r0, r0
 928:	11 f4       	brne	.+4      	; 0x92e <__fp_round+0xc>
 92a:	88 23       	and	r24, r24
 92c:	52 f0       	brmi	.+20     	; 0x942 <__fp_round+0x20>
 92e:	bb 0f       	add	r27, r27
 930:	40 f4       	brcc	.+16     	; 0x942 <__fp_round+0x20>
 932:	bf 2b       	or	r27, r31
 934:	11 f4       	brne	.+4      	; 0x93a <__fp_round+0x18>
 936:	60 ff       	sbrs	r22, 0
 938:	04 c0       	rjmp	.+8      	; 0x942 <__fp_round+0x20>
 93a:	6f 5f       	subi	r22, 0xFF	; 255
 93c:	7f 4f       	sbci	r23, 0xFF	; 255
 93e:	8f 4f       	sbci	r24, 0xFF	; 255
 940:	9f 4f       	sbci	r25, 0xFF	; 255
 942:	08 95       	ret

00000944 <__mulsi3>:
 944:	62 9f       	mul	r22, r18
 946:	d0 01       	movw	r26, r0
 948:	73 9f       	mul	r23, r19
 94a:	f0 01       	movw	r30, r0
 94c:	82 9f       	mul	r24, r18
 94e:	e0 0d       	add	r30, r0
 950:	f1 1d       	adc	r31, r1
 952:	64 9f       	mul	r22, r20
 954:	e0 0d       	add	r30, r0
 956:	f1 1d       	adc	r31, r1
 958:	92 9f       	mul	r25, r18
 95a:	f0 0d       	add	r31, r0
 95c:	83 9f       	mul	r24, r19
 95e:	f0 0d       	add	r31, r0
 960:	74 9f       	mul	r23, r20
 962:	f0 0d       	add	r31, r0
 964:	65 9f       	mul	r22, r21
 966:	f0 0d       	add	r31, r0
 968:	99 27       	eor	r25, r25
 96a:	72 9f       	mul	r23, r18
 96c:	b0 0d       	add	r27, r0
 96e:	e1 1d       	adc	r30, r1
 970:	f9 1f       	adc	r31, r25
 972:	63 9f       	mul	r22, r19
 974:	b0 0d       	add	r27, r0
 976:	e1 1d       	adc	r30, r1
 978:	f9 1f       	adc	r31, r25
 97a:	bd 01       	movw	r22, r26
 97c:	cf 01       	movw	r24, r30
 97e:	11 24       	eor	r1, r1
 980:	08 95       	ret

00000982 <__udivmodhi4>:
 982:	aa 1b       	sub	r26, r26
 984:	bb 1b       	sub	r27, r27
 986:	51 e1       	ldi	r21, 0x11	; 17
 988:	07 c0       	rjmp	.+14     	; 0x998 <__udivmodhi4_ep>

0000098a <__udivmodhi4_loop>:
 98a:	aa 1f       	adc	r26, r26
 98c:	bb 1f       	adc	r27, r27
 98e:	a6 17       	cp	r26, r22
 990:	b7 07       	cpc	r27, r23
 992:	10 f0       	brcs	.+4      	; 0x998 <__udivmodhi4_ep>
 994:	a6 1b       	sub	r26, r22
 996:	b7 0b       	sbc	r27, r23

00000998 <__udivmodhi4_ep>:
 998:	88 1f       	adc	r24, r24
 99a:	99 1f       	adc	r25, r25
 99c:	5a 95       	dec	r21
 99e:	a9 f7       	brne	.-22     	; 0x98a <__udivmodhi4_loop>
 9a0:	80 95       	com	r24
 9a2:	90 95       	com	r25
 9a4:	bc 01       	movw	r22, r24
 9a6:	cd 01       	movw	r24, r26
 9a8:	08 95       	ret

000009aa <__udivmodsi4>:
 9aa:	a1 e2       	ldi	r26, 0x21	; 33
 9ac:	1a 2e       	mov	r1, r26
 9ae:	aa 1b       	sub	r26, r26
 9b0:	bb 1b       	sub	r27, r27
 9b2:	fd 01       	movw	r30, r26
 9b4:	0d c0       	rjmp	.+26     	; 0x9d0 <__udivmodsi4_ep>

000009b6 <__udivmodsi4_loop>:
 9b6:	aa 1f       	adc	r26, r26
 9b8:	bb 1f       	adc	r27, r27
 9ba:	ee 1f       	adc	r30, r30
 9bc:	ff 1f       	adc	r31, r31
 9be:	a2 17       	cp	r26, r18
 9c0:	b3 07       	cpc	r27, r19
 9c2:	e4 07       	cpc	r30, r20
 9c4:	f5 07       	cpc	r31, r21
 9c6:	20 f0       	brcs	.+8      	; 0x9d0 <__udivmodsi4_ep>
 9c8:	a2 1b       	sub	r26, r18
 9ca:	b3 0b       	sbc	r27, r19
 9cc:	e4 0b       	sbc	r30, r20
 9ce:	f5 0b       	sbc	r31, r21

000009d0 <__udivmodsi4_ep>:
 9d0:	66 1f       	adc	r22, r22
 9d2:	77 1f       	adc	r23, r23
 9d4:	88 1f       	adc	r24, r24
 9d6:	99 1f       	adc	r25, r25
 9d8:	1a 94       	dec	r1
 9da:	69 f7       	brne	.-38     	; 0x9b6 <__udivmodsi4_loop>
 9dc:	60 95       	com	r22
 9de:	70 95       	com	r23
 9e0:	80 95       	com	r24
 9e2:	90 95       	com	r25
 9e4:	9b 01       	movw	r18, r22
 9e6:	ac 01       	movw	r20, r24
 9e8:	bd 01       	movw	r22, r26
 9ea:	cf 01       	movw	r24, r30
 9ec:	08 95       	ret

000009ee <_exit>:
 9ee:	f8 94       	cli

000009f0 <__stop_program>:
 9f0:	ff cf       	rjmp	.-2      	; 0x9f0 <__stop_program>
