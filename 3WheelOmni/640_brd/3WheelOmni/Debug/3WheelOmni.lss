
3WheelOmni.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800200  00000b4a  00000bde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002b  00800228  00800228  00000c06  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c06  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  00000c36  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001633  00000000  00000000  00000d66  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000424  00000000  00000000  00002399  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006c0  00000000  00000000  000027bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000468  00000000  00000000  00002e80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c2  00000000  00000000  000032e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001359  00000000  00000000  000037aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000150  00000000  00000000  00004b03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	ea e4       	ldi	r30, 0x4A	; 74
  f8:	fb e0       	ldi	r31, 0x0B	; 11
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	a8 32       	cpi	r26, 0x28	; 40
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
 106:	22 e0       	ldi	r18, 0x02	; 2
 108:	a8 e2       	ldi	r26, 0x28	; 40
 10a:	b2 e0       	ldi	r27, 0x02	; 2
 10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
 10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
 110:	a3 35       	cpi	r26, 0x53	; 83
 112:	b2 07       	cpc	r27, r18
 114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
 116:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <main>
 11a:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <_exit>

0000011e <__bad_interrupt>:
 11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <_psx_gamepad_shift>:
		{
			OmniDrive3Wheel(2000, Angle,Adjustment);		
			if (Enc_X()>cde)
			{
				Adjustment -= abc;
				if (Enc_X()>cde*4)
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	a8 2f       	mov	r26, r24
 128:	f8 94       	cli
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	41 e0       	ldi	r20, 0x01	; 1
 132:	50 e0       	ldi	r21, 0x00	; 0
 134:	b0 e0       	ldi	r27, 0x00	; 0
 136:	e0 91 4f 02 	lds	r30, 0x024F
 13a:	f0 91 50 02 	lds	r31, 0x0250
				{
					ResetEnc_X();
 13e:	90 81       	ld	r25, Z
 140:	ba 01       	movw	r22, r20
	OCR4A = Speed[2];			//back right
}


void Omni_Enc_Drive(int Angle, uint64_t Dist)		//int mm
{
 142:	00 90 40 02 	lds	r0, 0x0240
	return a;
}

uint32_t Enc_Y(void)
{
	return TCNT1;
 146:	02 c0       	rjmp	.+4      	; 0x14c <_psx_gamepad_shift+0x2a>
 148:	66 0f       	add	r22, r22
 14a:	77 1f       	adc	r23, r23
	switch (Angle)
	{
		case 0:	case 180:
		Y_ppr = (Enc_ppr*Dist)/Enc_Diameter;
		CLEARBIT(DDRE,BIT(4));
		while (Enc_Y() <= Y_ppr)
 14c:	0a 94       	dec	r0
 14e:	e2 f7       	brpl	.-8      	; 0x148 <_psx_gamepad_shift+0x26>
 150:	60 95       	com	r22
 152:	69 23       	and	r22, r25
 154:	60 83       	st	Z, r22
 156:	92 2f       	mov	r25, r18
 158:	bd 01       	movw	r22, r26
 15a:	02 2e       	mov	r0, r18
 15c:	02 c0       	rjmp	.+4      	; 0x162 <_psx_gamepad_shift+0x40>
 15e:	75 95       	asr	r23
 160:	67 95       	ror	r22
 162:	0a 94       	dec	r0
 164:	e2 f7       	brpl	.-8      	; 0x15e <_psx_gamepad_shift+0x3c>
		/*
		check the rotation parameter(Adjustment)
		check for Directions
		Adjust the value of Adjustment parameter accordingly
		*/
		SETBIT(DDRE,BIT(4));
 166:	60 ff       	sbrs	r22, 0
		break;
 168:	10 c0       	rjmp	.+32     	; 0x18a <_psx_gamepad_shift+0x68>
		
		case 90: case -90:
		break;
		
		default:
			Ratio = (sin(Angle))/(cos(Angle));
 16a:	e0 91 4d 02 	lds	r30, 0x024D
 16e:	f0 91 4e 02 	lds	r31, 0x024E
 172:	60 81       	ld	r22, Z
 174:	ea 01       	movw	r28, r20
 176:	00 90 3f 02 	lds	r0, 0x023F
 17a:	02 c0       	rjmp	.+4      	; 0x180 <_psx_gamepad_shift+0x5e>
 17c:	cc 0f       	add	r28, r28
 17e:	dd 1f       	adc	r29, r29
 180:	0a 94       	dec	r0
 182:	e2 f7       	brpl	.-8      	; 0x17c <_psx_gamepad_shift+0x5a>
 184:	c6 2b       	or	r28, r22
 186:	c0 83       	st	Z, r28
 188:	10 c0       	rjmp	.+32     	; 0x1aa <_psx_gamepad_shift+0x88>
 18a:	e0 91 4d 02 	lds	r30, 0x024D
 18e:	f0 91 4e 02 	lds	r31, 0x024E
 192:	60 81       	ld	r22, Z
 194:	ea 01       	movw	r28, r20
 196:	00 90 3f 02 	lds	r0, 0x023F
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <_psx_gamepad_shift+0x7e>
 19c:	cc 0f       	add	r28, r28
 19e:	dd 1f       	adc	r29, r29
 1a0:	0a 94       	dec	r0
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <_psx_gamepad_shift+0x7a>
			Y_ppr = (Enc_ppr*(Dist*cos(Angle)))/Enc_Diameter;
 1a4:	c0 95       	com	r28
 1a6:	c6 23       	and	r28, r22
 1a8:	c0 83       	st	Z, r28
 1aa:	61 e3       	ldi	r22, 0x31	; 49
 1ac:	6a 95       	dec	r22
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <_psx_gamepad_shift+0x8a>
 1b0:	00 00       	nop
 1b2:	e0 91 4f 02 	lds	r30, 0x024F
 1b6:	f0 91 50 02 	lds	r31, 0x0250
 1ba:	c0 81       	ld	r28, Z
 1bc:	ba 01       	movw	r22, r20
 1be:	00 90 40 02 	lds	r0, 0x0240
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <_psx_gamepad_shift+0xa6>
 1c4:	66 0f       	add	r22, r22
 1c6:	77 1f       	adc	r23, r23
 1c8:	0a 94       	dec	r0
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <_psx_gamepad_shift+0xa2>
 1cc:	6c 2b       	or	r22, r28
 1ce:	60 83       	st	Z, r22
 1d0:	e0 91 49 02 	lds	r30, 0x0249
 1d4:	f0 91 4a 02 	lds	r31, 0x024A
 1d8:	60 81       	ld	r22, Z
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	00 90 3d 02 	lds	r0, 0x023D

}

void lcd_gotoxy1(unsigned char pos)
{
	lcd_cmd(LINE1+pos);
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <_psx_gamepad_shift+0xc4>
 1e2:	75 95       	asr	r23
 1e4:	67 95       	ror	r22
			lcd_gotoxy1(8);
			lcd_showvaluef(Y_ppr);
 1e6:	0a 94       	dec	r0
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <_psx_gamepad_shift+0xc0>
 1ea:	60 ff       	sbrs	r22, 0
 1ec:	07 c0       	rjmp	.+14     	; 0x1fc <_psx_gamepad_shift+0xda>
 1ee:	ba 01       	movw	r22, r20
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <_psx_gamepad_shift+0xd4>
			//lcd_showvalue(Y_ppr%100);
			while (Enc_Y() < Y_ppr)
 1f2:	66 0f       	add	r22, r22
			{
				OmniDrive3Wheel(1000, Angle,0);
 1f4:	77 1f       	adc	r23, r23
 1f6:	9a 95       	dec	r25
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <_psx_gamepad_shift+0xd0>
 1fa:	86 2b       	or	r24, r22
 1fc:	91 e3       	ldi	r25, 0x31	; 49
 1fe:	9a 95       	dec	r25
 200:	f1 f7       	brne	.-4      	; 0x1fe <_psx_gamepad_shift+0xdc>
 202:	00 00       	nop
 204:	2f 5f       	subi	r18, 0xFF	; 255
 206:	3f 4f       	sbci	r19, 0xFF	; 255
				C_Ratio = Enc_X()/Enc_Y();
 208:	28 30       	cpi	r18, 0x08	; 8
 20a:	31 05       	cpc	r19, r1
 20c:	09 f0       	breq	.+2      	; 0x210 <_psx_gamepad_shift+0xee>
 20e:	93 cf       	rjmp	.-218    	; 0x136 <_psx_gamepad_shift+0x14>
 210:	e0 91 4f 02 	lds	r30, 0x024F
 214:	f0 91 50 02 	lds	r31, 0x0250
 218:	90 81       	ld	r25, Z
 21a:	41 e0       	ldi	r20, 0x01	; 1
 21c:	50 e0       	ldi	r21, 0x00	; 0
 21e:	9a 01       	movw	r18, r20
 220:	00 90 40 02 	lds	r0, 0x0240
 224:	02 c0       	rjmp	.+4      	; 0x22a <_psx_gamepad_shift+0x108>
				if (C_Ratio > Ratio)
 226:	22 0f       	add	r18, r18
 228:	33 1f       	adc	r19, r19
 22a:	0a 94       	dec	r0
 22c:	e2 f7       	brpl	.-8      	; 0x226 <_psx_gamepad_shift+0x104>
 22e:	29 2b       	or	r18, r25
 230:	20 83       	st	Z, r18
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
				{
					if (Am < cde)
 236:	08 95       	ret

00000238 <_psx_send_command>:
 238:	0f 93       	push	r16
 23a:	1f 93       	push	r17
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	06 2f       	mov	r16, r22
 242:	f8 94       	cli
					{
						Am++;
 244:	e0 91 4b 02 	lds	r30, 0x024B
 248:	f0 91 4c 02 	lds	r31, 0x024C
					}
					else 
					{
						Am = 0;
						Angle--;
 24c:	60 81       	ld	r22, Z
 24e:	21 e0       	ldi	r18, 0x01	; 1
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	a9 01       	movw	r20, r18
 254:	00 90 3e 02 	lds	r0, 0x023E
					{
						Am++;
					}
					else 
					{
						Am = 0;
 258:	02 c0       	rjmp	.+4      	; 0x25e <_psx_send_command+0x26>
 25a:	44 0f       	add	r20, r20
 25c:	55 1f       	adc	r21, r21
						Angle--;
					}
				}
				else if(C_Ratio < Ratio)
 25e:	0a 94       	dec	r0
 260:	e2 f7       	brpl	.-8      	; 0x25a <_psx_send_command+0x22>
 262:	40 95       	com	r20
 264:	46 23       	and	r20, r22
 266:	40 83       	st	Z, r20
 268:	e0 91 4d 02 	lds	r30, 0x024D
 26c:	f0 91 4e 02 	lds	r31, 0x024E
				{
					if (Ap < cde)
 270:	60 81       	ld	r22, Z
 272:	a9 01       	movw	r20, r18
 274:	00 90 3f 02 	lds	r0, 0x023F
 278:	02 c0       	rjmp	.+4      	; 0x27e <_psx_send_command+0x46>
 27a:	44 0f       	add	r20, r20
 27c:	55 1f       	adc	r21, r21
 27e:	0a 94       	dec	r0
					{
						Ap++;
 280:	e2 f7       	brpl	.-8      	; 0x27a <_psx_send_command+0x42>
 282:	46 2b       	or	r20, r22
 284:	40 83       	st	Z, r20
 286:	e0 91 4f 02 	lds	r30, 0x024F
					}
					else
					{
						Ap = 0;
						Angle--;
 28a:	f0 91 50 02 	lds	r31, 0x0250
 28e:	40 81       	ld	r20, Z
 290:	00 90 40 02 	lds	r0, 0x0240
					{
						Ap++;
					}
					else
					{
						Ap = 0;
 294:	02 c0       	rjmp	.+4      	; 0x29a <_psx_send_command+0x62>
 296:	22 0f       	add	r18, r18
 298:	33 1f       	adc	r19, r19
						Angle--;
					}
				}
				else
				{
					Am = 0;
 29a:	0a 94       	dec	r0
 29c:	e2 f7       	brpl	.-8      	; 0x296 <_psx_send_command+0x5e>
					Ap = 0;
 29e:	24 2b       	or	r18, r20
 2a0:	20 83       	st	Z, r18
 2a2:	00 23       	and	r16, r16
 2a4:	51 f0       	breq	.+20     	; 0x2ba <_psx_send_command+0x82>
 2a6:	c8 2f       	mov	r28, r24
			Ratio = (sin(Angle))/(cos(Angle));
			Y_ppr = (Enc_ppr*(Dist*cos(Angle)))/Enc_Diameter;
			lcd_gotoxy1(8);
			lcd_showvaluef(Y_ppr);
			//lcd_showvalue(Y_ppr%100);
			while (Enc_Y() < Y_ppr)
 2a8:	d9 2f       	mov	r29, r25
 2aa:	10 e0       	ldi	r17, 0x00	; 0
 2ac:	88 81       	ld	r24, Y
 2ae:	0e 94 91 00 	call	0x122	; 0x122 <_psx_gamepad_shift>
 2b2:	89 93       	st	Y+, r24
 2b4:	1f 5f       	subi	r17, 0xFF	; 255
 2b6:	10 13       	cpse	r17, r16
 2b8:	f9 cf       	rjmp	.-14     	; 0x2ac <_psx_send_command+0x74>
 2ba:	e0 91 4b 02 	lds	r30, 0x024B
 2be:	f0 91 4c 02 	lds	r31, 0x024C
				}
			}
				
		break;
	}
	OmniStop();
 2c2:	40 81       	ld	r20, Z
 2c4:	21 e0       	ldi	r18, 0x01	; 1
}
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	c9 01       	movw	r24, r18
 2ca:	00 90 3e 02 	lds	r0, 0x023E
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <_psx_send_command+0x9c>
 2d0:	88 0f       	add	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	0a 94       	dec	r0
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <_psx_send_command+0x98>
 2d8:	84 2b       	or	r24, r20
 2da:	80 83       	st	Z, r24
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	1f 91       	pop	r17
 2e2:	0f 91       	pop	r16
 2e4:	08 95       	ret

000002e6 <psx_read_gamepad>:
 2e6:	f8 94       	cli
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	80 93 28 02 	sts	0x0228, r24
 2ee:	82 e4       	ldi	r24, 0x42	; 66
 2f0:	80 93 29 02 	sts	0x0229, r24
 2f4:	ea e2       	ldi	r30, 0x2A	; 42
 2f6:	f2 e0       	ldi	r31, 0x02	; 2
/* Reads the gamepad.  You need to call this whenever you want updated state.
 */
void psx_read_gamepad(void) {
	cli();
  _data[0] = 0x01;
  _data[1] = 0x42;
 2f8:	8d e3       	ldi	r24, 0x3D	; 61
 2fa:	92 e0       	ldi	r25, 0x02	; 2
  for (uint8_t i = 2; i < 21; i++){
    _data[i] = 0x00;
 2fc:	11 92       	st	Z+, r1
 */
void psx_read_gamepad(void) {
	cli();
  _data[0] = 0x01;
  _data[1] = 0x42;
  for (uint8_t i = 2; i < 21; i++){
 2fe:	e8 17       	cp	r30, r24
 300:	f9 07       	cpc	r31, r25
 302:	e1 f7       	brne	.-8      	; 0x2fc <psx_read_gamepad+0x16>
    _data[i] = 0x00;
  }
  _psx_send_command(_data, 21);
 304:	65 e1       	ldi	r22, 0x15	; 21
 306:	88 e2       	ldi	r24, 0x28	; 40
 308:	92 e0       	ldi	r25, 0x02	; 2
 30a:	0e 94 1c 01 	call	0x238	; 0x238 <_psx_send_command>
  sei();
 30e:	78 94       	sei
 310:	08 95       	ret

00000312 <psx_init>:
 * equivalents, with DDRX at the next address after PORTX and PINX coming at the next
 * address after DDRX.  This is valid for all the chips I have looked at; however, it is
 * highly recommended that you check any new chips which you want to use this library with.
 */
void psx_init(volatile uint8_t *data_port, uint8_t data_pin,volatile uint8_t *clock_port, uint8_t clock_pin,volatile uint8_t *command_port, uint8_t command_pin,volatile uint8_t *attention_port, uint8_t attention_pin)
{
 312:	2f 92       	push	r2
 314:	3f 92       	push	r3
 316:	4f 92       	push	r4
 318:	5f 92       	push	r5
 31a:	6f 92       	push	r6
 31c:	7f 92       	push	r7
 31e:	8f 92       	push	r8
 320:	9f 92       	push	r9
 322:	af 92       	push	r10
 324:	bf 92       	push	r11
 326:	cf 92       	push	r12
 328:	df 92       	push	r13
 32a:	ef 92       	push	r14
 32c:	ff 92       	push	r15
 32e:	0f 93       	push	r16
 330:	1f 93       	push	r17
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	cd b7       	in	r28, 0x3d	; 61
 338:	de b7       	in	r29, 0x3e	; 62
 33a:	67 97       	sbiw	r28, 0x17	; 23
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	f8 94       	cli
 340:	de bf       	out	0x3e, r29	; 62
 342:	0f be       	out	0x3f, r0	; 63
 344:	cd bf       	out	0x3d, r28	; 61
 346:	18 01       	movw	r2, r16
	cli();
 348:	f8 94       	cli
  //Store the ports...
  _data_port = data_port;
 34a:	90 93 52 02 	sts	0x0252, r25
 34e:	80 93 51 02 	sts	0x0251, r24
  _clock_port = clock_port;
 352:	50 93 50 02 	sts	0x0250, r21
 356:	40 93 4f 02 	sts	0x024F, r20
  _command_port = command_port;
 35a:	10 93 4e 02 	sts	0x024E, r17
 35e:	00 93 4d 02 	sts	0x024D, r16
  _attention_port = attention_port;
 362:	d0 92 4c 02 	sts	0x024C, r13
 366:	c0 92 4b 02 	sts	0x024B, r12
  
  //... and data direction registers...
  _data_ddr = data_port - 0x1;
 36a:	8c 01       	movw	r16, r24
 36c:	01 50       	subi	r16, 0x01	; 1
 36e:	11 09       	sbc	r17, r1
 370:	10 93 48 02 	sts	0x0248, r17
 374:	00 93 47 02 	sts	0x0247, r16
  _clock_ddr = clock_port - 0x1;
 378:	3a 01       	movw	r6, r20
 37a:	31 e0       	ldi	r19, 0x01	; 1
 37c:	63 1a       	sub	r6, r19
 37e:	71 08       	sbc	r7, r1
 380:	70 92 46 02 	sts	0x0246, r7
 384:	60 92 45 02 	sts	0x0245, r6
  _command_ddr = command_port - 0x1;
 388:	41 01       	movw	r8, r2
 38a:	a1 e0       	ldi	r26, 0x01	; 1
 38c:	8a 1a       	sub	r8, r26
 38e:	91 08       	sbc	r9, r1
 390:	90 92 44 02 	sts	0x0244, r9
 394:	80 92 43 02 	sts	0x0243, r8
  _attention_ddr = attention_port - 0x1;
 398:	b1 e0       	ldi	r27, 0x01	; 1
 39a:	cb 1a       	sub	r12, r27
 39c:	d1 08       	sbc	r13, r1
 39e:	d0 92 42 02 	sts	0x0242, r13
 3a2:	c0 92 41 02 	sts	0x0241, r12

  //... and data input register...
  _data_in = data_port - 0x2;
 3a6:	dc 01       	movw	r26, r24
 3a8:	12 97       	sbiw	r26, 0x02	; 2
 3aa:	b0 93 4a 02 	sts	0x024A, r27
 3ae:	a0 93 49 02 	sts	0x0249, r26

  //... and pin numbers.
  _clock_pin = clock_pin;
 3b2:	20 93 40 02 	sts	0x0240, r18
  _command_pin = command_pin;
 3b6:	e0 92 3f 02 	sts	0x023F, r14
  _attention_pin = attention_pin;
 3ba:	a0 92 3e 02 	sts	0x023E, r10
  _data_pin = data_pin;
 3be:	60 93 3d 02 	sts	0x023D, r22
  
  
  //Set clock, attention, and command pins to output mode
  *_clock_ddr |= _BV(_clock_pin);
 3c2:	f3 01       	movw	r30, r6
 3c4:	70 81       	ld	r23, Z
 3c6:	a1 e0       	ldi	r26, 0x01	; 1
 3c8:	b0 e0       	ldi	r27, 0x00	; 0
 3ca:	2d 01       	movw	r4, r26
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <psx_init+0xc0>
 3ce:	44 0c       	add	r4, r4
 3d0:	55 1c       	adc	r5, r5
 3d2:	2a 95       	dec	r18
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <psx_init+0xbc>
 3d6:	92 01       	movw	r18, r4
 3d8:	37 2f       	mov	r19, r23
 3da:	32 2b       	or	r19, r18
 3dc:	30 83       	st	Z, r19
  *_attention_ddr |= _BV(_attention_pin);
 3de:	f6 01       	movw	r30, r12
 3e0:	30 81       	ld	r19, Z
 3e2:	2d 01       	movw	r4, r26
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <psx_init+0xd8>
 3e6:	44 0c       	add	r4, r4
 3e8:	55 1c       	adc	r5, r5
 3ea:	aa 94       	dec	r10
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <psx_init+0xd4>
 3ee:	52 01       	movw	r10, r4
 3f0:	a3 2a       	or	r10, r19
 3f2:	a0 82       	st	Z, r10
  *_command_ddr |= _BV(_command_pin);
 3f4:	f4 01       	movw	r30, r8
 3f6:	30 81       	ld	r19, Z
 3f8:	2d 01       	movw	r4, r26
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <psx_init+0xee>
 3fc:	44 0c       	add	r4, r4
 3fe:	55 1c       	adc	r5, r5
 400:	ea 94       	dec	r14
 402:	e2 f7       	brpl	.-8      	; 0x3fc <psx_init+0xea>
 404:	72 01       	movw	r14, r4
 406:	34 29       	or	r19, r4
 408:	30 83       	st	Z, r19

  //Set data pin to input mode, and set pullup resistor
  *_data_ddr &= ~(_BV(_data_pin));
 40a:	f8 01       	movw	r30, r16
 40c:	70 81       	ld	r23, Z
 40e:	02 c0       	rjmp	.+4      	; 0x414 <psx_init+0x102>
 410:	aa 0f       	add	r26, r26
 412:	bb 1f       	adc	r27, r27
 414:	6a 95       	dec	r22
 416:	e2 f7       	brpl	.-8      	; 0x410 <psx_init+0xfe>
 418:	3a 2f       	mov	r19, r26
 41a:	30 95       	com	r19
 41c:	37 23       	and	r19, r23
 41e:	30 83       	st	Z, r19
  *_data_port |= _BV(_data_pin);
 420:	fc 01       	movw	r30, r24
 422:	60 81       	ld	r22, Z
 424:	a6 2b       	or	r26, r22
 426:	a0 83       	st	Z, r26

  //Initialize game pad
  *_clock_port |= _BV(_clock_pin);
 428:	da 01       	movw	r26, r20
 42a:	8c 91       	ld	r24, X
 42c:	28 2b       	or	r18, r24
 42e:	2c 93       	st	X, r18
  *_command_port |= _BV(_command_pin);
 430:	f1 01       	movw	r30, r2
 432:	80 81       	ld	r24, Z
 434:	e8 2a       	or	r14, r24
 436:	e0 82       	st	Z, r14
  
  
  //Init by polling once
  psx_read_gamepad();
 438:	0e 94 73 01 	call	0x2e6	; 0x2e6 <psx_read_gamepad>


  //Enter Config Mode
  uint8_t enter_config_command[] = {0x01, 0x43, 0x00, 0x01, 0x00};
 43c:	85 e0       	ldi	r24, 0x05	; 5
 43e:	e0 e0       	ldi	r30, 0x00	; 0
 440:	f2 e0       	ldi	r31, 0x02	; 2
 442:	de 01       	movw	r26, r28
 444:	11 96       	adiw	r26, 0x01	; 1
 446:	01 90       	ld	r0, Z+
 448:	0d 92       	st	X+, r0
 44a:	8a 95       	dec	r24
 44c:	e1 f7       	brne	.-8      	; 0x446 <psx_init+0x134>
  _psx_send_command(enter_config_command, 5);
 44e:	65 e0       	ldi	r22, 0x05	; 5
 450:	ce 01       	movw	r24, r28
 452:	01 96       	adiw	r24, 0x01	; 1
 454:	0e 94 1c 01 	call	0x238	; 0x238 <_psx_send_command>

  // Lock to Analog Mode on Stick
  uint8_t lock_analog_mode_command[] = {0x01, 0x44, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00};
 458:	89 e0       	ldi	r24, 0x09	; 9
 45a:	e5 e0       	ldi	r30, 0x05	; 5
 45c:	f2 e0       	ldi	r31, 0x02	; 2
 45e:	de 01       	movw	r26, r28
 460:	16 96       	adiw	r26, 0x06	; 6
 462:	01 90       	ld	r0, Z+
 464:	0d 92       	st	X+, r0
 466:	8a 95       	dec	r24
 468:	e1 f7       	brne	.-8      	; 0x462 <psx_init+0x150>
  _psx_send_command(lock_analog_mode_command, 9);
 46a:	69 e0       	ldi	r22, 0x09	; 9
 46c:	ce 01       	movw	r24, r28
 46e:	06 96       	adiw	r24, 0x06	; 6
 470:	0e 94 1c 01 	call	0x238	; 0x238 <_psx_send_command>

  //Exit config mode
  uint8_t exit_config_command[] = {0x01, 0x43, 0x00, 0x00, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A};
 474:	89 e0       	ldi	r24, 0x09	; 9
 476:	ee e0       	ldi	r30, 0x0E	; 14
 478:	f2 e0       	ldi	r31, 0x02	; 2
 47a:	de 01       	movw	r26, r28
 47c:	1f 96       	adiw	r26, 0x0f	; 15
 47e:	01 90       	ld	r0, Z+
 480:	0d 92       	st	X+, r0
 482:	8a 95       	dec	r24
 484:	e1 f7       	brne	.-8      	; 0x47e <psx_init+0x16c>
  _psx_send_command(exit_config_command, 9);
 486:	69 e0       	ldi	r22, 0x09	; 9
 488:	ce 01       	movw	r24, r28
 48a:	0f 96       	adiw	r24, 0x0f	; 15
 48c:	0e 94 1c 01 	call	0x238	; 0x238 <_psx_send_command>
  sei();
 490:	78 94       	sei
}
 492:	67 96       	adiw	r28, 0x17	; 23
 494:	0f b6       	in	r0, 0x3f	; 63
 496:	f8 94       	cli
 498:	de bf       	out	0x3e, r29	; 62
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	cd bf       	out	0x3d, r28	; 61
 49e:	df 91       	pop	r29
 4a0:	cf 91       	pop	r28
 4a2:	1f 91       	pop	r17
 4a4:	0f 91       	pop	r16
 4a6:	ff 90       	pop	r15
 4a8:	ef 90       	pop	r14
 4aa:	df 90       	pop	r13
 4ac:	cf 90       	pop	r12
 4ae:	bf 90       	pop	r11
 4b0:	af 90       	pop	r10
 4b2:	9f 90       	pop	r9
 4b4:	8f 90       	pop	r8
 4b6:	7f 90       	pop	r7
 4b8:	6f 90       	pop	r6
 4ba:	5f 90       	pop	r5
 4bc:	4f 90       	pop	r4
 4be:	3f 90       	pop	r3
 4c0:	2f 90       	pop	r2
 4c2:	08 95       	ret

000004c4 <psx_button>:
  uint16_t buttons = *(uint16_t*)(_data + 3); //Get 2 bytes, comprising data positions 3 and 4.
  return ~buttons;
}

uint8_t psx_button(uint16_t button) {
	cli();
 4c4:	f8 94       	cli
}


uint16_t psx_buttons(void) {
  uint16_t buttons = *(uint16_t*)(_data + 3); //Get 2 bytes, comprising data positions 3 and 4.
  return ~buttons;
 4c6:	20 91 2b 02 	lds	r18, 0x022B
 4ca:	30 91 2c 02 	lds	r19, 0x022C
 4ce:	20 95       	com	r18
 4d0:	30 95       	com	r19
}

uint8_t psx_button(uint16_t button) {
	cli();
  uint16_t buttons = psx_buttons();
  return ((buttons & button) > 0);
 4d2:	28 23       	and	r18, r24
 4d4:	39 23       	and	r19, r25
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	23 2b       	or	r18, r19
 4da:	09 f4       	brne	.+2      	; 0x4de <psx_button+0x1a>
 4dc:	80 e0       	ldi	r24, 0x00	; 0
  sei();
}
 4de:	08 95       	ret

000004e0 <WaitMs>:
unsigned char tenthousand=0,thousand=0,hundred=0,ten=0,one=0;

void WaitMs(unsigned int ms)
{
	int i;
	while (ms-- > 0)
 4e0:	5c ec       	ldi	r21, 0xCC	; 204
 4e2:	4c e0       	ldi	r20, 0x0C	; 12
 4e4:	06 c0       	rjmp	.+12     	; 0x4f2 <WaitMs+0x12>
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 4e6:	00 00       	nop
 4e8:	21 50       	subi	r18, 0x01	; 1
 4ea:	31 09       	sbc	r19, r1
	int i;
	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 4ec:	21 15       	cp	r18, r1
 4ee:	31 05       	cpc	r19, r1
 4f0:	d1 f7       	brne	.-12     	; 0x4e6 <WaitMs+0x6>
unsigned char tenthousand=0,thousand=0,hundred=0,ten=0,one=0;

void WaitMs(unsigned int ms)
{
	int i;
	while (ms-- > 0)
 4f2:	01 97       	sbiw	r24, 0x01	; 1
 4f4:	18 f0       	brcs	.+6      	; 0x4fc <WaitMs+0x1c>
 4f6:	25 2f       	mov	r18, r21
 4f8:	34 2f       	mov	r19, r20
 4fa:	f5 cf       	rjmp	.-22     	; 0x4e6 <WaitMs+0x6>
 4fc:	08 95       	ret

000004fe <toggleE>:
	}
}

void toggleE(void)
{
	SETBIT(PORTE,BIT(0));
 4fe:	70 9a       	sbi	0x0e, 0	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 500:	83 e3       	ldi	r24, 0x33	; 51
 502:	97 e0       	ldi	r25, 0x07	; 7
 504:	01 97       	sbiw	r24, 0x01	; 1
 506:	f1 f7       	brne	.-4      	; 0x504 <toggleE+0x6>
	_delay_us(500);
	CLEARBIT(PORTE,BIT(0));
 508:	70 98       	cbi	0x0e, 0	; 14
 50a:	08 95       	ret

0000050c <CheckTemp>:
}

void CheckTemp(uint8_t temp)
{
 50c:	cf 93       	push	r28
 50e:	df 93       	push	r29
 510:	1f 92       	push	r1
 512:	cd b7       	in	r28, 0x3d	; 61
 514:	de b7       	in	r29, 0x3e	; 62
 516:	89 83       	std	Y+1, r24	; 0x01
	if (bit_is_set(temp, 7))
 518:	89 81       	ldd	r24, Y+1	; 0x01
 51a:	88 23       	and	r24, r24
 51c:	14 f4       	brge	.+4      	; 0x522 <CheckTemp+0x16>
	{
		SETBIT(PORTE, BIT(7))
 51e:	77 9a       	sbi	0x0e, 7	; 14
 520:	01 c0       	rjmp	.+2      	; 0x524 <CheckTemp+0x18>
	}
	else
	{
		CLEARBIT(PORTE, BIT(7))
 522:	77 98       	cbi	0x0e, 7	; 14
	}
	
	if (bit_is_set(temp, 6))
 524:	89 81       	ldd	r24, Y+1	; 0x01
 526:	86 ff       	sbrs	r24, 6
 528:	02 c0       	rjmp	.+4      	; 0x52e <CheckTemp+0x22>
	{
		SETBIT(PORTE, BIT(6))
 52a:	76 9a       	sbi	0x0e, 6	; 14
 52c:	01 c0       	rjmp	.+2      	; 0x530 <CheckTemp+0x24>
	}
	else
	{
		CLEARBIT(PORTE, BIT(6))
 52e:	76 98       	cbi	0x0e, 6	; 14
	}
	if (bit_is_set(temp, 1))
 530:	89 81       	ldd	r24, Y+1	; 0x01
 532:	81 ff       	sbrs	r24, 1
 534:	02 c0       	rjmp	.+4      	; 0x53a <CheckTemp+0x2e>
	{
		SETBIT(PORTE, BIT(1))
 536:	71 9a       	sbi	0x0e, 1	; 14
 538:	01 c0       	rjmp	.+2      	; 0x53c <CheckTemp+0x30>
	}
	else
	{
		CLEARBIT(PORTE, BIT(1))
 53a:	71 98       	cbi	0x0e, 1	; 14
	}
	
	if (bit_is_set(temp, 2))
 53c:	89 81       	ldd	r24, Y+1	; 0x01
 53e:	82 ff       	sbrs	r24, 2
 540:	02 c0       	rjmp	.+4      	; 0x546 <CheckTemp+0x3a>
	{
		SETBIT(PORTE, BIT(2))
 542:	72 9a       	sbi	0x0e, 2	; 14
 544:	01 c0       	rjmp	.+2      	; 0x548 <CheckTemp+0x3c>
	}
	else
	{
		CLEARBIT(PORTE, BIT(2))
 546:	72 98       	cbi	0x0e, 2	; 14
	}
	
	if (bit_is_set(temp, 0))
 548:	89 81       	ldd	r24, Y+1	; 0x01
 54a:	80 ff       	sbrs	r24, 0
 54c:	02 c0       	rjmp	.+4      	; 0x552 <CheckTemp+0x46>
	{
		SETBIT(PORTE, BIT(0))
 54e:	70 9a       	sbi	0x0e, 0	; 14
 550:	01 c0       	rjmp	.+2      	; 0x554 <CheckTemp+0x48>
	}
	else
	{
		CLEARBIT(PORTE, BIT(0))
 552:	70 98       	cbi	0x0e, 0	; 14
	}
}
 554:	0f 90       	pop	r0
 556:	df 91       	pop	r29
 558:	cf 91       	pop	r28
 55a:	08 95       	ret

0000055c <lcd_cmd>:

void lcd_cmd(unsigned char ch)
{
 55c:	cf 93       	push	r28
 55e:	df 93       	push	r29
 560:	c8 2f       	mov	r28, r24
	int temp;
	CLEARBIT(PORTG,BIT(5));
 562:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 564:	70 98       	cbi	0x0e, 0	; 14

	temp= ch & 0b11000000; // '10'000000
	CheckTemp(temp);	
 566:	80 7c       	andi	r24, 0xC0	; 192
 568:	0e 94 86 02 	call	0x50c	; 0x50c <CheckTemp>
	//PORTE=temp;
	
	temp=(ch >> 3) & 0b00000110; // 00000'11'0
	temp = PORTE | temp;
 56c:	9e b1       	in	r25, 0x0e	; 14

	temp= ch & 0b11000000; // '10'000000
	CheckTemp(temp);	
	//PORTE=temp;
	
	temp=(ch >> 3) & 0b00000110; // 00000'11'0
 56e:	8c 2f       	mov	r24, r28
 570:	86 95       	lsr	r24
 572:	86 95       	lsr	r24
 574:	86 95       	lsr	r24
 576:	86 70       	andi	r24, 0x06	; 6
	temp = PORTE | temp;
	
	CheckTemp(temp);
 578:	89 2b       	or	r24, r25
 57a:	0e 94 86 02 	call	0x50c	; 0x50c <CheckTemp>
 57e:	88 e1       	ldi	r24, 0x18	; 24
 580:	8a 95       	dec	r24
 582:	f1 f7       	brne	.-4      	; 0x580 <lcd_cmd+0x24>
 584:	00 c0       	rjmp	.+0      	; 0x586 <lcd_cmd+0x2a>
	_delay_us(5);
	
	toggleE();
 586:	0e 94 7f 02 	call	0x4fe	; 0x4fe <toggleE>
   // Extract lower nibble
	SETBIT(PORTG,BIT(5));
 58a:	a5 9a       	sbi	0x14, 5	; 20
   	CLEARBIT(PORTG,BIT(5));
 58c:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 58e:	70 98       	cbi	0x0e, 0	; 14

	temp=(ch << 4) & 0b11000000; // '10'000000
 590:	d0 e0       	ldi	r29, 0x00	; 0
 592:	ce 01       	movw	r24, r28
 594:	82 95       	swap	r24
 596:	92 95       	swap	r25
 598:	90 7f       	andi	r25, 0xF0	; 240
 59a:	98 27       	eor	r25, r24
 59c:	80 7f       	andi	r24, 0xF0	; 240
 59e:	98 27       	eor	r25, r24
	CheckTemp(temp);
 5a0:	80 7c       	andi	r24, 0xC0	; 192
 5a2:	0e 94 86 02 	call	0x50c	; 0x50c <CheckTemp>
	temp=(ch << 1) & 0b00000110; // 00000'01'0 
 5a6:	cc 0f       	add	r28, r28
 5a8:	dd 1f       	adc	r29, r29
 5aa:	c6 70       	andi	r28, 0x06	; 6
 5ac:	dd 27       	eor	r29, r29
	temp= PORTE | temp;
 5ae:	8e b1       	in	r24, 0x0e	; 14
	CheckTemp(temp);
 5b0:	8c 2b       	or	r24, r28
 5b2:	0e 94 86 02 	call	0x50c	; 0x50c <CheckTemp>
 5b6:	88 e1       	ldi	r24, 0x18	; 24
 5b8:	8a 95       	dec	r24
 5ba:	f1 f7       	brne	.-4      	; 0x5b8 <lcd_cmd+0x5c>
 5bc:	00 c0       	rjmp	.+0      	; 0x5be <lcd_cmd+0x62>
	_delay_us(5);
	toggleE();
 5be:	0e 94 7f 02 	call	0x4fe	; 0x4fe <toggleE>
   	//PORTE = 0x00;
	CLEARBIT(PORTE,BIT(0));			//Enable
 5c2:	70 98       	cbi	0x0e, 0	; 14
	CLEARBIT(PORTE,BIT(1));
 5c4:	71 98       	cbi	0x0e, 1	; 14
	CLEARBIT(PORTE,BIT(2));
 5c6:	72 98       	cbi	0x0e, 2	; 14
	CLEARBIT(PORTE,BIT(6));
 5c8:	76 98       	cbi	0x0e, 6	; 14
	CLEARBIT(PORTE,BIT(7));
 5ca:	77 98       	cbi	0x0e, 7	; 14
   	WaitMs(10);
 5cc:	8a e0       	ldi	r24, 0x0A	; 10
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	0e 94 70 02 	call	0x4e0	; 0x4e0 <WaitMs>
}
 5d4:	df 91       	pop	r29
 5d6:	cf 91       	pop	r28
 5d8:	08 95       	ret

000005da <lcd_init>:

void lcd_init(void)
{
	DDRE |= (1<<0) | (1<<1) | (1<<2) | (1<<6) | (1<<7);
 5da:	8d b1       	in	r24, 0x0d	; 13
 5dc:	87 6c       	ori	r24, 0xC7	; 199
 5de:	8d b9       	out	0x0d, r24	; 13
	DDRG |= (1<<5);
 5e0:	9d 9a       	sbi	0x13, 5	; 19
	WaitMs(15);
 5e2:	8f e0       	ldi	r24, 0x0F	; 15
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	0e 94 70 02 	call	0x4e0	; 0x4e0 <WaitMs>
	CLEARBIT(PORTG,BIT(5));			//RS
 5ea:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));			//Enable
 5ec:	70 98       	cbi	0x0e, 0	; 14
	CLEARBIT(PORTE,BIT(1));
 5ee:	71 98       	cbi	0x0e, 1	; 14
	CLEARBIT(PORTE,BIT(2));
 5f0:	72 98       	cbi	0x0e, 2	; 14
	CLEARBIT(PORTE,BIT(6));
 5f2:	76 98       	cbi	0x0e, 6	; 14
	CLEARBIT(PORTE,BIT(7));
 5f4:	77 98       	cbi	0x0e, 7	; 14
	lcd_cmd(0x20);		//data is 8-bit length
 5f6:	80 e2       	ldi	r24, 0x20	; 32
 5f8:	0e 94 ae 02 	call	0x55c	; 0x55c <lcd_cmd>
	WaitMs(1);
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	0e 94 70 02 	call	0x4e0	; 0x4e0 <WaitMs>
	lcd_cmd(0x20);		//data is 8-bit length
 604:	80 e2       	ldi	r24, 0x20	; 32
 606:	0e 94 ae 02 	call	0x55c	; 0x55c <lcd_cmd>
	WaitMs(1);
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <WaitMs>
	lcd_cmd(0x20);		//data is 8-bit length
 612:	80 e2       	ldi	r24, 0x20	; 32
 614:	0e 94 ae 02 	call	0x55c	; 0x55c <lcd_cmd>
	WaitMs(1);
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <WaitMs>
	lcd_cmd(0x28);		//sets character font
 620:	88 e2       	ldi	r24, 0x28	; 40
 622:	0e 94 ae 02 	call	0x55c	; 0x55c <lcd_cmd>
	WaitMs(1);
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <WaitMs>
	lcd_cmd(0x0E);		//display off(d,c,b=0) 08
 62e:	8e e0       	ldi	r24, 0x0E	; 14
 630:	0e 94 ae 02 	call	0x55c	; 0x55c <lcd_cmd>
	WaitMs(1);
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	0e 94 70 02 	call	0x4e0	; 0x4e0 <WaitMs>
	lcd_cmd(0x01);		//clears the data
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	0e 94 ae 02 	call	0x55c	; 0x55c <lcd_cmd>
	WaitMs(1);
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	0e 94 70 02 	call	0x4e0	; 0x4e0 <WaitMs>
	lcd_cmd(0x6);		//entry mode--increment
 64a:	86 e0       	ldi	r24, 0x06	; 6
 64c:	0e 94 ae 02 	call	0x55c	; 0x55c <lcd_cmd>
	WaitMs(1);
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	0e 94 70 02 	call	0x4e0	; 0x4e0 <WaitMs>
 658:	08 95       	ret

0000065a <lcd_char>:
}

void lcd_char(unsigned char data)
{	
 65a:	cf 93       	push	r28
 65c:	df 93       	push	r29
 65e:	c8 2f       	mov	r28, r24
	int temp;
	WaitMs(15);
 660:	8f e0       	ldi	r24, 0x0F	; 15
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	0e 94 70 02 	call	0x4e0	; 0x4e0 <WaitMs>
	SETBIT(PORTG,BIT(5));
 668:	a5 9a       	sbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 66a:	70 98       	cbi	0x0e, 0	; 14
	temp= (data & 0b11000000); // '10'000000
	CheckTemp(temp);
 66c:	8c 2f       	mov	r24, r28
 66e:	80 7c       	andi	r24, 0xC0	; 192
 670:	0e 94 86 02 	call	0x50c	; 0x50c <CheckTemp>
	temp=(data>>3) & 0b00000110; // 00000'11'0
	temp = PORTE | temp;
 674:	9e b1       	in	r25, 0x0e	; 14
	WaitMs(15);
	SETBIT(PORTG,BIT(5));
	CLEARBIT(PORTE,BIT(0));
	temp= (data & 0b11000000); // '10'000000
	CheckTemp(temp);
	temp=(data>>3) & 0b00000110; // 00000'11'0
 676:	8c 2f       	mov	r24, r28
 678:	86 95       	lsr	r24
 67a:	86 95       	lsr	r24
 67c:	86 95       	lsr	r24
 67e:	86 70       	andi	r24, 0x06	; 6
	temp = PORTE | temp;
	CheckTemp(temp);
 680:	89 2b       	or	r24, r25
 682:	0e 94 86 02 	call	0x50c	; 0x50c <CheckTemp>
 686:	88 e1       	ldi	r24, 0x18	; 24
 688:	8a 95       	dec	r24
 68a:	f1 f7       	brne	.-4      	; 0x688 <lcd_char+0x2e>
 68c:	00 c0       	rjmp	.+0      	; 0x68e <lcd_char+0x34>
	_delay_us(5);
	toggleE();	
 68e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <toggleE>
	
	CLEARBIT(PORTG,BIT(5));
 692:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 694:	70 98       	cbi	0x0e, 0	; 14
	SETBIT(PORTG,BIT(5));
 696:	a5 9a       	sbi	0x14, 5	; 20
	temp=(data << 4) & 0b11000000; // '10'000000
 698:	d0 e0       	ldi	r29, 0x00	; 0
 69a:	ce 01       	movw	r24, r28
 69c:	82 95       	swap	r24
 69e:	92 95       	swap	r25
 6a0:	90 7f       	andi	r25, 0xF0	; 240
 6a2:	98 27       	eor	r25, r24
 6a4:	80 7f       	andi	r24, 0xF0	; 240
 6a6:	98 27       	eor	r25, r24
	CheckTemp(temp);
 6a8:	80 7c       	andi	r24, 0xC0	; 192
 6aa:	0e 94 86 02 	call	0x50c	; 0x50c <CheckTemp>
	temp=(data << 1) & 0b00000110; // 00000'01'0 
 6ae:	cc 0f       	add	r28, r28
 6b0:	dd 1f       	adc	r29, r29
 6b2:	c6 70       	andi	r28, 0x06	; 6
 6b4:	dd 27       	eor	r29, r29
	temp = PORTE | temp;
 6b6:	8e b1       	in	r24, 0x0e	; 14
	CheckTemp(temp);
 6b8:	8c 2b       	or	r24, r28
 6ba:	0e 94 86 02 	call	0x50c	; 0x50c <CheckTemp>
 6be:	88 e1       	ldi	r24, 0x18	; 24
 6c0:	8a 95       	dec	r24
 6c2:	f1 f7       	brne	.-4      	; 0x6c0 <lcd_char+0x66>
 6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <lcd_char+0x6c>
	_delay_us(5);				
	toggleE();
 6c6:	0e 94 7f 02 	call	0x4fe	; 0x4fe <toggleE>
}
 6ca:	df 91       	pop	r29
 6cc:	cf 91       	pop	r28
 6ce:	08 95       	ret

000006d0 <lcd_string>:

void lcd_string(unsigned char str[32])
{
 6d0:	ef 92       	push	r14
 6d2:	ff 92       	push	r15
 6d4:	0f 93       	push	r16
 6d6:	1f 93       	push	r17
 6d8:	cf 93       	push	r28
 6da:	df 93       	push	r29
 6dc:	8c 01       	movw	r16, r24
	int poop,bitch;
	unsigned char k=0;
	SETBIT(PORTG,BIT(5));
 6de:	a5 9a       	sbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 6e0:	70 98       	cbi	0x0e, 0	; 14
	while(str[k]!='\0')	//Till null character is encountered
 6e2:	fc 01       	movw	r30, r24
 6e4:	80 81       	ld	r24, Z
 6e6:	88 23       	and	r24, r24
 6e8:	09 f4       	brne	.+2      	; 0x6ec <lcd_string+0x1c>
 6ea:	44 c0       	rjmp	.+136    	; 0x774 <lcd_string+0xa4>
 6ec:	e8 01       	movw	r28, r16
}

void lcd_string(unsigned char str[32])
{
	int poop,bitch;
	unsigned char k=0;
 6ee:	f1 2c       	mov	r15, r1
 6f0:	06 c0       	rjmp	.+12     	; 0x6fe <lcd_string+0x2e>
	SETBIT(PORTG,BIT(5));
	CLEARBIT(PORTE,BIT(0));
	while(str[k]!='\0')	//Till null character is encountered
	{
		if(k==16)
 6f2:	f0 e1       	ldi	r31, 0x10	; 16
 6f4:	ff 12       	cpse	r15, r31
 6f6:	03 c0       	rjmp	.+6      	; 0x6fe <lcd_string+0x2e>
		lcd_cmd(LINE2);
 6f8:	80 ec       	ldi	r24, 0xC0	; 192
 6fa:	0e 94 ae 02 	call	0x55c	; 0x55c <lcd_cmd>
		SETBIT(PORTG,BIT(5));
 6fe:	a5 9a       	sbi	0x14, 5	; 20
		CLEARBIT(PORTE,BIT(0));
 700:	70 98       	cbi	0x0e, 0	; 14
		bitch=str[k]; //10111001
 702:	e8 80       	ld	r14, Y
		poop= bitch & 0b11000000; // '10'000000
		CheckTemp(poop);
 704:	8e 2d       	mov	r24, r14
 706:	80 7c       	andi	r24, 0xC0	; 192
 708:	0e 94 86 02 	call	0x50c	; 0x50c <CheckTemp>
	{
		if(k==16)
		lcd_cmd(LINE2);
		SETBIT(PORTG,BIT(5));
		CLEARBIT(PORTE,BIT(0));
		bitch=str[k]; //10111001
 70c:	8e 2d       	mov	r24, r14
 70e:	90 e0       	ldi	r25, 0x00	; 0
		poop= bitch & 0b11000000; // '10'000000
		CheckTemp(poop);
		//PORTE=poop;
		poop=(bitch>>3) & 0b00000110; // 00000'11'0
 710:	95 95       	asr	r25
 712:	87 95       	ror	r24
 714:	95 95       	asr	r25
 716:	87 95       	ror	r24
 718:	95 95       	asr	r25
 71a:	87 95       	ror	r24
 71c:	86 70       	andi	r24, 0x06	; 6
 71e:	99 27       	eor	r25, r25
		poop = PORTE | poop;
 720:	9e b1       	in	r25, 0x0e	; 14
		CheckTemp(poop);
 722:	89 2b       	or	r24, r25
 724:	0e 94 86 02 	call	0x50c	; 0x50c <CheckTemp>
		
		toggleE();
 728:	0e 94 7f 02 	call	0x4fe	; 0x4fe <toggleE>
		CLEARBIT(PORTG,BIT(5))
 72c:	a5 98       	cbi	0x14, 5	; 20
		SETBIT(PORTG,BIT(5));
 72e:	a5 9a       	sbi	0x14, 5	; 20
		CLEARBIT(PORTE,BIT(0));
 730:	70 98       	cbi	0x0e, 0	; 14
		bitch=str[k];
 732:	c8 81       	ld	r28, Y
 734:	d0 e0       	ldi	r29, 0x00	; 0
		poop=(bitch << 4) & 0b11000000; // '10'000000
 736:	ce 01       	movw	r24, r28
 738:	82 95       	swap	r24
 73a:	92 95       	swap	r25
 73c:	90 7f       	andi	r25, 0xF0	; 240
 73e:	98 27       	eor	r25, r24
 740:	80 7f       	andi	r24, 0xF0	; 240
 742:	98 27       	eor	r25, r24
		CheckTemp(poop);
 744:	80 7c       	andi	r24, 0xC0	; 192
 746:	0e 94 86 02 	call	0x50c	; 0x50c <CheckTemp>
		poop=(bitch << 1) & 0b00000110; // 00000'01'0
 74a:	cc 0f       	add	r28, r28
 74c:	dd 1f       	adc	r29, r29
 74e:	c6 70       	andi	r28, 0x06	; 6
 750:	dd 27       	eor	r29, r29
		poop = PORTE | poop;
 752:	8e b1       	in	r24, 0x0e	; 14
		CheckTemp(poop);
 754:	8c 2b       	or	r24, r28
 756:	0e 94 86 02 	call	0x50c	; 0x50c <CheckTemp>
		toggleE();
 75a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <toggleE>
		k++;
 75e:	f3 94       	inc	r15
		WaitMs(1);
 760:	81 e0       	ldi	r24, 0x01	; 1
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	0e 94 70 02 	call	0x4e0	; 0x4e0 <WaitMs>
{
	int poop,bitch;
	unsigned char k=0;
	SETBIT(PORTG,BIT(5));
	CLEARBIT(PORTE,BIT(0));
	while(str[k]!='\0')	//Till null character is encountered
 768:	e8 01       	movw	r28, r16
 76a:	cf 0d       	add	r28, r15
 76c:	d1 1d       	adc	r29, r1
 76e:	88 81       	ld	r24, Y
 770:	81 11       	cpse	r24, r1
 772:	bf cf       	rjmp	.-130    	; 0x6f2 <lcd_string+0x22>
		CheckTemp(poop);
		toggleE();
		k++;
		WaitMs(1);
	}
}
 774:	df 91       	pop	r29
 776:	cf 91       	pop	r28
 778:	1f 91       	pop	r17
 77a:	0f 91       	pop	r16
 77c:	ff 90       	pop	r15
 77e:	ef 90       	pop	r14
 780:	08 95       	ret

00000782 <lcd_showvalue>:

void lcd_showvalue(long int num)
{
 782:	4f 92       	push	r4
 784:	5f 92       	push	r5
 786:	6f 92       	push	r6
 788:	7f 92       	push	r7
 78a:	8f 92       	push	r8
 78c:	9f 92       	push	r9
 78e:	af 92       	push	r10
 790:	bf 92       	push	r11
 792:	cf 92       	push	r12
 794:	df 92       	push	r13
 796:	ef 92       	push	r14
 798:	ff 92       	push	r15
 79a:	cf 93       	push	r28
 79c:	df 93       	push	r29
 79e:	4b 01       	movw	r8, r22
 7a0:	5c 01       	movw	r10, r24
	if (num < 0)
 7a2:	99 23       	and	r25, r25
 7a4:	5c f4       	brge	.+22     	; 0x7bc <lcd_showvalue+0x3a>
	{
		lcd_char('-');
 7a6:	8d e2       	ldi	r24, 0x2D	; 45
 7a8:	0e 94 2d 03 	call	0x65a	; 0x65a <lcd_char>
		num = -num;
 7ac:	b0 94       	com	r11
 7ae:	a0 94       	com	r10
 7b0:	90 94       	com	r9
 7b2:	80 94       	com	r8
 7b4:	81 1c       	adc	r8, r1
 7b6:	91 1c       	adc	r9, r1
 7b8:	a1 1c       	adc	r10, r1
 7ba:	b1 1c       	adc	r11, r1
	
	unsigned long int n = 0;
	int flag = 0;


	if(num%100000 == 0)
 7bc:	c5 01       	movw	r24, r10
 7be:	b4 01       	movw	r22, r8
 7c0:	20 ea       	ldi	r18, 0xA0	; 160
 7c2:	36 e8       	ldi	r19, 0x86	; 134
 7c4:	41 e0       	ldi	r20, 0x01	; 1
 7c6:	50 e0       	ldi	r21, 0x00	; 0
 7c8:	0e 94 84 05 	call	0xb08	; 0xb08 <__divmodsi4>
 7cc:	67 2b       	or	r22, r23
 7ce:	68 2b       	or	r22, r24
 7d0:	69 2b       	or	r22, r25
 7d2:	b1 f1       	breq	.+108    	; 0x840 <lcd_showvalue+0xbe>
	{
		flag = 5;
	}
	
	else if(num%10000 == 0)
 7d4:	c5 01       	movw	r24, r10
 7d6:	b4 01       	movw	r22, r8
 7d8:	20 e1       	ldi	r18, 0x10	; 16
 7da:	37 e2       	ldi	r19, 0x27	; 39
 7dc:	40 e0       	ldi	r20, 0x00	; 0
 7de:	50 e0       	ldi	r21, 0x00	; 0
 7e0:	0e 94 84 05 	call	0xb08	; 0xb08 <__divmodsi4>
 7e4:	67 2b       	or	r22, r23
 7e6:	68 2b       	or	r22, r24
 7e8:	69 2b       	or	r22, r25
 7ea:	69 f1       	breq	.+90     	; 0x846 <lcd_showvalue+0xc4>
	{
		flag = 4;
	}

	else if(num%1000 == 0)
 7ec:	c5 01       	movw	r24, r10
 7ee:	b4 01       	movw	r22, r8
 7f0:	28 ee       	ldi	r18, 0xE8	; 232
 7f2:	33 e0       	ldi	r19, 0x03	; 3
 7f4:	40 e0       	ldi	r20, 0x00	; 0
 7f6:	50 e0       	ldi	r21, 0x00	; 0
 7f8:	0e 94 84 05 	call	0xb08	; 0xb08 <__divmodsi4>
 7fc:	67 2b       	or	r22, r23
 7fe:	68 2b       	or	r22, r24
 800:	69 2b       	or	r22, r25
 802:	21 f1       	breq	.+72     	; 0x84c <lcd_showvalue+0xca>
	{
		flag = 3;
	}

	else if(num%100 == 0)
 804:	c5 01       	movw	r24, r10
 806:	b4 01       	movw	r22, r8
 808:	24 e6       	ldi	r18, 0x64	; 100
 80a:	30 e0       	ldi	r19, 0x00	; 0
 80c:	40 e0       	ldi	r20, 0x00	; 0
 80e:	50 e0       	ldi	r21, 0x00	; 0
 810:	0e 94 84 05 	call	0xb08	; 0xb08 <__divmodsi4>
 814:	67 2b       	or	r22, r23
 816:	68 2b       	or	r22, r24
 818:	69 2b       	or	r22, r25
 81a:	d9 f0       	breq	.+54     	; 0x852 <lcd_showvalue+0xd0>
	{
		flag = 2;
	}

	else if(num%10 == 0)
 81c:	c5 01       	movw	r24, r10
 81e:	b4 01       	movw	r22, r8
 820:	2a e0       	ldi	r18, 0x0A	; 10
 822:	30 e0       	ldi	r19, 0x00	; 0
 824:	40 e0       	ldi	r20, 0x00	; 0
 826:	50 e0       	ldi	r21, 0x00	; 0
 828:	0e 94 84 05 	call	0xb08	; 0xb08 <__divmodsi4>
 82c:	31 e0       	ldi	r19, 0x01	; 1
 82e:	20 e0       	ldi	r18, 0x00	; 0
 830:	67 2b       	or	r22, r23
 832:	68 2b       	or	r22, r24
 834:	69 2b       	or	r22, r25
 836:	09 f0       	breq	.+2      	; 0x83a <lcd_showvalue+0xb8>
 838:	30 e0       	ldi	r19, 0x00	; 0
		flag = 5;
	}
	
	else if(num%10000 == 0)
	{
		flag = 4;
 83a:	c3 2f       	mov	r28, r19
 83c:	d2 2f       	mov	r29, r18
 83e:	0b c0       	rjmp	.+22     	; 0x856 <lcd_showvalue+0xd4>
	int flag = 0;


	if(num%100000 == 0)
	{
		flag = 5;
 840:	c5 e0       	ldi	r28, 0x05	; 5
 842:	d0 e0       	ldi	r29, 0x00	; 0
 844:	08 c0       	rjmp	.+16     	; 0x856 <lcd_showvalue+0xd4>
	}
	
	else if(num%10000 == 0)
	{
		flag = 4;
 846:	c4 e0       	ldi	r28, 0x04	; 4
 848:	d0 e0       	ldi	r29, 0x00	; 0
 84a:	05 c0       	rjmp	.+10     	; 0x856 <lcd_showvalue+0xd4>
	}

	else if(num%1000 == 0)
	{
		flag = 3;
 84c:	c3 e0       	ldi	r28, 0x03	; 3
 84e:	d0 e0       	ldi	r29, 0x00	; 0
 850:	02 c0       	rjmp	.+4      	; 0x856 <lcd_showvalue+0xd4>
	}

	else if(num%100 == 0)
	{
		flag = 2;
 852:	c2 e0       	ldi	r28, 0x02	; 2
 854:	d0 e0       	ldi	r29, 0x00	; 0
		flag = 0;
	}



	while(num!=0)
 856:	81 14       	cp	r8, r1
 858:	91 04       	cpc	r9, r1
 85a:	a1 04       	cpc	r10, r1
 85c:	b1 04       	cpc	r11, r1
 85e:	09 f4       	brne	.+2      	; 0x862 <lcd_showvalue+0xe0>
 860:	4a c0       	rjmp	.+148    	; 0x8f6 <lcd_showvalue+0x174>
 862:	c1 2c       	mov	r12, r1
 864:	d1 2c       	mov	r13, r1
 866:	76 01       	movw	r14, r12
	{
		
		H = num%10;
 868:	0f 2e       	mov	r0, r31
 86a:	fa e0       	ldi	r31, 0x0A	; 10
 86c:	4f 2e       	mov	r4, r31
 86e:	51 2c       	mov	r5, r1
 870:	61 2c       	mov	r6, r1
 872:	71 2c       	mov	r7, r1
 874:	f0 2d       	mov	r31, r0
		num = num/10;
 876:	c5 01       	movw	r24, r10
 878:	b4 01       	movw	r22, r8
 87a:	a3 01       	movw	r20, r6
 87c:	92 01       	movw	r18, r4
 87e:	0e 94 84 05 	call	0xb08	; 0xb08 <__divmodsi4>
 882:	49 01       	movw	r8, r18
 884:	5a 01       	movw	r10, r20
		n = (n*10)+H;
 886:	cc 0c       	add	r12, r12
 888:	dd 1c       	adc	r13, r13
 88a:	ee 1c       	adc	r14, r14
 88c:	ff 1c       	adc	r15, r15
 88e:	d7 01       	movw	r26, r14
 890:	c6 01       	movw	r24, r12
 892:	88 0f       	add	r24, r24
 894:	99 1f       	adc	r25, r25
 896:	aa 1f       	adc	r26, r26
 898:	bb 1f       	adc	r27, r27
 89a:	88 0f       	add	r24, r24
 89c:	99 1f       	adc	r25, r25
 89e:	aa 1f       	adc	r26, r26
 8a0:	bb 1f       	adc	r27, r27
 8a2:	c8 0e       	add	r12, r24
 8a4:	d9 1e       	adc	r13, r25
 8a6:	ea 1e       	adc	r14, r26
 8a8:	fb 1e       	adc	r15, r27
 8aa:	c6 0e       	add	r12, r22
 8ac:	d1 1c       	adc	r13, r1
 8ae:	e1 1c       	adc	r14, r1
 8b0:	f1 1c       	adc	r15, r1
		flag = 0;
	}



	while(num!=0)
 8b2:	21 15       	cp	r18, r1
 8b4:	31 05       	cpc	r19, r1
 8b6:	41 05       	cpc	r20, r1
 8b8:	51 05       	cpc	r21, r1
 8ba:	e9 f6       	brne	.-70     	; 0x876 <lcd_showvalue+0xf4>
		num = num/10;
		n = (n*10)+H;

	}
	
	while(n!=0)
 8bc:	c1 14       	cp	r12, r1
 8be:	d1 04       	cpc	r13, r1
 8c0:	e1 04       	cpc	r14, r1
 8c2:	f1 04       	cpc	r15, r1
 8c4:	c1 f0       	breq	.+48     	; 0x8f6 <lcd_showvalue+0x174>
	{
		
		H = n%10;
 8c6:	0f 2e       	mov	r0, r31
 8c8:	fa e0       	ldi	r31, 0x0A	; 10
 8ca:	8f 2e       	mov	r8, r31
 8cc:	91 2c       	mov	r9, r1
 8ce:	a1 2c       	mov	r10, r1
 8d0:	b1 2c       	mov	r11, r1
 8d2:	f0 2d       	mov	r31, r0
		n = n/10;
 8d4:	c7 01       	movw	r24, r14
 8d6:	b6 01       	movw	r22, r12
 8d8:	a5 01       	movw	r20, r10
 8da:	94 01       	movw	r18, r8
 8dc:	0e 94 62 05 	call	0xac4	; 0xac4 <__udivmodsi4>
 8e0:	69 01       	movw	r12, r18
 8e2:	7a 01       	movw	r14, r20
		lcd_char(H+48);
 8e4:	80 e3       	ldi	r24, 0x30	; 48
 8e6:	86 0f       	add	r24, r22
 8e8:	0e 94 2d 03 	call	0x65a	; 0x65a <lcd_char>
		num = num/10;
		n = (n*10)+H;

	}
	
	while(n!=0)
 8ec:	c1 14       	cp	r12, r1
 8ee:	d1 04       	cpc	r13, r1
 8f0:	e1 04       	cpc	r14, r1
 8f2:	f1 04       	cpc	r15, r1
 8f4:	79 f7       	brne	.-34     	; 0x8d4 <lcd_showvalue+0x152>
		lcd_char(H+48);

	}
	
	
	while(flag > 0)
 8f6:	1c 16       	cp	r1, r28
 8f8:	1d 06       	cpc	r1, r29
 8fa:	34 f4       	brge	.+12     	; 0x908 <lcd_showvalue+0x186>
	{
		lcd_char(48);
 8fc:	80 e3       	ldi	r24, 0x30	; 48
 8fe:	0e 94 2d 03 	call	0x65a	; 0x65a <lcd_char>
		flag--;
 902:	21 97       	sbiw	r28, 0x01	; 1
		lcd_char(H+48);

	}
	
	
	while(flag > 0)
 904:	20 97       	sbiw	r28, 0x00	; 0
 906:	d1 f7       	brne	.-12     	; 0x8fc <lcd_showvalue+0x17a>
	{
		lcd_char(48);
		flag--;
	}

}
 908:	df 91       	pop	r29
 90a:	cf 91       	pop	r28
 90c:	ff 90       	pop	r15
 90e:	ef 90       	pop	r14
 910:	df 90       	pop	r13
 912:	cf 90       	pop	r12
 914:	bf 90       	pop	r11
 916:	af 90       	pop	r10
 918:	9f 90       	pop	r9
 91a:	8f 90       	pop	r8
 91c:	7f 90       	pop	r7
 91e:	6f 90       	pop	r6
 920:	5f 90       	pop	r5
 922:	4f 90       	pop	r4
 924:	08 95       	ret

00000926 <Timer_init>:
uint16_t a = 0, b = 0, c = 0;
void Timer_init()
{
	TCCR1B = 0x07;
 926:	87 e0       	ldi	r24, 0x07	; 7
 928:	80 93 81 00 	sts	0x0081, r24
	DDRD &= ~(1<<6);
 92c:	56 98       	cbi	0x0a, 6	; 10
	PORTD |= (1<<6);
 92e:	5e 9a       	sbi	0x0b, 6	; 11
 930:	08 95       	ret

00000932 <Usart_init>:
}

void Usart_init(void)
{
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
 932:	e9 ec       	ldi	r30, 0xC9	; 201
 934:	f0 e0       	ldi	r31, 0x00	; 0
 936:	80 81       	ld	r24, Z
 938:	88 61       	ori	r24, 0x18	; 24
 93a:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ01);
 93c:	ea ec       	ldi	r30, 0xCA	; 202
 93e:	f0 e0       	ldi	r31, 0x00	; 0
 940:	80 81       	ld	r24, Z
 942:	84 60       	ori	r24, 0x04	; 4
 944:	80 83       	st	Z, r24
	UCSR1A |= (1<<U2X1);
 946:	e8 ec       	ldi	r30, 0xC8	; 200
 948:	f0 e0       	ldi	r31, 0x00	; 0
 94a:	80 81       	ld	r24, Z
 94c:	82 60       	ori	r24, 0x02	; 2
 94e:	80 83       	st	Z, r24
	UBRR1H = 0;
 950:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = 191;
 954:	8f eb       	ldi	r24, 0xBF	; 191
 956:	80 93 cc 00 	sts	0x00CC, r24
	DDRD &= ~(1<<PD2);
 95a:	52 98       	cbi	0x0a, 2	; 10
	DDRD |= (1<<PD3);	
 95c:	53 9a       	sbi	0x0a, 3	; 10
	
	PORTD &= ~(1<<PD2);
 95e:	5a 98       	cbi	0x0b, 2	; 11
	PORTD |= (1<<PD3);
 960:	5b 9a       	sbi	0x0b, 3	; 11
 962:	08 95       	ret

00000964 <Interruot_Init>:
	UartTransmit(30);
}

void Interruot_Init(void)
{
	CLEARBIT(DDRD, BIT(0));
 964:	50 98       	cbi	0x0a, 0	; 10
	CLEARBIT(DDRD, BIT(1));
 966:	51 98       	cbi	0x0a, 1	; 10
	//PORTD |= (1<<0) | (1<<1);
	EICRA |= (1<<ISC00) | (1<<ISC01) | (1<<ISC10) | (1<<ISC11);
 968:	e9 e6       	ldi	r30, 0x69	; 105
 96a:	f0 e0       	ldi	r31, 0x00	; 0
 96c:	80 81       	ld	r24, Z
 96e:	8f 60       	ori	r24, 0x0F	; 15
 970:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0) | (1<<INT1); 
 972:	8d b3       	in	r24, 0x1d	; 29
 974:	83 60       	ori	r24, 0x03	; 3
 976:	8d bb       	out	0x1d, r24	; 29
 978:	08 95       	ret

0000097a <pwm_init>:
#include "OmniFunctions.h"


void pwm_init(void)
{
	SETBIT(DDRE, BIT(3));
 97a:	6b 9a       	sbi	0x0d, 3	; 13
	SETBIT(DDRE, BIT(4));
 97c:	6c 9a       	sbi	0x0d, 4	; 13
	SETBIT(DDRH, BIT(3));
 97e:	e1 e0       	ldi	r30, 0x01	; 1
 980:	f1 e0       	ldi	r31, 0x01	; 1
 982:	80 81       	ld	r24, Z
 984:	88 60       	ori	r24, 0x08	; 8
 986:	80 83       	st	Z, r24
	SETBIT(DDRH, BIT(4));
 988:	80 81       	ld	r24, Z
 98a:	80 61       	ori	r24, 0x10	; 16
 98c:	80 83       	st	Z, r24
	SETBIT(DDRH, BIT(6));
 98e:	80 81       	ld	r24, Z
 990:	80 64       	ori	r24, 0x40	; 64
 992:	80 83       	st	Z, r24
	SETBIT(DDRH, BIT(7));
 994:	80 81       	ld	r24, Z
 996:	80 68       	ori	r24, 0x80	; 128
 998:	80 83       	st	Z, r24
	SETBIT(DDRG, BIT(4));
 99a:	9c 9a       	sbi	0x13, 4	; 19
	SETBIT(DDRL, BIT(0));
 99c:	ea e0       	ldi	r30, 0x0A	; 10
 99e:	f1 e0       	ldi	r31, 0x01	; 1
 9a0:	80 81       	ld	r24, Z
 9a2:	81 60       	ori	r24, 0x01	; 1
 9a4:	80 83       	st	Z, r24

	TCCR4A = 0xA8;
 9a6:	38 ea       	ldi	r19, 0xA8	; 168
 9a8:	30 93 a0 00 	sts	0x00A0, r19
	TCCR4B = 0x11;
 9ac:	21 e1       	ldi	r18, 0x11	; 17
 9ae:	20 93 a1 00 	sts	0x00A1, r18
	ICR4 = 737;
 9b2:	81 ee       	ldi	r24, 0xE1	; 225
 9b4:	92 e0       	ldi	r25, 0x02	; 2
 9b6:	90 93 a7 00 	sts	0x00A7, r25
 9ba:	80 93 a6 00 	sts	0x00A6, r24
	TCCR3A = 0xA8;
 9be:	30 93 90 00 	sts	0x0090, r19
	TCCR3B = 0x11;
 9c2:	20 93 91 00 	sts	0x0091, r18
	ICR3 = 737;
 9c6:	90 93 97 00 	sts	0x0097, r25
 9ca:	80 93 96 00 	sts	0x0096, r24
 9ce:	08 95       	ret

000009d0 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 9d0:	8f ef       	ldi	r24, 0xFF	; 255
 9d2:	9f e8       	ldi	r25, 0x8F	; 143
 9d4:	01 97       	sbiw	r24, 0x01	; 1
 9d6:	f1 f7       	brne	.-4      	; 0x9d4 <main+0x4>
 9d8:	00 c0       	rjmp	.+0      	; 0x9da <main+0xa>
 9da:	00 00       	nop


int main(void)
{
	_delay_ms(10);
	lcd_init();
 9dc:	0e 94 ed 02 	call	0x5da	; 0x5da <lcd_init>
	sei();
 9e0:	78 94       	sei
	psx_init(&PORTA, 1,&PORTA, 0,&PORTA, 3,&PORTA, 4);
 9e2:	68 94       	set
 9e4:	aa 24       	eor	r10, r10
 9e6:	a2 f8       	bld	r10, 2
 9e8:	0f 2e       	mov	r0, r31
 9ea:	f2 e2       	ldi	r31, 0x22	; 34
 9ec:	cf 2e       	mov	r12, r31
 9ee:	d1 2c       	mov	r13, r1
 9f0:	f0 2d       	mov	r31, r0
 9f2:	0f 2e       	mov	r0, r31
 9f4:	f3 e0       	ldi	r31, 0x03	; 3
 9f6:	ef 2e       	mov	r14, r31
 9f8:	f0 2d       	mov	r31, r0
 9fa:	02 e2       	ldi	r16, 0x22	; 34
 9fc:	10 e0       	ldi	r17, 0x00	; 0
 9fe:	20 e0       	ldi	r18, 0x00	; 0
 a00:	42 e2       	ldi	r20, 0x22	; 34
 a02:	50 e0       	ldi	r21, 0x00	; 0
 a04:	61 e0       	ldi	r22, 0x01	; 1
 a06:	82 e2       	ldi	r24, 0x22	; 34
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	0e 94 89 01 	call	0x312	; 0x312 <psx_init>
	pwm_init();
 a0e:	0e 94 bd 04 	call	0x97a	; 0x97a <pwm_init>
	Usart_init();
 a12:	0e 94 99 04 	call	0x932	; 0x932 <Usart_init>
	Timer_init();
 a16:	0e 94 93 04 	call	0x926	; 0x926 <Timer_init>
	Interruot_Init();
 a1a:	0e 94 b2 04 	call	0x964	; 0x964 <Interruot_Init>
 a1e:	ef ef       	ldi	r30, 0xFF	; 255
 a20:	ff e8       	ldi	r31, 0x8F	; 143
 a22:	31 97       	sbiw	r30, 0x01	; 1
 a24:	f1 f7       	brne	.-4      	; 0xa22 <main+0x52>
 a26:	00 c0       	rjmp	.+0      	; 0xa28 <main+0x58>
 a28:	00 00       	nop

uint8_t psx_stick(unsigned int stick) {
  return _data[stick];
 a2a:	0f 2e       	mov	r0, r31
 a2c:	f0 e3       	ldi	r31, 0x30	; 48
 a2e:	ef 2e       	mov	r14, r31
 a30:	f2 e0       	ldi	r31, 0x02	; 2
 a32:	ff 2e       	mov	r15, r31
 a34:	f0 2d       	mov	r31, r0
 a36:	0d e2       	ldi	r16, 0x2D	; 45
 a38:	12 e0       	ldi	r17, 0x02	; 2
 a3a:	ce e2       	ldi	r28, 0x2E	; 46
 a3c:	d2 e0       	ldi	r29, 0x02	; 2
	_delay_ms(10);
	
	
	while(1)
	{
		psx_read_gamepad();
 a3e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <psx_read_gamepad>

}

void lcd_gotoxy1(unsigned char pos)
{
	lcd_cmd(LINE1+pos);
 a42:	80 e8       	ldi	r24, 0x80	; 128
 a44:	0e 94 ae 02 	call	0x55c	; 0x55c <lcd_cmd>
		//OmniDrive3Wheel( Get_Distance ( psx_stick(PSS_LX), psx_stick(PSS_LY) )*6.5,
					//Get_Angle( psx_stick(PSS_LX), psx_stick(PSS_LY) ),
					  //(psx_stick(PSS_RX) - 123)*6);
		lcd_gotoxy1(0);
		lcd_string("LX:");
 a48:	87 e1       	ldi	r24, 0x17	; 23
 a4a:	92 e0       	ldi	r25, 0x02	; 2
 a4c:	0e 94 68 03 	call	0x6d0	; 0x6d0 <lcd_string>
		//lcd_showvalue(psx_stick(PSS_LX));
		lcd_showvalue(psx_button(PSB_CROSS));
 a50:	80 e0       	ldi	r24, 0x00	; 0
 a52:	90 e4       	ldi	r25, 0x40	; 64
 a54:	0e 94 62 02 	call	0x4c4	; 0x4c4 <psx_button>
 a58:	68 2f       	mov	r22, r24
 a5a:	70 e0       	ldi	r23, 0x00	; 0
 a5c:	80 e0       	ldi	r24, 0x00	; 0
 a5e:	90 e0       	ldi	r25, 0x00	; 0
 a60:	0e 94 c1 03 	call	0x782	; 0x782 <lcd_showvalue>
		lcd_char(' ');
 a64:	80 e2       	ldi	r24, 0x20	; 32
 a66:	0e 94 2d 03 	call	0x65a	; 0x65a <lcd_char>
		lcd_string("LY:");
 a6a:	8b e1       	ldi	r24, 0x1B	; 27
 a6c:	92 e0       	ldi	r25, 0x02	; 2
 a6e:	0e 94 68 03 	call	0x6d0	; 0x6d0 <lcd_string>
		lcd_showvalue(psx_stick(PSS_LY));
 a72:	f7 01       	movw	r30, r14
 a74:	60 81       	ld	r22, Z
 a76:	70 e0       	ldi	r23, 0x00	; 0
 a78:	80 e0       	ldi	r24, 0x00	; 0
 a7a:	90 e0       	ldi	r25, 0x00	; 0
 a7c:	0e 94 c1 03 	call	0x782	; 0x782 <lcd_showvalue>
		lcd_char(' ');
 a80:	80 e2       	ldi	r24, 0x20	; 32
 a82:	0e 94 2d 03 	call	0x65a	; 0x65a <lcd_char>
}

void lcd_gotoxy2(unsigned char pos)
{
	lcd_cmd(LINE2+pos);
 a86:	80 ec       	ldi	r24, 0xC0	; 192
 a88:	0e 94 ae 02 	call	0x55c	; 0x55c <lcd_cmd>

		lcd_gotoxy2(0);
		lcd_string("RX:");
 a8c:	8f e1       	ldi	r24, 0x1F	; 31
 a8e:	92 e0       	ldi	r25, 0x02	; 2
 a90:	0e 94 68 03 	call	0x6d0	; 0x6d0 <lcd_string>
		lcd_showvalue(psx_stick(PSS_RX));
 a94:	f8 01       	movw	r30, r16
 a96:	60 81       	ld	r22, Z
 a98:	70 e0       	ldi	r23, 0x00	; 0
 a9a:	80 e0       	ldi	r24, 0x00	; 0
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	0e 94 c1 03 	call	0x782	; 0x782 <lcd_showvalue>
		lcd_char(' ');
 aa2:	80 e2       	ldi	r24, 0x20	; 32
 aa4:	0e 94 2d 03 	call	0x65a	; 0x65a <lcd_char>
		lcd_string("RY:");
 aa8:	83 e2       	ldi	r24, 0x23	; 35
 aaa:	92 e0       	ldi	r25, 0x02	; 2
 aac:	0e 94 68 03 	call	0x6d0	; 0x6d0 <lcd_string>
		lcd_showvalue(psx_stick(PSS_RY));
 ab0:	68 81       	ld	r22, Y
 ab2:	70 e0       	ldi	r23, 0x00	; 0
 ab4:	80 e0       	ldi	r24, 0x00	; 0
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	0e 94 c1 03 	call	0x782	; 0x782 <lcd_showvalue>
		lcd_char(' ');
 abc:	80 e2       	ldi	r24, 0x20	; 32
 abe:	0e 94 2d 03 	call	0x65a	; 0x65a <lcd_char>
 ac2:	bd cf       	rjmp	.-134    	; 0xa3e <main+0x6e>

00000ac4 <__udivmodsi4>:
 ac4:	a1 e2       	ldi	r26, 0x21	; 33
 ac6:	1a 2e       	mov	r1, r26
 ac8:	aa 1b       	sub	r26, r26
 aca:	bb 1b       	sub	r27, r27
 acc:	fd 01       	movw	r30, r26
 ace:	0d c0       	rjmp	.+26     	; 0xaea <__udivmodsi4_ep>

00000ad0 <__udivmodsi4_loop>:
 ad0:	aa 1f       	adc	r26, r26
 ad2:	bb 1f       	adc	r27, r27
 ad4:	ee 1f       	adc	r30, r30
 ad6:	ff 1f       	adc	r31, r31
 ad8:	a2 17       	cp	r26, r18
 ada:	b3 07       	cpc	r27, r19
 adc:	e4 07       	cpc	r30, r20
 ade:	f5 07       	cpc	r31, r21
 ae0:	20 f0       	brcs	.+8      	; 0xaea <__udivmodsi4_ep>
 ae2:	a2 1b       	sub	r26, r18
 ae4:	b3 0b       	sbc	r27, r19
 ae6:	e4 0b       	sbc	r30, r20
 ae8:	f5 0b       	sbc	r31, r21

00000aea <__udivmodsi4_ep>:
 aea:	66 1f       	adc	r22, r22
 aec:	77 1f       	adc	r23, r23
 aee:	88 1f       	adc	r24, r24
 af0:	99 1f       	adc	r25, r25
 af2:	1a 94       	dec	r1
 af4:	69 f7       	brne	.-38     	; 0xad0 <__udivmodsi4_loop>
 af6:	60 95       	com	r22
 af8:	70 95       	com	r23
 afa:	80 95       	com	r24
 afc:	90 95       	com	r25
 afe:	9b 01       	movw	r18, r22
 b00:	ac 01       	movw	r20, r24
 b02:	bd 01       	movw	r22, r26
 b04:	cf 01       	movw	r24, r30
 b06:	08 95       	ret

00000b08 <__divmodsi4>:
 b08:	05 2e       	mov	r0, r21
 b0a:	97 fb       	bst	r25, 7
 b0c:	1e f4       	brtc	.+6      	; 0xb14 <__divmodsi4+0xc>
 b0e:	00 94       	com	r0
 b10:	0e 94 9b 05 	call	0xb36	; 0xb36 <__negsi2>
 b14:	57 fd       	sbrc	r21, 7
 b16:	07 d0       	rcall	.+14     	; 0xb26 <__divmodsi4_neg2>
 b18:	0e 94 62 05 	call	0xac4	; 0xac4 <__udivmodsi4>
 b1c:	07 fc       	sbrc	r0, 7
 b1e:	03 d0       	rcall	.+6      	; 0xb26 <__divmodsi4_neg2>
 b20:	4e f4       	brtc	.+18     	; 0xb34 <__divmodsi4_exit>
 b22:	0c 94 9b 05 	jmp	0xb36	; 0xb36 <__negsi2>

00000b26 <__divmodsi4_neg2>:
 b26:	50 95       	com	r21
 b28:	40 95       	com	r20
 b2a:	30 95       	com	r19
 b2c:	21 95       	neg	r18
 b2e:	3f 4f       	sbci	r19, 0xFF	; 255
 b30:	4f 4f       	sbci	r20, 0xFF	; 255
 b32:	5f 4f       	sbci	r21, 0xFF	; 255

00000b34 <__divmodsi4_exit>:
 b34:	08 95       	ret

00000b36 <__negsi2>:
 b36:	90 95       	com	r25
 b38:	80 95       	com	r24
 b3a:	70 95       	com	r23
 b3c:	61 95       	neg	r22
 b3e:	7f 4f       	sbci	r23, 0xFF	; 255
 b40:	8f 4f       	sbci	r24, 0xFF	; 255
 b42:	9f 4f       	sbci	r25, 0xFF	; 255
 b44:	08 95       	ret

00000b46 <_exit>:
 b46:	f8 94       	cli

00000b48 <__stop_program>:
 b48:	ff cf       	rjmp	.-2      	; 0xb48 <__stop_program>
