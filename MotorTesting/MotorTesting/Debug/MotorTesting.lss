
MotorTesting.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000192  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  000008b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  00000940  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000412  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000012d  00000000  00000000  00000dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000350  00000000  00000000  00000eff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  00001250  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000fa  00000000  00000000  00001284  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	e2 e9       	ldi	r30, 0x92	; 146
  f8:	f1 e0       	ldi	r31, 0x01	; 1
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	a0 30       	cpi	r26, 0x00	; 0
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
 106:	12 e0       	ldi	r17, 0x02	; 2
 108:	a0 e0       	ldi	r26, 0x00	; 0
 10a:	b2 e0       	ldi	r27, 0x02	; 2
 10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
 10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
 110:	a0 30       	cpi	r26, 0x00	; 0
 112:	b1 07       	cpc	r27, r17
 114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
 116:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
 11a:	0c 94 c7 00 	jmp	0x18e	; 0x18e <_exit>

0000011e <__bad_interrupt>:
 11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <pwm_init>:
#define CLEARBIT(x,b)  x&=~b;
#define TOGGLEBIT(x,b)  x^=b;

void pwm_init(void)
{
	TCCR4A = 0xA8;
 122:	88 ea       	ldi	r24, 0xA8	; 168
 124:	80 93 a0 00 	sts	0x00A0, r24
	TCCR4B = 0x11;
 128:	81 e1       	ldi	r24, 0x11	; 17
 12a:	80 93 a1 00 	sts	0x00A1, r24
	ICR4 = 737;
 12e:	81 ee       	ldi	r24, 0xE1	; 225
 130:	92 e0       	ldi	r25, 0x02	; 2
 132:	90 93 a7 00 	sts	0x00A7, r25
 136:	80 93 a6 00 	sts	0x00A6, r24
}
 13a:	08 95       	ret

0000013c <main>:

int main(void)
{
	pwm_init();
 13c:	0e 94 91 00 	call	0x122	; 0x122 <pwm_init>
	SETBIT(PORTG, BIT(4));
 140:	a4 9a       	sbi	0x14, 4	; 20
	SETBIT(PORTH, BIT(3));
 142:	e2 e0       	ldi	r30, 0x02	; 2
 144:	f1 e0       	ldi	r31, 0x01	; 1
 146:	80 81       	ld	r24, Z
 148:	88 60       	ori	r24, 0x08	; 8
 14a:	80 83       	st	Z, r24
    while(1)
    {
		TOGGLEBIT(PORTG, BIT(4));
 14c:	a0 e1       	ldi	r26, 0x10	; 16
        OCR4A = 737;
 14e:	e8 ea       	ldi	r30, 0xA8	; 168
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	21 ee       	ldi	r18, 0xE1	; 225
 154:	32 e0       	ldi	r19, 0x02	; 2
		_delay_ms(2000);
		OCR4A = 400;
 156:	80 e9       	ldi	r24, 0x90	; 144
 158:	91 e0       	ldi	r25, 0x01	; 1
	pwm_init();
	SETBIT(PORTG, BIT(4));
	SETBIT(PORTH, BIT(3));
    while(1)
    {
		TOGGLEBIT(PORTG, BIT(4));
 15a:	44 b3       	in	r20, 0x14	; 20
 15c:	4a 27       	eor	r20, r26
 15e:	44 bb       	out	0x14, r20	; 20
        OCR4A = 737;
 160:	31 83       	std	Z+1, r19	; 0x01
 162:	20 83       	st	Z, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 164:	4f ef       	ldi	r20, 0xFF	; 255
 166:	5f ef       	ldi	r21, 0xFF	; 255
 168:	69 e5       	ldi	r22, 0x59	; 89
 16a:	41 50       	subi	r20, 0x01	; 1
 16c:	50 40       	sbci	r21, 0x00	; 0
 16e:	60 40       	sbci	r22, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <main+0x2e>
 172:	00 c0       	rjmp	.+0      	; 0x174 <main+0x38>
 174:	00 00       	nop
		_delay_ms(2000);
		OCR4A = 400;
 176:	91 83       	std	Z+1, r25	; 0x01
 178:	80 83       	st	Z, r24
 17a:	4f ef       	ldi	r20, 0xFF	; 255
 17c:	5f ef       	ldi	r21, 0xFF	; 255
 17e:	69 e5       	ldi	r22, 0x59	; 89
 180:	41 50       	subi	r20, 0x01	; 1
 182:	50 40       	sbci	r21, 0x00	; 0
 184:	60 40       	sbci	r22, 0x00	; 0
 186:	e1 f7       	brne	.-8      	; 0x180 <main+0x44>
 188:	00 c0       	rjmp	.+0      	; 0x18a <main+0x4e>
 18a:	00 00       	nop
 18c:	e6 cf       	rjmp	.-52     	; 0x15a <main+0x1e>

0000018e <_exit>:
 18e:	f8 94       	cli

00000190 <__stop_program>:
 190:	ff cf       	rjmp	.-2      	; 0x190 <__stop_program>
