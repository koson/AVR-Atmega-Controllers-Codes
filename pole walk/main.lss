
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  00002686  000026fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002686  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  0080020c  00002692  00002706  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00002706  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003b4  00000000  00000000  00002726  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002120  00000000  00000000  00002ada  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000368  00000000  00000000  00004bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002476  00000000  00000000  00004f62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002d0  00000000  00000000  000073d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034a  00000000  00000000  000076a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001aae  00000000  00000000  000079f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000138  00000000  00000000  000094a0  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	12 e0       	ldi	r17, 0x02	; 2
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b2 e0       	ldi	r27, 0x02	; 2
      f6:	e6 e8       	ldi	r30, 0x86	; 134
      f8:	f6 e2       	ldi	r31, 0x26	; 38
      fa:	02 c0       	rjmp	.+4      	; 0x100 <.do_copy_data_start>

000000fc <.do_copy_data_loop>:
      fc:	05 90       	lpm	r0, Z+
      fe:	0d 92       	st	X+, r0

00000100 <.do_copy_data_start>:
     100:	ac 30       	cpi	r26, 0x0C	; 12
     102:	b1 07       	cpc	r27, r17
     104:	d9 f7       	brne	.-10     	; 0xfc <.do_copy_data_loop>

00000106 <__do_clear_bss>:
     106:	12 e0       	ldi	r17, 0x02	; 2
     108:	ac e0       	ldi	r26, 0x0C	; 12
     10a:	b2 e0       	ldi	r27, 0x02	; 2
     10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
     10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
     110:	a7 34       	cpi	r26, 0x47	; 71
     112:	b1 07       	cpc	r27, r17
     114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
     116:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <main>
     11a:	0c 94 41 13 	jmp	0x2682	; 0x2682 <_exit>

0000011e <__bad_interrupt>:
     11e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000122 <compute_duty_cycle>:
}



unsigned int compute_duty_cycle(unsigned int dc,char ix)
{
     122:	fc 01       	movw	r30, r24
	
if (ix == '1')
     124:	61 33       	cpi	r22, 0x31	; 49
     126:	29 f4       	brne	.+10     	; 0x132 <compute_duty_cycle+0x10>
	return 	( ((ICR1 /100 ) * dc));
     128:	80 91 86 00 	lds	r24, 0x0086
     12c:	90 91 87 00 	lds	r25, 0x0087
     130:	14 c0       	rjmp	.+40     	; 0x15a <compute_duty_cycle+0x38>
if (ix == '3')
     132:	63 33       	cpi	r22, 0x33	; 51
     134:	29 f4       	brne	.+10     	; 0x140 <compute_duty_cycle+0x1e>
	return 	( ((ICR3 /100 ) * dc));
     136:	80 91 96 00 	lds	r24, 0x0096
     13a:	90 91 97 00 	lds	r25, 0x0097
     13e:	0d c0       	rjmp	.+26     	; 0x15a <compute_duty_cycle+0x38>
if(ix == '4')
     140:	64 33       	cpi	r22, 0x34	; 52
     142:	29 f4       	brne	.+10     	; 0x14e <compute_duty_cycle+0x2c>
	return 	( ((ICR4 /100 ) * dc));
     144:	80 91 a6 00 	lds	r24, 0x00A6
     148:	90 91 a7 00 	lds	r25, 0x00A7
     14c:	06 c0       	rjmp	.+12     	; 0x15a <compute_duty_cycle+0x38>
if(ix == '5')
     14e:	65 33       	cpi	r22, 0x35	; 53
     150:	89 f4       	brne	.+34     	; 0x174 <compute_duty_cycle+0x52>
	return 	( ((ICR5 /100 ) * dc));
     152:	80 91 26 01 	lds	r24, 0x0126
     156:	90 91 27 01 	lds	r25, 0x0127
     15a:	64 e6       	ldi	r22, 0x64	; 100
     15c:	70 e0       	ldi	r23, 0x00	; 0
     15e:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <__udivmodhi4>
     162:	e6 9f       	mul	r30, r22
     164:	90 01       	movw	r18, r0
     166:	e7 9f       	mul	r30, r23
     168:	30 0d       	add	r19, r0
     16a:	f6 9f       	mul	r31, r22
     16c:	30 0d       	add	r19, r0
     16e:	11 24       	eor	r1, r1
}
     170:	c9 01       	movw	r24, r18
     172:	08 95       	ret
     174:	08 95       	ret

00000176 <toggleE>:
	//WaitMs(1);
}


void toggleE(void)
{
     176:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     178:	83 e3       	ldi	r24, 0x33	; 51
     17a:	97 e0       	ldi	r25, 0x07	; 7
     17c:	01 97       	sbiw	r24, 0x01	; 1
     17e:	f1 f7       	brne	.-4      	; 0x17c <toggleE+0x6>
SETBIT(PORTE,BIT(0));
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
     180:	70 98       	cbi	0x0e, 0	; 14
}
     182:	08 95       	ret

00000184 <dely_ns>:

void dely_ns(unsigned char tim)
{
     184:	20 91 0c 02 	lds	r18, 0x020C
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	02 c0       	rjmp	.+4      	; 0x190 <dely_ns+0xc>
	for(j=0;j<tim;j++)
     18c:	9f 5f       	subi	r25, 0xFF	; 255
     18e:	2a e0       	ldi	r18, 0x0A	; 10
     190:	98 17       	cp	r25, r24
     192:	e0 f3       	brcs	.-8      	; 0x18c <dely_ns+0x8>
     194:	20 93 0c 02 	sts	0x020C, r18
     198:	90 93 0d 02 	sts	0x020D, r25
	{
		for(k=0;k<10;k++)
		{};
	}
}
     19c:	08 95       	ret

0000019e <lcd_cmd>:

void lcd_cmd(unsigned char ch)
{
     19e:	a5 98       	cbi	0x14, 5	; 20
	int temp;
	CLEARBIT(PORTG,BIT(5));
	CLEARBIT(PORTE,BIT(0));
     1a0:	70 98       	cbi	0x0e, 0	; 14
					/*PORTA = (ch & 0xF0);			// Send twice because ATMEGA is too fast 
  					PORTA = (ch & 0xF0); 			// for the LCD display !
  					PORTA = ch & 0xF0;
   					PORTA = ch & 0xF0;*/

	temp= ch & 0b11000000; // '10'000000
     1a2:	48 2f       	mov	r20, r24
     1a4:	50 e0       	ldi	r21, 0x00	; 0
	PORTE=temp;
     1a6:	9a 01       	movw	r18, r20
     1a8:	20 7c       	andi	r18, 0xC0	; 192
     1aa:	30 70       	andi	r19, 0x00	; 0
     1ac:	2e b9       	out	0x0e, r18	; 14
	temp=(ch >> 3) & 0b00000110; // 00000'11'0
	PORTE= PORTE | temp;
     1ae:	9e b1       	in	r25, 0x0e	; 14
     1b0:	86 95       	lsr	r24
     1b2:	86 95       	lsr	r24
     1b4:	86 95       	lsr	r24
     1b6:	86 70       	andi	r24, 0x06	; 6
     1b8:	98 2b       	or	r25, r24
     1ba:	9e b9       	out	0x0e, r25	; 14
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     1bc:	68 e1       	ldi	r22, 0x18	; 24
     1be:	86 2f       	mov	r24, r22
     1c0:	8a 95       	dec	r24
     1c2:	f1 f7       	brne	.-4      	; 0x1c0 <lcd_cmd+0x22>
}


void toggleE(void)
{
SETBIT(PORTE,BIT(0));
     1c4:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1c6:	23 e3       	ldi	r18, 0x33	; 51
     1c8:	37 e0       	ldi	r19, 0x07	; 7
     1ca:	c9 01       	movw	r24, r18
     1cc:	01 97       	sbiw	r24, 0x01	; 1
     1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_cmd+0x2e>
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
     1d0:	70 98       	cbi	0x0e, 0	; 14
	temp=(ch >> 3) & 0b00000110; // 00000'11'0
	PORTE= PORTE | temp;
	_delay_us(5);
	toggleE();
   // Extract lower nibble
	SETBIT(PORTG,BIT(5));
     1d2:	a5 9a       	sbi	0x14, 5	; 20
   	CLEARBIT(PORTG,BIT(5));
     1d4:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
     1d6:	70 98       	cbi	0x0e, 0	; 14
   					/*PORTA = ((ch << 4) & 0xF0); 	// Send twice because ATMEGA is too fast 
   					PORTA = ((ch << 4) & 0xF0);	// for the LCD display !
   					PORTA = (ch << 4) & 0xF0;
   					PORTA = (ch << 4) & 0xF0;*/
	temp=(ch << 4) & 0b11000000; // '10'000000
	PORTE=temp;
     1d8:	ca 01       	movw	r24, r20
     1da:	74 e0       	ldi	r23, 0x04	; 4
     1dc:	88 0f       	add	r24, r24
     1de:	99 1f       	adc	r25, r25
     1e0:	7a 95       	dec	r23
     1e2:	e1 f7       	brne	.-8      	; 0x1dc <lcd_cmd+0x3e>
     1e4:	80 7c       	andi	r24, 0xC0	; 192
     1e6:	90 70       	andi	r25, 0x00	; 0
     1e8:	8e b9       	out	0x0e, r24	; 14
	temp=(ch << 1) & 0b00000110; // 00000'01'0 
	PORTE= PORTE | temp;
     1ea:	8e b1       	in	r24, 0x0e	; 14
     1ec:	44 0f       	add	r20, r20
     1ee:	55 1f       	adc	r21, r21
     1f0:	46 70       	andi	r20, 0x06	; 6
     1f2:	50 70       	andi	r21, 0x00	; 0
     1f4:	84 2b       	or	r24, r20
     1f6:	8e b9       	out	0x0e, r24	; 14
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     1f8:	6a 95       	dec	r22
     1fa:	f1 f7       	brne	.-4      	; 0x1f8 <lcd_cmd+0x5a>
}


void toggleE(void)
{
SETBIT(PORTE,BIT(0));
     1fc:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1fe:	c9 01       	movw	r24, r18
     200:	01 97       	sbiw	r24, 0x01	; 1
     202:	f1 f7       	brne	.-4      	; 0x200 <lcd_cmd+0x62>
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
     204:	70 98       	cbi	0x0e, 0	; 14
	PORTE=temp;
	temp=(ch << 1) & 0b00000110; // 00000'01'0 
	PORTE= PORTE | temp;
	_delay_us(5);
	toggleE();
   	PORTE = 0x00;
     206:	1e b8       	out	0x0e, r1	; 14
     208:	2a e0       	ldi	r18, 0x0A	; 10
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	08 c0       	rjmp	.+16     	; 0x21e <lcd_cmd+0x80>
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	90 e0       	ldi	r25, 0x00	; 0
	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
     212:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
     214:	01 96       	adiw	r24, 0x01	; 1
     216:	4c e0       	ldi	r20, 0x0C	; 12
     218:	8c 3c       	cpi	r24, 0xCC	; 204
     21a:	94 07       	cpc	r25, r20
     21c:	d1 f7       	brne	.-12     	; 0x212 <lcd_cmd+0x74>
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
     21e:	21 50       	subi	r18, 0x01	; 1
     220:	30 40       	sbci	r19, 0x00	; 0
     222:	8f ef       	ldi	r24, 0xFF	; 255
     224:	2f 3f       	cpi	r18, 0xFF	; 255
     226:	38 07       	cpc	r19, r24
     228:	91 f7       	brne	.-28     	; 0x20e <lcd_cmd+0x70>
	toggleE();
   	PORTE = 0x00;
   	WaitMs(10);


}
     22a:	08 95       	ret

0000022c <lcd_init>:
void lcd_gotoxy2(unsigned char pos);
void lcd_exit(void);
void WaitMs(unsigned int ms);

void lcd_init(void)	//init the lcd
{	
     22c:	8f ef       	ldi	r24, 0xFF	; 255
     22e:	8d b9       	out	0x0d, r24	; 13
	DDRE=0xFF;
	//DDRC=0x80;
	DDRG=0xFF;
     230:	83 bb       	out	0x13, r24	; 19
     232:	2f e0       	ldi	r18, 0x0F	; 15
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	08 c0       	rjmp	.+16     	; 0x248 <lcd_init+0x1c>
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	90 e0       	ldi	r25, 0x00	; 0
	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
     23c:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
     23e:	01 96       	adiw	r24, 0x01	; 1
     240:	4c e0       	ldi	r20, 0x0C	; 12
     242:	8c 3c       	cpi	r24, 0xCC	; 204
     244:	94 07       	cpc	r25, r20
     246:	d1 f7       	brne	.-12     	; 0x23c <lcd_init+0x10>
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
     248:	21 50       	subi	r18, 0x01	; 1
     24a:	30 40       	sbci	r19, 0x00	; 0
     24c:	8f ef       	ldi	r24, 0xFF	; 255
     24e:	2f 3f       	cpi	r18, 0xFF	; 255
     250:	38 07       	cpc	r19, r24
     252:	91 f7       	brne	.-28     	; 0x238 <lcd_init+0xc>
{	
	DDRE=0xFF;
	//DDRC=0x80;
	DDRG=0xFF;
	WaitMs(15);
	CLEARBIT(PORTG,BIT(5));
     254:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
     256:	70 98       	cbi	0x0e, 0	; 14
	PORTE=0x00;
     258:	1e b8       	out	0x0e, r1	; 14
	lcd_cmd(0x20);		//data is 8-bit length
     25a:	80 e2       	ldi	r24, 0x20	; 32
     25c:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_cmd>
     260:	21 e0       	ldi	r18, 0x01	; 1
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	08 c0       	rjmp	.+16     	; 0x276 <lcd_init+0x4a>
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	90 e0       	ldi	r25, 0x00	; 0
	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
     26a:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
     26c:	01 96       	adiw	r24, 0x01	; 1
     26e:	4c e0       	ldi	r20, 0x0C	; 12
     270:	8c 3c       	cpi	r24, 0xCC	; 204
     272:	94 07       	cpc	r25, r20
     274:	d1 f7       	brne	.-12     	; 0x26a <lcd_init+0x3e>
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
     276:	21 50       	subi	r18, 0x01	; 1
     278:	30 40       	sbci	r19, 0x00	; 0
     27a:	8f ef       	ldi	r24, 0xFF	; 255
     27c:	2f 3f       	cpi	r18, 0xFF	; 255
     27e:	38 07       	cpc	r19, r24
     280:	91 f7       	brne	.-28     	; 0x266 <lcd_init+0x3a>
	CLEARBIT(PORTG,BIT(5));
	CLEARBIT(PORTE,BIT(0));
	PORTE=0x00;
	lcd_cmd(0x20);		//data is 8-bit length
	WaitMs(1);
	lcd_cmd(0x20);		//data is 8-bit length
     282:	80 e2       	ldi	r24, 0x20	; 32
     284:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_cmd>
     288:	21 e0       	ldi	r18, 0x01	; 1
     28a:	30 e0       	ldi	r19, 0x00	; 0
     28c:	08 c0       	rjmp	.+16     	; 0x29e <lcd_init+0x72>
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	90 e0       	ldi	r25, 0x00	; 0
	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
     292:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
     294:	01 96       	adiw	r24, 0x01	; 1
     296:	4c e0       	ldi	r20, 0x0C	; 12
     298:	8c 3c       	cpi	r24, 0xCC	; 204
     29a:	94 07       	cpc	r25, r20
     29c:	d1 f7       	brne	.-12     	; 0x292 <lcd_init+0x66>
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
     29e:	21 50       	subi	r18, 0x01	; 1
     2a0:	30 40       	sbci	r19, 0x00	; 0
     2a2:	8f ef       	ldi	r24, 0xFF	; 255
     2a4:	2f 3f       	cpi	r18, 0xFF	; 255
     2a6:	38 07       	cpc	r19, r24
     2a8:	91 f7       	brne	.-28     	; 0x28e <lcd_init+0x62>
	PORTE=0x00;
	lcd_cmd(0x20);		//data is 8-bit length
	WaitMs(1);
	lcd_cmd(0x20);		//data is 8-bit length
	WaitMs(1);
	lcd_cmd(0x20);		//data is 8-bit length
     2aa:	80 e2       	ldi	r24, 0x20	; 32
     2ac:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_cmd>
     2b0:	21 e0       	ldi	r18, 0x01	; 1
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	08 c0       	rjmp	.+16     	; 0x2c6 <lcd_init+0x9a>
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	90 e0       	ldi	r25, 0x00	; 0
	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
     2ba:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	4c e0       	ldi	r20, 0x0C	; 12
     2c0:	8c 3c       	cpi	r24, 0xCC	; 204
     2c2:	94 07       	cpc	r25, r20
     2c4:	d1 f7       	brne	.-12     	; 0x2ba <lcd_init+0x8e>
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
     2c6:	21 50       	subi	r18, 0x01	; 1
     2c8:	30 40       	sbci	r19, 0x00	; 0
     2ca:	8f ef       	ldi	r24, 0xFF	; 255
     2cc:	2f 3f       	cpi	r18, 0xFF	; 255
     2ce:	38 07       	cpc	r19, r24
     2d0:	91 f7       	brne	.-28     	; 0x2b6 <lcd_init+0x8a>
	WaitMs(1);
	lcd_cmd(0x20);		//data is 8-bit length
	WaitMs(1);
	lcd_cmd(0x20);		//data is 8-bit length
	WaitMs(1);
	lcd_cmd(0x28);		//sets character font
     2d2:	88 e2       	ldi	r24, 0x28	; 40
     2d4:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_cmd>
     2d8:	21 e0       	ldi	r18, 0x01	; 1
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	08 c0       	rjmp	.+16     	; 0x2ee <lcd_init+0xc2>
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	90 e0       	ldi	r25, 0x00	; 0
	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
     2e2:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
     2e4:	01 96       	adiw	r24, 0x01	; 1
     2e6:	4c e0       	ldi	r20, 0x0C	; 12
     2e8:	8c 3c       	cpi	r24, 0xCC	; 204
     2ea:	94 07       	cpc	r25, r20
     2ec:	d1 f7       	brne	.-12     	; 0x2e2 <lcd_init+0xb6>
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
     2ee:	21 50       	subi	r18, 0x01	; 1
     2f0:	30 40       	sbci	r19, 0x00	; 0
     2f2:	8f ef       	ldi	r24, 0xFF	; 255
     2f4:	2f 3f       	cpi	r18, 0xFF	; 255
     2f6:	38 07       	cpc	r19, r24
     2f8:	91 f7       	brne	.-28     	; 0x2de <lcd_init+0xb2>
	WaitMs(1);
	lcd_cmd(0x20);		//data is 8-bit length
	WaitMs(1);
	lcd_cmd(0x28);		//sets character font
	WaitMs(1);
	lcd_cmd(0x0E);		//display off(d,c,b=0) 08
     2fa:	8e e0       	ldi	r24, 0x0E	; 14
     2fc:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_cmd>
     300:	21 e0       	ldi	r18, 0x01	; 1
     302:	30 e0       	ldi	r19, 0x00	; 0
     304:	08 c0       	rjmp	.+16     	; 0x316 <lcd_init+0xea>
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	90 e0       	ldi	r25, 0x00	; 0
	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
     30a:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
     30c:	01 96       	adiw	r24, 0x01	; 1
     30e:	4c e0       	ldi	r20, 0x0C	; 12
     310:	8c 3c       	cpi	r24, 0xCC	; 204
     312:	94 07       	cpc	r25, r20
     314:	d1 f7       	brne	.-12     	; 0x30a <lcd_init+0xde>
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
     316:	21 50       	subi	r18, 0x01	; 1
     318:	30 40       	sbci	r19, 0x00	; 0
     31a:	8f ef       	ldi	r24, 0xFF	; 255
     31c:	2f 3f       	cpi	r18, 0xFF	; 255
     31e:	38 07       	cpc	r19, r24
     320:	91 f7       	brne	.-28     	; 0x306 <lcd_init+0xda>
	WaitMs(1);
	lcd_cmd(0x28);		//sets character font
	WaitMs(1);
	lcd_cmd(0x0E);		//display off(d,c,b=0) 08
	WaitMs(1);
	lcd_cmd(0x01);		//clears the data
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_cmd>
     328:	21 e0       	ldi	r18, 0x01	; 1
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	08 c0       	rjmp	.+16     	; 0x33e <lcd_init+0x112>
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	90 e0       	ldi	r25, 0x00	; 0
	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
     332:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
     334:	01 96       	adiw	r24, 0x01	; 1
     336:	4c e0       	ldi	r20, 0x0C	; 12
     338:	8c 3c       	cpi	r24, 0xCC	; 204
     33a:	94 07       	cpc	r25, r20
     33c:	d1 f7       	brne	.-12     	; 0x332 <lcd_init+0x106>
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
     33e:	21 50       	subi	r18, 0x01	; 1
     340:	30 40       	sbci	r19, 0x00	; 0
     342:	8f ef       	ldi	r24, 0xFF	; 255
     344:	2f 3f       	cpi	r18, 0xFF	; 255
     346:	38 07       	cpc	r19, r24
     348:	91 f7       	brne	.-28     	; 0x32e <lcd_init+0x102>
	WaitMs(1);
	lcd_cmd(0x01);		//clears the data
	WaitMs(1);
	//lcd_cmd(0x02);		//home
	//WaitMs(1);
	lcd_cmd(0x6);		//entry mode--increment
     34a:	86 e0       	ldi	r24, 0x06	; 6
     34c:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_cmd>
     350:	21 e0       	ldi	r18, 0x01	; 1
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	08 c0       	rjmp	.+16     	; 0x366 <lcd_init+0x13a>
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	90 e0       	ldi	r25, 0x00	; 0
	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
     35a:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
     35c:	01 96       	adiw	r24, 0x01	; 1
     35e:	4c e0       	ldi	r20, 0x0C	; 12
     360:	8c 3c       	cpi	r24, 0xCC	; 204
     362:	94 07       	cpc	r25, r20
     364:	d1 f7       	brne	.-12     	; 0x35a <lcd_init+0x12e>
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
     366:	21 50       	subi	r18, 0x01	; 1
     368:	30 40       	sbci	r19, 0x00	; 0
     36a:	8f ef       	ldi	r24, 0xFF	; 255
     36c:	2f 3f       	cpi	r18, 0xFF	; 255
     36e:	38 07       	cpc	r19, r24
     370:	91 f7       	brne	.-28     	; 0x356 <lcd_init+0x12a>
	//WaitMs(1);
	lcd_cmd(0x6);		//entry mode--increment
	WaitMs(1);
	//lcd_cmd(0x0C);		//display--on,cursor--on.blinking--on
	//WaitMs(1);
}
     372:	08 95       	ret

00000374 <lcd_char>:

}


void lcd_char(unsigned char data)
{	
     374:	48 2f       	mov	r20, r24
     376:	2f e0       	ldi	r18, 0x0F	; 15
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	08 c0       	rjmp	.+16     	; 0x38c <lcd_char+0x18>
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	90 e0       	ldi	r25, 0x00	; 0
	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
     380:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
     382:	01 96       	adiw	r24, 0x01	; 1
     384:	5c e0       	ldi	r21, 0x0C	; 12
     386:	8c 3c       	cpi	r24, 0xCC	; 204
     388:	95 07       	cpc	r25, r21
     38a:	d1 f7       	brne	.-12     	; 0x380 <lcd_char+0xc>
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
     38c:	21 50       	subi	r18, 0x01	; 1
     38e:	30 40       	sbci	r19, 0x00	; 0
     390:	8f ef       	ldi	r24, 0xFF	; 255
     392:	2f 3f       	cpi	r18, 0xFF	; 255
     394:	38 07       	cpc	r19, r24
     396:	91 f7       	brne	.-28     	; 0x37c <lcd_char+0x8>

void lcd_char(unsigned char data)
{	
	int temp;
	WaitMs(15);
	SETBIT(PORTG,BIT(5));
     398:	a5 9a       	sbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
     39a:	70 98       	cbi	0x0e, 0	; 14
	temp= (data & 0b11000000); // '10'000000
     39c:	24 2f       	mov	r18, r20
     39e:	30 e0       	ldi	r19, 0x00	; 0
	PORTE=temp;
     3a0:	c9 01       	movw	r24, r18
     3a2:	80 7c       	andi	r24, 0xC0	; 192
     3a4:	90 70       	andi	r25, 0x00	; 0
     3a6:	8e b9       	out	0x0e, r24	; 14
	temp=(data>>3) & 0b00000110; // 00000'11'0
	PORTE= PORTE | temp;
     3a8:	8e b1       	in	r24, 0x0e	; 14
     3aa:	46 95       	lsr	r20
     3ac:	46 95       	lsr	r20
     3ae:	46 95       	lsr	r20
     3b0:	46 70       	andi	r20, 0x06	; 6
     3b2:	84 2b       	or	r24, r20
     3b4:	8e b9       	out	0x0e, r24	; 14
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     3b6:	68 e1       	ldi	r22, 0x18	; 24
     3b8:	86 2f       	mov	r24, r22
     3ba:	8a 95       	dec	r24
     3bc:	f1 f7       	brne	.-4      	; 0x3ba <lcd_char+0x46>
}


void toggleE(void)
{
SETBIT(PORTE,BIT(0));
     3be:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3c0:	43 e3       	ldi	r20, 0x33	; 51
     3c2:	57 e0       	ldi	r21, 0x07	; 7
     3c4:	ca 01       	movw	r24, r20
     3c6:	01 97       	sbiw	r24, 0x01	; 1
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <lcd_char+0x52>
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
     3ca:	70 98       	cbi	0x0e, 0	; 14
	toggleE();				// '10'000'11'0 (first nibble Done)
							/* PORTA = (data & 0xF0);
							PORTA = (data & 0xF0);
							PORTA = (data & 0xF0);*/

	CLEARBIT(PORTG,BIT(5));
     3cc:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
     3ce:	70 98       	cbi	0x0e, 0	; 14
	SETBIT(PORTG,BIT(5));
     3d0:	a5 9a       	sbi	0x14, 5	; 20
	temp=(data << 4) & 0b11000000; // '10'000000
	PORTE=temp;
     3d2:	c9 01       	movw	r24, r18
     3d4:	f4 e0       	ldi	r31, 0x04	; 4
     3d6:	88 0f       	add	r24, r24
     3d8:	99 1f       	adc	r25, r25
     3da:	fa 95       	dec	r31
     3dc:	e1 f7       	brne	.-8      	; 0x3d6 <lcd_char+0x62>
     3de:	80 7c       	andi	r24, 0xC0	; 192
     3e0:	90 70       	andi	r25, 0x00	; 0
     3e2:	8e b9       	out	0x0e, r24	; 14
	temp=(data << 1) & 0b00000110; // 00000'01'0 
	PORTE= PORTE | temp;
     3e4:	8e b1       	in	r24, 0x0e	; 14
     3e6:	22 0f       	add	r18, r18
     3e8:	33 1f       	adc	r19, r19
     3ea:	26 70       	andi	r18, 0x06	; 6
     3ec:	30 70       	andi	r19, 0x00	; 0
     3ee:	82 2b       	or	r24, r18
     3f0:	8e b9       	out	0x0e, r24	; 14
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     3f2:	6a 95       	dec	r22
     3f4:	f1 f7       	brne	.-4      	; 0x3f2 <lcd_char+0x7e>
}


void toggleE(void)
{
SETBIT(PORTE,BIT(0));
     3f6:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3f8:	ca 01       	movw	r24, r20
     3fa:	01 97       	sbiw	r24, 0x01	; 1
     3fc:	f1 f7       	brne	.-4      	; 0x3fa <lcd_char+0x86>
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
     3fe:	70 98       	cbi	0x0e, 0	; 14
	_delay_us(5);
						/*PORTA = (data << 4);
						PORTA = (data << 4);
						PORTA = (data << 4);	*/					
	toggleE();
}
     400:	08 95       	ret

00000402 <lcd_string>:

void lcd_string(unsigned char str[32])
{
     402:	cf 92       	push	r12
     404:	df 92       	push	r13
     406:	ef 92       	push	r14
     408:	ff 92       	push	r15
     40a:	1f 93       	push	r17
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	7c 01       	movw	r14, r24
	int poop,bitch;
	unsigned char k=0;
	PORTA=0x01;
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	82 b9       	out	0x02, r24	; 2
	SETBIT(PORTG,BIT(5));
     416:	a5 9a       	sbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
     418:	70 98       	cbi	0x0e, 0	; 14
     41a:	10 e0       	ldi	r17, 0x00	; 0
     41c:	63 e3       	ldi	r22, 0x33	; 51
     41e:	c6 2e       	mov	r12, r22
     420:	67 e0       	ldi	r22, 0x07	; 7
     422:	d6 2e       	mov	r13, r22
     424:	47 c0       	rjmp	.+142    	; 0x4b4 <lcd_string+0xb2>
	while(str[k]!='\0')	//Till null character is encountered
		{
			if(k==16)
     426:	10 31       	cpi	r17, 0x10	; 16
     428:	19 f4       	brne	.+6      	; 0x430 <lcd_string+0x2e>
				lcd_cmd(LINE2);
     42a:	80 ec       	ldi	r24, 0xC0	; 192
     42c:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_cmd>
			SETBIT(PORTG,BIT(5));
     430:	a5 9a       	sbi	0x14, 5	; 20
			CLEARBIT(PORTE,BIT(0));
     432:	70 98       	cbi	0x0e, 0	; 14
			bitch=str[k]; //10111001
     434:	28 81       	ld	r18, Y
     436:	30 e0       	ldi	r19, 0x00	; 0
			poop= bitch & 0b11000000; // '10'000000
			PORTE=poop;
     438:	c9 01       	movw	r24, r18
     43a:	80 7c       	andi	r24, 0xC0	; 192
     43c:	90 70       	andi	r25, 0x00	; 0
     43e:	8e b9       	out	0x0e, r24	; 14
			poop=(bitch>>3) & 0b00000110; // 00000'11'0
			PORTE= PORTE | poop;
     440:	4e b1       	in	r20, 0x0e	; 14
     442:	c9 01       	movw	r24, r18
     444:	53 e0       	ldi	r21, 0x03	; 3
     446:	95 95       	asr	r25
     448:	87 95       	ror	r24
     44a:	5a 95       	dec	r21
     44c:	e1 f7       	brne	.-8      	; 0x446 <lcd_string+0x44>
     44e:	86 70       	andi	r24, 0x06	; 6
     450:	90 70       	andi	r25, 0x00	; 0
     452:	48 2b       	or	r20, r24
     454:	4e b9       	out	0x0e, r20	; 14
}


void toggleE(void)
{
SETBIT(PORTE,BIT(0));
     456:	70 9a       	sbi	0x0e, 0	; 14
     458:	c6 01       	movw	r24, r12
     45a:	01 97       	sbiw	r24, 0x01	; 1
     45c:	f1 f7       	brne	.-4      	; 0x45a <lcd_string+0x58>
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
     45e:	70 98       	cbi	0x0e, 0	; 14
			PORTE=poop;
			poop=(bitch>>3) & 0b00000110; // 00000'11'0
			PORTE= PORTE | poop;
			//PORTA=((str[k])&0xF0)|0x01;
			toggleE();
			CLEARBIT(PORTG,BIT(5))
     460:	a5 98       	cbi	0x14, 5	; 20
			SETBIT(PORTG,BIT(5));
     462:	a5 9a       	sbi	0x14, 5	; 20
			CLEARBIT(PORTE,BIT(0));
     464:	70 98       	cbi	0x0e, 0	; 14
			bitch=str[k];
			poop=(bitch << 4) & 0b11000000; // '10'000000
			PORTE=poop;
     466:	c9 01       	movw	r24, r18
     468:	b4 e0       	ldi	r27, 0x04	; 4
     46a:	88 0f       	add	r24, r24
     46c:	99 1f       	adc	r25, r25
     46e:	ba 95       	dec	r27
     470:	e1 f7       	brne	.-8      	; 0x46a <lcd_string+0x68>
     472:	80 7c       	andi	r24, 0xC0	; 192
     474:	90 70       	andi	r25, 0x00	; 0
     476:	8e b9       	out	0x0e, r24	; 14
			poop=(bitch << 1) & 0b00000110; // 00000'01'0 
			PORTE= PORTE | poop;
     478:	8e b1       	in	r24, 0x0e	; 14
     47a:	22 0f       	add	r18, r18
     47c:	33 1f       	adc	r19, r19
     47e:	26 70       	andi	r18, 0x06	; 6
     480:	30 70       	andi	r19, 0x00	; 0
     482:	82 2b       	or	r24, r18
     484:	8e b9       	out	0x0e, r24	; 14
}


void toggleE(void)
{
SETBIT(PORTE,BIT(0));
     486:	70 9a       	sbi	0x0e, 0	; 14
     488:	c6 01       	movw	r24, r12
     48a:	01 97       	sbiw	r24, 0x01	; 1
     48c:	f1 f7       	brne	.-4      	; 0x48a <lcd_string+0x88>
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
     48e:	70 98       	cbi	0x0e, 0	; 14
     490:	21 e0       	ldi	r18, 0x01	; 1
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	08 c0       	rjmp	.+16     	; 0x4a6 <lcd_string+0xa4>
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	90 e0       	ldi	r25, 0x00	; 0
	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
     49a:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
     49c:	01 96       	adiw	r24, 0x01	; 1
     49e:	4c e0       	ldi	r20, 0x0C	; 12
     4a0:	8c 3c       	cpi	r24, 0xCC	; 204
     4a2:	94 07       	cpc	r25, r20
     4a4:	d1 f7       	brne	.-12     	; 0x49a <lcd_string+0x98>
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
     4a6:	21 50       	subi	r18, 0x01	; 1
     4a8:	30 40       	sbci	r19, 0x00	; 0
     4aa:	8f ef       	ldi	r24, 0xFF	; 255
     4ac:	2f 3f       	cpi	r18, 0xFF	; 255
     4ae:	38 07       	cpc	r19, r24
     4b0:	91 f7       	brne	.-28     	; 0x496 <lcd_string+0x94>
			PORTE=poop;
			poop=(bitch << 1) & 0b00000110; // 00000'01'0 
			PORTE= PORTE | poop;
			//PORTA=((str[k]&(0x0F))*16)|0x01;
			toggleE();
			k++;
     4b2:	1f 5f       	subi	r17, 0xFF	; 255
	int poop,bitch;
	unsigned char k=0;
	PORTA=0x01;
	SETBIT(PORTG,BIT(5));
	CLEARBIT(PORTE,BIT(0));
	while(str[k]!='\0')	//Till null character is encountered
     4b4:	e7 01       	movw	r28, r14
     4b6:	c1 0f       	add	r28, r17
     4b8:	d1 1d       	adc	r29, r1
     4ba:	88 81       	ld	r24, Y
     4bc:	88 23       	and	r24, r24
     4be:	09 f0       	breq	.+2      	; 0x4c2 <lcd_string+0xc0>
     4c0:	b2 cf       	rjmp	.-156    	; 0x426 <lcd_string+0x24>
			//PORTA=((str[k]&(0x0F))*16)|0x01;
			toggleE();
			k++;
			WaitMs(1);
		}
}
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	1f 91       	pop	r17
     4c8:	ff 90       	pop	r15
     4ca:	ef 90       	pop	r14
     4cc:	df 90       	pop	r13
     4ce:	cf 90       	pop	r12
     4d0:	08 95       	ret

000004d2 <lcd_showvalue>:


void lcd_showvalue(unsigned long int num)
{
     4d2:	8f 92       	push	r8
     4d4:	9f 92       	push	r9
     4d6:	af 92       	push	r10
     4d8:	bf 92       	push	r11
     4da:	cf 92       	push	r12
     4dc:	df 92       	push	r13
     4de:	ef 92       	push	r14
     4e0:	ff 92       	push	r15
     4e2:	1f 93       	push	r17
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	4b 01       	movw	r8, r22
     4ea:	5c 01       	movw	r10, r24
	
	unsigned long int n = 0;
	int flag = 0;


	if(num%100000 == 0)
     4ec:	20 ea       	ldi	r18, 0xA0	; 160
     4ee:	36 e8       	ldi	r19, 0x86	; 134
     4f0:	41 e0       	ldi	r20, 0x01	; 1
     4f2:	50 e0       	ldi	r21, 0x00	; 0
     4f4:	0e 94 17 13 	call	0x262e	; 0x262e <__udivmodsi4>
     4f8:	61 15       	cp	r22, r1
     4fa:	71 05       	cpc	r23, r1
     4fc:	81 05       	cpc	r24, r1
     4fe:	91 05       	cpc	r25, r1
     500:	19 f4       	brne	.+6      	; 0x508 <lcd_showvalue+0x36>
     502:	c5 e0       	ldi	r28, 0x05	; 5
     504:	d0 e0       	ldi	r29, 0x00	; 0
     506:	41 c0       	rjmp	.+130    	; 0x58a <lcd_showvalue+0xb8>
	{
		flag = 5;
	}
	
	else if(num%10000 == 0)
     508:	c5 01       	movw	r24, r10
     50a:	b4 01       	movw	r22, r8
     50c:	20 e1       	ldi	r18, 0x10	; 16
     50e:	37 e2       	ldi	r19, 0x27	; 39
     510:	40 e0       	ldi	r20, 0x00	; 0
     512:	50 e0       	ldi	r21, 0x00	; 0
     514:	0e 94 17 13 	call	0x262e	; 0x262e <__udivmodsi4>
     518:	61 15       	cp	r22, r1
     51a:	71 05       	cpc	r23, r1
     51c:	81 05       	cpc	r24, r1
     51e:	91 05       	cpc	r25, r1
     520:	19 f4       	brne	.+6      	; 0x528 <lcd_showvalue+0x56>
     522:	c4 e0       	ldi	r28, 0x04	; 4
     524:	d0 e0       	ldi	r29, 0x00	; 0
     526:	31 c0       	rjmp	.+98     	; 0x58a <lcd_showvalue+0xb8>
	{
		flag = 4;
	}

	else if(num%1000 == 0) 
     528:	c5 01       	movw	r24, r10
     52a:	b4 01       	movw	r22, r8
     52c:	28 ee       	ldi	r18, 0xE8	; 232
     52e:	33 e0       	ldi	r19, 0x03	; 3
     530:	40 e0       	ldi	r20, 0x00	; 0
     532:	50 e0       	ldi	r21, 0x00	; 0
     534:	0e 94 17 13 	call	0x262e	; 0x262e <__udivmodsi4>
     538:	61 15       	cp	r22, r1
     53a:	71 05       	cpc	r23, r1
     53c:	81 05       	cpc	r24, r1
     53e:	91 05       	cpc	r25, r1
     540:	19 f4       	brne	.+6      	; 0x548 <lcd_showvalue+0x76>
     542:	c3 e0       	ldi	r28, 0x03	; 3
     544:	d0 e0       	ldi	r29, 0x00	; 0
     546:	21 c0       	rjmp	.+66     	; 0x58a <lcd_showvalue+0xb8>
	{
		flag = 3;
	}

	else if(num%100 == 0) 
     548:	c5 01       	movw	r24, r10
     54a:	b4 01       	movw	r22, r8
     54c:	24 e6       	ldi	r18, 0x64	; 100
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	40 e0       	ldi	r20, 0x00	; 0
     552:	50 e0       	ldi	r21, 0x00	; 0
     554:	0e 94 17 13 	call	0x262e	; 0x262e <__udivmodsi4>
     558:	61 15       	cp	r22, r1
     55a:	71 05       	cpc	r23, r1
     55c:	81 05       	cpc	r24, r1
     55e:	91 05       	cpc	r25, r1
     560:	19 f4       	brne	.+6      	; 0x568 <lcd_showvalue+0x96>
     562:	c2 e0       	ldi	r28, 0x02	; 2
     564:	d0 e0       	ldi	r29, 0x00	; 0
     566:	11 c0       	rjmp	.+34     	; 0x58a <lcd_showvalue+0xb8>
     568:	c0 e0       	ldi	r28, 0x00	; 0
     56a:	d0 e0       	ldi	r29, 0x00	; 0
     56c:	c5 01       	movw	r24, r10
     56e:	b4 01       	movw	r22, r8
     570:	2a e0       	ldi	r18, 0x0A	; 10
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	40 e0       	ldi	r20, 0x00	; 0
     576:	50 e0       	ldi	r21, 0x00	; 0
     578:	0e 94 17 13 	call	0x262e	; 0x262e <__udivmodsi4>
     57c:	61 15       	cp	r22, r1
     57e:	71 05       	cpc	r23, r1
     580:	81 05       	cpc	r24, r1
     582:	91 05       	cpc	r25, r1
     584:	11 f4       	brne	.+4      	; 0x58a <lcd_showvalue+0xb8>
     586:	c1 e0       	ldi	r28, 0x01	; 1
     588:	d0 e0       	ldi	r29, 0x00	; 0
     58a:	cc 24       	eor	r12, r12
     58c:	dd 24       	eor	r13, r13
     58e:	76 01       	movw	r14, r12
     590:	23 c0       	rjmp	.+70     	; 0x5d8 <lcd_showvalue+0x106>


	while(num!=0)
	{
	
			H = num%10;
     592:	c5 01       	movw	r24, r10
     594:	b4 01       	movw	r22, r8
     596:	2a e0       	ldi	r18, 0x0A	; 10
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	40 e0       	ldi	r20, 0x00	; 0
     59c:	50 e0       	ldi	r21, 0x00	; 0
     59e:	0e 94 17 13 	call	0x262e	; 0x262e <__udivmodsi4>
     5a2:	16 2f       	mov	r17, r22
			num = num/10;
     5a4:	c5 01       	movw	r24, r10
     5a6:	b4 01       	movw	r22, r8
     5a8:	2a e0       	ldi	r18, 0x0A	; 10
     5aa:	30 e0       	ldi	r19, 0x00	; 0
     5ac:	40 e0       	ldi	r20, 0x00	; 0
     5ae:	50 e0       	ldi	r21, 0x00	; 0
     5b0:	0e 94 17 13 	call	0x262e	; 0x262e <__udivmodsi4>
     5b4:	c9 01       	movw	r24, r18
     5b6:	da 01       	movw	r26, r20
     5b8:	4c 01       	movw	r8, r24
     5ba:	5d 01       	movw	r10, r26
			n = (n*10)+H;
     5bc:	c7 01       	movw	r24, r14
     5be:	b6 01       	movw	r22, r12
     5c0:	2a e0       	ldi	r18, 0x0A	; 10
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	40 e0       	ldi	r20, 0x00	; 0
     5c6:	50 e0       	ldi	r21, 0x00	; 0
     5c8:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__mulsi3>
     5cc:	6b 01       	movw	r12, r22
     5ce:	7c 01       	movw	r14, r24
     5d0:	c1 0e       	add	r12, r17
     5d2:	d1 1c       	adc	r13, r1
     5d4:	e1 1c       	adc	r14, r1
     5d6:	f1 1c       	adc	r15, r1
		flag = 0;
	}



	while(num!=0)
     5d8:	81 14       	cp	r8, r1
     5da:	91 04       	cpc	r9, r1
     5dc:	a1 04       	cpc	r10, r1
     5de:	b1 04       	cpc	r11, r1
     5e0:	c1 f6       	brne	.-80     	; 0x592 <lcd_showvalue+0xc0>
     5e2:	19 c0       	rjmp	.+50     	; 0x616 <lcd_showvalue+0x144>
	}
	
	while(n!=0)
	{
	
			H = n%10;
     5e4:	c7 01       	movw	r24, r14
     5e6:	b6 01       	movw	r22, r12
     5e8:	2a e0       	ldi	r18, 0x0A	; 10
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	40 e0       	ldi	r20, 0x00	; 0
     5ee:	50 e0       	ldi	r21, 0x00	; 0
     5f0:	0e 94 17 13 	call	0x262e	; 0x262e <__udivmodsi4>
     5f4:	16 2f       	mov	r17, r22
			n = n/10;
     5f6:	c7 01       	movw	r24, r14
     5f8:	b6 01       	movw	r22, r12
     5fa:	2a e0       	ldi	r18, 0x0A	; 10
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	40 e0       	ldi	r20, 0x00	; 0
     600:	50 e0       	ldi	r21, 0x00	; 0
     602:	0e 94 17 13 	call	0x262e	; 0x262e <__udivmodsi4>
     606:	c9 01       	movw	r24, r18
     608:	da 01       	movw	r26, r20
     60a:	6c 01       	movw	r12, r24
     60c:	7d 01       	movw	r14, r26
			lcd_char(H+48);
     60e:	81 2f       	mov	r24, r17
     610:	80 5d       	subi	r24, 0xD0	; 208
     612:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_char>
			num = num/10;
			n = (n*10)+H;

	}
	
	while(n!=0)
     616:	c1 14       	cp	r12, r1
     618:	d1 04       	cpc	r13, r1
     61a:	e1 04       	cpc	r14, r1
     61c:	f1 04       	cpc	r15, r1
     61e:	11 f7       	brne	.-60     	; 0x5e4 <lcd_showvalue+0x112>
     620:	04 c0       	rjmp	.+8      	; 0x62a <lcd_showvalue+0x158>
	}
	
	
	while(flag > 0)
	{
		lcd_char(48);
     622:	80 e3       	ldi	r24, 0x30	; 48
     624:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_char>
		flag--;
     628:	21 97       	sbiw	r28, 0x01	; 1
			lcd_char(H+48);

	}
	
	
	while(flag > 0)
     62a:	20 97       	sbiw	r28, 0x00	; 0
     62c:	d1 f7       	brne	.-12     	; 0x622 <lcd_showvalue+0x150>
	{
		lcd_char(48);
		flag--;
	}	

}
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	1f 91       	pop	r17
     634:	ff 90       	pop	r15
     636:	ef 90       	pop	r14
     638:	df 90       	pop	r13
     63a:	cf 90       	pop	r12
     63c:	bf 90       	pop	r11
     63e:	af 90       	pop	r10
     640:	9f 90       	pop	r9
     642:	8f 90       	pop	r8
     644:	08 95       	ret

00000646 <lcd_gotoxy1>:
	lcd_showvalue(l);

}

void lcd_gotoxy1(unsigned char pos)
{
     646:	80 58       	subi	r24, 0x80	; 128
     648:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_cmd>
	lcd_cmd(LINE1+pos);
}
     64c:	08 95       	ret

0000064e <lcd_gotoxy2>:

void lcd_gotoxy2(unsigned char pos)
{
     64e:	80 54       	subi	r24, 0x40	; 64
     650:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_cmd>
	lcd_cmd(LINE2+pos);
}
     654:	08 95       	ret

00000656 <lcd_showvalueh>:

void lcd_showvalueh(unsigned int num)	//prints the decimal 3digit value of num
{
     656:	ef 92       	push	r14
     658:	ff 92       	push	r15
     65a:	0f 93       	push	r16
     65c:	1f 93       	push	r17
     65e:	8c 01       	movw	r16, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
     660:	64 e6       	ldi	r22, 0x64	; 100
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <__udivmodhi4>
     668:	46 2f       	mov	r20, r22
	T=(num - (H*100))/10;
     66a:	26 2f       	mov	r18, r22
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	8c e9       	ldi	r24, 0x9C	; 156
     670:	9f ef       	ldi	r25, 0xFF	; 255
     672:	28 9f       	mul	r18, r24
     674:	70 01       	movw	r14, r0
     676:	29 9f       	mul	r18, r25
     678:	f0 0c       	add	r15, r0
     67a:	38 9f       	mul	r19, r24
     67c:	f0 0c       	add	r15, r0
     67e:	11 24       	eor	r1, r1
     680:	c7 01       	movw	r24, r14
     682:	80 0f       	add	r24, r16
     684:	91 1f       	adc	r25, r17
     686:	6a e0       	ldi	r22, 0x0A	; 10
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <__udivmodhi4>
     68e:	16 2f       	mov	r17, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+48);
     690:	84 2f       	mov	r24, r20
     692:	80 5d       	subi	r24, 0xD0	; 208
     694:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_char>
	lcd_char(T+48);
     698:	81 2f       	mov	r24, r17
     69a:	80 5d       	subi	r24, 0xD0	; 208
     69c:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_char>
	lcd_char(O+48);
     6a0:	00 5d       	subi	r16, 0xD0	; 208
     6a2:	0e 0d       	add	r16, r14
     6a4:	86 ef       	ldi	r24, 0xF6	; 246
     6a6:	9f ef       	ldi	r25, 0xFF	; 255
     6a8:	18 9f       	mul	r17, r24
     6aa:	60 2d       	mov	r22, r0
     6ac:	11 24       	eor	r1, r1
     6ae:	86 2f       	mov	r24, r22
     6b0:	80 0f       	add	r24, r16
     6b2:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_char>
}
     6b6:	1f 91       	pop	r17
     6b8:	0f 91       	pop	r16
     6ba:	ff 90       	pop	r15
     6bc:	ef 90       	pop	r14
     6be:	08 95       	ret

000006c0 <lcd_exit>:
		

void lcd_exit(void)
{
     6c0:	80 91 0e 02 	lds	r24, 0x020E
     6c4:	82 b9       	out	0x02, r24	; 2
	PORTA=save;
}
     6c6:	08 95       	ret

000006c8 <WaitMs>:

/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
     6c8:	0a c0       	rjmp	.+20     	; 0x6de <WaitMs+0x16>
	int i;

	while (ms-- > 0)
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	30 e0       	ldi	r19, 0x00	; 0
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
     6ce:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
     6d0:	2f 5f       	subi	r18, 0xFF	; 255
     6d2:	3f 4f       	sbci	r19, 0xFF	; 255
     6d4:	4c e0       	ldi	r20, 0x0C	; 12
     6d6:	2c 3c       	cpi	r18, 0xCC	; 204
     6d8:	34 07       	cpc	r19, r20
     6da:	c9 f7       	brne	.-14     	; 0x6ce <WaitMs+0x6>
     6dc:	01 97       	sbiw	r24, 0x01	; 1
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
     6de:	00 97       	sbiw	r24, 0x00	; 0
     6e0:	a1 f7       	brne	.-24     	; 0x6ca <WaitMs+0x2>
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
	}
}
     6e2:	08 95       	ret

000006e4 <gameByte>:

unsigned char chk_ana = 0;
int data0=0,data1=0,data2=0,data3=0,data4=0,data5=0,temp=0;

int gameByte(int command)
{
     6e4:	bc 01       	movw	r22, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     6e6:	84 e0       	ldi	r24, 0x04	; 4
     6e8:	8a 95       	dec	r24
     6ea:	f1 f7       	brne	.-4      	; 0x6e8 <gameByte+0x4>
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	40 e0       	ldi	r20, 0x00	; 0
     6f2:	50 e0       	ldi	r21, 0x00	; 0
				}
                PORTD&=~(1<<PSclock);                             // CLOCK LOW
                _delay_us(1);                                              // wait for output to stabilise
                if((PIND & _BV(PSdata)))
				{
					data|=(1<<i);  // read PSdata pin and store
     6f4:	a4 e0       	ldi	r26, 0x04	; 4
     6f6:	e1 e0       	ldi	r30, 0x01	; 1
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
        int i ;
        _delay_us(1);
        int data = 0x00;                             // clear data variable to save setting low bits later.
        for(i=0;i<8;i++)
        {
                if(command & _BV(i)) 
     6fa:	cb 01       	movw	r24, r22
     6fc:	02 2e       	mov	r0, r18
     6fe:	02 c0       	rjmp	.+4      	; 0x704 <gameByte+0x20>
     700:	95 95       	asr	r25
     702:	87 95       	ror	r24
     704:	0a 94       	dec	r0
     706:	e2 f7       	brpl	.-8      	; 0x700 <gameByte+0x1c>
     708:	80 ff       	sbrs	r24, 0
     70a:	02 c0       	rjmp	.+4      	; 0x710 <gameByte+0x2c>
				{
				PORTD|=(1<<PScommand);//sbi(PORTD, PScommand);
     70c:	5b 9a       	sbi	0x0b, 3	; 11
     70e:	01 c0       	rjmp	.+2      	; 0x712 <gameByte+0x2e>
				}// bit bang "command" out on PScommand wire.
                else
				{
				PORTD&=~(1<<PScommand);
     710:	5b 98       	cbi	0x0b, 3	; 11
				}
                PORTD&=~(1<<PSclock);                             // CLOCK LOW
     712:	58 98       	cbi	0x0b, 0	; 11
     714:	8a 2f       	mov	r24, r26
     716:	8a 95       	dec	r24
     718:	f1 f7       	brne	.-4      	; 0x716 <gameByte+0x32>
                _delay_us(1);                                              // wait for output to stabilise
                if((PIND & _BV(PSdata)))
     71a:	49 9b       	sbis	0x09, 1	; 9
     71c:	09 c0       	rjmp	.+18     	; 0x730 <gameByte+0x4c>
				{
					data|=(1<<i);  // read PSdata pin and store
     71e:	cf 01       	movw	r24, r30
     720:	02 2e       	mov	r0, r18
     722:	02 c0       	rjmp	.+4      	; 0x728 <gameByte+0x44>
     724:	88 0f       	add	r24, r24
     726:	99 1f       	adc	r25, r25
     728:	0a 94       	dec	r0
     72a:	e2 f7       	brpl	.-8      	; 0x724 <gameByte+0x40>
     72c:	48 2b       	or	r20, r24
     72e:	59 2b       	or	r21, r25
                }//else cbi(data, i);
                PORTD|=(1<<PSclock);                             // CLOCK HIGH
     730:	58 9a       	sbi	0x0b, 0	; 11
int gameByte(int command)
{
        int i ;
        _delay_us(1);
        int data = 0x00;                             // clear data variable to save setting low bits later.
        for(i=0;i<8;i++)
     732:	2f 5f       	subi	r18, 0xFF	; 255
     734:	3f 4f       	sbci	r19, 0xFF	; 255
     736:	28 30       	cpi	r18, 0x08	; 8
     738:	31 05       	cpc	r19, r1
     73a:	f9 f6       	brne	.-66     	; 0x6fa <gameByte+0x16>
				{
					data|=(1<<i);  // read PSdata pin and store
                }//else cbi(data, i);
                PORTD|=(1<<PSclock);                             // CLOCK HIGH
        }
        PORTD|=(1<<PScommand);
     73c:	5b 9a       	sbi	0x0b, 3	; 11
     73e:	82 e6       	ldi	r24, 0x62	; 98
     740:	8a 95       	dec	r24
     742:	f1 f7       	brne	.-4      	; 0x740 <gameByte+0x5c>

        _delay_us(20);                                                   // wait for ACK to pass.

        return(data);
}
     744:	ca 01       	movw	r24, r20
     746:	08 95       	ret

00000748 <joystick_config>:


void joystick_config()
{
     748:	ef 92       	push	r14
     74a:	ff 92       	push	r15
     74c:	0f 93       	push	r16
     74e:	1f 93       	push	r17
	 // put controller in config mode
       PORTD|=(1<<PScommand);
     750:	5b 9a       	sbi	0x0b, 3	; 11
       PORTD|=(1<<PSclock);
     752:	58 9a       	sbi	0x0b, 0	; 11
       PORTD&=~(1<<PSattention);
     754:	5c 98       	cbi	0x0b, 4	; 11

       gameByte(0x01);
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>
       gameByte(0x43);
     75e:	83 e4       	ldi	r24, 0x43	; 67
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>
       gameByte(0x00);
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>
       gameByte(0x01);
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>
       gameByte(0x00);
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>

       PORTD|=(1<<PScommand);
     77e:	5b 9a       	sbi	0x0b, 3	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     780:	76 e6       	ldi	r23, 0x66	; 102
     782:	e7 2e       	mov	r14, r23
     784:	7e e0       	ldi	r23, 0x0E	; 14
     786:	f7 2e       	mov	r15, r23
     788:	c7 01       	movw	r24, r14
     78a:	01 97       	sbiw	r24, 0x01	; 1
     78c:	f1 f7       	brne	.-4      	; 0x78a <joystick_config+0x42>
       _delay_ms(1);
       PORTD|=(1<<PSattention);
     78e:	5c 9a       	sbi	0x0b, 4	; 11
     790:	00 e0       	ldi	r16, 0x00	; 0
     792:	10 e9       	ldi	r17, 0x90	; 144
     794:	c8 01       	movw	r24, r16
     796:	01 97       	sbiw	r24, 0x01	; 1
     798:	f1 f7       	brne	.-4      	; 0x796 <joystick_config+0x4e>

       _delay_ms(10);

       // put controller in analouge mode
       PORTD|=(1<<PScommand);
     79a:	5b 9a       	sbi	0x0b, 3	; 11
       PORTD|=(1<<PSclock);
     79c:	58 9a       	sbi	0x0b, 0	; 11
       PORTD&=~(1<<PSattention);
     79e:	5c 98       	cbi	0x0b, 4	; 11

       gameByte(0x01);
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>
       gameByte(0x44);
     7a8:	84 e4       	ldi	r24, 0x44	; 68
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>
       gameByte(0x00);
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>
       gameByte(0x01);
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>
       gameByte(0x03);
     7c0:	83 e0       	ldi	r24, 0x03	; 3
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>
       gameByte(0x00);
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>
       gameByte(0x00);
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>
       gameByte(0x00);
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>
       gameByte(0x00);
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>

       PORTD|=(1<<PScommand);
     7e8:	5b 9a       	sbi	0x0b, 3	; 11
     7ea:	c7 01       	movw	r24, r14
     7ec:	01 97       	sbiw	r24, 0x01	; 1
     7ee:	f1 f7       	brne	.-4      	; 0x7ec <joystick_config+0xa4>
       _delay_ms(1);
       PORTD|=(1<<PSattention);
     7f0:	5c 9a       	sbi	0x0b, 4	; 11
     7f2:	c8 01       	movw	r24, r16
     7f4:	01 97       	sbiw	r24, 0x01	; 1
     7f6:	f1 f7       	brne	.-4      	; 0x7f4 <joystick_config+0xac>

       _delay_ms(10);

       // exit config mode
       PORTD|=(1<<PScommand);
     7f8:	5b 9a       	sbi	0x0b, 3	; 11
       PORTD|=(1<<PSclock);
     7fa:	58 9a       	sbi	0x0b, 0	; 11
       PORTD&=~(1<<PSattention);
     7fc:	5c 98       	cbi	0x0b, 4	; 11

       gameByte(0x01);
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>
       gameByte(0x43);
     806:	83 e4       	ldi	r24, 0x43	; 67
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>
       gameByte(0x00);
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>
       gameByte(0x00);
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>
       gameByte(0x5A);
     81e:	8a e5       	ldi	r24, 0x5A	; 90
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>
       gameByte(0x5A);
     826:	8a e5       	ldi	r24, 0x5A	; 90
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>
       gameByte(0x5A);
     82e:	8a e5       	ldi	r24, 0x5A	; 90
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>
       gameByte(0x5A);
     836:	8a e5       	ldi	r24, 0x5A	; 90
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>
       gameByte(0x5A);
     83e:	8a e5       	ldi	r24, 0x5A	; 90
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>

       PORTD|=(1<<PScommand);
     846:	5b 9a       	sbi	0x0b, 3	; 11
     848:	c7 01       	movw	r24, r14
     84a:	01 97       	sbiw	r24, 0x01	; 1
     84c:	f1 f7       	brne	.-4      	; 0x84a <joystick_config+0x102>
       _delay_ms(1);
       PORTD|=(1<<PSattention);
     84e:	5c 9a       	sbi	0x0b, 4	; 11
     850:	c8 01       	movw	r24, r16
     852:	01 97       	sbiw	r24, 0x01	; 1
     854:	f1 f7       	brne	.-4      	; 0x852 <joystick_config+0x10a>

       _delay_ms(10);

       // poll controller and check in analouge mode.
       PORTD|=(1<<PScommand);
     856:	5b 9a       	sbi	0x0b, 3	; 11
       PORTD|=(1<<PSclock);
     858:	58 9a       	sbi	0x0b, 0	; 11
       PORTD&=~(1<<PSattention);
     85a:	5c 98       	cbi	0x0b, 4	; 11

       gameByte(0x01);
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>
       chk_ana = gameByte(0x42);            // the 2nd byte to be returned from the controller should = 0x73 for "red" analouge controller.
     864:	82 e4       	ldi	r24, 0x42	; 66
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>
     86c:	80 93 14 02 	sts	0x0214, r24
       gameByte(0x00);
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>
       gameByte(0x00);
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>
       gameByte(0x00);
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>
       gameByte(0x00);
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>
       gameByte(0x00);
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>
       gameByte(0x00);
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>
       gameByte(0x00);
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>

       PORTD|=(1<<PScommand);
     8a8:	5b 9a       	sbi	0x0b, 3	; 11
     8aa:	c7 01       	movw	r24, r14
     8ac:	01 97       	sbiw	r24, 0x01	; 1
     8ae:	f1 f7       	brne	.-4      	; 0x8ac <joystick_config+0x164>
       _delay_ms(1);
       PORTD|=(1<<PSattention);
     8b0:	5c 9a       	sbi	0x0b, 4	; 11
     8b2:	c8 01       	movw	r24, r16
     8b4:	01 97       	sbiw	r24, 0x01	; 1
     8b6:	f1 f7       	brne	.-4      	; 0x8b4 <joystick_config+0x16c>
       _delay_ms(10);
		
}
     8b8:	1f 91       	pop	r17
     8ba:	0f 91       	pop	r16
     8bc:	ff 90       	pop	r15
     8be:	ef 90       	pop	r14
     8c0:	08 95       	ret

000008c2 <ps2_init>:

void ps2_init()
{
     8c2:	50 9a       	sbi	0x0a, 0	; 10
	DDRD|=(1<<PD0);                 // clock. output. (blue)

   DDRD&=~(1<<PD1);                 // data. input. (brown)
     8c4:	51 98       	cbi	0x0a, 1	; 10
   PORTD|=(1<<PD1);               //    enable pullup resistor
     8c6:	59 9a       	sbi	0x0b, 1	; 11

   DDRD&=~(1<<PD2);                 // acknolage. input. (green)
     8c8:	52 98       	cbi	0x0a, 2	; 10
  PORTD|=(1<<PD2);               //    enable pullup resistor
     8ca:	5a 9a       	sbi	0x0b, 2	; 11

   DDRD|=(1<<PD3);                 // command. output. (orange)
     8cc:	53 9a       	sbi	0x0a, 3	; 10

   DDRD|=(1<<PD4);                 // attention. output. (yellow)
     8ce:	54 9a       	sbi	0x0a, 4	; 10
}
     8d0:	08 95       	ret

000008d2 <joystick_poll>:

void joystick_poll()
{
     8d2:	5b 9a       	sbi	0x0b, 3	; 11
		PORTD|=(1<<PScommand);                          // start communication with PSx controller
        PORTD|=(1<<PSclock);
     8d4:	58 9a       	sbi	0x0b, 0	; 11
        PORTD&=~(1<<PSattention);
     8d6:	5c 98       	cbi	0x0b, 4	; 11

        gameByte(0x01);                                       // bite 0. header.
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>
        temp = gameByte(0x42);                          // bite 1. header. (should possibly put test on this byte to detect unplugging of controller.)
     8e0:	82 e4       	ldi	r24, 0x42	; 66
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>
     8e8:	90 93 22 02 	sts	0x0222, r25
     8ec:	80 93 21 02 	sts	0x0221, r24
        gameByte(0x00);                                       // bite 2. header.
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>

        data0 = gameByte(0x00);                         // bite 3. first data bite.
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>
     900:	90 93 16 02 	sts	0x0216, r25
     904:	80 93 15 02 	sts	0x0215, r24
        data1 = gameByte(0x00);                         // bite 4.
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>
     910:	90 93 18 02 	sts	0x0218, r25
     914:	80 93 17 02 	sts	0x0217, r24
        data2 = gameByte(0x00);                         // bite 5.
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>
     920:	90 93 1a 02 	sts	0x021A, r25
     924:	80 93 19 02 	sts	0x0219, r24
        data3 = gameByte(0x00);                         // bite 6.
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>
     930:	90 93 1c 02 	sts	0x021C, r25
     934:	80 93 1b 02 	sts	0x021B, r24
        data4 = gameByte(0x00);                         // bite 7.
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>
     940:	90 93 1e 02 	sts	0x021E, r25
     944:	80 93 1d 02 	sts	0x021D, r24
        data5 = gameByte(0x00);                         // bite 8.
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gameByte>
     950:	90 93 20 02 	sts	0x0220, r25
     954:	80 93 1f 02 	sts	0x021F, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     958:	84 e0       	ldi	r24, 0x04	; 4
     95a:	98 2f       	mov	r25, r24
     95c:	9a 95       	dec	r25
     95e:	f1 f7       	brne	.-4      	; 0x95c <joystick_poll+0x8a>

        _delay_us(1);
        PORTD|=(1<<PScommand);                      // close communication with PSx controller
     960:	5b 9a       	sbi	0x0b, 3	; 11
     962:	8a 95       	dec	r24
     964:	f1 f7       	brne	.-4      	; 0x962 <joystick_poll+0x90>
        _delay_us(1);
        PORTD|=(1<<PSattention);                        // all done.
     966:	5c 9a       	sbi	0x0b, 4	; 11
     968:	08 95       	ret

0000096a <port_init>:

}


void port_init()
{
     96a:	8f ef       	ldi	r24, 0xFF	; 255
     96c:	8d b9       	out	0x0d, r24	; 13
	DDRE=0xFF;
	DDRH=0xFF;
     96e:	80 93 01 01 	sts	0x0101, r24
	DDRL=0xFF;
     972:	ea e0       	ldi	r30, 0x0A	; 10
     974:	f1 e0       	ldi	r31, 0x01	; 1
     976:	80 83       	st	Z, r24
	DDRG=0xFF;
     978:	83 bb       	out	0x13, r24	; 19
	DDRJ=0xFF;
     97a:	80 93 04 01 	sts	0x0104, r24
	PORTJ = 0x00;
     97e:	10 92 05 01 	sts	0x0105, r1
	DDRF=0x00;
     982:	10 ba       	out	0x10, r1	; 16
	DDRA=0xFF;
     984:	81 b9       	out	0x01, r24	; 1
	PORTA=0x00;
     986:	12 b8       	out	0x02, r1	; 2
	DDRL=0x00;
     988:	10 82       	st	Z, r1
	PORTL=0xFF;
     98a:	80 93 0b 01 	sts	0x010B, r24
	DDRB=0x00;
     98e:	14 b8       	out	0x04, r1	; 4
	PORTB=0xFF;
     990:	85 b9       	out	0x05, r24	; 5
	DDRC=0x00;
     992:	17 b8       	out	0x07, r1	; 7
	PORTC=0xFF;
     994:	88 b9       	out	0x08, r24	; 8
}
     996:	08 95       	ret

00000998 <adc_init>:

}


void adc_init()
{
     998:	ea e7       	ldi	r30, 0x7A	; 122
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	80 81       	ld	r24, Z
     99e:	87 68       	ori	r24, 0x87	; 135
     9a0:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
	ADMUX |= (1<<MUX0);
     9a2:	ec e7       	ldi	r30, 0x7C	; 124
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	80 81       	ld	r24, Z
     9a8:	81 60       	ori	r24, 0x01	; 1
     9aa:	80 83       	st	Z, r24

}
     9ac:	08 95       	ret

000009ae <poll_adc>:

int poll_adc()
{
     9ae:	80 91 7a 00 	lds	r24, 0x007A
     9b2:	80 64       	ori	r24, 0x40	; 64
     9b4:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA |= (1<<ADSC);
	while(!(ADCSRA & (1<<ADIF)));
     9b8:	80 91 7a 00 	lds	r24, 0x007A
     9bc:	84 ff       	sbrs	r24, 4
     9be:	fc cf       	rjmp	.-8      	; 0x9b8 <poll_adc+0xa>
	x1= ADCL;
     9c0:	80 91 78 00 	lds	r24, 0x0078
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	90 93 44 02 	sts	0x0244, r25
     9ca:	80 93 43 02 	sts	0x0243, r24
	temp=ADCH;
     9ce:	40 91 79 00 	lds	r20, 0x0079
	temp=temp<<8;
	temp=temp | x1;
     9d2:	34 2f       	mov	r19, r20
     9d4:	20 e0       	ldi	r18, 0x00	; 0
     9d6:	28 2b       	or	r18, r24
     9d8:	39 2b       	or	r19, r25
     9da:	30 93 22 02 	sts	0x0222, r19
     9de:	20 93 21 02 	sts	0x0221, r18
     9e2:	84 ec       	ldi	r24, 0xC4	; 196
     9e4:	8a 95       	dec	r24
     9e6:	f1 f7       	brne	.-4      	; 0x9e4 <poll_adc+0x36>
	_delay_us(40);
	return temp;
}
     9e8:	c9 01       	movw	r24, r18
     9ea:	08 95       	ret

000009ec <distance>:
		

}

void distance()
{
     9ec:	80 91 7a 00 	lds	r24, 0x007A
     9f0:	80 64       	ori	r24, 0x40	; 64
     9f2:	80 93 7a 00 	sts	0x007A, r24
}

int poll_adc()
{
	ADCSRA |= (1<<ADSC);
	while(!(ADCSRA & (1<<ADIF)));
     9f6:	80 91 7a 00 	lds	r24, 0x007A
     9fa:	84 ff       	sbrs	r24, 4
     9fc:	fc cf       	rjmp	.-8      	; 0x9f6 <distance+0xa>
	x1= ADCL;
     9fe:	40 91 78 00 	lds	r20, 0x0078
	temp=ADCH;
     a02:	b0 91 79 00 	lds	r27, 0x0079
     a06:	84 ec       	ldi	r24, 0xC4	; 196
     a08:	8a 95       	dec	r24
     a0a:	f1 f7       	brne	.-4      	; 0xa08 <distance+0x1c>

}

int poll_adc()
{
	ADCSRA |= (1<<ADSC);
     a0c:	80 91 7a 00 	lds	r24, 0x007A
     a10:	80 64       	ori	r24, 0x40	; 64
     a12:	80 93 7a 00 	sts	0x007A, r24
	while(!(ADCSRA & (1<<ADIF)));
     a16:	80 91 7a 00 	lds	r24, 0x007A
     a1a:	84 ff       	sbrs	r24, 4
     a1c:	fc cf       	rjmp	.-8      	; 0xa16 <distance+0x2a>
	x1= ADCL;
     a1e:	20 91 78 00 	lds	r18, 0x0078
	temp=ADCH;
     a22:	70 91 79 00 	lds	r23, 0x0079
     a26:	84 ec       	ldi	r24, 0xC4	; 196
     a28:	8a 95       	dec	r24
     a2a:	f1 f7       	brne	.-4      	; 0xa28 <distance+0x3c>

}

int poll_adc()
{
	ADCSRA |= (1<<ADSC);
     a2c:	80 91 7a 00 	lds	r24, 0x007A
     a30:	80 64       	ori	r24, 0x40	; 64
     a32:	80 93 7a 00 	sts	0x007A, r24
	while(!(ADCSRA & (1<<ADIF)));
     a36:	80 91 7a 00 	lds	r24, 0x007A
     a3a:	84 ff       	sbrs	r24, 4
     a3c:	fc cf       	rjmp	.-8      	; 0xa36 <distance+0x4a>
	x1= ADCL;
     a3e:	a0 91 78 00 	lds	r26, 0x0078
	temp=ADCH;
     a42:	f0 91 79 00 	lds	r31, 0x0079
     a46:	84 ec       	ldi	r24, 0xC4	; 196
     a48:	8a 95       	dec	r24
     a4a:	f1 f7       	brne	.-4      	; 0xa48 <distance+0x5c>

}

int poll_adc()
{
	ADCSRA |= (1<<ADSC);
     a4c:	80 91 7a 00 	lds	r24, 0x007A
     a50:	80 64       	ori	r24, 0x40	; 64
     a52:	80 93 7a 00 	sts	0x007A, r24
	while(!(ADCSRA & (1<<ADIF)));
     a56:	80 91 7a 00 	lds	r24, 0x007A
     a5a:	84 ff       	sbrs	r24, 4
     a5c:	fc cf       	rjmp	.-8      	; 0xa56 <distance+0x6a>
	x1= ADCL;
     a5e:	60 91 78 00 	lds	r22, 0x0078
	temp=ADCH;
     a62:	e0 91 79 00 	lds	r30, 0x0079
     a66:	84 ec       	ldi	r24, 0xC4	; 196
     a68:	8a 95       	dec	r24
     a6a:	f1 f7       	brne	.-4      	; 0xa68 <distance+0x7c>
{
					a2=poll_adc();
					a2+=poll_adc();
					a2+=poll_adc();
					a2+=poll_adc();
					a2=a2/4;
     a6c:	97 2f       	mov	r25, r23
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	82 2b       	or	r24, r18
     a74:	93 2b       	or	r25, r19
     a76:	3b 2f       	mov	r19, r27
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	50 e0       	ldi	r21, 0x00	; 0
     a7c:	24 2b       	or	r18, r20
     a7e:	35 2b       	or	r19, r21
     a80:	82 0f       	add	r24, r18
     a82:	93 1f       	adc	r25, r19
     a84:	3f 2f       	mov	r19, r31
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	4a 2f       	mov	r20, r26
     a8a:	50 e0       	ldi	r21, 0x00	; 0
     a8c:	24 2b       	or	r18, r20
     a8e:	35 2b       	or	r19, r21
     a90:	82 0f       	add	r24, r18
     a92:	93 1f       	adc	r25, r19
     a94:	3e 2f       	mov	r19, r30
     a96:	20 e0       	ldi	r18, 0x00	; 0
     a98:	70 e0       	ldi	r23, 0x00	; 0
     a9a:	26 2b       	or	r18, r22
     a9c:	37 2b       	or	r19, r23
     a9e:	82 0f       	add	r24, r18
     aa0:	93 1f       	adc	r25, r19
     aa2:	64 e0       	ldi	r22, 0x04	; 4
     aa4:	70 e0       	ldi	r23, 0x00	; 0
     aa6:	0e 94 04 13 	call	0x2608	; 0x2608 <__divmodhi4>
     aaa:	70 93 42 02 	sts	0x0242, r23
     aae:	60 93 41 02 	sts	0x0241, r22
					ADMUX &= ~(1<<MUX0);
     ab2:	80 91 7c 00 	lds	r24, 0x007C
     ab6:	8e 7f       	andi	r24, 0xFE	; 254
     ab8:	80 93 7c 00 	sts	0x007C, r24
					ADMUX &= ~(1<<MUX1);
     abc:	80 91 7c 00 	lds	r24, 0x007C
     ac0:	8d 7f       	andi	r24, 0xFD	; 253
     ac2:	80 93 7c 00 	sts	0x007C, r24

}

int poll_adc()
{
	ADCSRA |= (1<<ADSC);
     ac6:	80 91 7a 00 	lds	r24, 0x007A
     aca:	80 64       	ori	r24, 0x40	; 64
     acc:	80 93 7a 00 	sts	0x007A, r24
	while(!(ADCSRA & (1<<ADIF)));
     ad0:	80 91 7a 00 	lds	r24, 0x007A
     ad4:	84 ff       	sbrs	r24, 4
     ad6:	fc cf       	rjmp	.-8      	; 0xad0 <distance+0xe4>
	x1= ADCL;
     ad8:	40 91 78 00 	lds	r20, 0x0078
	temp=ADCH;
     adc:	b0 91 79 00 	lds	r27, 0x0079
     ae0:	84 ec       	ldi	r24, 0xC4	; 196
     ae2:	8a 95       	dec	r24
     ae4:	f1 f7       	brne	.-4      	; 0xae2 <distance+0xf6>

}

int poll_adc()
{
	ADCSRA |= (1<<ADSC);
     ae6:	80 91 7a 00 	lds	r24, 0x007A
     aea:	80 64       	ori	r24, 0x40	; 64
     aec:	80 93 7a 00 	sts	0x007A, r24
	while(!(ADCSRA & (1<<ADIF)));
     af0:	80 91 7a 00 	lds	r24, 0x007A
     af4:	84 ff       	sbrs	r24, 4
     af6:	fc cf       	rjmp	.-8      	; 0xaf0 <distance+0x104>
	x1= ADCL;
     af8:	30 91 78 00 	lds	r19, 0x0078
	temp=ADCH;
     afc:	e0 91 79 00 	lds	r30, 0x0079
     b00:	84 ec       	ldi	r24, 0xC4	; 196
     b02:	8a 95       	dec	r24
     b04:	f1 f7       	brne	.-4      	; 0xb02 <distance+0x116>

}

int poll_adc()
{
	ADCSRA |= (1<<ADSC);
     b06:	80 91 7a 00 	lds	r24, 0x007A
     b0a:	80 64       	ori	r24, 0x40	; 64
     b0c:	80 93 7a 00 	sts	0x007A, r24
	while(!(ADCSRA & (1<<ADIF)));
     b10:	80 91 7a 00 	lds	r24, 0x007A
     b14:	84 ff       	sbrs	r24, 4
     b16:	fc cf       	rjmp	.-8      	; 0xb10 <distance+0x124>
	x1= ADCL;
     b18:	a0 91 78 00 	lds	r26, 0x0078
	temp=ADCH;
     b1c:	f0 91 79 00 	lds	r31, 0x0079
     b20:	84 ec       	ldi	r24, 0xC4	; 196
     b22:	8a 95       	dec	r24
     b24:	f1 f7       	brne	.-4      	; 0xb22 <distance+0x136>

}

int poll_adc()
{
	ADCSRA |= (1<<ADSC);
     b26:	80 91 7a 00 	lds	r24, 0x007A
     b2a:	80 64       	ori	r24, 0x40	; 64
     b2c:	80 93 7a 00 	sts	0x007A, r24
	while(!(ADCSRA & (1<<ADIF)));
     b30:	80 91 7a 00 	lds	r24, 0x007A
     b34:	84 ff       	sbrs	r24, 4
     b36:	fc cf       	rjmp	.-8      	; 0xb30 <distance+0x144>
	x1= ADCL;
     b38:	80 91 78 00 	lds	r24, 0x0078
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	90 93 44 02 	sts	0x0244, r25
     b42:	80 93 43 02 	sts	0x0243, r24
	temp=ADCH;
     b46:	20 91 79 00 	lds	r18, 0x0079
	temp=temp<<8;
	temp=temp | x1;
     b4a:	72 2f       	mov	r23, r18
     b4c:	60 e0       	ldi	r22, 0x00	; 0
     b4e:	68 2b       	or	r22, r24
     b50:	79 2b       	or	r23, r25
     b52:	70 93 22 02 	sts	0x0222, r23
     b56:	60 93 21 02 	sts	0x0221, r22
     b5a:	84 ec       	ldi	r24, 0xC4	; 196
     b5c:	8a 95       	dec	r24
     b5e:	f1 f7       	brne	.-4      	; 0xb5c <distance+0x170>
					ADMUX &= ~(1<<MUX1);
					a1=poll_adc();
					a1+=poll_adc();
					a1+=poll_adc();
					a1+=poll_adc();
					a1=a1/4;
     b60:	9e 2f       	mov	r25, r30
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	23 2f       	mov	r18, r19
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	82 2b       	or	r24, r18
     b6a:	93 2b       	or	r25, r19
     b6c:	3b 2f       	mov	r19, r27
     b6e:	20 e0       	ldi	r18, 0x00	; 0
     b70:	50 e0       	ldi	r21, 0x00	; 0
     b72:	24 2b       	or	r18, r20
     b74:	35 2b       	or	r19, r21
     b76:	82 0f       	add	r24, r18
     b78:	93 1f       	adc	r25, r19
     b7a:	3f 2f       	mov	r19, r31
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	4a 2f       	mov	r20, r26
     b80:	50 e0       	ldi	r21, 0x00	; 0
     b82:	24 2b       	or	r18, r20
     b84:	35 2b       	or	r19, r21
     b86:	82 0f       	add	r24, r18
     b88:	93 1f       	adc	r25, r19
     b8a:	86 0f       	add	r24, r22
     b8c:	97 1f       	adc	r25, r23
     b8e:	64 e0       	ldi	r22, 0x04	; 4
     b90:	70 e0       	ldi	r23, 0x00	; 0
     b92:	0e 94 04 13 	call	0x2608	; 0x2608 <__divmodhi4>
     b96:	70 93 3e 02 	sts	0x023E, r23
     b9a:	60 93 3d 02 	sts	0x023D, r22
					ADMUX |= (1<<MUX0);
     b9e:	80 91 7c 00 	lds	r24, 0x007C
     ba2:	81 60       	ori	r24, 0x01	; 1
     ba4:	80 93 7c 00 	sts	0x007C, r24
					ADMUX |= (1<<MUX1);	
     ba8:	80 91 7c 00 	lds	r24, 0x007C
     bac:	82 60       	ori	r24, 0x02	; 2
     bae:	80 93 7c 00 	sts	0x007C, r24

}
     bb2:	08 95       	ret

00000bb4 <lcd_showvaluef>:

}


void lcd_showvaluef(float num)
{
     bb4:	ef 92       	push	r14
     bb6:	ff 92       	push	r15
     bb8:	0f 93       	push	r16
     bba:	1f 93       	push	r17
     bbc:	df 93       	push	r29
     bbe:	cf 93       	push	r28
     bc0:	00 d0       	rcall	.+0      	; 0xbc2 <lcd_showvaluef+0xe>
     bc2:	00 d0       	rcall	.+0      	; 0xbc4 <lcd_showvaluef+0x10>
     bc4:	cd b7       	in	r28, 0x3d	; 61
     bc6:	de b7       	in	r29, 0x3e	; 62
     bc8:	7b 01       	movw	r14, r22
     bca:	8c 01       	movw	r16, r24
	unsigned long int l;
	double fraction,integer;

	l = (unsigned long int)num;

	lcd_showvalue(l);
     bcc:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__fixunssfsi>
     bd0:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_showvalue>

	fraction = modf((double)num,&integer);
     bd4:	ae 01       	movw	r20, r28
     bd6:	4f 5f       	subi	r20, 0xFF	; 255
     bd8:	5f 4f       	sbci	r21, 0xFF	; 255
     bda:	c8 01       	movw	r24, r16
     bdc:	b7 01       	movw	r22, r14
     bde:	0e 94 ae 11 	call	0x235c	; 0x235c <modf>
     be2:	7b 01       	movw	r14, r22
     be4:	8c 01       	movw	r16, r24

	l = (unsigned long int)(fraction * 100000);

	lcd_char('.');
     be6:	8e e2       	ldi	r24, 0x2E	; 46
     be8:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_char>

	lcd_showvalue(l);
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e5       	ldi	r19, 0x50	; 80
     bf0:	43 ec       	ldi	r20, 0xC3	; 195
     bf2:	57 e4       	ldi	r21, 0x47	; 71
     bf4:	c8 01       	movw	r24, r16
     bf6:	b7 01       	movw	r22, r14
     bf8:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <__mulsf3>
     bfc:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__fixunssfsi>
     c00:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_showvalue>

}
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	cf 91       	pop	r28
     c0e:	df 91       	pop	r29
     c10:	1f 91       	pop	r17
     c12:	0f 91       	pop	r16
     c14:	ff 90       	pop	r15
     c16:	ef 90       	pop	r14
     c18:	08 95       	ret

00000c1a <PWM>:
	}
}


void PWM(char SELECT1 , char SELECT2 ,unsigned int f , unsigned int dc)
{
     c1a:	0f 93       	push	r16
     c1c:	1f 93       	push	r17
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
     c22:	16 2f       	mov	r17, r22
     c24:	e9 01       	movw	r28, r18
	char ix;
	char cy;
	unsigned int  frequency,duty_cycle;

	ix = toupper(SELECT1);
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	0e 94 39 13 	call	0x2672	; 0x2672 <toupper>
     c2c:	08 2f       	mov	r16, r24
	cy = toupper(SELECT2);
     c2e:	81 2f       	mov	r24, r17
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	0e 94 39 13 	call	0x2672	; 0x2672 <toupper>
     c36:	18 2f       	mov	r17, r24

	if(ix == '1')
     c38:	01 33       	cpi	r16, 0x31	; 49
     c3a:	d1 f4       	brne	.+52     	; 0xc70 <PWM+0x56>
	{

		duty_cycle = compute_duty_cycle(dc,ix);
     c3c:	61 e3       	ldi	r22, 0x31	; 49
     c3e:	ce 01       	movw	r24, r28
     c40:	0e 94 91 00 	call	0x122	; 0x122 <compute_duty_cycle>

		if(cy == 'A')
     c44:	11 34       	cpi	r17, 0x41	; 65
     c46:	31 f4       	brne	.+12     	; 0xc54 <PWM+0x3a>
		  { 		   
		   set(DDRB,bit(5));
     c48:	25 9a       	sbi	0x04, 5	; 4
		   OCR1A = duty_cycle;
     c4a:	90 93 89 00 	sts	0x0089, r25
     c4e:	80 93 88 00 	sts	0x0088, r24
     c52:	7b c0       	rjmp	.+246    	; 0xd4a <PWM+0x130>
		  }		
		else if(cy == 'B')
     c54:	12 34       	cpi	r17, 0x42	; 66
     c56:	31 f4       	brne	.+12     	; 0xc64 <PWM+0x4a>
		  {		   
		   set(DDRB,bit(6));		   
     c58:	26 9a       	sbi	0x04, 6	; 4
		   OCR1B = duty_cycle;
     c5a:	90 93 8b 00 	sts	0x008B, r25
     c5e:	80 93 8a 00 	sts	0x008A, r24
     c62:	73 c0       	rjmp	.+230    	; 0xd4a <PWM+0x130>
		  }

		else
		  {
		  	set(DDRB,bit(7));
     c64:	27 9a       	sbi	0x04, 7	; 4
		   OCR1C = duty_cycle;
     c66:	90 93 8d 00 	sts	0x008D, r25
     c6a:	80 93 8c 00 	sts	0x008C, r24
     c6e:	6d c0       	rjmp	.+218    	; 0xd4a <PWM+0x130>
		  }	
	}

	if(ix == '3')
     c70:	03 33       	cpi	r16, 0x33	; 51
     c72:	d1 f4       	brne	.+52     	; 0xca8 <PWM+0x8e>
	{
		
		duty_cycle = compute_duty_cycle(dc,ix);
     c74:	63 e3       	ldi	r22, 0x33	; 51
     c76:	ce 01       	movw	r24, r28
     c78:	0e 94 91 00 	call	0x122	; 0x122 <compute_duty_cycle>
		
		if(cy == 'A')
     c7c:	11 34       	cpi	r17, 0x41	; 65
     c7e:	31 f4       	brne	.+12     	; 0xc8c <PWM+0x72>
		  { 
		   set(DDRE,bit(3));
     c80:	6b 9a       	sbi	0x0d, 3	; 13
		   OCR3A = duty_cycle;
     c82:	90 93 99 00 	sts	0x0099, r25
     c86:	80 93 98 00 	sts	0x0098, r24
     c8a:	5f c0       	rjmp	.+190    	; 0xd4a <PWM+0x130>
		  }		
		else if(cy == 'B')
     c8c:	12 34       	cpi	r17, 0x42	; 66
     c8e:	31 f4       	brne	.+12     	; 0xc9c <PWM+0x82>
		  {
		   set(DDRE,bit(4));
     c90:	6c 9a       	sbi	0x0d, 4	; 13
		   OCR3B = duty_cycle;
     c92:	90 93 9b 00 	sts	0x009B, r25
     c96:	80 93 9a 00 	sts	0x009A, r24
     c9a:	57 c0       	rjmp	.+174    	; 0xd4a <PWM+0x130>
		  }
		else
		  {
		   set(DDRE,bit(5));
     c9c:	6d 9a       	sbi	0x0d, 5	; 13
		   OCR3C = duty_cycle;
     c9e:	90 93 9d 00 	sts	0x009D, r25
     ca2:	80 93 9c 00 	sts	0x009C, r24
     ca6:	51 c0       	rjmp	.+162    	; 0xd4a <PWM+0x130>
		  }			  
	}

	if(ix == '4')
     ca8:	04 33       	cpi	r16, 0x34	; 52
     caa:	39 f5       	brne	.+78     	; 0xcfa <PWM+0xe0>
	{
		
	
		duty_cycle = compute_duty_cycle(dc,ix);		
     cac:	64 e3       	ldi	r22, 0x34	; 52
     cae:	ce 01       	movw	r24, r28
     cb0:	0e 94 91 00 	call	0x122	; 0x122 <compute_duty_cycle>
     cb4:	9c 01       	movw	r18, r24
 
 		if(cy == 'A')
     cb6:	11 34       	cpi	r17, 0x41	; 65
     cb8:	51 f4       	brne	.+20     	; 0xcce <PWM+0xb4>
		  { 
		   set(DDRH,bit(3));
     cba:	80 91 01 01 	lds	r24, 0x0101
     cbe:	88 60       	ori	r24, 0x08	; 8
     cc0:	80 93 01 01 	sts	0x0101, r24
		   OCR4A = duty_cycle;
     cc4:	30 93 a9 00 	sts	0x00A9, r19
     cc8:	20 93 a8 00 	sts	0x00A8, r18
     ccc:	3e c0       	rjmp	.+124    	; 0xd4a <PWM+0x130>
		  }		
		else if(cy == 'B')
     cce:	12 34       	cpi	r17, 0x42	; 66
     cd0:	51 f4       	brne	.+20     	; 0xce6 <PWM+0xcc>
		  {
		   set(DDRH,bit(4));		   
     cd2:	80 91 01 01 	lds	r24, 0x0101
     cd6:	80 61       	ori	r24, 0x10	; 16
     cd8:	80 93 01 01 	sts	0x0101, r24
		   OCR4B = duty_cycle;
     cdc:	30 93 ab 00 	sts	0x00AB, r19
     ce0:	20 93 aa 00 	sts	0x00AA, r18
     ce4:	32 c0       	rjmp	.+100    	; 0xd4a <PWM+0x130>
		  }
		else
		  {
		   set(DDRH,bit(5));
     ce6:	80 91 01 01 	lds	r24, 0x0101
     cea:	80 62       	ori	r24, 0x20	; 32
     cec:	80 93 01 01 	sts	0x0101, r24
		   OCR4C = duty_cycle;
     cf0:	30 93 ad 00 	sts	0x00AD, r19
     cf4:	20 93 ac 00 	sts	0x00AC, r18
     cf8:	28 c0       	rjmp	.+80     	; 0xd4a <PWM+0x130>
		  }		  
	}

	if(ix == '5')
     cfa:	05 33       	cpi	r16, 0x35	; 53
     cfc:	31 f5       	brne	.+76     	; 0xd4a <PWM+0x130>
	{	
		duty_cycle = compute_duty_cycle(dc,ix);
     cfe:	65 e3       	ldi	r22, 0x35	; 53
     d00:	ce 01       	movw	r24, r28
     d02:	0e 94 91 00 	call	0x122	; 0x122 <compute_duty_cycle>
     d06:	9c 01       	movw	r18, r24

		if(cy == 'A')
     d08:	11 34       	cpi	r17, 0x41	; 65
     d0a:	51 f4       	brne	.+20     	; 0xd20 <PWM+0x106>
		  { 
		   set(DDRL,bit(3));
     d0c:	80 91 0a 01 	lds	r24, 0x010A
     d10:	88 60       	ori	r24, 0x08	; 8
     d12:	80 93 0a 01 	sts	0x010A, r24
		   OCR5A = duty_cycle;
     d16:	30 93 29 01 	sts	0x0129, r19
     d1a:	20 93 28 01 	sts	0x0128, r18
     d1e:	15 c0       	rjmp	.+42     	; 0xd4a <PWM+0x130>
		  }		
		else if(cy == 'B')
     d20:	12 34       	cpi	r17, 0x42	; 66
     d22:	51 f4       	brne	.+20     	; 0xd38 <PWM+0x11e>
		  {
		   set(DDRL,bit(4));
     d24:	80 91 0a 01 	lds	r24, 0x010A
     d28:	80 61       	ori	r24, 0x10	; 16
     d2a:	80 93 0a 01 	sts	0x010A, r24
		   OCR5B = duty_cycle;
     d2e:	30 93 2b 01 	sts	0x012B, r19
     d32:	20 93 2a 01 	sts	0x012A, r18
     d36:	09 c0       	rjmp	.+18     	; 0xd4a <PWM+0x130>
		  }
		else
		  {
			set(DDRL,bit(5));
     d38:	80 91 0a 01 	lds	r24, 0x010A
     d3c:	80 62       	ori	r24, 0x20	; 32
     d3e:	80 93 0a 01 	sts	0x010A, r24
		   OCR5C = duty_cycle;
     d42:	30 93 2d 01 	sts	0x012D, r19
     d46:	20 93 2c 01 	sts	0x012C, r18
		  }	
	}

}
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	1f 91       	pop	r17
     d50:	0f 91       	pop	r16
     d52:	08 95       	ret

00000d54 <stop2>:
		}

}

void stop2()
{
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	40 e1       	ldi	r20, 0x10	; 16
     d5a:	57 e2       	ldi	r21, 0x27	; 39
     d5c:	61 e6       	ldi	r22, 0x61	; 97
     d5e:	83 e3       	ldi	r24, 0x33	; 51
     d60:	0e 94 0d 06 	call	0xc1a	; 0xc1a <PWM>
		PWM('3','a',10000,0);
		PWM('3','b',10000,0);
     d64:	20 e0       	ldi	r18, 0x00	; 0
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	40 e1       	ldi	r20, 0x10	; 16
     d6a:	57 e2       	ldi	r21, 0x27	; 39
     d6c:	62 e6       	ldi	r22, 0x62	; 98
     d6e:	83 e3       	ldi	r24, 0x33	; 51
     d70:	0e 94 0d 06 	call	0xc1a	; 0xc1a <PWM>
		PWM('3','c',10000,0);
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	40 e1       	ldi	r20, 0x10	; 16
     d7a:	57 e2       	ldi	r21, 0x27	; 39
     d7c:	63 e6       	ldi	r22, 0x63	; 99
     d7e:	83 e3       	ldi	r24, 0x33	; 51
     d80:	0e 94 0d 06 	call	0xc1a	; 0xc1a <PWM>
		PWM('4','a',10000,0);
     d84:	20 e0       	ldi	r18, 0x00	; 0
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	40 e1       	ldi	r20, 0x10	; 16
     d8a:	57 e2       	ldi	r21, 0x27	; 39
     d8c:	61 e6       	ldi	r22, 0x61	; 97
     d8e:	84 e3       	ldi	r24, 0x34	; 52
     d90:	0e 94 0d 06 	call	0xc1a	; 0xc1a <PWM>
		
		if(flag==1)
     d94:	80 91 23 02 	lds	r24, 0x0223
     d98:	90 91 24 02 	lds	r25, 0x0224
     d9c:	01 97       	sbiw	r24, 0x01	; 1
     d9e:	79 f4       	brne	.+30     	; 0xdbe <stop2+0x6a>
		{
		TOGGLEBIT(PORTH,BIT(7));
     da0:	80 91 02 01 	lds	r24, 0x0102
     da4:	80 58       	subi	r24, 0x80	; 128
     da6:	80 93 02 01 	sts	0x0102, r24
		TOGGLEBIT(PORTH,BIT(6));
     daa:	80 91 02 01 	lds	r24, 0x0102
     dae:	90 e4       	ldi	r25, 0x40	; 64
     db0:	89 27       	eor	r24, r25
     db2:	80 93 02 01 	sts	0x0102, r24
		
		flag=0;
     db6:	10 92 24 02 	sts	0x0224, r1
     dba:	10 92 23 02 	sts	0x0223, r1
		}
		if(flagb==1)
     dbe:	80 91 2d 02 	lds	r24, 0x022D
     dc2:	90 91 2e 02 	lds	r25, 0x022E
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	61 f4       	brne	.+24     	; 0xde2 <stop2+0x8e>
		{
			TOGGLEBIT(PORTG,BIT(3));
     dca:	84 b3       	in	r24, 0x14	; 20
     dcc:	98 e0       	ldi	r25, 0x08	; 8
     dce:	89 27       	eor	r24, r25
     dd0:	84 bb       	out	0x14, r24	; 20
			TOGGLEBIT(PORTG,BIT(4));
     dd2:	84 b3       	in	r24, 0x14	; 20
     dd4:	90 e1       	ldi	r25, 0x10	; 16
     dd6:	89 27       	eor	r24, r25
     dd8:	84 bb       	out	0x14, r24	; 20
			flagb=0;
     dda:	10 92 2e 02 	sts	0x022E, r1
     dde:	10 92 2d 02 	sts	0x022D, r1
     de2:	08 95       	ret

00000de4 <stop1>:
		

}

void stop1()
{
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	40 e1       	ldi	r20, 0x10	; 16
     dea:	57 e2       	ldi	r21, 0x27	; 39
     dec:	61 e6       	ldi	r22, 0x61	; 97
     dee:	83 e3       	ldi	r24, 0x33	; 51
     df0:	0e 94 0d 06 	call	0xc1a	; 0xc1a <PWM>
		PWM('3','a',10000,0);
		PWM('3','b',10000,0);
     df4:	20 e0       	ldi	r18, 0x00	; 0
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	40 e1       	ldi	r20, 0x10	; 16
     dfa:	57 e2       	ldi	r21, 0x27	; 39
     dfc:	62 e6       	ldi	r22, 0x62	; 98
     dfe:	83 e3       	ldi	r24, 0x33	; 51
     e00:	0e 94 0d 06 	call	0xc1a	; 0xc1a <PWM>
		PWM('3','c',10000,0);
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	40 e1       	ldi	r20, 0x10	; 16
     e0a:	57 e2       	ldi	r21, 0x27	; 39
     e0c:	63 e6       	ldi	r22, 0x63	; 99
     e0e:	83 e3       	ldi	r24, 0x33	; 51
     e10:	0e 94 0d 06 	call	0xc1a	; 0xc1a <PWM>
		PWM('4','a',10000,0);
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	40 e1       	ldi	r20, 0x10	; 16
     e1a:	57 e2       	ldi	r21, 0x27	; 39
     e1c:	61 e6       	ldi	r22, 0x61	; 97
     e1e:	84 e3       	ldi	r24, 0x34	; 52
     e20:	0e 94 0d 06 	call	0xc1a	; 0xc1a <PWM>
		
		if(flag==1)
     e24:	80 91 23 02 	lds	r24, 0x0223
     e28:	90 91 24 02 	lds	r25, 0x0224
     e2c:	01 97       	sbiw	r24, 0x01	; 1
     e2e:	21 f4       	brne	.+8      	; 0xe38 <stop1+0x54>
		{
			flag=0;
     e30:	10 92 24 02 	sts	0x0224, r1
     e34:	10 92 23 02 	sts	0x0223, r1
		}
		if(flagb==1)
     e38:	80 91 2d 02 	lds	r24, 0x022D
     e3c:	90 91 2e 02 	lds	r25, 0x022E
     e40:	01 97       	sbiw	r24, 0x01	; 1
     e42:	21 f4       	brne	.+8      	; 0xe4c <stop1+0x68>
		{
		
			flagb=0;
     e44:	10 92 2e 02 	sts	0x022E, r1
     e48:	10 92 2d 02 	sts	0x022D, r1
     e4c:	08 95       	ret

00000e4e <shiftdown>:
		

}

void shiftdown(int r)
{
     e4e:	21 e0       	ldi	r18, 0x01	; 1
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	30 93 2e 02 	sts	0x022E, r19
     e56:	20 93 2d 02 	sts	0x022D, r18
		flagb=1;
		PWM('4','a',10000,r);
     e5a:	9c 01       	movw	r18, r24
     e5c:	40 e1       	ldi	r20, 0x10	; 16
     e5e:	57 e2       	ldi	r21, 0x27	; 39
     e60:	61 e6       	ldi	r22, 0x61	; 97
     e62:	84 e3       	ldi	r24, 0x34	; 52
     e64:	0e 94 0d 06 	call	0xc1a	; 0xc1a <PWM>
		
		SETBIT(PORTG,BIT(4));
     e68:	a4 9a       	sbi	0x14, 4	; 20
		

}
     e6a:	08 95       	ret

00000e6c <shiftup>:
		

}

void shiftup(int r)
{
     e6c:	21 e0       	ldi	r18, 0x01	; 1
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	30 93 2e 02 	sts	0x022E, r19
     e74:	20 93 2d 02 	sts	0x022D, r18
		flagb=1;
		PWM('4','a',10000,r);
     e78:	9c 01       	movw	r18, r24
     e7a:	40 e1       	ldi	r20, 0x10	; 16
     e7c:	57 e2       	ldi	r21, 0x27	; 39
     e7e:	61 e6       	ldi	r22, 0x61	; 97
     e80:	84 e3       	ldi	r24, 0x34	; 52
     e82:	0e 94 0d 06 	call	0xc1a	; 0xc1a <PWM>
		
		CLEARBIT(PORTG,BIT(4));
     e86:	a4 98       	cbi	0x14, 4	; 20
		

}
     e88:	08 95       	ret

00000e8a <BotDown>:
		

}

void BotDown(int r)
{
     e8a:	21 e0       	ldi	r18, 0x01	; 1
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	30 93 2e 02 	sts	0x022E, r19
     e92:	20 93 2d 02 	sts	0x022D, r18
		flagb=1;
		PWM('3','c',10000,r);
     e96:	9c 01       	movw	r18, r24
     e98:	40 e1       	ldi	r20, 0x10	; 16
     e9a:	57 e2       	ldi	r21, 0x27	; 39
     e9c:	63 e6       	ldi	r22, 0x63	; 99
     e9e:	83 e3       	ldi	r24, 0x33	; 51
     ea0:	0e 94 0d 06 	call	0xc1a	; 0xc1a <PWM>
		
		CLEARBIT(PORTG,BIT(3));
     ea4:	a3 98       	cbi	0x14, 3	; 20
		

}
     ea6:	08 95       	ret

00000ea8 <reswing>:
		
		}

}
void reswing()
{
     ea8:	80 91 05 01 	lds	r24, 0x0105
     eac:	8f 7d       	andi	r24, 0xDF	; 223
     eae:	80 93 05 01 	sts	0x0105, r24
	PORTJ &= ~(1<<PJ5);
		if(swing1==1)
     eb2:	80 91 37 02 	lds	r24, 0x0237
     eb6:	90 91 38 02 	lds	r25, 0x0238
     eba:	01 97       	sbiw	r24, 0x01	; 1
     ebc:	99 f4       	brne	.+38     	; 0xee4 <reswing+0x3c>
		{
			BotDown(100);
     ebe:	84 e6       	ldi	r24, 0x64	; 100
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	0e 94 45 07 	call	0xe8a	; 0xe8a <BotDown>
     ec6:	88 e2       	ldi	r24, 0x28	; 40
     ec8:	93 e2       	ldi	r25, 0x23	; 35
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     eca:	20 e7       	ldi	r18, 0x70	; 112
     ecc:	31 e0       	ldi	r19, 0x01	; 1
     ece:	f9 01       	movw	r30, r18
     ed0:	31 97       	sbiw	r30, 0x01	; 1
     ed2:	f1 f7       	brne	.-4      	; 0xed0 <reswing+0x28>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ed4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ed6:	d9 f7       	brne	.-10     	; 0xece <reswing+0x26>
			_delay_ms(900);
			stop1();
     ed8:	0e 94 f2 06 	call	0xde4	; 0xde4 <stop1>
		
		
		swing1=0;
     edc:	10 92 38 02 	sts	0x0238, r1
     ee0:	10 92 37 02 	sts	0x0237, r1
     ee4:	08 95       	ret

00000ee6 <BotUp>:

}


void BotUp(int r)
{
     ee6:	21 e0       	ldi	r18, 0x01	; 1
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	30 93 2e 02 	sts	0x022E, r19
     eee:	20 93 2d 02 	sts	0x022D, r18
		flagb=1;
		PWM('3','c',10000,r);
     ef2:	9c 01       	movw	r18, r24
     ef4:	40 e1       	ldi	r20, 0x10	; 16
     ef6:	57 e2       	ldi	r21, 0x27	; 39
     ef8:	63 e6       	ldi	r22, 0x63	; 99
     efa:	83 e3       	ldi	r24, 0x33	; 51
     efc:	0e 94 0d 06 	call	0xc1a	; 0xc1a <PWM>
		
		SETBIT(PORTG,BIT(3));
     f00:	a3 9a       	sbi	0x14, 3	; 20
		

}
     f02:	08 95       	ret

00000f04 <swing>:
	}

}

void swing()
{
     f04:	80 91 37 02 	lds	r24, 0x0237
     f08:	90 91 38 02 	lds	r25, 0x0238
     f0c:	89 2b       	or	r24, r25
     f0e:	f1 f4       	brne	.+60     	; 0xf4c <swing+0x48>
	
		if(swing1==0)
		{
		
			BotUp(100);
     f10:	84 e6       	ldi	r24, 0x64	; 100
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	0e 94 73 07 	call	0xee6	; 0xee6 <BotUp>
     f18:	80 ee       	ldi	r24, 0xE0	; 224
     f1a:	9e e2       	ldi	r25, 0x2E	; 46
     f1c:	20 e7       	ldi	r18, 0x70	; 112
     f1e:	31 e0       	ldi	r19, 0x01	; 1
     f20:	f9 01       	movw	r30, r18
     f22:	31 97       	sbiw	r30, 0x01	; 1
     f24:	f1 f7       	brne	.-4      	; 0xf22 <swing+0x1e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f26:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f28:	d9 f7       	brne	.-10     	; 0xf20 <swing+0x1c>
			
			_delay_ms(1200);
			
			stop1();
     f2a:	0e 94 f2 06 	call	0xde4	; 0xde4 <stop1>
		
		swing1=1;
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	90 93 38 02 	sts	0x0238, r25
     f36:	80 93 37 02 	sts	0x0237, r24
     f3a:	80 e2       	ldi	r24, 0x20	; 32
     f3c:	9e e4       	ldi	r25, 0x4E	; 78
     f3e:	20 e7       	ldi	r18, 0x70	; 112
     f40:	31 e0       	ldi	r19, 0x01	; 1
     f42:	f9 01       	movw	r30, r18
     f44:	31 97       	sbiw	r30, 0x01	; 1
     f46:	f1 f7       	brne	.-4      	; 0xf44 <swing+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f48:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f4a:	d9 f7       	brne	.-10     	; 0xf42 <swing+0x3e>
     f4c:	08 95       	ret

00000f4e <ladder>:
					ADMUX |= (1<<MUX1);	

}

void ladder()
{
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
					distance();
     f52:	0e 94 f6 04 	call	0x9ec	; 0x9ec <distance>
					if(step==1)
     f56:	80 91 33 02 	lds	r24, 0x0233
     f5a:	90 91 34 02 	lds	r25, 0x0234
     f5e:	01 97       	sbiw	r24, 0x01	; 1
     f60:	a1 f4       	brne	.+40     	; 0xf8a <ladder+0x3c>
     f62:	06 c0       	rjmp	.+12     	; 0xf70 <ladder+0x22>
					{
					while(a1<300)
					{
					distance();
     f64:	0e 94 f6 04 	call	0x9ec	; 0x9ec <distance>
					BotUp(100);
     f68:	84 e6       	ldi	r24, 0x64	; 100
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	0e 94 73 07 	call	0xee6	; 0xee6 <BotUp>
void ladder()
{
					distance();
					if(step==1)
					{
					while(a1<300)
     f70:	80 91 3d 02 	lds	r24, 0x023D
     f74:	90 91 3e 02 	lds	r25, 0x023E
     f78:	8c 52       	subi	r24, 0x2C	; 44
     f7a:	91 40       	sbci	r25, 0x01	; 1
     f7c:	9c f3       	brlt	.-26     	; 0xf64 <ladder+0x16>
					{
					distance();
					BotUp(100);
					}
					step=2;
     f7e:	82 e0       	ldi	r24, 0x02	; 2
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	90 93 34 02 	sts	0x0234, r25
     f86:	80 93 33 02 	sts	0x0233, r24
					}
					
					if(step==2)
     f8a:	80 91 33 02 	lds	r24, 0x0233
     f8e:	90 91 34 02 	lds	r25, 0x0234
     f92:	02 97       	sbiw	r24, 0x02	; 2
     f94:	a1 f4       	brne	.+40     	; 0xfbe <ladder+0x70>
     f96:	06 c0       	rjmp	.+12     	; 0xfa4 <ladder+0x56>
					{
					while(a1>180)
					{
					distance();
     f98:	0e 94 f6 04 	call	0x9ec	; 0x9ec <distance>
					BotUp(100);
     f9c:	84 e6       	ldi	r24, 0x64	; 100
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	0e 94 73 07 	call	0xee6	; 0xee6 <BotUp>
					step=2;
					}
					
					if(step==2)
					{
					while(a1>180)
     fa4:	80 91 3d 02 	lds	r24, 0x023D
     fa8:	90 91 3e 02 	lds	r25, 0x023E
     fac:	85 3b       	cpi	r24, 0xB5	; 181
     fae:	91 05       	cpc	r25, r1
     fb0:	9c f7       	brge	.-26     	; 0xf98 <ladder+0x4a>
					{
					distance();
					BotUp(100);
					}
					step=3;
     fb2:	83 e0       	ldi	r24, 0x03	; 3
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	90 93 34 02 	sts	0x0234, r25
     fba:	80 93 33 02 	sts	0x0233, r24
					}
					if(step==3)
     fbe:	80 91 33 02 	lds	r24, 0x0233
     fc2:	90 91 34 02 	lds	r25, 0x0234
     fc6:	03 97       	sbiw	r24, 0x03	; 3
     fc8:	e9 f4       	brne	.+58     	; 0x1004 <ladder+0xb6>
     fca:	06 c0       	rjmp	.+12     	; 0xfd8 <ladder+0x8a>
					{
					while(a1<300)
					{
					distance();
     fcc:	0e 94 f6 04 	call	0x9ec	; 0x9ec <distance>
					BotUp(100);
     fd0:	84 e6       	ldi	r24, 0x64	; 100
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	0e 94 73 07 	call	0xee6	; 0xee6 <BotUp>
					}
					step=3;
					}
					if(step==3)
					{
					while(a1<300)
     fd8:	80 91 3d 02 	lds	r24, 0x023D
     fdc:	90 91 3e 02 	lds	r25, 0x023E
     fe0:	8c 52       	subi	r24, 0x2C	; 44
     fe2:	91 40       	sbci	r25, 0x01	; 1
     fe4:	9c f3       	brlt	.-26     	; 0xfcc <ladder+0x7e>
     fe6:	80 ed       	ldi	r24, 0xD0	; 208
     fe8:	97 e0       	ldi	r25, 0x07	; 7
     fea:	20 e7       	ldi	r18, 0x70	; 112
     fec:	31 e0       	ldi	r19, 0x01	; 1
     fee:	f9 01       	movw	r30, r18
     ff0:	31 97       	sbiw	r30, 0x01	; 1
     ff2:	f1 f7       	brne	.-4      	; 0xff0 <ladder+0xa2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ff4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ff6:	d9 f7       	brne	.-10     	; 0xfee <ladder+0xa0>
					{
					distance();
					BotUp(100);
					}
					_delay_ms(200);
					step=4;
     ff8:	84 e0       	ldi	r24, 0x04	; 4
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	90 93 34 02 	sts	0x0234, r25
    1000:	80 93 33 02 	sts	0x0233, r24
					}
					if(step==4)
    1004:	80 91 33 02 	lds	r24, 0x0233
    1008:	90 91 34 02 	lds	r25, 0x0234
    100c:	04 97       	sbiw	r24, 0x04	; 4
    100e:	a1 f4       	brne	.+40     	; 0x1038 <ladder+0xea>
    1010:	06 c0       	rjmp	.+12     	; 0x101e <ladder+0xd0>
					{
						while(a2<190)
					{
						distance();
    1012:	0e 94 f6 04 	call	0x9ec	; 0x9ec <distance>
						BotDown(100);
    1016:	84 e6       	ldi	r24, 0x64	; 100
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	0e 94 45 07 	call	0xe8a	; 0xe8a <BotDown>
					_delay_ms(200);
					step=4;
					}
					if(step==4)
					{
						while(a2<190)
    101e:	80 91 41 02 	lds	r24, 0x0241
    1022:	90 91 42 02 	lds	r25, 0x0242
    1026:	8e 3b       	cpi	r24, 0xBE	; 190
    1028:	91 05       	cpc	r25, r1
    102a:	9c f3       	brlt	.-26     	; 0x1012 <ladder+0xc4>
					{
						distance();
						BotDown(100);
					}
						step=5;
    102c:	85 e0       	ldi	r24, 0x05	; 5
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	90 93 34 02 	sts	0x0234, r25
    1034:	80 93 33 02 	sts	0x0233, r24
					
					}
					if(step==5)
    1038:	80 91 33 02 	lds	r24, 0x0233
    103c:	90 91 34 02 	lds	r25, 0x0234
    1040:	05 97       	sbiw	r24, 0x05	; 5
    1042:	a1 f4       	brne	.+40     	; 0x106c <ladder+0x11e>
    1044:	06 c0       	rjmp	.+12     	; 0x1052 <ladder+0x104>
					{
						while(a2>100)
					{
						distance();
    1046:	0e 94 f6 04 	call	0x9ec	; 0x9ec <distance>
						BotDown(100);
    104a:	84 e6       	ldi	r24, 0x64	; 100
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	0e 94 45 07 	call	0xe8a	; 0xe8a <BotDown>
						step=5;
					
					}
					if(step==5)
					{
						while(a2>100)
    1052:	80 91 41 02 	lds	r24, 0x0241
    1056:	90 91 42 02 	lds	r25, 0x0242
    105a:	85 36       	cpi	r24, 0x65	; 101
    105c:	91 05       	cpc	r25, r1
    105e:	9c f7       	brge	.-26     	; 0x1046 <ladder+0xf8>
					{
						distance();
						BotDown(100);
					}
						step=6;
    1060:	86 e0       	ldi	r24, 0x06	; 6
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	90 93 34 02 	sts	0x0234, r25
    1068:	80 93 33 02 	sts	0x0233, r24
					
					}
				
					if(step==6)
    106c:	80 91 33 02 	lds	r24, 0x0233
    1070:	90 91 34 02 	lds	r25, 0x0234
    1074:	06 97       	sbiw	r24, 0x06	; 6
    1076:	f9 f4       	brne	.+62     	; 0x10b6 <ladder+0x168>
    1078:	06 c0       	rjmp	.+12     	; 0x1086 <ladder+0x138>
					{
						while(a2<190)
					{
						distance();
    107a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <distance>
						BotDown(100);
    107e:	84 e6       	ldi	r24, 0x64	; 100
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	0e 94 45 07 	call	0xe8a	; 0xe8a <BotDown>
					
					}
				
					if(step==6)
					{
						while(a2<190)
    1086:	80 91 41 02 	lds	r24, 0x0241
    108a:	90 91 42 02 	lds	r25, 0x0242
    108e:	8e 3b       	cpi	r24, 0xBE	; 190
    1090:	91 05       	cpc	r25, r1
    1092:	9c f3       	brlt	.-26     	; 0x107a <ladder+0x12c>
					{
						distance();
						BotDown(100);
					}
						step=7;
    1094:	87 e0       	ldi	r24, 0x07	; 7
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	90 93 34 02 	sts	0x0234, r25
    109c:	80 93 33 02 	sts	0x0233, r24
    10a0:	80 ed       	ldi	r24, 0xD0	; 208
    10a2:	97 e0       	ldi	r25, 0x07	; 7
    10a4:	20 e7       	ldi	r18, 0x70	; 112
    10a6:	31 e0       	ldi	r19, 0x01	; 1
    10a8:	f9 01       	movw	r30, r18
    10aa:	31 97       	sbiw	r30, 0x01	; 1
    10ac:	f1 f7       	brne	.-4      	; 0x10aa <ladder+0x15c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10b0:	d9 f7       	brne	.-10     	; 0x10a8 <ladder+0x15a>
						_delay_ms(200);
						stop1();
    10b2:	0e 94 f2 06 	call	0xde4	; 0xde4 <stop1>
					}
					
					if(step==7)
    10b6:	80 91 33 02 	lds	r24, 0x0233
    10ba:	90 91 34 02 	lds	r25, 0x0234
    10be:	07 97       	sbiw	r24, 0x07	; 7
    10c0:	a1 f4       	brne	.+40     	; 0x10ea <ladder+0x19c>
    10c2:	06 c0       	rjmp	.+12     	; 0x10d0 <ladder+0x182>
					{
					while(a1<300)
					{
					distance();
    10c4:	0e 94 f6 04 	call	0x9ec	; 0x9ec <distance>
					BotUp(100);
    10c8:	84 e6       	ldi	r24, 0x64	; 100
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	0e 94 73 07 	call	0xee6	; 0xee6 <BotUp>
						stop1();
					}
					
					if(step==7)
					{
					while(a1<300)
    10d0:	80 91 3d 02 	lds	r24, 0x023D
    10d4:	90 91 3e 02 	lds	r25, 0x023E
    10d8:	8c 52       	subi	r24, 0x2C	; 44
    10da:	91 40       	sbci	r25, 0x01	; 1
    10dc:	9c f3       	brlt	.-26     	; 0x10c4 <ladder+0x176>
					{
					distance();
					BotUp(100);
					}
					step=8;
    10de:	88 e0       	ldi	r24, 0x08	; 8
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	90 93 34 02 	sts	0x0234, r25
    10e6:	80 93 33 02 	sts	0x0233, r24
					}
					
					if(step==8)
    10ea:	80 91 33 02 	lds	r24, 0x0233
    10ee:	90 91 34 02 	lds	r25, 0x0234
    10f2:	08 97       	sbiw	r24, 0x08	; 8
    10f4:	a1 f4       	brne	.+40     	; 0x111e <ladder+0x1d0>
    10f6:	06 c0       	rjmp	.+12     	; 0x1104 <ladder+0x1b6>
					{
					while(a1>180)
					{
					distance();
    10f8:	0e 94 f6 04 	call	0x9ec	; 0x9ec <distance>
					BotUp(100);
    10fc:	84 e6       	ldi	r24, 0x64	; 100
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	0e 94 73 07 	call	0xee6	; 0xee6 <BotUp>
					step=8;
					}
					
					if(step==8)
					{
					while(a1>180)
    1104:	80 91 3d 02 	lds	r24, 0x023D
    1108:	90 91 3e 02 	lds	r25, 0x023E
    110c:	85 3b       	cpi	r24, 0xB5	; 181
    110e:	91 05       	cpc	r25, r1
    1110:	9c f7       	brge	.-26     	; 0x10f8 <ladder+0x1aa>
					{
					distance();
					BotUp(100);
					}
					step=9;
    1112:	89 e0       	ldi	r24, 0x09	; 9
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	90 93 34 02 	sts	0x0234, r25
    111a:	80 93 33 02 	sts	0x0233, r24
					}
					if(step==9)
    111e:	80 91 33 02 	lds	r24, 0x0233
    1122:	90 91 34 02 	lds	r25, 0x0234
    1126:	09 97       	sbiw	r24, 0x09	; 9
    1128:	e9 f4       	brne	.+58     	; 0x1164 <ladder+0x216>
    112a:	06 c0       	rjmp	.+12     	; 0x1138 <ladder+0x1ea>
					{
					while(a1<300)
					{
					distance();
    112c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <distance>
					BotUp(100);
    1130:	84 e6       	ldi	r24, 0x64	; 100
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	0e 94 73 07 	call	0xee6	; 0xee6 <BotUp>
					}
					step=9;
					}
					if(step==9)
					{
					while(a1<300)
    1138:	80 91 3d 02 	lds	r24, 0x023D
    113c:	90 91 3e 02 	lds	r25, 0x023E
    1140:	8c 52       	subi	r24, 0x2C	; 44
    1142:	91 40       	sbci	r25, 0x01	; 1
    1144:	9c f3       	brlt	.-26     	; 0x112c <ladder+0x1de>
    1146:	80 ed       	ldi	r24, 0xD0	; 208
    1148:	97 e0       	ldi	r25, 0x07	; 7
    114a:	20 e7       	ldi	r18, 0x70	; 112
    114c:	31 e0       	ldi	r19, 0x01	; 1
    114e:	f9 01       	movw	r30, r18
    1150:	31 97       	sbiw	r30, 0x01	; 1
    1152:	f1 f7       	brne	.-4      	; 0x1150 <ladder+0x202>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1154:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1156:	d9 f7       	brne	.-10     	; 0x114e <ladder+0x200>
					{
					distance();
					BotUp(100);
					}
					_delay_ms(200);
					step=10;
    1158:	8a e0       	ldi	r24, 0x0A	; 10
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	90 93 34 02 	sts	0x0234, r25
    1160:	80 93 33 02 	sts	0x0233, r24
					}
					if(step==10)
    1164:	80 91 33 02 	lds	r24, 0x0233
    1168:	90 91 34 02 	lds	r25, 0x0234
    116c:	0a 97       	sbiw	r24, 0x0a	; 10
    116e:	a1 f4       	brne	.+40     	; 0x1198 <ladder+0x24a>
    1170:	06 c0       	rjmp	.+12     	; 0x117e <ladder+0x230>
					{
						while(a2<180)
					{
						distance();
    1172:	0e 94 f6 04 	call	0x9ec	; 0x9ec <distance>
						BotDown(100);
    1176:	84 e6       	ldi	r24, 0x64	; 100
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	0e 94 45 07 	call	0xe8a	; 0xe8a <BotDown>
					_delay_ms(200);
					step=10;
					}
					if(step==10)
					{
						while(a2<180)
    117e:	80 91 41 02 	lds	r24, 0x0241
    1182:	90 91 42 02 	lds	r25, 0x0242
    1186:	84 3b       	cpi	r24, 0xB4	; 180
    1188:	91 05       	cpc	r25, r1
    118a:	9c f3       	brlt	.-26     	; 0x1172 <ladder+0x224>
					{
						distance();
						BotDown(100);
					}
						step=11;
    118c:	8b e0       	ldi	r24, 0x0B	; 11
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	90 93 34 02 	sts	0x0234, r25
    1194:	80 93 33 02 	sts	0x0233, r24
										}
					if(step==11)
    1198:	80 91 33 02 	lds	r24, 0x0233
    119c:	90 91 34 02 	lds	r25, 0x0234
    11a0:	0b 97       	sbiw	r24, 0x0b	; 11
    11a2:	a1 f4       	brne	.+40     	; 0x11cc <ladder+0x27e>
    11a4:	06 c0       	rjmp	.+12     	; 0x11b2 <ladder+0x264>
					{
						while(a2>100)
					{
						distance();
    11a6:	0e 94 f6 04 	call	0x9ec	; 0x9ec <distance>
						BotDown(100);
    11aa:	84 e6       	ldi	r24, 0x64	; 100
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	0e 94 45 07 	call	0xe8a	; 0xe8a <BotDown>
					}
						step=11;
										}
					if(step==11)
					{
						while(a2>100)
    11b2:	80 91 41 02 	lds	r24, 0x0241
    11b6:	90 91 42 02 	lds	r25, 0x0242
    11ba:	85 36       	cpi	r24, 0x65	; 101
    11bc:	91 05       	cpc	r25, r1
    11be:	9c f7       	brge	.-26     	; 0x11a6 <ladder+0x258>
					{
						distance();
						BotDown(100);
					}
						step=12;
    11c0:	8c e0       	ldi	r24, 0x0C	; 12
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	90 93 34 02 	sts	0x0234, r25
    11c8:	80 93 33 02 	sts	0x0233, r24
					
					}
				
					if(step==12)
    11cc:	80 91 33 02 	lds	r24, 0x0233
    11d0:	90 91 34 02 	lds	r25, 0x0234
    11d4:	0c 97       	sbiw	r24, 0x0c	; 12
    11d6:	e9 f4       	brne	.+58     	; 0x1212 <ladder+0x2c4>
    11d8:	06 c0       	rjmp	.+12     	; 0x11e6 <ladder+0x298>
					{
						while(a2<180)
					{
						distance();
    11da:	0e 94 f6 04 	call	0x9ec	; 0x9ec <distance>
						BotDown(100);
    11de:	84 e6       	ldi	r24, 0x64	; 100
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	0e 94 45 07 	call	0xe8a	; 0xe8a <BotDown>
					
					}
				
					if(step==12)
					{
						while(a2<180)
    11e6:	80 91 41 02 	lds	r24, 0x0241
    11ea:	90 91 42 02 	lds	r25, 0x0242
    11ee:	84 3b       	cpi	r24, 0xB4	; 180
    11f0:	91 05       	cpc	r25, r1
    11f2:	9c f3       	brlt	.-26     	; 0x11da <ladder+0x28c>
					{
						distance();
						BotDown(100);
					}
						step=13;
    11f4:	8d e0       	ldi	r24, 0x0D	; 13
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	90 93 34 02 	sts	0x0234, r25
    11fc:	80 93 33 02 	sts	0x0233, r24
    1200:	80 ed       	ldi	r24, 0xD0	; 208
    1202:	97 e0       	ldi	r25, 0x07	; 7
    1204:	20 e7       	ldi	r18, 0x70	; 112
    1206:	31 e0       	ldi	r19, 0x01	; 1
    1208:	f9 01       	movw	r30, r18
    120a:	31 97       	sbiw	r30, 0x01	; 1
    120c:	f1 f7       	brne	.-4      	; 0x120a <ladder+0x2bc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    120e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1210:	d9 f7       	brne	.-10     	; 0x1208 <ladder+0x2ba>
						_delay_ms(200);
					
					}
					
					if(step==13)
    1212:	80 91 33 02 	lds	r24, 0x0233
    1216:	90 91 34 02 	lds	r25, 0x0234
    121a:	0d 97       	sbiw	r24, 0x0d	; 13
    121c:	a1 f4       	brne	.+40     	; 0x1246 <ladder+0x2f8>
    121e:	06 c0       	rjmp	.+12     	; 0x122c <ladder+0x2de>
					{
					while(a1<300)
					{
					distance();
    1220:	0e 94 f6 04 	call	0x9ec	; 0x9ec <distance>
					BotUp(100);
    1224:	84 e6       	ldi	r24, 0x64	; 100
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	0e 94 73 07 	call	0xee6	; 0xee6 <BotUp>
					
					}
					
					if(step==13)
					{
					while(a1<300)
    122c:	80 91 3d 02 	lds	r24, 0x023D
    1230:	90 91 3e 02 	lds	r25, 0x023E
    1234:	8c 52       	subi	r24, 0x2C	; 44
    1236:	91 40       	sbci	r25, 0x01	; 1
    1238:	9c f3       	brlt	.-26     	; 0x1220 <ladder+0x2d2>
					{
					distance();
					BotUp(100);
					}
					step=14;
    123a:	8e e0       	ldi	r24, 0x0E	; 14
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	90 93 34 02 	sts	0x0234, r25
    1242:	80 93 33 02 	sts	0x0233, r24
					}
					
					if(step==14)
    1246:	80 91 33 02 	lds	r24, 0x0233
    124a:	90 91 34 02 	lds	r25, 0x0234
    124e:	0e 97       	sbiw	r24, 0x0e	; 14
    1250:	a1 f4       	brne	.+40     	; 0x127a <ladder+0x32c>
    1252:	06 c0       	rjmp	.+12     	; 0x1260 <ladder+0x312>
					{
					while(a1>180)
					{
					distance();
    1254:	0e 94 f6 04 	call	0x9ec	; 0x9ec <distance>
					BotUp(100);
    1258:	84 e6       	ldi	r24, 0x64	; 100
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	0e 94 73 07 	call	0xee6	; 0xee6 <BotUp>
					step=14;
					}
					
					if(step==14)
					{
					while(a1>180)
    1260:	80 91 3d 02 	lds	r24, 0x023D
    1264:	90 91 3e 02 	lds	r25, 0x023E
    1268:	85 3b       	cpi	r24, 0xB5	; 181
    126a:	91 05       	cpc	r25, r1
    126c:	9c f7       	brge	.-26     	; 0x1254 <ladder+0x306>
					{
					distance();
					BotUp(100);
					}
					step=15;
    126e:	8f e0       	ldi	r24, 0x0F	; 15
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	90 93 34 02 	sts	0x0234, r25
    1276:	80 93 33 02 	sts	0x0233, r24
					}
					if(step==15)
    127a:	80 91 33 02 	lds	r24, 0x0233
    127e:	90 91 34 02 	lds	r25, 0x0234
    1282:	0f 97       	sbiw	r24, 0x0f	; 15
    1284:	e9 f4       	brne	.+58     	; 0x12c0 <ladder+0x372>
    1286:	06 c0       	rjmp	.+12     	; 0x1294 <ladder+0x346>
					{
					while(a1<300)
					{
					distance();
    1288:	0e 94 f6 04 	call	0x9ec	; 0x9ec <distance>
					BotUp(100);
    128c:	84 e6       	ldi	r24, 0x64	; 100
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	0e 94 73 07 	call	0xee6	; 0xee6 <BotUp>
					}
					step=15;
					}
					if(step==15)
					{
					while(a1<300)
    1294:	80 91 3d 02 	lds	r24, 0x023D
    1298:	90 91 3e 02 	lds	r25, 0x023E
    129c:	8c 52       	subi	r24, 0x2C	; 44
    129e:	91 40       	sbci	r25, 0x01	; 1
    12a0:	9c f3       	brlt	.-26     	; 0x1288 <ladder+0x33a>
    12a2:	80 ed       	ldi	r24, 0xD0	; 208
    12a4:	97 e0       	ldi	r25, 0x07	; 7
    12a6:	20 e7       	ldi	r18, 0x70	; 112
    12a8:	31 e0       	ldi	r19, 0x01	; 1
    12aa:	f9 01       	movw	r30, r18
    12ac:	31 97       	sbiw	r30, 0x01	; 1
    12ae:	f1 f7       	brne	.-4      	; 0x12ac <ladder+0x35e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12b2:	d9 f7       	brne	.-10     	; 0x12aa <ladder+0x35c>
					{
					distance();
					BotUp(100);
					}
					_delay_ms(200);
					step=16;
    12b4:	80 e1       	ldi	r24, 0x10	; 16
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	90 93 34 02 	sts	0x0234, r25
    12bc:	80 93 33 02 	sts	0x0233, r24
					}
					if(step==16)
    12c0:	80 91 33 02 	lds	r24, 0x0233
    12c4:	90 91 34 02 	lds	r25, 0x0234
    12c8:	40 97       	sbiw	r24, 0x10	; 16
    12ca:	a1 f4       	brne	.+40     	; 0x12f4 <ladder+0x3a6>
    12cc:	06 c0       	rjmp	.+12     	; 0x12da <ladder+0x38c>
					{
						while(a2<170)
					{
						distance();
    12ce:	0e 94 f6 04 	call	0x9ec	; 0x9ec <distance>
						BotDown(100);
    12d2:	84 e6       	ldi	r24, 0x64	; 100
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	0e 94 45 07 	call	0xe8a	; 0xe8a <BotDown>
					_delay_ms(200);
					step=16;
					}
					if(step==16)
					{
						while(a2<170)
    12da:	80 91 41 02 	lds	r24, 0x0241
    12de:	90 91 42 02 	lds	r25, 0x0242
    12e2:	8a 3a       	cpi	r24, 0xAA	; 170
    12e4:	91 05       	cpc	r25, r1
    12e6:	9c f3       	brlt	.-26     	; 0x12ce <ladder+0x380>
					{
						distance();
						BotDown(100);
					}
						step=17;
    12e8:	81 e1       	ldi	r24, 0x11	; 17
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	90 93 34 02 	sts	0x0234, r25
    12f0:	80 93 33 02 	sts	0x0233, r24
					
					}
					if(step==17)
    12f4:	80 91 33 02 	lds	r24, 0x0233
    12f8:	90 91 34 02 	lds	r25, 0x0234
    12fc:	41 97       	sbiw	r24, 0x11	; 17
    12fe:	a1 f4       	brne	.+40     	; 0x1328 <ladder+0x3da>
    1300:	06 c0       	rjmp	.+12     	; 0x130e <ladder+0x3c0>
					{
						while(a2>100)
					{
						distance();
    1302:	0e 94 f6 04 	call	0x9ec	; 0x9ec <distance>
						BotDown(100);
    1306:	84 e6       	ldi	r24, 0x64	; 100
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	0e 94 45 07 	call	0xe8a	; 0xe8a <BotDown>
						step=17;
					
					}
					if(step==17)
					{
						while(a2>100)
    130e:	80 91 41 02 	lds	r24, 0x0241
    1312:	90 91 42 02 	lds	r25, 0x0242
    1316:	85 36       	cpi	r24, 0x65	; 101
    1318:	91 05       	cpc	r25, r1
    131a:	9c f7       	brge	.-26     	; 0x1302 <ladder+0x3b4>
					{
						distance();
						BotDown(100);
					}
						step=18;
    131c:	82 e1       	ldi	r24, 0x12	; 18
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	90 93 34 02 	sts	0x0234, r25
    1324:	80 93 33 02 	sts	0x0233, r24
					
					}
				
					if(step==18)
    1328:	80 91 33 02 	lds	r24, 0x0233
    132c:	90 91 34 02 	lds	r25, 0x0234
    1330:	42 97       	sbiw	r24, 0x12	; 18
    1332:	f9 f4       	brne	.+62     	; 0x1372 <ladder+0x424>
    1334:	06 c0       	rjmp	.+12     	; 0x1342 <ladder+0x3f4>
					{
						while(a2<170)
					{
						distance();
    1336:	0e 94 f6 04 	call	0x9ec	; 0x9ec <distance>
						BotDown(100);
    133a:	84 e6       	ldi	r24, 0x64	; 100
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	0e 94 45 07 	call	0xe8a	; 0xe8a <BotDown>
					
					}
				
					if(step==18)
					{
						while(a2<170)
    1342:	80 91 41 02 	lds	r24, 0x0241
    1346:	90 91 42 02 	lds	r25, 0x0242
    134a:	8a 3a       	cpi	r24, 0xAA	; 170
    134c:	91 05       	cpc	r25, r1
    134e:	9c f3       	brlt	.-26     	; 0x1336 <ladder+0x3e8>
					{
						distance();
						BotDown(100);
					}
						step=19;
    1350:	83 e1       	ldi	r24, 0x13	; 19
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	90 93 34 02 	sts	0x0234, r25
    1358:	80 93 33 02 	sts	0x0233, r24
    135c:	80 ed       	ldi	r24, 0xD0	; 208
    135e:	97 e0       	ldi	r25, 0x07	; 7
    1360:	20 e7       	ldi	r18, 0x70	; 112
    1362:	31 e0       	ldi	r19, 0x01	; 1
    1364:	f9 01       	movw	r30, r18
    1366:	31 97       	sbiw	r30, 0x01	; 1
    1368:	f1 f7       	brne	.-4      	; 0x1366 <ladder+0x418>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    136a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    136c:	d9 f7       	brne	.-10     	; 0x1364 <ladder+0x416>
						_delay_ms(200);
						stop1();
    136e:	0e 94 f2 06 	call	0xde4	; 0xde4 <stop1>
					}
					
					if(step==19)
    1372:	80 91 33 02 	lds	r24, 0x0233
    1376:	90 91 34 02 	lds	r25, 0x0234
    137a:	43 97       	sbiw	r24, 0x13	; 19
    137c:	a1 f4       	brne	.+40     	; 0x13a6 <ladder+0x458>
    137e:	06 c0       	rjmp	.+12     	; 0x138c <ladder+0x43e>
					{
					while(a1<300)
					{
						distance();
    1380:	0e 94 f6 04 	call	0x9ec	; 0x9ec <distance>
					BotUp(100);
    1384:	84 e6       	ldi	r24, 0x64	; 100
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	0e 94 73 07 	call	0xee6	; 0xee6 <BotUp>
						stop1();
					}
					
					if(step==19)
					{
					while(a1<300)
    138c:	80 91 3d 02 	lds	r24, 0x023D
    1390:	90 91 3e 02 	lds	r25, 0x023E
    1394:	8c 52       	subi	r24, 0x2C	; 44
    1396:	91 40       	sbci	r25, 0x01	; 1
    1398:	9c f3       	brlt	.-26     	; 0x1380 <ladder+0x432>
					{
						distance();
					BotUp(100);
					}
					step=20;
    139a:	84 e1       	ldi	r24, 0x14	; 20
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	90 93 34 02 	sts	0x0234, r25
    13a2:	80 93 33 02 	sts	0x0233, r24
					}
					
					if(step==20)
    13a6:	80 91 33 02 	lds	r24, 0x0233
    13aa:	90 91 34 02 	lds	r25, 0x0234
    13ae:	44 97       	sbiw	r24, 0x14	; 20
    13b0:	a1 f4       	brne	.+40     	; 0x13da <ladder+0x48c>
    13b2:	06 c0       	rjmp	.+12     	; 0x13c0 <ladder+0x472>
					{
					while(a1>180)
					{
						distance();
    13b4:	0e 94 f6 04 	call	0x9ec	; 0x9ec <distance>
					BotUp(100);
    13b8:	84 e6       	ldi	r24, 0x64	; 100
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	0e 94 73 07 	call	0xee6	; 0xee6 <BotUp>
					step=20;
					}
					
					if(step==20)
					{
					while(a1>180)
    13c0:	80 91 3d 02 	lds	r24, 0x023D
    13c4:	90 91 3e 02 	lds	r25, 0x023E
    13c8:	85 3b       	cpi	r24, 0xB5	; 181
    13ca:	91 05       	cpc	r25, r1
    13cc:	9c f7       	brge	.-26     	; 0x13b4 <ladder+0x466>
					{
						distance();
					BotUp(100);
					}
					step=21;
    13ce:	85 e1       	ldi	r24, 0x15	; 21
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	90 93 34 02 	sts	0x0234, r25
    13d6:	80 93 33 02 	sts	0x0233, r24
					}
					if(step==21)
    13da:	80 91 33 02 	lds	r24, 0x0233
    13de:	90 91 34 02 	lds	r25, 0x0234
    13e2:	45 97       	sbiw	r24, 0x15	; 21
    13e4:	e9 f4       	brne	.+58     	; 0x1420 <ladder+0x4d2>
    13e6:	06 c0       	rjmp	.+12     	; 0x13f4 <ladder+0x4a6>
					{
					while(a1<480)
					{
					distance();
    13e8:	0e 94 f6 04 	call	0x9ec	; 0x9ec <distance>
					BotUp(100);
    13ec:	84 e6       	ldi	r24, 0x64	; 100
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	0e 94 73 07 	call	0xee6	; 0xee6 <BotUp>
					}
					step=21;
					}
					if(step==21)
					{
					while(a1<480)
    13f4:	80 91 3d 02 	lds	r24, 0x023D
    13f8:	90 91 3e 02 	lds	r25, 0x023E
    13fc:	80 5e       	subi	r24, 0xE0	; 224
    13fe:	91 40       	sbci	r25, 0x01	; 1
    1400:	9c f3       	brlt	.-26     	; 0x13e8 <ladder+0x49a>
    1402:	80 ed       	ldi	r24, 0xD0	; 208
    1404:	97 e0       	ldi	r25, 0x07	; 7
    1406:	20 e7       	ldi	r18, 0x70	; 112
    1408:	31 e0       	ldi	r19, 0x01	; 1
    140a:	f9 01       	movw	r30, r18
    140c:	31 97       	sbiw	r30, 0x01	; 1
    140e:	f1 f7       	brne	.-4      	; 0x140c <ladder+0x4be>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1410:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1412:	d9 f7       	brne	.-10     	; 0x140a <ladder+0x4bc>
					{
					distance();
					BotUp(100);
					}
					_delay_ms(200);
					step=22;
    1414:	86 e1       	ldi	r24, 0x16	; 22
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	90 93 34 02 	sts	0x0234, r25
    141c:	80 93 33 02 	sts	0x0233, r24
					
					}
					if(step==22)
    1420:	80 91 33 02 	lds	r24, 0x0233
    1424:	90 91 34 02 	lds	r25, 0x0234
    1428:	46 97       	sbiw	r24, 0x16	; 22
    142a:	99 f5       	brne	.+102    	; 0x1492 <ladder+0x544>
					{
						BotUp(5);
    142c:	85 e0       	ldi	r24, 0x05	; 5
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	0e 94 73 07 	call	0xee6	; 0xee6 <BotUp>
						shiftdown(100);
    1434:	84 e6       	ldi	r24, 0x64	; 100
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	0e 94 27 07 	call	0xe4e	; 0xe4e <shiftdown>
    143c:	80 ec       	ldi	r24, 0xC0	; 192
    143e:	9d e5       	ldi	r25, 0x5D	; 93
    1440:	20 e7       	ldi	r18, 0x70	; 112
    1442:	31 e0       	ldi	r19, 0x01	; 1
    1444:	f9 01       	movw	r30, r18
    1446:	31 97       	sbiw	r30, 0x01	; 1
    1448:	f1 f7       	brne	.-4      	; 0x1446 <ladder+0x4f8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    144a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    144c:	d9 f7       	brne	.-10     	; 0x1444 <ladder+0x4f6>
						_delay_ms(2400);
						BotDown(100);
    144e:	84 e6       	ldi	r24, 0x64	; 100
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	0e 94 45 07 	call	0xe8a	; 0xe8a <BotDown>
    1456:	80 ed       	ldi	r24, 0xD0	; 208
    1458:	97 e0       	ldi	r25, 0x07	; 7
    145a:	20 e7       	ldi	r18, 0x70	; 112
    145c:	31 e0       	ldi	r19, 0x01	; 1
    145e:	f9 01       	movw	r30, r18
    1460:	31 97       	sbiw	r30, 0x01	; 1
    1462:	f1 f7       	brne	.-4      	; 0x1460 <ladder+0x512>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1464:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1466:	d9 f7       	brne	.-10     	; 0x145e <ladder+0x510>
						_delay_ms(200);
						step=23;
    1468:	87 e1       	ldi	r24, 0x17	; 23
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	90 93 34 02 	sts	0x0234, r25
    1470:	80 93 33 02 	sts	0x0233, r24
						shiftup(100);
    1474:	84 e6       	ldi	r24, 0x64	; 100
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	0e 94 36 07 	call	0xe6c	; 0xe6c <shiftup>
    147c:	88 e9       	ldi	r24, 0x98	; 152
    147e:	9a e3       	ldi	r25, 0x3A	; 58
    1480:	20 e7       	ldi	r18, 0x70	; 112
    1482:	31 e0       	ldi	r19, 0x01	; 1
    1484:	f9 01       	movw	r30, r18
    1486:	31 97       	sbiw	r30, 0x01	; 1
    1488:	f1 f7       	brne	.-4      	; 0x1486 <ladder+0x538>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    148a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    148c:	d9 f7       	brne	.-10     	; 0x1484 <ladder+0x536>
						_delay_ms(1500);
						stop1();
    148e:	0e 94 f2 06 	call	0xde4	; 0xde4 <stop1>
					
					}
					if(step==23)
    1492:	80 91 33 02 	lds	r24, 0x0233
    1496:	90 91 34 02 	lds	r25, 0x0234
    149a:	47 97       	sbiw	r24, 0x17	; 23
    149c:	a1 f4       	brne	.+40     	; 0x14c6 <ladder+0x578>
    149e:	06 c0       	rjmp	.+12     	; 0x14ac <ladder+0x55e>
					{
						while(a2>100)
					{
						distance();
    14a0:	0e 94 f6 04 	call	0x9ec	; 0x9ec <distance>
						BotDown(100);
    14a4:	84 e6       	ldi	r24, 0x64	; 100
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	0e 94 45 07 	call	0xe8a	; 0xe8a <BotDown>
						stop1();
					
					}
					if(step==23)
					{
						while(a2>100)
    14ac:	80 91 41 02 	lds	r24, 0x0241
    14b0:	90 91 42 02 	lds	r25, 0x0242
    14b4:	85 36       	cpi	r24, 0x65	; 101
    14b6:	91 05       	cpc	r25, r1
    14b8:	9c f7       	brge	.-26     	; 0x14a0 <ladder+0x552>
					{
						distance();
						BotDown(100);
					}
						step=24;
    14ba:	88 e1       	ldi	r24, 0x18	; 24
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	90 93 34 02 	sts	0x0234, r25
    14c2:	80 93 33 02 	sts	0x0233, r24
					
					}
					if(step==24)
    14c6:	80 91 33 02 	lds	r24, 0x0233
    14ca:	90 91 34 02 	lds	r25, 0x0234
    14ce:	48 97       	sbiw	r24, 0x18	; 24
    14d0:	a1 f4       	brne	.+40     	; 0x14fa <ladder+0x5ac>
    14d2:	06 c0       	rjmp	.+12     	; 0x14e0 <ladder+0x592>
					{
					while(a1<300)
					{
						distance();
    14d4:	0e 94 f6 04 	call	0x9ec	; 0x9ec <distance>
						BotUp(100);
    14d8:	84 e6       	ldi	r24, 0x64	; 100
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	0e 94 73 07 	call	0xee6	; 0xee6 <BotUp>
						step=24;
					
					}
					if(step==24)
					{
					while(a1<300)
    14e0:	80 91 3d 02 	lds	r24, 0x023D
    14e4:	90 91 3e 02 	lds	r25, 0x023E
    14e8:	8c 52       	subi	r24, 0x2C	; 44
    14ea:	91 40       	sbci	r25, 0x01	; 1
    14ec:	9c f3       	brlt	.-26     	; 0x14d4 <ladder+0x586>
					{
						distance();
						BotUp(100);
					}
						step=25;
    14ee:	89 e1       	ldi	r24, 0x19	; 25
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	90 93 34 02 	sts	0x0234, r25
    14f6:	80 93 33 02 	sts	0x0233, r24
					
					}
				
					if(step==25)
    14fa:	80 91 33 02 	lds	r24, 0x0233
    14fe:	90 91 34 02 	lds	r25, 0x0234
    1502:	49 97       	sbiw	r24, 0x19	; 25
    1504:	a1 f4       	brne	.+40     	; 0x152e <ladder+0x5e0>
    1506:	06 c0       	rjmp	.+12     	; 0x1514 <ladder+0x5c6>
					{
					while(a1<500)
					{
						distance();
    1508:	0e 94 f6 04 	call	0x9ec	; 0x9ec <distance>
						BotUp(100);
    150c:	84 e6       	ldi	r24, 0x64	; 100
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	0e 94 73 07 	call	0xee6	; 0xee6 <BotUp>
					
					}
				
					if(step==25)
					{
					while(a1<500)
    1514:	80 91 3d 02 	lds	r24, 0x023D
    1518:	90 91 3e 02 	lds	r25, 0x023E
    151c:	84 5f       	subi	r24, 0xF4	; 244
    151e:	91 40       	sbci	r25, 0x01	; 1
    1520:	9c f3       	brlt	.-26     	; 0x1508 <ladder+0x5ba>
					{
						distance();
						BotUp(100);
					}
					step=26;
    1522:	8a e1       	ldi	r24, 0x1A	; 26
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	90 93 34 02 	sts	0x0234, r25
    152a:	80 93 33 02 	sts	0x0233, r24
					}
					if(step==26)
    152e:	80 91 33 02 	lds	r24, 0x0233
    1532:	90 91 34 02 	lds	r25, 0x0234
    1536:	4a 97       	sbiw	r24, 0x1a	; 26
    1538:	f1 f4       	brne	.+60     	; 0x1576 <ladder+0x628>
    153a:	0e c0       	rjmp	.+28     	; 0x1558 <ladder+0x60a>
					{
					while(a1>290)
					{
						distance();
    153c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <distance>
						BotUp(100);
    1540:	84 e6       	ldi	r24, 0x64	; 100
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	0e 94 73 07 	call	0xee6	; 0xee6 <BotUp>
    1548:	80 ed       	ldi	r24, 0xD0	; 208
    154a:	97 e0       	ldi	r25, 0x07	; 7
    154c:	fe 01       	movw	r30, r28
    154e:	31 97       	sbiw	r30, 0x01	; 1
    1550:	f1 f7       	brne	.-4      	; 0x154e <ladder+0x600>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1552:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1554:	d9 f7       	brne	.-10     	; 0x154c <ladder+0x5fe>
    1556:	02 c0       	rjmp	.+4      	; 0x155c <ladder+0x60e>
    1558:	c0 e7       	ldi	r28, 0x70	; 112
    155a:	d1 e0       	ldi	r29, 0x01	; 1
					}
					step=26;
					}
					if(step==26)
					{
					while(a1>290)
    155c:	80 91 3d 02 	lds	r24, 0x023D
    1560:	90 91 3e 02 	lds	r25, 0x023E
    1564:	83 52       	subi	r24, 0x23	; 35
    1566:	91 40       	sbci	r25, 0x01	; 1
    1568:	4c f7       	brge	.-46     	; 0x153c <ladder+0x5ee>
					{
						distance();
						BotUp(100);
						_delay_ms(200);
					}
					step=27;
    156a:	8b e1       	ldi	r24, 0x1B	; 27
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	90 93 34 02 	sts	0x0234, r25
    1572:	80 93 33 02 	sts	0x0233, r24
					
					}
					if(step==27)
    1576:	80 91 33 02 	lds	r24, 0x0233
    157a:	90 91 34 02 	lds	r25, 0x0234
    157e:	4b 97       	sbiw	r24, 0x1b	; 27
    1580:	09 f0       	breq	.+2      	; 0x1584 <ladder+0x636>
    1582:	86 c0       	rjmp	.+268    	; 0x1690 <ladder+0x742>
					{
					BotUp(5);
    1584:	85 e0       	ldi	r24, 0x05	; 5
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	0e 94 73 07 	call	0xee6	; 0xee6 <BotUp>
					shiftdown(100);
    158c:	84 e6       	ldi	r24, 0x64	; 100
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	0e 94 27 07 	call	0xe4e	; 0xe4e <shiftdown>
    1594:	80 e2       	ldi	r24, 0x20	; 32
    1596:	9e e4       	ldi	r25, 0x4E	; 78
    1598:	20 e7       	ldi	r18, 0x70	; 112
    159a:	31 e0       	ldi	r19, 0x01	; 1
    159c:	f9 01       	movw	r30, r18
    159e:	31 97       	sbiw	r30, 0x01	; 1
    15a0:	f1 f7       	brne	.-4      	; 0x159e <ladder+0x650>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15a4:	d9 f7       	brne	.-10     	; 0x159c <ladder+0x64e>
					_delay_ms(2000);
					stop1();
    15a6:	0e 94 f2 06 	call	0xde4	; 0xde4 <stop1>
					shiftup(100);
    15aa:	84 e6       	ldi	r24, 0x64	; 100
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	0e 94 36 07 	call	0xe6c	; 0xe6c <shiftup>
    15b2:	80 e1       	ldi	r24, 0x10	; 16
    15b4:	97 e2       	ldi	r25, 0x27	; 39
    15b6:	20 e7       	ldi	r18, 0x70	; 112
    15b8:	31 e0       	ldi	r19, 0x01	; 1
    15ba:	f9 01       	movw	r30, r18
    15bc:	31 97       	sbiw	r30, 0x01	; 1
    15be:	f1 f7       	brne	.-4      	; 0x15bc <ladder+0x66e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c2:	d9 f7       	brne	.-10     	; 0x15ba <ladder+0x66c>
					_delay_ms(1000);
					stop1();
    15c4:	0e 94 f2 06 	call	0xde4	; 0xde4 <stop1>
					BotDown(100);
    15c8:	84 e6       	ldi	r24, 0x64	; 100
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	0e 94 45 07 	call	0xe8a	; 0xe8a <BotDown>
    15d0:	88 e9       	ldi	r24, 0x98	; 152
    15d2:	9a e3       	ldi	r25, 0x3A	; 58
    15d4:	20 e7       	ldi	r18, 0x70	; 112
    15d6:	31 e0       	ldi	r19, 0x01	; 1
    15d8:	f9 01       	movw	r30, r18
    15da:	31 97       	sbiw	r30, 0x01	; 1
    15dc:	f1 f7       	brne	.-4      	; 0x15da <ladder+0x68c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15e0:	d9 f7       	brne	.-10     	; 0x15d8 <ladder+0x68a>
					_delay_ms(1500);
					stop1();
    15e2:	0e 94 f2 06 	call	0xde4	; 0xde4 <stop1>
					shiftdown(100);
    15e6:	84 e6       	ldi	r24, 0x64	; 100
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	0e 94 27 07 	call	0xe4e	; 0xe4e <shiftdown>
    15ee:	80 e1       	ldi	r24, 0x10	; 16
    15f0:	97 e2       	ldi	r25, 0x27	; 39
    15f2:	20 e7       	ldi	r18, 0x70	; 112
    15f4:	31 e0       	ldi	r19, 0x01	; 1
    15f6:	f9 01       	movw	r30, r18
    15f8:	31 97       	sbiw	r30, 0x01	; 1
    15fa:	f1 f7       	brne	.-4      	; 0x15f8 <ladder+0x6aa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15fc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15fe:	d9 f7       	brne	.-10     	; 0x15f6 <ladder+0x6a8>
					_delay_ms(1000);
					stop1();
    1600:	0e 94 f2 06 	call	0xde4	; 0xde4 <stop1>
					BotUp(100);
    1604:	84 e6       	ldi	r24, 0x64	; 100
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	0e 94 73 07 	call	0xee6	; 0xee6 <BotUp>
    160c:	80 e1       	ldi	r24, 0x10	; 16
    160e:	97 e2       	ldi	r25, 0x27	; 39
    1610:	20 e7       	ldi	r18, 0x70	; 112
    1612:	31 e0       	ldi	r19, 0x01	; 1
    1614:	f9 01       	movw	r30, r18
    1616:	31 97       	sbiw	r30, 0x01	; 1
    1618:	f1 f7       	brne	.-4      	; 0x1616 <ladder+0x6c8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    161a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    161c:	d9 f7       	brne	.-10     	; 0x1614 <ladder+0x6c6>
					_delay_ms(1000);
					stop1();
    161e:	0e 94 f2 06 	call	0xde4	; 0xde4 <stop1>
					shiftup(100);
    1622:	84 e6       	ldi	r24, 0x64	; 100
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	0e 94 36 07 	call	0xe6c	; 0xe6c <shiftup>
					BotDown(100);
    162a:	84 e6       	ldi	r24, 0x64	; 100
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	0e 94 45 07 	call	0xe8a	; 0xe8a <BotDown>
    1632:	80 e1       	ldi	r24, 0x10	; 16
    1634:	97 e2       	ldi	r25, 0x27	; 39
    1636:	20 e7       	ldi	r18, 0x70	; 112
    1638:	31 e0       	ldi	r19, 0x01	; 1
    163a:	f9 01       	movw	r30, r18
    163c:	31 97       	sbiw	r30, 0x01	; 1
    163e:	f1 f7       	brne	.-4      	; 0x163c <ladder+0x6ee>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1640:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1642:	d9 f7       	brne	.-10     	; 0x163a <ladder+0x6ec>
					_delay_ms(1000);
					stop1();
    1644:	0e 94 f2 06 	call	0xde4	; 0xde4 <stop1>
					step=28;
    1648:	8c e1       	ldi	r24, 0x1C	; 28
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	90 93 34 02 	sts	0x0234, r25
    1650:	80 93 33 02 	sts	0x0233, r24
    1654:	80 e1       	ldi	r24, 0x10	; 16
    1656:	97 e2       	ldi	r25, 0x27	; 39
    1658:	20 e7       	ldi	r18, 0x70	; 112
    165a:	31 e0       	ldi	r19, 0x01	; 1
    165c:	f9 01       	movw	r30, r18
    165e:	31 97       	sbiw	r30, 0x01	; 1
    1660:	f1 f7       	brne	.-4      	; 0x165e <ladder+0x710>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1662:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1664:	d9 f7       	brne	.-10     	; 0x165c <ladder+0x70e>
					_delay_ms(1000);
					PORTJ |= (1<<PJ3);
    1666:	80 91 05 01 	lds	r24, 0x0105
    166a:	88 60       	ori	r24, 0x08	; 8
    166c:	80 93 05 01 	sts	0x0105, r24
    1670:	80 ed       	ldi	r24, 0xD0	; 208
    1672:	97 e0       	ldi	r25, 0x07	; 7
    1674:	20 e7       	ldi	r18, 0x70	; 112
    1676:	31 e0       	ldi	r19, 0x01	; 1
    1678:	f9 01       	movw	r30, r18
    167a:	31 97       	sbiw	r30, 0x01	; 1
    167c:	f1 f7       	brne	.-4      	; 0x167a <ladder+0x72c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    167e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1680:	d9 f7       	brne	.-10     	; 0x1678 <ladder+0x72a>
					_delay_ms(200);
					PORTJ &= ~(1<<PJ3);
    1682:	80 91 05 01 	lds	r24, 0x0105
    1686:	87 7f       	andi	r24, 0xF7	; 247
    1688:	80 93 05 01 	sts	0x0105, r24
					stop1();
    168c:	0e 94 f2 06 	call	0xde4	; 0xde4 <stop1>
					}
				
					
						
					
}
    1690:	df 91       	pop	r29
    1692:	cf 91       	pop	r28
    1694:	08 95       	ret

00001696 <rightanti>:
		SETBIT(PORTH,BIT(7));
		
}

void rightanti(int r)
{
    1696:	21 e0       	ldi	r18, 0x01	; 1
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	30 93 24 02 	sts	0x0224, r19
    169e:	20 93 23 02 	sts	0x0223, r18
		flag=1;
		PWM('3','b',10000,r);
    16a2:	9c 01       	movw	r18, r24
    16a4:	40 e1       	ldi	r20, 0x10	; 16
    16a6:	57 e2       	ldi	r21, 0x27	; 39
    16a8:	62 e6       	ldi	r22, 0x62	; 98
    16aa:	83 e3       	ldi	r24, 0x33	; 51
    16ac:	0e 94 0d 06 	call	0xc1a	; 0xc1a <PWM>
		
		CLEARBIT(PORTH,BIT(7));
    16b0:	e2 e0       	ldi	r30, 0x02	; 2
    16b2:	f1 e0       	ldi	r31, 0x01	; 1
    16b4:	80 81       	ld	r24, Z
    16b6:	8f 77       	andi	r24, 0x7F	; 127
    16b8:	80 83       	st	Z, r24
		

}
    16ba:	08 95       	ret

000016bc <rightclock>:
		

}

void rightclock(int f)
{
    16bc:	21 e0       	ldi	r18, 0x01	; 1
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	30 93 24 02 	sts	0x0224, r19
    16c4:	20 93 23 02 	sts	0x0223, r18
		flag=1;
		PWM('3','b',10000,f);
    16c8:	9c 01       	movw	r18, r24
    16ca:	40 e1       	ldi	r20, 0x10	; 16
    16cc:	57 e2       	ldi	r21, 0x27	; 39
    16ce:	62 e6       	ldi	r22, 0x62	; 98
    16d0:	83 e3       	ldi	r24, 0x33	; 51
    16d2:	0e 94 0d 06 	call	0xc1a	; 0xc1a <PWM>
		
		SETBIT(PORTH,BIT(7));
    16d6:	e2 e0       	ldi	r30, 0x02	; 2
    16d8:	f1 e0       	ldi	r31, 0x01	; 1
    16da:	80 81       	ld	r24, Z
    16dc:	80 68       	ori	r24, 0x80	; 128
    16de:	80 83       	st	Z, r24
		
}
    16e0:	08 95       	ret

000016e2 <leftclock>:
		SETBIT(PORTH,BIT(6));
		
}

void leftclock(int r)
{
    16e2:	21 e0       	ldi	r18, 0x01	; 1
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	30 93 24 02 	sts	0x0224, r19
    16ea:	20 93 23 02 	sts	0x0223, r18
		flag=1;
		PWM('3','a',10000,r);
    16ee:	9c 01       	movw	r18, r24
    16f0:	40 e1       	ldi	r20, 0x10	; 16
    16f2:	57 e2       	ldi	r21, 0x27	; 39
    16f4:	61 e6       	ldi	r22, 0x61	; 97
    16f6:	83 e3       	ldi	r24, 0x33	; 51
    16f8:	0e 94 0d 06 	call	0xc1a	; 0xc1a <PWM>
		
		
		CLEARBIT(PORTH,BIT(6));
    16fc:	e2 e0       	ldi	r30, 0x02	; 2
    16fe:	f1 e0       	ldi	r31, 0x01	; 1
    1700:	80 81       	ld	r24, Z
    1702:	8f 7b       	andi	r24, 0xBF	; 191
    1704:	80 83       	st	Z, r24
		

}
    1706:	08 95       	ret

00001708 <retract>:
		
		

}
void retract()
{
    1708:	80 91 7a 00 	lds	r24, 0x007A
    170c:	80 64       	ori	r24, 0x40	; 64
    170e:	80 93 7a 00 	sts	0x007A, r24
}

int poll_adc()
{
	ADCSRA |= (1<<ADSC);
	while(!(ADCSRA & (1<<ADIF)));
    1712:	80 91 7a 00 	lds	r24, 0x007A
    1716:	84 ff       	sbrs	r24, 4
    1718:	fc cf       	rjmp	.-8      	; 0x1712 <retract+0xa>
	x1= ADCL;
    171a:	20 91 78 00 	lds	r18, 0x0078
	temp=ADCH;
    171e:	40 91 79 00 	lds	r20, 0x0079
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1722:	84 ec       	ldi	r24, 0xC4	; 196
    1724:	8a 95       	dec	r24
    1726:	f1 f7       	brne	.-4      	; 0x1724 <retract+0x1c>

}
void retract()
{
		
		a2=poll_adc();
    1728:	94 2f       	mov	r25, r20
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	82 2b       	or	r24, r18
    1730:	93 2b       	or	r25, r19
    1732:	90 93 42 02 	sts	0x0242, r25
    1736:	80 93 41 02 	sts	0x0241, r24
		ADMUX |= (1<<MUX1);
    173a:	80 91 7c 00 	lds	r24, 0x007C
    173e:	82 60       	ori	r24, 0x02	; 2
    1740:	80 93 7c 00 	sts	0x007C, r24
		ADMUX &= ~(1<<MUX0);
    1744:	80 91 7c 00 	lds	r24, 0x007C
    1748:	8e 7f       	andi	r24, 0xFE	; 254
    174a:	80 93 7c 00 	sts	0x007C, r24

}

int poll_adc()
{
	ADCSRA |= (1<<ADSC);
    174e:	80 91 7a 00 	lds	r24, 0x007A
    1752:	80 64       	ori	r24, 0x40	; 64
    1754:	80 93 7a 00 	sts	0x007A, r24
	while(!(ADCSRA & (1<<ADIF)));
    1758:	80 91 7a 00 	lds	r24, 0x007A
    175c:	84 ff       	sbrs	r24, 4
    175e:	fc cf       	rjmp	.-8      	; 0x1758 <retract+0x50>
	x1= ADCL;
    1760:	20 91 78 00 	lds	r18, 0x0078
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	30 93 44 02 	sts	0x0244, r19
    176a:	20 93 43 02 	sts	0x0243, r18
	temp=ADCH;
    176e:	40 91 79 00 	lds	r20, 0x0079
	temp=temp<<8;
	temp=temp | x1;
    1772:	94 2f       	mov	r25, r20
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	82 2b       	or	r24, r18
    1778:	93 2b       	or	r25, r19
    177a:	90 93 22 02 	sts	0x0222, r25
    177e:	80 93 21 02 	sts	0x0221, r24
    1782:	24 ec       	ldi	r18, 0xC4	; 196
    1784:	2a 95       	dec	r18
    1786:	f1 f7       	brne	.-4      	; 0x1784 <retract+0x7c>
		
		a2=poll_adc();
		ADMUX |= (1<<MUX1);
		ADMUX &= ~(1<<MUX0);
		
		a1=poll_adc();
    1788:	90 93 3e 02 	sts	0x023E, r25
    178c:	80 93 3d 02 	sts	0x023D, r24
		ADMUX |= (1<<MUX0);
    1790:	80 91 7c 00 	lds	r24, 0x007C
    1794:	81 60       	ori	r24, 0x01	; 1
    1796:	80 93 7c 00 	sts	0x007C, r24
		ADMUX &= ~(1<<MUX1);
    179a:	80 91 7c 00 	lds	r24, 0x007C
    179e:	8d 7f       	andi	r24, 0xFD	; 253
    17a0:	80 93 7c 00 	sts	0x007C, r24
		
		reswing();
    17a4:	0e 94 54 07 	call	0xea8	; 0xea8 <reswing>
		
		
		if(flagre==1)
    17a8:	80 91 2b 02 	lds	r24, 0x022B
    17ac:	90 91 2c 02 	lds	r25, 0x022C
    17b0:	01 97       	sbiw	r24, 0x01	; 1
    17b2:	a1 f4       	brne	.+40     	; 0x17dc <retract+0xd4>
		{
			
			if(a1>280)
    17b4:	80 91 3d 02 	lds	r24, 0x023D
    17b8:	90 91 3e 02 	lds	r25, 0x023E
    17bc:	89 51       	subi	r24, 0x19	; 25
    17be:	91 40       	sbci	r25, 0x01	; 1
    17c0:	2c f0       	brlt	.+10     	; 0x17cc <retract+0xc4>
			{
				rightclock(70);
    17c2:	86 e4       	ldi	r24, 0x46	; 70
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <rightclock>
    17ca:	08 c0       	rjmp	.+16     	; 0x17dc <retract+0xd4>
			}
			
			else
			{
				stop1();
    17cc:	0e 94 f2 06 	call	0xde4	; 0xde4 <stop1>
				flagre=2;
    17d0:	82 e0       	ldi	r24, 0x02	; 2
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	90 93 2c 02 	sts	0x022C, r25
    17d8:	80 93 2b 02 	sts	0x022B, r24
				
			}
		}
		if(flagre==2)
    17dc:	80 91 2b 02 	lds	r24, 0x022B
    17e0:	90 91 2c 02 	lds	r25, 0x022C
    17e4:	02 97       	sbiw	r24, 0x02	; 2
    17e6:	a1 f4       	brne	.+40     	; 0x1810 <retract+0x108>
		{
			
			if(a2>330)
    17e8:	80 91 41 02 	lds	r24, 0x0241
    17ec:	90 91 42 02 	lds	r25, 0x0242
    17f0:	8b 54       	subi	r24, 0x4B	; 75
    17f2:	91 40       	sbci	r25, 0x01	; 1
    17f4:	2c f0       	brlt	.+10     	; 0x1800 <retract+0xf8>
			{
				leftclock(70);
    17f6:	86 e4       	ldi	r24, 0x46	; 70
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <leftclock>
    17fe:	08 95       	ret
			}
			else
			{
				stop1();
    1800:	0e 94 f2 06 	call	0xde4	; 0xde4 <stop1>
				flagre=3;
    1804:	83 e0       	ldi	r24, 0x03	; 3
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	90 93 2c 02 	sts	0x022C, r25
    180c:	80 93 2b 02 	sts	0x022B, r24
    1810:	08 95       	ret

00001812 <leftanti>:
	DDRC=0x00;
	PORTC=0xFF;
}

void leftanti(int f)
{
    1812:	21 e0       	ldi	r18, 0x01	; 1
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	30 93 24 02 	sts	0x0224, r19
    181a:	20 93 23 02 	sts	0x0223, r18
		flag=1;
		PWM('3','a',10000,f);
    181e:	9c 01       	movw	r18, r24
    1820:	40 e1       	ldi	r20, 0x10	; 16
    1822:	57 e2       	ldi	r21, 0x27	; 39
    1824:	61 e6       	ldi	r22, 0x61	; 97
    1826:	83 e3       	ldi	r24, 0x33	; 51
    1828:	0e 94 0d 06 	call	0xc1a	; 0xc1a <PWM>
		
		SETBIT(PORTH,BIT(6));
    182c:	e2 e0       	ldi	r30, 0x02	; 2
    182e:	f1 e0       	ldi	r31, 0x01	; 1
    1830:	80 81       	ld	r24, Z
    1832:	80 64       	ori	r24, 0x40	; 64
    1834:	80 83       	st	Z, r24
		
}
    1836:	08 95       	ret

00001838 <manual>:
					
}


void manual()
{
    1838:	ff 92       	push	r15
    183a:	0f 93       	push	r16
    183c:	1f 93       	push	r17
    183e:	cf 93       	push	r28
    1840:	df 93       	push	r29
    1842:	e4 ec       	ldi	r30, 0xC4	; 196
    1844:	fe 2e       	mov	r15, r30

}

int poll_adc()
{
	ADCSRA |= (1<<ADSC);
    1846:	80 91 7a 00 	lds	r24, 0x007A
    184a:	80 64       	ori	r24, 0x40	; 64
    184c:	80 93 7a 00 	sts	0x007A, r24
	while(!(ADCSRA & (1<<ADIF)));
    1850:	80 91 7a 00 	lds	r24, 0x007A
    1854:	84 ff       	sbrs	r24, 4
    1856:	fc cf       	rjmp	.-8      	; 0x1850 <manual+0x18>
	x1= ADCL;
    1858:	80 91 78 00 	lds	r24, 0x0078
	temp=ADCH;
    185c:	20 91 79 00 	lds	r18, 0x0079
    1860:	9f 2d       	mov	r25, r15
    1862:	9a 95       	dec	r25
    1864:	f1 f7       	brne	.-4      	; 0x1862 <manual+0x2a>
void manual()
{
	
	while(1)
	{
			a2=poll_adc();
    1866:	d2 2f       	mov	r29, r18
    1868:	c0 e0       	ldi	r28, 0x00	; 0
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	8c 2b       	or	r24, r28
    186e:	9d 2b       	or	r25, r29
    1870:	90 93 42 02 	sts	0x0242, r25
    1874:	80 93 41 02 	sts	0x0241, r24
		ADMUX |= (1<<MUX1);
    1878:	80 91 7c 00 	lds	r24, 0x007C
    187c:	82 60       	ori	r24, 0x02	; 2
    187e:	80 93 7c 00 	sts	0x007C, r24
		ADMUX &= ~(1<<MUX0);
    1882:	80 91 7c 00 	lds	r24, 0x007C
    1886:	8e 7f       	andi	r24, 0xFE	; 254
    1888:	80 93 7c 00 	sts	0x007C, r24

}

int poll_adc()
{
	ADCSRA |= (1<<ADSC);
    188c:	80 91 7a 00 	lds	r24, 0x007A
    1890:	80 64       	ori	r24, 0x40	; 64
    1892:	80 93 7a 00 	sts	0x007A, r24
	while(!(ADCSRA & (1<<ADIF)));
    1896:	80 91 7a 00 	lds	r24, 0x007A
    189a:	84 ff       	sbrs	r24, 4
    189c:	fc cf       	rjmp	.-8      	; 0x1896 <manual+0x5e>
	x1= ADCL;
    189e:	80 91 78 00 	lds	r24, 0x0078
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	90 93 44 02 	sts	0x0244, r25
    18a8:	80 93 43 02 	sts	0x0243, r24
	temp=ADCH;
    18ac:	20 91 79 00 	lds	r18, 0x0079
	temp=temp<<8;
	temp=temp | x1;
    18b0:	12 2f       	mov	r17, r18
    18b2:	00 e0       	ldi	r16, 0x00	; 0
    18b4:	80 2b       	or	r24, r16
    18b6:	91 2b       	or	r25, r17
    18b8:	90 93 22 02 	sts	0x0222, r25
    18bc:	80 93 21 02 	sts	0x0221, r24
    18c0:	2f 2d       	mov	r18, r15
    18c2:	2a 95       	dec	r18
    18c4:	f1 f7       	brne	.-4      	; 0x18c2 <manual+0x8a>
	{
			a2=poll_adc();
		ADMUX |= (1<<MUX1);
		ADMUX &= ~(1<<MUX0);
		
		a1=poll_adc();
    18c6:	90 93 3e 02 	sts	0x023E, r25
    18ca:	80 93 3d 02 	sts	0x023D, r24
		ADMUX |= (1<<MUX0);
    18ce:	80 91 7c 00 	lds	r24, 0x007C
    18d2:	81 60       	ori	r24, 0x01	; 1
    18d4:	80 93 7c 00 	sts	0x007C, r24
		ADMUX &= ~(1<<MUX1);
    18d8:	80 91 7c 00 	lds	r24, 0x007C
    18dc:	8d 7f       	andi	r24, 0xFD	; 253
    18de:	80 93 7c 00 	sts	0x007C, r24
			lcd_gotoxy1(0);
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	0e 94 23 03 	call	0x646	; 0x646 <lcd_gotoxy1>
			lcd_showvalue(a2);
    18e8:	60 91 41 02 	lds	r22, 0x0241
    18ec:	70 91 42 02 	lds	r23, 0x0242
    18f0:	88 27       	eor	r24, r24
    18f2:	77 fd       	sbrc	r23, 7
    18f4:	80 95       	com	r24
    18f6:	98 2f       	mov	r25, r24
    18f8:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_showvalue>
			lcd_gotoxy2(0);
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	0e 94 27 03 	call	0x64e	; 0x64e <lcd_gotoxy2>
			lcd_showvalue(a1);
    1902:	60 91 3d 02 	lds	r22, 0x023D
    1906:	70 91 3e 02 	lds	r23, 0x023E
    190a:	88 27       	eor	r24, r24
    190c:	77 fd       	sbrc	r23, 7
    190e:	80 95       	com	r24
    1910:	98 2f       	mov	r25, r24
    1912:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_showvalue>
			if(!(PINB & (1<<PB7)))
    1916:	1f 99       	sbic	0x03, 7	; 3
    1918:	0c c0       	rjmp	.+24     	; 0x1932 <manual+0xfa>
			{
				if(!(PINB & (1<<PB7)))
    191a:	1f 99       	sbic	0x03, 7	; 3
    191c:	13 c0       	rjmp	.+38     	; 0x1944 <manual+0x10c>
				{
					if(!(PINB & (1<<PB7)))
    191e:	1f 99       	sbic	0x03, 7	; 3
    1920:	11 c0       	rjmp	.+34     	; 0x1944 <manual+0x10c>
					{
					lcd_gotoxy2(8);
    1922:	88 e0       	ldi	r24, 0x08	; 8
    1924:	0e 94 27 03 	call	0x64e	; 0x64e <lcd_gotoxy2>
					lcd_showvalue(0);
    1928:	60 e0       	ldi	r22, 0x00	; 0
    192a:	70 e0       	ldi	r23, 0x00	; 0
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	07 c0       	rjmp	.+14     	; 0x1940 <manual+0x108>
					}
				}
			}
		else
			{
				lcd_gotoxy2(8);
    1932:	88 e0       	ldi	r24, 0x08	; 8
    1934:	0e 94 27 03 	call	0x64e	; 0x64e <lcd_gotoxy2>
				lcd_showvalue(1);
    1938:	61 e0       	ldi	r22, 0x01	; 1
    193a:	70 e0       	ldi	r23, 0x00	; 0
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_showvalue>
			}
			
		joystick_poll();
    1944:	0e 94 69 04 	call	0x8d2	; 0x8d2 <joystick_poll>
		switch(data0)
    1948:	80 91 15 02 	lds	r24, 0x0215
    194c:	90 91 16 02 	lds	r25, 0x0216
    1950:	80 37       	cpi	r24, 0x70	; 112
    1952:	91 05       	cpc	r25, r1
    1954:	01 f1       	breq	.+64     	; 0x1996 <manual+0x15e>
    1956:	81 37       	cpi	r24, 0x71	; 113
    1958:	91 05       	cpc	r25, r1
    195a:	4c f4       	brge	.+18     	; 0x196e <manual+0x136>
    195c:	80 31       	cpi	r24, 0x10	; 16
    195e:	91 05       	cpc	r25, r1
    1960:	f9 f0       	breq	.+62     	; 0x19a0 <manual+0x168>
    1962:	80 33       	cpi	r24, 0x30	; 48
    1964:	91 05       	cpc	r25, r1
    1966:	91 f0       	breq	.+36     	; 0x198c <manual+0x154>
    1968:	89 2b       	or	r24, r25
    196a:	59 f0       	breq	.+22     	; 0x1982 <manual+0x14a>
    196c:	2d c0       	rjmp	.+90     	; 0x19c8 <manual+0x190>
    196e:	80 3c       	cpi	r24, 0xC0	; 192
    1970:	91 05       	cpc	r25, r1
    1972:	d9 f0       	breq	.+54     	; 0x19aa <manual+0x172>
    1974:	80 3e       	cpi	r24, 0xE0	; 224
    1976:	91 05       	cpc	r25, r1
    1978:	11 f1       	breq	.+68     	; 0x19be <manual+0x186>
    197a:	80 38       	cpi	r24, 0x80	; 128
    197c:	91 05       	cpc	r25, r1
    197e:	21 f5       	brne	.+72     	; 0x19c8 <manual+0x190>
    1980:	19 c0       	rjmp	.+50     	; 0x19b4 <manual+0x17c>
	   {
		case 0:
		leftclock(60);
    1982:	8c e3       	ldi	r24, 0x3C	; 60
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <leftclock>
    198a:	20 c0       	rjmp	.+64     	; 0x19cc <manual+0x194>
		break;
		case 48:
		leftanti(60);
    198c:	8c e3       	ldi	r24, 0x3C	; 60
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	0e 94 09 0c 	call	0x1812	; 0x1812 <leftanti>
    1994:	1b c0       	rjmp	.+54     	; 0x19cc <manual+0x194>
		break;
		case 112://left
		rightclock(60);
    1996:	8c e3       	ldi	r24, 0x3C	; 60
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <rightclock>
    199e:	16 c0       	rjmp	.+44     	; 0x19cc <manual+0x194>
		break;
		case 16://right
		rightanti(60);
    19a0:	8c e3       	ldi	r24, 0x3C	; 60
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	0e 94 4b 0b 	call	0x1696	; 0x1696 <rightanti>
    19a8:	11 c0       	rjmp	.+34     	; 0x19cc <manual+0x194>
		break;
		case 192:
		shiftup(80);
    19aa:	80 e5       	ldi	r24, 0x50	; 80
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	0e 94 36 07 	call	0xe6c	; 0xe6c <shiftup>
    19b2:	0c c0       	rjmp	.+24     	; 0x19cc <manual+0x194>
		break;
		case 128://start
		BotUp(100);
    19b4:	84 e6       	ldi	r24, 0x64	; 100
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	0e 94 73 07 	call	0xee6	; 0xee6 <BotUp>
    19bc:	07 c0       	rjmp	.+14     	; 0x19cc <manual+0x194>
		break;
		case 224:
		BotDown(100);
    19be:	84 e6       	ldi	r24, 0x64	; 100
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	0e 94 45 07 	call	0xe8a	; 0xe8a <BotDown>
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <manual+0x194>
		break;
		default:
		stop1();
    19c8:	0e 94 f2 06 	call	0xde4	; 0xde4 <stop1>
		break;
		}
		switch(data1)
    19cc:	80 91 17 02 	lds	r24, 0x0217
    19d0:	90 91 18 02 	lds	r25, 0x0218
    19d4:	8f 37       	cpi	r24, 0x7F	; 127
    19d6:	91 05       	cpc	r25, r1
    19d8:	e1 f1       	breq	.+120    	; 0x1a52 <manual+0x21a>
    19da:	80 38       	cpi	r24, 0x80	; 128
    19dc:	91 05       	cpc	r25, r1
    19de:	54 f4       	brge	.+20     	; 0x19f4 <manual+0x1bc>
    19e0:	8f 31       	cpi	r24, 0x1F	; 31
    19e2:	91 05       	cpc	r25, r1
    19e4:	91 f1       	breq	.+100    	; 0x1a4a <manual+0x212>
    19e6:	8f 33       	cpi	r24, 0x3F	; 63
    19e8:	91 05       	cpc	r25, r1
    19ea:	59 f1       	breq	.+86     	; 0x1a42 <manual+0x20a>
    19ec:	0f 97       	sbiw	r24, 0x0f	; 15
    19ee:	09 f0       	breq	.+2      	; 0x19f2 <manual+0x1ba>
    19f0:	2a cf       	rjmp	.-428    	; 0x1846 <manual+0xe>
    19f2:	23 c0       	rjmp	.+70     	; 0x1a3a <manual+0x202>
    19f4:	83 3c       	cpi	r24, 0xC3	; 195
    19f6:	91 05       	cpc	r25, r1
    19f8:	e1 f0       	breq	.+56     	; 0x1a32 <manual+0x1fa>
    19fa:	84 3c       	cpi	r24, 0xC4	; 196
    19fc:	91 05       	cpc	r25, r1
    19fe:	2c f4       	brge	.+10     	; 0x1a0a <manual+0x1d2>
    1a00:	87 38       	cpi	r24, 0x87	; 135
    1a02:	91 05       	cpc	r25, r1
    1a04:	09 f0       	breq	.+2      	; 0x1a08 <manual+0x1d0>
    1a06:	1f cf       	rjmp	.-450    	; 0x1846 <manual+0xe>
    1a08:	08 c0       	rjmp	.+16     	; 0x1a1a <manual+0x1e2>
    1a0a:	80 3e       	cpi	r24, 0xE0	; 224
    1a0c:	91 05       	cpc	r25, r1
    1a0e:	69 f0       	breq	.+26     	; 0x1a2a <manual+0x1f2>
    1a10:	85 52       	subi	r24, 0x25	; 37
    1a12:	91 40       	sbci	r25, 0x01	; 1
    1a14:	09 f0       	breq	.+2      	; 0x1a18 <manual+0x1e0>
    1a16:	17 cf       	rjmp	.-466    	; 0x1846 <manual+0xe>
    1a18:	04 c0       	rjmp	.+8      	; 0x1a22 <manual+0x1ea>
		{
		case 135:
		PORTJ &=~ (1<<PJ6);
    1a1a:	80 91 05 01 	lds	r24, 0x0105
    1a1e:	8f 7b       	andi	r24, 0xBF	; 191
    1a20:	1b c0       	rjmp	.+54     	; 0x1a58 <manual+0x220>
		break;
		case 293:
		PORTJ |= (1<<PJ6);
    1a22:	80 91 05 01 	lds	r24, 0x0105
    1a26:	80 64       	ori	r24, 0x40	; 64
    1a28:	17 c0       	rjmp	.+46     	; 0x1a58 <manual+0x220>
		break;
		case 224:
		PORTJ &=~ (1<<PJ5);
    1a2a:	80 91 05 01 	lds	r24, 0x0105
    1a2e:	8f 7d       	andi	r24, 0xDF	; 223
    1a30:	13 c0       	rjmp	.+38     	; 0x1a58 <manual+0x220>
		break;
		case 195:
		PORTJ |= (1<<PJ5);
    1a32:	80 91 05 01 	lds	r24, 0x0105
    1a36:	80 62       	ori	r24, 0x20	; 32
    1a38:	0f c0       	rjmp	.+30     	; 0x1a58 <manual+0x220>
		break;
		case 15:
		PORTJ |= (1<<PJ7);
    1a3a:	80 91 05 01 	lds	r24, 0x0105
    1a3e:	80 68       	ori	r24, 0x80	; 128
    1a40:	0b c0       	rjmp	.+22     	; 0x1a58 <manual+0x220>
		break;
		case 63:
		PORTJ &= ~(1<<PJ7);
    1a42:	80 91 05 01 	lds	r24, 0x0105
    1a46:	8f 77       	andi	r24, 0x7F	; 127
    1a48:	07 c0       	rjmp	.+14     	; 0x1a58 <manual+0x220>
		break;
		case 31:
		PORTJ |= (1<<PJ4);
    1a4a:	80 91 05 01 	lds	r24, 0x0105
    1a4e:	80 61       	ori	r24, 0x10	; 16
    1a50:	03 c0       	rjmp	.+6      	; 0x1a58 <manual+0x220>
		break;
		case 127:
		PORTJ &= ~(1<<PJ4);
    1a52:	80 91 05 01 	lds	r24, 0x0105
    1a56:	8f 7e       	andi	r24, 0xEF	; 239
    1a58:	80 93 05 01 	sts	0x0105, r24
    1a5c:	f4 ce       	rjmp	.-536    	; 0x1846 <manual+0xe>

00001a5e <poll_walk>:

}


void poll_walk()
{
    1a5e:	80 91 7a 00 	lds	r24, 0x007A
    1a62:	80 64       	ori	r24, 0x40	; 64
    1a64:	80 93 7a 00 	sts	0x007A, r24
}

int poll_adc()
{
	ADCSRA |= (1<<ADSC);
	while(!(ADCSRA & (1<<ADIF)));
    1a68:	80 91 7a 00 	lds	r24, 0x007A
    1a6c:	84 ff       	sbrs	r24, 4
    1a6e:	fc cf       	rjmp	.-8      	; 0x1a68 <poll_walk+0xa>
	x1= ADCL;
    1a70:	20 91 78 00 	lds	r18, 0x0078
	temp=ADCH;
    1a74:	40 91 79 00 	lds	r20, 0x0079
    1a78:	84 ec       	ldi	r24, 0xC4	; 196
    1a7a:	8a 95       	dec	r24
    1a7c:	f1 f7       	brne	.-4      	; 0x1a7a <poll_walk+0x1c>
}


void poll_walk()
{
		a2=poll_adc();
    1a7e:	94 2f       	mov	r25, r20
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	82 2b       	or	r24, r18
    1a86:	93 2b       	or	r25, r19
    1a88:	90 93 42 02 	sts	0x0242, r25
    1a8c:	80 93 41 02 	sts	0x0241, r24
		ADMUX |= (1<<MUX1);
    1a90:	80 91 7c 00 	lds	r24, 0x007C
    1a94:	82 60       	ori	r24, 0x02	; 2
    1a96:	80 93 7c 00 	sts	0x007C, r24
		ADMUX &= ~(1<<MUX0);
    1a9a:	80 91 7c 00 	lds	r24, 0x007C
    1a9e:	8e 7f       	andi	r24, 0xFE	; 254
    1aa0:	80 93 7c 00 	sts	0x007C, r24

}

int poll_adc()
{
	ADCSRA |= (1<<ADSC);
    1aa4:	80 91 7a 00 	lds	r24, 0x007A
    1aa8:	80 64       	ori	r24, 0x40	; 64
    1aaa:	80 93 7a 00 	sts	0x007A, r24
	while(!(ADCSRA & (1<<ADIF)));
    1aae:	80 91 7a 00 	lds	r24, 0x007A
    1ab2:	84 ff       	sbrs	r24, 4
    1ab4:	fc cf       	rjmp	.-8      	; 0x1aae <poll_walk+0x50>
	x1= ADCL;
    1ab6:	20 91 78 00 	lds	r18, 0x0078
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	30 93 44 02 	sts	0x0244, r19
    1ac0:	20 93 43 02 	sts	0x0243, r18
	temp=ADCH;
    1ac4:	40 91 79 00 	lds	r20, 0x0079
	temp=temp<<8;
	temp=temp | x1;
    1ac8:	94 2f       	mov	r25, r20
    1aca:	80 e0       	ldi	r24, 0x00	; 0
    1acc:	28 2b       	or	r18, r24
    1ace:	39 2b       	or	r19, r25
    1ad0:	30 93 22 02 	sts	0x0222, r19
    1ad4:	20 93 21 02 	sts	0x0221, r18
    1ad8:	84 ec       	ldi	r24, 0xC4	; 196
    1ada:	8a 95       	dec	r24
    1adc:	f1 f7       	brne	.-4      	; 0x1ada <poll_walk+0x7c>
		a2=poll_adc();
		ADMUX |= (1<<MUX1);
		ADMUX &= ~(1<<MUX0);
		//ADMUX++;
		//ADMUX++;
		a1=poll_adc();
    1ade:	30 93 3e 02 	sts	0x023E, r19
    1ae2:	20 93 3d 02 	sts	0x023D, r18
		ADMUX |= (1<<MUX0);
    1ae6:	80 91 7c 00 	lds	r24, 0x007C
    1aea:	81 60       	ori	r24, 0x01	; 1
    1aec:	80 93 7c 00 	sts	0x007C, r24
		ADMUX &= ~(1<<MUX1);
    1af0:	80 91 7c 00 	lds	r24, 0x007C
    1af4:	8d 7f       	andi	r24, 0xFD	; 253
    1af6:	80 93 7c 00 	sts	0x007C, r24
		//ADMUX--;
		//ADMUX--;
	
		if(flagh==1)
    1afa:	80 91 3b 02 	lds	r24, 0x023B
    1afe:	90 91 3c 02 	lds	r25, 0x023C
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	f9 f4       	brne	.+62     	; 0x1b44 <poll_walk+0xe6>
		{
			
			if(a1>650)
    1b06:	82 e0       	ldi	r24, 0x02	; 2
    1b08:	2b 38       	cpi	r18, 0x8B	; 139
    1b0a:	38 07       	cpc	r19, r24
    1b0c:	2c f0       	brlt	.+10     	; 0x1b18 <poll_walk+0xba>
			{
				rightclock(40);
    1b0e:	88 e2       	ldi	r24, 0x28	; 40
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <rightclock>
    1b16:	16 c0       	rjmp	.+44     	; 0x1b44 <poll_walk+0xe6>
			}
			else if(a1<630)
    1b18:	26 57       	subi	r18, 0x76	; 118
    1b1a:	32 40       	sbci	r19, 0x02	; 2
    1b1c:	2c f4       	brge	.+10     	; 0x1b28 <poll_walk+0xca>
			{
				rightanti(40);
    1b1e:	88 e2       	ldi	r24, 0x28	; 40
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	0e 94 4b 0b 	call	0x1696	; 0x1696 <rightanti>
    1b26:	0e c0       	rjmp	.+28     	; 0x1b44 <poll_walk+0xe6>
			}
			else
			{
				lcd_gotoxy2(0);
    1b28:	80 e0       	ldi	r24, 0x00	; 0
    1b2a:	0e 94 27 03 	call	0x64e	; 0x64e <lcd_gotoxy2>
				lcd_char('L');
    1b2e:	8c e4       	ldi	r24, 0x4C	; 76
    1b30:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_char>
				stop1();
    1b34:	0e 94 f2 06 	call	0xde4	; 0xde4 <stop1>
				flagh=2;
    1b38:	82 e0       	ldi	r24, 0x02	; 2
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	90 93 3c 02 	sts	0x023C, r25
    1b40:	80 93 3b 02 	sts	0x023B, r24
				
				
			}
		}
		if(flagh==2)
    1b44:	80 91 3b 02 	lds	r24, 0x023B
    1b48:	90 91 3c 02 	lds	r25, 0x023C
    1b4c:	02 97       	sbiw	r24, 0x02	; 2
    1b4e:	09 f0       	breq	.+2      	; 0x1b52 <poll_walk+0xf4>
    1b50:	3a c0       	rjmp	.+116    	; 0x1bc6 <poll_walk+0x168>
		{
			if(a2<650)
    1b52:	80 91 41 02 	lds	r24, 0x0241
    1b56:	90 91 42 02 	lds	r25, 0x0242
    1b5a:	22 e0       	ldi	r18, 0x02	; 2
    1b5c:	8a 38       	cpi	r24, 0x8A	; 138
    1b5e:	92 07       	cpc	r25, r18
    1b60:	2c f4       	brge	.+10     	; 0x1b6c <poll_walk+0x10e>
			{
				leftanti(40);
    1b62:	88 e2       	ldi	r24, 0x28	; 40
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	0e 94 09 0c 	call	0x1812	; 0x1812 <leftanti>
    1b6a:	2d c0       	rjmp	.+90     	; 0x1bc6 <poll_walk+0x168>
			}
			else if(a2>670)
    1b6c:	8f 59       	subi	r24, 0x9F	; 159
    1b6e:	92 40       	sbci	r25, 0x02	; 2
    1b70:	2c f0       	brlt	.+10     	; 0x1b7c <poll_walk+0x11e>
			{
				leftclock(40);
    1b72:	88 e2       	ldi	r24, 0x28	; 40
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <leftclock>
    1b7a:	25 c0       	rjmp	.+74     	; 0x1bc6 <poll_walk+0x168>
			}
			else
			{
				lcd_gotoxy1(0);
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	0e 94 23 03 	call	0x646	; 0x646 <lcd_gotoxy1>
				lcd_char('R');
    1b82:	82 e5       	ldi	r24, 0x52	; 82
    1b84:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_char>
				stop1();
    1b88:	0e 94 f2 06 	call	0xde4	; 0xde4 <stop1>
				flagh=3;
    1b8c:	83 e0       	ldi	r24, 0x03	; 3
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	90 93 3c 02 	sts	0x023C, r25
    1b94:	80 93 3b 02 	sts	0x023B, r24
    1b98:	80 e1       	ldi	r24, 0x10	; 16
    1b9a:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b9c:	20 e7       	ldi	r18, 0x70	; 112
    1b9e:	31 e0       	ldi	r19, 0x01	; 1
    1ba0:	f9 01       	movw	r30, r18
    1ba2:	31 97       	sbiw	r30, 0x01	; 1
    1ba4:	f1 f7       	brne	.-4      	; 0x1ba2 <poll_walk+0x144>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba8:	d9 f7       	brne	.-10     	; 0x1ba0 <poll_walk+0x142>
				_delay_ms(1000);//inited
				PORTJ |= (1<<PJ5);
    1baa:	80 91 05 01 	lds	r24, 0x0105
    1bae:	80 62       	ori	r24, 0x20	; 32
    1bb0:	80 93 05 01 	sts	0x0105, r24
    1bb4:	80 e3       	ldi	r24, 0x30	; 48
    1bb6:	95 e7       	ldi	r25, 0x75	; 117
    1bb8:	20 e7       	ldi	r18, 0x70	; 112
    1bba:	31 e0       	ldi	r19, 0x01	; 1
    1bbc:	f9 01       	movw	r30, r18
    1bbe:	31 97       	sbiw	r30, 0x01	; 1
    1bc0:	f1 f7       	brne	.-4      	; 0x1bbe <poll_walk+0x160>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc4:	d9 f7       	brne	.-10     	; 0x1bbc <poll_walk+0x15e>
				_delay_ms(3000);
			}
		}
		
		if(flagh==3)
    1bc6:	80 91 3b 02 	lds	r24, 0x023B
    1bca:	90 91 3c 02 	lds	r25, 0x023C
    1bce:	03 97       	sbiw	r24, 0x03	; 3
    1bd0:	b1 f5       	brne	.+108    	; 0x1c3e <poll_walk+0x1e0>
		{
			if(a2<1015)
    1bd2:	80 91 41 02 	lds	r24, 0x0241
    1bd6:	90 91 42 02 	lds	r25, 0x0242
    1bda:	23 e0       	ldi	r18, 0x03	; 3
    1bdc:	87 3f       	cpi	r24, 0xF7	; 247
    1bde:	92 07       	cpc	r25, r18
    1be0:	2c f4       	brge	.+10     	; 0x1bec <poll_walk+0x18e>
			{
				leftanti(40);
    1be2:	88 e2       	ldi	r24, 0x28	; 40
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	0e 94 09 0c 	call	0x1812	; 0x1812 <leftanti>
    1bea:	29 c0       	rjmp	.+82     	; 0x1c3e <poll_walk+0x1e0>
			}
			else if(a2>1020)
    1bec:	8d 5f       	subi	r24, 0xFD	; 253
    1bee:	93 40       	sbci	r25, 0x03	; 3
    1bf0:	2c f0       	brlt	.+10     	; 0x1bfc <poll_walk+0x19e>
			{
				leftclock(40);
    1bf2:	88 e2       	ldi	r24, 0x28	; 40
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <leftclock>
    1bfa:	21 c0       	rjmp	.+66     	; 0x1c3e <poll_walk+0x1e0>
			}
			else
			{
				lcd_gotoxy1(0);
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	0e 94 23 03 	call	0x646	; 0x646 <lcd_gotoxy1>
				lcd_char('R');
    1c02:	82 e5       	ldi	r24, 0x52	; 82
    1c04:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_char>
				stop1();
    1c08:	0e 94 f2 06 	call	0xde4	; 0xde4 <stop1>
				PORTJ |= (1<<PJ6);
    1c0c:	80 91 05 01 	lds	r24, 0x0105
    1c10:	80 64       	ori	r24, 0x40	; 64
    1c12:	80 93 05 01 	sts	0x0105, r24
    1c16:	80 e1       	ldi	r24, 0x10	; 16
    1c18:	97 e2       	ldi	r25, 0x27	; 39
    1c1a:	20 e7       	ldi	r18, 0x70	; 112
    1c1c:	31 e0       	ldi	r19, 0x01	; 1
    1c1e:	f9 01       	movw	r30, r18
    1c20:	31 97       	sbiw	r30, 0x01	; 1
    1c22:	f1 f7       	brne	.-4      	; 0x1c20 <poll_walk+0x1c2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c24:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c26:	d9 f7       	brne	.-10     	; 0x1c1e <poll_walk+0x1c0>
				_delay_ms(1000);//pole 2 grip
				PORTJ &= ~(1<<PJ5);
    1c28:	80 91 05 01 	lds	r24, 0x0105
    1c2c:	8f 7d       	andi	r24, 0xDF	; 223
    1c2e:	80 93 05 01 	sts	0x0105, r24
				flagh=5;
    1c32:	85 e0       	ldi	r24, 0x05	; 5
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	90 93 3c 02 	sts	0x023C, r25
    1c3a:	80 93 3b 02 	sts	0x023B, r24
				
			}
		}
		
		if(flagh==4)
    1c3e:	80 91 3b 02 	lds	r24, 0x023B
    1c42:	90 91 3c 02 	lds	r25, 0x023C
    1c46:	04 97       	sbiw	r24, 0x04	; 4
    1c48:	b1 f5       	brne	.+108    	; 0x1cb6 <poll_walk+0x258>
		{
			
			if(a1>660)
    1c4a:	80 91 3d 02 	lds	r24, 0x023D
    1c4e:	90 91 3e 02 	lds	r25, 0x023E
    1c52:	22 e0       	ldi	r18, 0x02	; 2
    1c54:	85 39       	cpi	r24, 0x95	; 149
    1c56:	92 07       	cpc	r25, r18
    1c58:	2c f0       	brlt	.+10     	; 0x1c64 <poll_walk+0x206>
			{
				rightclock(40);
    1c5a:	88 e2       	ldi	r24, 0x28	; 40
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <rightclock>
    1c62:	29 c0       	rjmp	.+82     	; 0x1cb6 <poll_walk+0x258>
			}
			else if(a1<650)
    1c64:	8a 58       	subi	r24, 0x8A	; 138
    1c66:	92 40       	sbci	r25, 0x02	; 2
    1c68:	2c f4       	brge	.+10     	; 0x1c74 <poll_walk+0x216>
			{
				rightanti(40);
    1c6a:	88 e2       	ldi	r24, 0x28	; 40
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	0e 94 4b 0b 	call	0x1696	; 0x1696 <rightanti>
    1c72:	21 c0       	rjmp	.+66     	; 0x1cb6 <poll_walk+0x258>
			}
			else
			{
				lcd_gotoxy2(0);
    1c74:	80 e0       	ldi	r24, 0x00	; 0
    1c76:	0e 94 27 03 	call	0x64e	; 0x64e <lcd_gotoxy2>
				lcd_char('L');
    1c7a:	8c e4       	ldi	r24, 0x4C	; 76
    1c7c:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_char>
				stop1();
    1c80:	0e 94 f2 06 	call	0xde4	; 0xde4 <stop1>
				flagh=5;
    1c84:	85 e0       	ldi	r24, 0x05	; 5
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	90 93 3c 02 	sts	0x023C, r25
    1c8c:	80 93 3b 02 	sts	0x023B, r24
				
				PORTJ |= (1<<PJ6);
    1c90:	80 91 05 01 	lds	r24, 0x0105
    1c94:	80 64       	ori	r24, 0x40	; 64
    1c96:	80 93 05 01 	sts	0x0105, r24
    1c9a:	80 e1       	ldi	r24, 0x10	; 16
    1c9c:	97 e2       	ldi	r25, 0x27	; 39
    1c9e:	20 e7       	ldi	r18, 0x70	; 112
    1ca0:	31 e0       	ldi	r19, 0x01	; 1
    1ca2:	f9 01       	movw	r30, r18
    1ca4:	31 97       	sbiw	r30, 0x01	; 1
    1ca6:	f1 f7       	brne	.-4      	; 0x1ca4 <poll_walk+0x246>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1caa:	d9 f7       	brne	.-10     	; 0x1ca2 <poll_walk+0x244>
				_delay_ms(1000);//pole 2 grip
				PORTJ &= ~(1<<PJ5);
    1cac:	80 91 05 01 	lds	r24, 0x0105
    1cb0:	8f 7d       	andi	r24, 0xDF	; 223
    1cb2:	80 93 05 01 	sts	0x0105, r24
				
			}
		}
		
		if(flagh==5)
    1cb6:	80 91 3b 02 	lds	r24, 0x023B
    1cba:	90 91 3c 02 	lds	r25, 0x023C
    1cbe:	05 97       	sbiw	r24, 0x05	; 5
    1cc0:	19 f5       	brne	.+70     	; 0x1d08 <poll_walk+0x2aa>
		{
			if(a1>330)
    1cc2:	80 91 3d 02 	lds	r24, 0x023D
    1cc6:	90 91 3e 02 	lds	r25, 0x023E
    1cca:	21 e0       	ldi	r18, 0x01	; 1
    1ccc:	8b 34       	cpi	r24, 0x4B	; 75
    1cce:	92 07       	cpc	r25, r18
    1cd0:	2c f0       	brlt	.+10     	; 0x1cdc <poll_walk+0x27e>
			{
				rightclock(50);
    1cd2:	82 e3       	ldi	r24, 0x32	; 50
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <rightclock>
    1cda:	16 c0       	rjmp	.+44     	; 0x1d08 <poll_walk+0x2aa>
			}
			else if(a1<320)
    1cdc:	80 54       	subi	r24, 0x40	; 64
    1cde:	91 40       	sbci	r25, 0x01	; 1
    1ce0:	2c f4       	brge	.+10     	; 0x1cec <poll_walk+0x28e>
			{
				rightanti(50);
    1ce2:	82 e3       	ldi	r24, 0x32	; 50
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	0e 94 4b 0b 	call	0x1696	; 0x1696 <rightanti>
    1cea:	0e c0       	rjmp	.+28     	; 0x1d08 <poll_walk+0x2aa>
			}
			else
			{
				lcd_gotoxy2(0);
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	0e 94 27 03 	call	0x64e	; 0x64e <lcd_gotoxy2>
				lcd_char('L');
    1cf2:	8c e4       	ldi	r24, 0x4C	; 76
    1cf4:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_char>
				stop1();
    1cf8:	0e 94 f2 06 	call	0xde4	; 0xde4 <stop1>
				flagh=6;
    1cfc:	86 e0       	ldi	r24, 0x06	; 6
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	90 93 3c 02 	sts	0x023C, r25
    1d04:	80 93 3b 02 	sts	0x023B, r24
			}
		}
		if(flagh==6)
    1d08:	80 91 3b 02 	lds	r24, 0x023B
    1d0c:	90 91 3c 02 	lds	r25, 0x023C
    1d10:	06 97       	sbiw	r24, 0x06	; 6
    1d12:	b1 f5       	brne	.+108    	; 0x1d80 <poll_walk+0x322>
		{
			if(a2<330)
    1d14:	80 91 41 02 	lds	r24, 0x0241
    1d18:	90 91 42 02 	lds	r25, 0x0242
    1d1c:	21 e0       	ldi	r18, 0x01	; 1
    1d1e:	8a 34       	cpi	r24, 0x4A	; 74
    1d20:	92 07       	cpc	r25, r18
    1d22:	2c f4       	brge	.+10     	; 0x1d2e <poll_walk+0x2d0>
			{
				leftanti(50);
    1d24:	82 e3       	ldi	r24, 0x32	; 50
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	0e 94 09 0c 	call	0x1812	; 0x1812 <leftanti>
    1d2c:	29 c0       	rjmp	.+82     	; 0x1d80 <poll_walk+0x322>
			}
			else if(a2>350)
    1d2e:	8f 55       	subi	r24, 0x5F	; 95
    1d30:	91 40       	sbci	r25, 0x01	; 1
    1d32:	2c f0       	brlt	.+10     	; 0x1d3e <poll_walk+0x2e0>
			{
				leftclock(50);
    1d34:	82 e3       	ldi	r24, 0x32	; 50
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <leftclock>
    1d3c:	21 c0       	rjmp	.+66     	; 0x1d80 <poll_walk+0x322>
			}
			else
			{
				lcd_gotoxy1(0);
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	0e 94 23 03 	call	0x646	; 0x646 <lcd_gotoxy1>
				lcd_char('R');
    1d44:	82 e5       	ldi	r24, 0x52	; 82
    1d46:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_char>
				stop1();
    1d4a:	0e 94 f2 06 	call	0xde4	; 0xde4 <stop1>
				
				PORTJ |= (1<<PJ7);
    1d4e:	80 91 05 01 	lds	r24, 0x0105
    1d52:	80 68       	ori	r24, 0x80	; 128
    1d54:	80 93 05 01 	sts	0x0105, r24
    1d58:	80 e1       	ldi	r24, 0x10	; 16
    1d5a:	97 e2       	ldi	r25, 0x27	; 39
    1d5c:	20 e7       	ldi	r18, 0x70	; 112
    1d5e:	31 e0       	ldi	r19, 0x01	; 1
    1d60:	f9 01       	movw	r30, r18
    1d62:	31 97       	sbiw	r30, 0x01	; 1
    1d64:	f1 f7       	brne	.-4      	; 0x1d62 <poll_walk+0x304>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d66:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d68:	d9 f7       	brne	.-10     	; 0x1d60 <poll_walk+0x302>
				_delay_ms(1000);//pole 3
				PORTJ &= ~(1<<PJ6);
    1d6a:	80 91 05 01 	lds	r24, 0x0105
    1d6e:	8f 7b       	andi	r24, 0xBF	; 191
    1d70:	80 93 05 01 	sts	0x0105, r24
				flagh=7;
    1d74:	87 e0       	ldi	r24, 0x07	; 7
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	90 93 3c 02 	sts	0x023C, r25
    1d7c:	80 93 3b 02 	sts	0x023B, r24
			}
		}
		if(flagh==7)
    1d80:	80 91 3b 02 	lds	r24, 0x023B
    1d84:	90 91 3c 02 	lds	r25, 0x023C
    1d88:	07 97       	sbiw	r24, 0x07	; 7
    1d8a:	19 f5       	brne	.+70     	; 0x1dd2 <poll_walk+0x374>
		{
			if(a2<640)
    1d8c:	80 91 41 02 	lds	r24, 0x0241
    1d90:	90 91 42 02 	lds	r25, 0x0242
    1d94:	22 e0       	ldi	r18, 0x02	; 2
    1d96:	80 38       	cpi	r24, 0x80	; 128
    1d98:	92 07       	cpc	r25, r18
    1d9a:	2c f4       	brge	.+10     	; 0x1da6 <poll_walk+0x348>
			{
				leftanti(40);
    1d9c:	88 e2       	ldi	r24, 0x28	; 40
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	0e 94 09 0c 	call	0x1812	; 0x1812 <leftanti>
    1da4:	16 c0       	rjmp	.+44     	; 0x1dd2 <poll_walk+0x374>
			}
			else if(a2>670)
    1da6:	8f 59       	subi	r24, 0x9F	; 159
    1da8:	92 40       	sbci	r25, 0x02	; 2
    1daa:	2c f0       	brlt	.+10     	; 0x1db6 <poll_walk+0x358>
			{
				leftclock(40);
    1dac:	88 e2       	ldi	r24, 0x28	; 40
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <leftclock>
    1db4:	0e c0       	rjmp	.+28     	; 0x1dd2 <poll_walk+0x374>
			}
			else
			{
				lcd_gotoxy1(0);
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	0e 94 23 03 	call	0x646	; 0x646 <lcd_gotoxy1>
				lcd_char('R');
    1dbc:	82 e5       	ldi	r24, 0x52	; 82
    1dbe:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_char>
				stop1();
    1dc2:	0e 94 f2 06 	call	0xde4	; 0xde4 <stop1>
				flagh=8;
    1dc6:	88 e0       	ldi	r24, 0x08	; 8
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	90 93 3c 02 	sts	0x023C, r25
    1dce:	80 93 3b 02 	sts	0x023B, r24
				
			}
		}
		if(flagh==8)
    1dd2:	80 91 3b 02 	lds	r24, 0x023B
    1dd6:	90 91 3c 02 	lds	r25, 0x023C
    1dda:	08 97       	sbiw	r24, 0x08	; 8
    1ddc:	09 f0       	breq	.+2      	; 0x1de0 <poll_walk+0x382>
    1dde:	3f c0       	rjmp	.+126    	; 0x1e5e <poll_walk+0x400>
		{
			if(a1>980)
    1de0:	80 91 3d 02 	lds	r24, 0x023D
    1de4:	90 91 3e 02 	lds	r25, 0x023E
    1de8:	23 e0       	ldi	r18, 0x03	; 3
    1dea:	85 3d       	cpi	r24, 0xD5	; 213
    1dec:	92 07       	cpc	r25, r18
    1dee:	2c f0       	brlt	.+10     	; 0x1dfa <poll_walk+0x39c>
			{
				rightclock(50);
    1df0:	82 e3       	ldi	r24, 0x32	; 50
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <rightclock>
    1df8:	32 c0       	rjmp	.+100    	; 0x1e5e <poll_walk+0x400>
			}
			else if(a1<970)
    1dfa:	8a 5c       	subi	r24, 0xCA	; 202
    1dfc:	93 40       	sbci	r25, 0x03	; 3
    1dfe:	2c f4       	brge	.+10     	; 0x1e0a <poll_walk+0x3ac>
			{
				rightanti(50);
    1e00:	82 e3       	ldi	r24, 0x32	; 50
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	0e 94 4b 0b 	call	0x1696	; 0x1696 <rightanti>
    1e08:	2a c0       	rjmp	.+84     	; 0x1e5e <poll_walk+0x400>
			}
			else
			{
				lcd_gotoxy2(0);
    1e0a:	80 e0       	ldi	r24, 0x00	; 0
    1e0c:	0e 94 27 03 	call	0x64e	; 0x64e <lcd_gotoxy2>
				lcd_char('L');
    1e10:	8c e4       	ldi	r24, 0x4C	; 76
    1e12:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_char>
				stop1();
    1e16:	0e 94 f2 06 	call	0xde4	; 0xde4 <stop1>
				flagh=9;//pole 4 grab
    1e1a:	89 e0       	ldi	r24, 0x09	; 9
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	90 93 3c 02 	sts	0x023C, r25
    1e22:	80 93 3b 02 	sts	0x023B, r24
    1e26:	88 e8       	ldi	r24, 0x88	; 136
    1e28:	93 e1       	ldi	r25, 0x13	; 19
    1e2a:	20 e7       	ldi	r18, 0x70	; 112
    1e2c:	31 e0       	ldi	r19, 0x01	; 1
    1e2e:	f9 01       	movw	r30, r18
    1e30:	31 97       	sbiw	r30, 0x01	; 1
    1e32:	f1 f7       	brne	.-4      	; 0x1e30 <poll_walk+0x3d2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e34:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e36:	d9 f7       	brne	.-10     	; 0x1e2e <poll_walk+0x3d0>
				_delay_ms(500);
				PORTJ |= (1<<PJ4);
    1e38:	80 91 05 01 	lds	r24, 0x0105
    1e3c:	80 61       	ori	r24, 0x10	; 16
    1e3e:	80 93 05 01 	sts	0x0105, r24
    1e42:	80 e1       	ldi	r24, 0x10	; 16
    1e44:	97 e2       	ldi	r25, 0x27	; 39
    1e46:	20 e7       	ldi	r18, 0x70	; 112
    1e48:	31 e0       	ldi	r19, 0x01	; 1
    1e4a:	f9 01       	movw	r30, r18
    1e4c:	31 97       	sbiw	r30, 0x01	; 1
    1e4e:	f1 f7       	brne	.-4      	; 0x1e4c <poll_walk+0x3ee>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e50:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e52:	d9 f7       	brne	.-10     	; 0x1e4a <poll_walk+0x3ec>
				_delay_ms(1000);
				PORTJ &= ~(1<<PJ7);
    1e54:	80 91 05 01 	lds	r24, 0x0105
    1e58:	8f 77       	andi	r24, 0x7F	; 127
    1e5a:	80 93 05 01 	sts	0x0105, r24
				
			}
		}
		
		if(flagh==9)
    1e5e:	80 91 3b 02 	lds	r24, 0x023B
    1e62:	90 91 3c 02 	lds	r25, 0x023C
    1e66:	09 97       	sbiw	r24, 0x09	; 9
    1e68:	19 f5       	brne	.+70     	; 0x1eb0 <poll_walk+0x452>
		{
			if(a1>470)
    1e6a:	80 91 3d 02 	lds	r24, 0x023D
    1e6e:	90 91 3e 02 	lds	r25, 0x023E
    1e72:	21 e0       	ldi	r18, 0x01	; 1
    1e74:	87 3d       	cpi	r24, 0xD7	; 215
    1e76:	92 07       	cpc	r25, r18
    1e78:	2c f0       	brlt	.+10     	; 0x1e84 <poll_walk+0x426>
			{
				rightclock(70);
    1e7a:	86 e4       	ldi	r24, 0x46	; 70
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <rightclock>
    1e82:	16 c0       	rjmp	.+44     	; 0x1eb0 <poll_walk+0x452>
			}
			else if(a1<450)
    1e84:	82 5c       	subi	r24, 0xC2	; 194
    1e86:	91 40       	sbci	r25, 0x01	; 1
    1e88:	2c f4       	brge	.+10     	; 0x1e94 <poll_walk+0x436>
			{
				rightanti(70);
    1e8a:	86 e4       	ldi	r24, 0x46	; 70
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	0e 94 4b 0b 	call	0x1696	; 0x1696 <rightanti>
    1e92:	0e c0       	rjmp	.+28     	; 0x1eb0 <poll_walk+0x452>
			}
			else
			{
				lcd_gotoxy2(0);
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	0e 94 27 03 	call	0x64e	; 0x64e <lcd_gotoxy2>
				lcd_char('L');
    1e9a:	8c e4       	ldi	r24, 0x4C	; 76
    1e9c:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_char>
				stop1();
    1ea0:	0e 94 f2 06 	call	0xde4	; 0xde4 <stop1>
				flagh=10;//wait for manual
    1ea4:	8a e0       	ldi	r24, 0x0A	; 10
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	90 93 3c 02 	sts	0x023C, r25
    1eac:	80 93 3b 02 	sts	0x023B, r24
			}
			
		}
		
		if(flagh==10)
    1eb0:	80 91 3b 02 	lds	r24, 0x023B
    1eb4:	90 91 3c 02 	lds	r25, 0x023C
    1eb8:	0a 97       	sbiw	r24, 0x0a	; 10
    1eba:	19 f5       	brne	.+70     	; 0x1f02 <poll_walk+0x4a4>
		{
			if(a2<500)
    1ebc:	80 91 41 02 	lds	r24, 0x0241
    1ec0:	90 91 42 02 	lds	r25, 0x0242
    1ec4:	21 e0       	ldi	r18, 0x01	; 1
    1ec6:	84 3f       	cpi	r24, 0xF4	; 244
    1ec8:	92 07       	cpc	r25, r18
    1eca:	2c f4       	brge	.+10     	; 0x1ed6 <poll_walk+0x478>
			{
				leftanti(70);
    1ecc:	86 e4       	ldi	r24, 0x46	; 70
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	0e 94 09 0c 	call	0x1812	; 0x1812 <leftanti>
    1ed4:	08 95       	ret
			}
			else if(a2>520)
    1ed6:	89 50       	subi	r24, 0x09	; 9
    1ed8:	92 40       	sbci	r25, 0x02	; 2
    1eda:	2c f0       	brlt	.+10     	; 0x1ee6 <poll_walk+0x488>
			{
				leftclock(70);
    1edc:	86 e4       	ldi	r24, 0x46	; 70
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <leftclock>
    1ee4:	08 95       	ret
			}
			else
			{
				lcd_gotoxy1(0);
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
    1ee8:	0e 94 23 03 	call	0x646	; 0x646 <lcd_gotoxy1>
				lcd_char('R');
    1eec:	82 e5       	ldi	r24, 0x52	; 82
    1eee:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_char>
				stop1();
    1ef2:	0e 94 f2 06 	call	0xde4	; 0xde4 <stop1>
				flagh=11;
    1ef6:	8b e0       	ldi	r24, 0x0B	; 11
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	90 93 3c 02 	sts	0x023C, r25
    1efe:	80 93 3b 02 	sts	0x023B, r24
    1f02:	08 95       	ret

00001f04 <see_saw>:
		

}

void see_saw()
{
    1f04:	80 91 7a 00 	lds	r24, 0x007A
    1f08:	80 64       	ori	r24, 0x40	; 64
    1f0a:	80 93 7a 00 	sts	0x007A, r24
}

int poll_adc()
{
	ADCSRA |= (1<<ADSC);
	while(!(ADCSRA & (1<<ADIF)));
    1f0e:	80 91 7a 00 	lds	r24, 0x007A
    1f12:	84 ff       	sbrs	r24, 4
    1f14:	fc cf       	rjmp	.-8      	; 0x1f0e <see_saw+0xa>
	x1= ADCL;
    1f16:	20 91 78 00 	lds	r18, 0x0078
	temp=ADCH;
    1f1a:	40 91 79 00 	lds	r20, 0x0079
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f1e:	84 ec       	ldi	r24, 0xC4	; 196
    1f20:	8a 95       	dec	r24
    1f22:	f1 f7       	brne	.-4      	; 0x1f20 <see_saw+0x1c>
}

void see_saw()
{
		
		a2=poll_adc();
    1f24:	94 2f       	mov	r25, r20
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	82 2b       	or	r24, r18
    1f2c:	93 2b       	or	r25, r19
    1f2e:	90 93 42 02 	sts	0x0242, r25
    1f32:	80 93 41 02 	sts	0x0241, r24
		ADMUX |= (1<<MUX1);
    1f36:	80 91 7c 00 	lds	r24, 0x007C
    1f3a:	82 60       	ori	r24, 0x02	; 2
    1f3c:	80 93 7c 00 	sts	0x007C, r24
		ADMUX &= ~(1<<MUX0);
    1f40:	80 91 7c 00 	lds	r24, 0x007C
    1f44:	8e 7f       	andi	r24, 0xFE	; 254
    1f46:	80 93 7c 00 	sts	0x007C, r24

}

int poll_adc()
{
	ADCSRA |= (1<<ADSC);
    1f4a:	80 91 7a 00 	lds	r24, 0x007A
    1f4e:	80 64       	ori	r24, 0x40	; 64
    1f50:	80 93 7a 00 	sts	0x007A, r24
	while(!(ADCSRA & (1<<ADIF)));
    1f54:	80 91 7a 00 	lds	r24, 0x007A
    1f58:	84 ff       	sbrs	r24, 4
    1f5a:	fc cf       	rjmp	.-8      	; 0x1f54 <see_saw+0x50>
	x1= ADCL;
    1f5c:	20 91 78 00 	lds	r18, 0x0078
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	30 93 44 02 	sts	0x0244, r19
    1f66:	20 93 43 02 	sts	0x0243, r18
	temp=ADCH;
    1f6a:	40 91 79 00 	lds	r20, 0x0079
	temp=temp<<8;
	temp=temp | x1;
    1f6e:	94 2f       	mov	r25, r20
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	28 2b       	or	r18, r24
    1f74:	39 2b       	or	r19, r25
    1f76:	30 93 22 02 	sts	0x0222, r19
    1f7a:	20 93 21 02 	sts	0x0221, r18
    1f7e:	84 ec       	ldi	r24, 0xC4	; 196
    1f80:	8a 95       	dec	r24
    1f82:	f1 f7       	brne	.-4      	; 0x1f80 <see_saw+0x7c>
		
		a2=poll_adc();
		ADMUX |= (1<<MUX1);
		ADMUX &= ~(1<<MUX0);
		
		a1=poll_adc();
    1f84:	30 93 3e 02 	sts	0x023E, r19
    1f88:	20 93 3d 02 	sts	0x023D, r18
		ADMUX |= (1<<MUX0);
    1f8c:	80 91 7c 00 	lds	r24, 0x007C
    1f90:	81 60       	ori	r24, 0x01	; 1
    1f92:	80 93 7c 00 	sts	0x007C, r24
		ADMUX &= ~(1<<MUX1);
    1f96:	80 91 7c 00 	lds	r24, 0x007C
    1f9a:	8d 7f       	andi	r24, 0xFD	; 253
    1f9c:	80 93 7c 00 	sts	0x007C, r24
		
	
		if(flagse==1)
    1fa0:	80 91 29 02 	lds	r24, 0x0229
    1fa4:	90 91 2a 02 	lds	r25, 0x022A
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	81 f4       	brne	.+32     	; 0x1fcc <see_saw+0xc8>
		{
			
						if(a1<890)
    1fac:	2a 57       	subi	r18, 0x7A	; 122
    1fae:	33 40       	sbci	r19, 0x03	; 3
    1fb0:	2c f4       	brge	.+10     	; 0x1fbc <see_saw+0xb8>
			{
				rightanti(70);
    1fb2:	86 e4       	ldi	r24, 0x46	; 70
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	0e 94 4b 0b 	call	0x1696	; 0x1696 <rightanti>
    1fba:	08 c0       	rjmp	.+16     	; 0x1fcc <see_saw+0xc8>
			}
			else
			{
				stop1();
    1fbc:	0e 94 f2 06 	call	0xde4	; 0xde4 <stop1>
				flagse=2;
    1fc0:	82 e0       	ldi	r24, 0x02	; 2
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	90 93 2a 02 	sts	0x022A, r25
    1fc8:	80 93 29 02 	sts	0x0229, r24
		
				
			}
		}
		if(flagse==2)
    1fcc:	80 91 29 02 	lds	r24, 0x0229
    1fd0:	90 91 2a 02 	lds	r25, 0x022A
    1fd4:	02 97       	sbiw	r24, 0x02	; 2
    1fd6:	a1 f4       	brne	.+40     	; 0x2000 <see_saw+0xfc>
		{
			if(a2<880)
    1fd8:	80 91 41 02 	lds	r24, 0x0241
    1fdc:	90 91 42 02 	lds	r25, 0x0242
    1fe0:	80 57       	subi	r24, 0x70	; 112
    1fe2:	93 40       	sbci	r25, 0x03	; 3
    1fe4:	2c f4       	brge	.+10     	; 0x1ff0 <see_saw+0xec>
			{
				leftanti(70);
    1fe6:	86 e4       	ldi	r24, 0x46	; 70
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	0e 94 09 0c 	call	0x1812	; 0x1812 <leftanti>
    1fee:	08 95       	ret
			}
		
			else
			{
				stop1();
    1ff0:	0e 94 f2 06 	call	0xde4	; 0xde4 <stop1>
				flagse=3;
    1ff4:	83 e0       	ldi	r24, 0x03	; 3
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	90 93 2a 02 	sts	0x022A, r25
    1ffc:	80 93 29 02 	sts	0x0229, r24
    2000:	08 95       	ret

00002002 <fold>:
	_delay_us(40);
	return temp;
}

void fold()
{
    2002:	80 91 7a 00 	lds	r24, 0x007A
    2006:	80 64       	ori	r24, 0x40	; 64
    2008:	80 93 7a 00 	sts	0x007A, r24
}

int poll_adc()
{
	ADCSRA |= (1<<ADSC);
	while(!(ADCSRA & (1<<ADIF)));
    200c:	80 91 7a 00 	lds	r24, 0x007A
    2010:	84 ff       	sbrs	r24, 4
    2012:	fc cf       	rjmp	.-8      	; 0x200c <fold+0xa>
	x1= ADCL;
    2014:	20 91 78 00 	lds	r18, 0x0078
	temp=ADCH;
    2018:	40 91 79 00 	lds	r20, 0x0079
    201c:	84 ec       	ldi	r24, 0xC4	; 196
    201e:	8a 95       	dec	r24
    2020:	f1 f7       	brne	.-4      	; 0x201e <fold+0x1c>
}

void fold()
{
		
		a2=poll_adc();
    2022:	94 2f       	mov	r25, r20
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	82 2b       	or	r24, r18
    202a:	93 2b       	or	r25, r19
    202c:	90 93 42 02 	sts	0x0242, r25
    2030:	80 93 41 02 	sts	0x0241, r24
		ADMUX |= (1<<MUX1);
    2034:	80 91 7c 00 	lds	r24, 0x007C
    2038:	82 60       	ori	r24, 0x02	; 2
    203a:	80 93 7c 00 	sts	0x007C, r24
		ADMUX &= ~(1<<MUX0);
    203e:	80 91 7c 00 	lds	r24, 0x007C
    2042:	8e 7f       	andi	r24, 0xFE	; 254
    2044:	80 93 7c 00 	sts	0x007C, r24

}

int poll_adc()
{
	ADCSRA |= (1<<ADSC);
    2048:	80 91 7a 00 	lds	r24, 0x007A
    204c:	80 64       	ori	r24, 0x40	; 64
    204e:	80 93 7a 00 	sts	0x007A, r24
	while(!(ADCSRA & (1<<ADIF)));
    2052:	80 91 7a 00 	lds	r24, 0x007A
    2056:	84 ff       	sbrs	r24, 4
    2058:	fc cf       	rjmp	.-8      	; 0x2052 <fold+0x50>
	x1= ADCL;
    205a:	20 91 78 00 	lds	r18, 0x0078
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	30 93 44 02 	sts	0x0244, r19
    2064:	20 93 43 02 	sts	0x0243, r18
	temp=ADCH;
    2068:	40 91 79 00 	lds	r20, 0x0079
	temp=temp<<8;
	temp=temp | x1;
    206c:	94 2f       	mov	r25, r20
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	28 2b       	or	r18, r24
    2072:	39 2b       	or	r19, r25
    2074:	30 93 22 02 	sts	0x0222, r19
    2078:	20 93 21 02 	sts	0x0221, r18
    207c:	84 ec       	ldi	r24, 0xC4	; 196
    207e:	8a 95       	dec	r24
    2080:	f1 f7       	brne	.-4      	; 0x207e <fold+0x7c>
		
		a2=poll_adc();
		ADMUX |= (1<<MUX1);
		ADMUX &= ~(1<<MUX0);
		
		a1=poll_adc();
    2082:	30 93 3e 02 	sts	0x023E, r19
    2086:	20 93 3d 02 	sts	0x023D, r18
		ADMUX |= (1<<MUX0);
    208a:	80 91 7c 00 	lds	r24, 0x007C
    208e:	81 60       	ori	r24, 0x01	; 1
    2090:	80 93 7c 00 	sts	0x007C, r24
		ADMUX &= ~(1<<MUX1);
    2094:	80 91 7c 00 	lds	r24, 0x007C
    2098:	8d 7f       	andi	r24, 0xFD	; 253
    209a:	80 93 7c 00 	sts	0x007C, r24
		
	
		if(flagf==1)
    209e:	80 91 2f 02 	lds	r24, 0x022F
    20a2:	90 91 30 02 	lds	r25, 0x0230
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	81 f4       	brne	.+32     	; 0x20ca <fold+0xc8>
		{
			
			if(a1>340)
    20aa:	25 55       	subi	r18, 0x55	; 85
    20ac:	31 40       	sbci	r19, 0x01	; 1
    20ae:	2c f0       	brlt	.+10     	; 0x20ba <fold+0xb8>
			{
				rightclock(40);
    20b0:	88 e2       	ldi	r24, 0x28	; 40
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <rightclock>
    20b8:	08 c0       	rjmp	.+16     	; 0x20ca <fold+0xc8>
			}
			
			else
			{
				stop1();
    20ba:	0e 94 f2 06 	call	0xde4	; 0xde4 <stop1>
				flagf=2;
    20be:	82 e0       	ldi	r24, 0x02	; 2
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	90 93 30 02 	sts	0x0230, r25
    20c6:	80 93 2f 02 	sts	0x022F, r24
				
				
			}
		}
		if(flagf==2)
    20ca:	80 91 2f 02 	lds	r24, 0x022F
    20ce:	90 91 30 02 	lds	r25, 0x0230
    20d2:	02 97       	sbiw	r24, 0x02	; 2
    20d4:	a1 f4       	brne	.+40     	; 0x20fe <fold+0xfc>
		{
			if(a2<330)
    20d6:	80 91 41 02 	lds	r24, 0x0241
    20da:	90 91 42 02 	lds	r25, 0x0242
    20de:	8a 54       	subi	r24, 0x4A	; 74
    20e0:	91 40       	sbci	r25, 0x01	; 1
    20e2:	2c f4       	brge	.+10     	; 0x20ee <fold+0xec>
			{
				leftanti(40);
    20e4:	88 e2       	ldi	r24, 0x28	; 40
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	0e 94 09 0c 	call	0x1812	; 0x1812 <leftanti>
    20ec:	08 95       	ret
			}
			
			else
			{
				
				stop1();
    20ee:	0e 94 f2 06 	call	0xde4	; 0xde4 <stop1>
				flagf=3;
    20f2:	83 e0       	ldi	r24, 0x03	; 3
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	90 93 30 02 	sts	0x0230, r25
    20fa:	80 93 2f 02 	sts	0x022F, r24
    20fe:	08 95       	ret

00002100 <setPWM>:
#define bit(x) (1<<(x))
#define toggle(x,b) x^=b

unsigned int compute_duty_cycle(unsigned int dc,char ix);
void setPWM(char SELECT1 , char SELECT2 ,unsigned int f)
{
    2100:	ef 92       	push	r14
    2102:	ff 92       	push	r15
    2104:	0f 93       	push	r16
    2106:	df 93       	push	r29
    2108:	cf 93       	push	r28
    210a:	00 d0       	rcall	.+0      	; 0x210c <setPWM+0xc>
    210c:	00 d0       	rcall	.+0      	; 0x210e <setPWM+0xe>
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
    2112:	7a 01       	movw	r14, r20
	char ix;
	char cy;
	unsigned int  frequency,duty_cycle;

	ix = toupper(SELECT1);
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	0e 94 39 13 	call	0x2672	; 0x2672 <toupper>
    211a:	08 2f       	mov	r16, r24
	cy = toupper(SELECT2);

	frequency = (FCLK / (2*f) );	//1 is selected as presclar
    211c:	ee 0c       	add	r14, r14
    211e:	ff 1c       	adc	r15, r15
    2120:	c7 01       	movw	r24, r14
    2122:	a0 e0       	ldi	r26, 0x00	; 0
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	89 83       	std	Y+1, r24	; 0x01
    2128:	9a 83       	std	Y+2, r25	; 0x02
    212a:	ab 83       	std	Y+3, r26	; 0x03
    212c:	bc 83       	std	Y+4, r27	; 0x04
    212e:	60 e0       	ldi	r22, 0x00	; 0
    2130:	70 e0       	ldi	r23, 0x00	; 0
    2132:	81 ee       	ldi	r24, 0xE1	; 225
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	29 81       	ldd	r18, Y+1	; 0x01
    2138:	3a 81       	ldd	r19, Y+2	; 0x02
    213a:	4b 81       	ldd	r20, Y+3	; 0x03
    213c:	5c 81       	ldd	r21, Y+4	; 0x04
    213e:	0e 94 17 13 	call	0x262e	; 0x262e <__udivmodsi4>

	if(ix == '1')
    2142:	01 33       	cpi	r16, 0x31	; 49
    2144:	59 f4       	brne	.+22     	; 0x215c <setPWM+0x5c>
	{
		ICR1 = frequency;
    2146:	30 93 87 00 	sts	0x0087, r19
    214a:	20 93 86 00 	sts	0x0086, r18

		TCCR1A = 0xA8;
    214e:	88 ea       	ldi	r24, 0xA8	; 168
    2150:	80 93 80 00 	sts	0x0080, r24
		TCCR1B = 0x11;
    2154:	81 e1       	ldi	r24, 0x11	; 17
    2156:	80 93 81 00 	sts	0x0081, r24
    215a:	26 c0       	rjmp	.+76     	; 0x21a8 <setPWM+0xa8>
	}

	if(ix == '3')
    215c:	03 33       	cpi	r16, 0x33	; 51
    215e:	59 f4       	brne	.+22     	; 0x2176 <setPWM+0x76>
	{
		
		TCCR3A = 0xA8;
    2160:	88 ea       	ldi	r24, 0xA8	; 168
    2162:	80 93 90 00 	sts	0x0090, r24
		TCCR3B = 0x11;
    2166:	81 e1       	ldi	r24, 0x11	; 17
    2168:	80 93 91 00 	sts	0x0091, r24
		
		ICR3 = frequency;
    216c:	30 93 97 00 	sts	0x0097, r19
    2170:	20 93 96 00 	sts	0x0096, r18
    2174:	19 c0       	rjmp	.+50     	; 0x21a8 <setPWM+0xa8>
	}

	if(ix == '4')
    2176:	04 33       	cpi	r16, 0x34	; 52
    2178:	59 f4       	brne	.+22     	; 0x2190 <setPWM+0x90>
	{	
		ICR4 = frequency;
    217a:	30 93 a7 00 	sts	0x00A7, r19
    217e:	20 93 a6 00 	sts	0x00A6, r18

 		TCCR4A = 0xA8;
    2182:	88 ea       	ldi	r24, 0xA8	; 168
    2184:	80 93 a0 00 	sts	0x00A0, r24
		TCCR4B = 0x11;
    2188:	81 e1       	ldi	r24, 0x11	; 17
    218a:	80 93 a1 00 	sts	0x00A1, r24
    218e:	0c c0       	rjmp	.+24     	; 0x21a8 <setPWM+0xa8>

	}

	if(ix == '5')
    2190:	05 33       	cpi	r16, 0x35	; 53
    2192:	51 f4       	brne	.+20     	; 0x21a8 <setPWM+0xa8>
	{
		
		ICR5 = frequency;
    2194:	30 93 27 01 	sts	0x0127, r19
    2198:	20 93 26 01 	sts	0x0126, r18
 		TCCR5A = 0xA8;
    219c:	88 ea       	ldi	r24, 0xA8	; 168
    219e:	80 93 20 01 	sts	0x0120, r24
		TCCR5B = 0x11;
    21a2:	81 e1       	ldi	r24, 0x11	; 17
    21a4:	80 93 21 01 	sts	0x0121, r24
	}
}
    21a8:	0f 90       	pop	r0
    21aa:	0f 90       	pop	r0
    21ac:	0f 90       	pop	r0
    21ae:	0f 90       	pop	r0
    21b0:	cf 91       	pop	r28
    21b2:	df 91       	pop	r29
    21b4:	0f 91       	pop	r16
    21b6:	ff 90       	pop	r15
    21b8:	ef 90       	pop	r14
    21ba:	08 95       	ret

000021bc <PWM_init>:
uint16_t tempc;



void PWM_init(char ch,char sub)
{
    21bc:	40 e1       	ldi	r20, 0x10	; 16
    21be:	57 e2       	ldi	r21, 0x27	; 39
    21c0:	0e 94 80 10 	call	0x2100	; 0x2100 <setPWM>

	setPWM(ch,sub,10000);

}
    21c4:	08 95       	ret

000021c6 <main>:
		
		}
}

int main() 
{
    21c6:	0e 94 b5 04 	call	0x96a	; 0x96a <port_init>
		
	int i=0,task=0;
		port_init();
		PORTB &= ~(1<<PB7);
    21ca:	2f 98       	cbi	0x05, 7	; 5
		PWM_init('3','a');
    21cc:	61 e6       	ldi	r22, 0x61	; 97
    21ce:	83 e3       	ldi	r24, 0x33	; 51
    21d0:	0e 94 de 10 	call	0x21bc	; 0x21bc <PWM_init>
		PWM_init('3','b');
    21d4:	62 e6       	ldi	r22, 0x62	; 98
    21d6:	83 e3       	ldi	r24, 0x33	; 51
    21d8:	0e 94 de 10 	call	0x21bc	; 0x21bc <PWM_init>
		PWM_init('3','c');
    21dc:	63 e6       	ldi	r22, 0x63	; 99
    21de:	83 e3       	ldi	r24, 0x33	; 51
    21e0:	0e 94 de 10 	call	0x21bc	; 0x21bc <PWM_init>
		PWM_init('4','a');
    21e4:	61 e6       	ldi	r22, 0x61	; 97
    21e6:	84 e3       	ldi	r24, 0x34	; 52
    21e8:	0e 94 de 10 	call	0x21bc	; 0x21bc <PWM_init>
		PWM('3','a',10000,0);
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	40 e1       	ldi	r20, 0x10	; 16
    21f2:	57 e2       	ldi	r21, 0x27	; 39
    21f4:	61 e6       	ldi	r22, 0x61	; 97
    21f6:	83 e3       	ldi	r24, 0x33	; 51
    21f8:	0e 94 0d 06 	call	0xc1a	; 0xc1a <PWM>
		PWM('3','b',10000,0);
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	40 e1       	ldi	r20, 0x10	; 16
    2202:	57 e2       	ldi	r21, 0x27	; 39
    2204:	62 e6       	ldi	r22, 0x62	; 98
    2206:	83 e3       	ldi	r24, 0x33	; 51
    2208:	0e 94 0d 06 	call	0xc1a	; 0xc1a <PWM>
		PWM('3','c',10000,0);
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	40 e1       	ldi	r20, 0x10	; 16
    2212:	57 e2       	ldi	r21, 0x27	; 39
    2214:	63 e6       	ldi	r22, 0x63	; 99
    2216:	83 e3       	ldi	r24, 0x33	; 51
    2218:	0e 94 0d 06 	call	0xc1a	; 0xc1a <PWM>
		PWM('4','a',10000,0);
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	40 e1       	ldi	r20, 0x10	; 16
    2222:	57 e2       	ldi	r21, 0x27	; 39
    2224:	61 e6       	ldi	r22, 0x61	; 97
    2226:	84 e3       	ldi	r24, 0x34	; 52
    2228:	0e 94 0d 06 	call	0xc1a	; 0xc1a <PWM>
				
		lcd_init();
    222c:	0e 94 16 01 	call	0x22c	; 0x22c <lcd_init>
		ps2_init();
    2230:	0e 94 61 04 	call	0x8c2	; 0x8c2 <ps2_init>
}


void adc_init()
{
	ADCSRA |= (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
    2234:	80 91 7a 00 	lds	r24, 0x007A
    2238:	87 68       	ori	r24, 0x87	; 135
    223a:	80 93 7a 00 	sts	0x007A, r24
	ADMUX |= (1<<MUX0);
    223e:	80 91 7c 00 	lds	r24, 0x007C
    2242:	81 60       	ori	r24, 0x01	; 1
    2244:	80 93 7c 00 	sts	0x007C, r24
		PWM('4','a',10000,0);
				
		lcd_init();
		ps2_init();
		adc_init();
		DDRD &= ~(1<<PD6);
    2248:	56 98       	cbi	0x0a, 6	; 10
		PORTD |= (1<<PD6);
    224a:	5e 9a       	sbi	0x0b, 6	; 11
		DDRD &= ~(1<<PD7);
    224c:	57 98       	cbi	0x0a, 7	; 10
		PORTD |= (1<<PD7);
    224e:	5f 9a       	sbi	0x0b, 7	; 11
		DDRD |= (1<<PD5);
    2250:	55 9a       	sbi	0x0a, 5	; 10
		PORTD |= (1<<PD5);
    2252:	5d 9a       	sbi	0x0b, 5	; 11
		
  
			joystick_config();
    2254:	0e 94 a4 03 	call	0x748	; 0x748 <joystick_config>
			joystick_config();
    2258:	0e 94 a4 03 	call	0x748	; 0x748 <joystick_config>
			joystick_config();
    225c:	0e 94 a4 03 	call	0x748	; 0x748 <joystick_config>
			flagh=1;
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	90 93 3c 02 	sts	0x023C, r25
    2268:	80 93 3b 02 	sts	0x023B, r24
			flagse=1;
    226c:	90 93 2a 02 	sts	0x022A, r25
    2270:	80 93 29 02 	sts	0x0229, r24
			flagre=1;
    2274:	90 93 2c 02 	sts	0x022C, r25
    2278:	80 93 2b 02 	sts	0x022B, r24
			flagf=1;
    227c:	90 93 30 02 	sts	0x0230, r25
    2280:	80 93 2f 02 	sts	0x022F, r24
			flage=0;
    2284:	10 92 0b 02 	sts	0x020B, r1
    2288:	10 92 0a 02 	sts	0x020A, r1
			
			i=0;
			ADMUX++;
    228c:	80 91 7c 00 	lds	r24, 0x007C
    2290:	8f 5f       	subi	r24, 0xFF	; 255
    2292:	80 93 7c 00 	sts	0x007C, r24
			ADMUX++;
    2296:	80 91 7c 00 	lds	r24, 0x007C
    229a:	8f 5f       	subi	r24, 0xFF	; 255
    229c:	80 93 7c 00 	sts	0x007C, r24
			step=3;
    22a0:	83 e0       	ldi	r24, 0x03	; 3
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	90 93 34 02 	sts	0x0234, r25
    22a8:	80 93 33 02 	sts	0x0233, r24
					}
					PORTJ |= (1<<PJ5);
												lcd_gotoxy2(0);
						lcd_string("Grab ");
						_delay_ms(500);*/
ladder();
    22ac:	0e 94 a7 07 	call	0xf4e	; 0xf4e <ladder>
    22b0:	fd cf       	rjmp	.-6      	; 0x22ac <__stack+0xad>

000022b2 <__fixunssfsi>:
    22b2:	33 d0       	rcall	.+102    	; 0x231a <__fp_splitA>
    22b4:	88 f0       	brcs	.+34     	; 0x22d8 <__fixunssfsi+0x26>
    22b6:	9f 57       	subi	r25, 0x7F	; 127
    22b8:	90 f0       	brcs	.+36     	; 0x22de <__fixunssfsi+0x2c>
    22ba:	b9 2f       	mov	r27, r25
    22bc:	99 27       	eor	r25, r25
    22be:	b7 51       	subi	r27, 0x17	; 23
    22c0:	a0 f0       	brcs	.+40     	; 0x22ea <__fixunssfsi+0x38>
    22c2:	d1 f0       	breq	.+52     	; 0x22f8 <__fixunssfsi+0x46>
    22c4:	66 0f       	add	r22, r22
    22c6:	77 1f       	adc	r23, r23
    22c8:	88 1f       	adc	r24, r24
    22ca:	99 1f       	adc	r25, r25
    22cc:	1a f0       	brmi	.+6      	; 0x22d4 <__fixunssfsi+0x22>
    22ce:	ba 95       	dec	r27
    22d0:	c9 f7       	brne	.-14     	; 0x22c4 <__fixunssfsi+0x12>
    22d2:	12 c0       	rjmp	.+36     	; 0x22f8 <__fixunssfsi+0x46>
    22d4:	b1 30       	cpi	r27, 0x01	; 1
    22d6:	81 f0       	breq	.+32     	; 0x22f8 <__fixunssfsi+0x46>
    22d8:	3a d0       	rcall	.+116    	; 0x234e <__fp_zero>
    22da:	b1 e0       	ldi	r27, 0x01	; 1
    22dc:	08 95       	ret
    22de:	37 c0       	rjmp	.+110    	; 0x234e <__fp_zero>
    22e0:	67 2f       	mov	r22, r23
    22e2:	78 2f       	mov	r23, r24
    22e4:	88 27       	eor	r24, r24
    22e6:	b8 5f       	subi	r27, 0xF8	; 248
    22e8:	39 f0       	breq	.+14     	; 0x22f8 <__fixunssfsi+0x46>
    22ea:	b9 3f       	cpi	r27, 0xF9	; 249
    22ec:	cc f3       	brlt	.-14     	; 0x22e0 <__fixunssfsi+0x2e>
    22ee:	86 95       	lsr	r24
    22f0:	77 95       	ror	r23
    22f2:	67 95       	ror	r22
    22f4:	b3 95       	inc	r27
    22f6:	d9 f7       	brne	.-10     	; 0x22ee <__fixunssfsi+0x3c>
    22f8:	3e f4       	brtc	.+14     	; 0x2308 <__fixunssfsi+0x56>
    22fa:	90 95       	com	r25
    22fc:	80 95       	com	r24
    22fe:	70 95       	com	r23
    2300:	61 95       	neg	r22
    2302:	7f 4f       	sbci	r23, 0xFF	; 255
    2304:	8f 4f       	sbci	r24, 0xFF	; 255
    2306:	9f 4f       	sbci	r25, 0xFF	; 255
    2308:	08 95       	ret

0000230a <__fp_split3>:
    230a:	57 fd       	sbrc	r21, 7
    230c:	90 58       	subi	r25, 0x80	; 128
    230e:	44 0f       	add	r20, r20
    2310:	55 1f       	adc	r21, r21
    2312:	59 f0       	breq	.+22     	; 0x232a <__fp_splitA+0x10>
    2314:	5f 3f       	cpi	r21, 0xFF	; 255
    2316:	71 f0       	breq	.+28     	; 0x2334 <__fp_splitA+0x1a>
    2318:	47 95       	ror	r20

0000231a <__fp_splitA>:
    231a:	88 0f       	add	r24, r24
    231c:	97 fb       	bst	r25, 7
    231e:	99 1f       	adc	r25, r25
    2320:	61 f0       	breq	.+24     	; 0x233a <__fp_splitA+0x20>
    2322:	9f 3f       	cpi	r25, 0xFF	; 255
    2324:	79 f0       	breq	.+30     	; 0x2344 <__fp_splitA+0x2a>
    2326:	87 95       	ror	r24
    2328:	08 95       	ret
    232a:	12 16       	cp	r1, r18
    232c:	13 06       	cpc	r1, r19
    232e:	14 06       	cpc	r1, r20
    2330:	55 1f       	adc	r21, r21
    2332:	f2 cf       	rjmp	.-28     	; 0x2318 <__fp_split3+0xe>
    2334:	46 95       	lsr	r20
    2336:	f1 df       	rcall	.-30     	; 0x231a <__fp_splitA>
    2338:	08 c0       	rjmp	.+16     	; 0x234a <__fp_splitA+0x30>
    233a:	16 16       	cp	r1, r22
    233c:	17 06       	cpc	r1, r23
    233e:	18 06       	cpc	r1, r24
    2340:	99 1f       	adc	r25, r25
    2342:	f1 cf       	rjmp	.-30     	; 0x2326 <__fp_splitA+0xc>
    2344:	86 95       	lsr	r24
    2346:	71 05       	cpc	r23, r1
    2348:	61 05       	cpc	r22, r1
    234a:	08 94       	sec
    234c:	08 95       	ret

0000234e <__fp_zero>:
    234e:	e8 94       	clt

00002350 <__fp_szero>:
    2350:	bb 27       	eor	r27, r27
    2352:	66 27       	eor	r22, r22
    2354:	77 27       	eor	r23, r23
    2356:	cb 01       	movw	r24, r22
    2358:	97 f9       	bld	r25, 7
    235a:	08 95       	ret

0000235c <modf>:
    235c:	fa 01       	movw	r30, r20
    235e:	dc 01       	movw	r26, r24
    2360:	aa 0f       	add	r26, r26
    2362:	bb 1f       	adc	r27, r27
    2364:	9b 01       	movw	r18, r22
    2366:	ac 01       	movw	r20, r24
    2368:	bf 57       	subi	r27, 0x7F	; 127
    236a:	28 f4       	brcc	.+10     	; 0x2376 <modf+0x1a>
    236c:	22 27       	eor	r18, r18
    236e:	33 27       	eor	r19, r19
    2370:	44 27       	eor	r20, r20
    2372:	50 78       	andi	r21, 0x80	; 128
    2374:	1f c0       	rjmp	.+62     	; 0x23b4 <modf+0x58>
    2376:	b7 51       	subi	r27, 0x17	; 23
    2378:	88 f4       	brcc	.+34     	; 0x239c <modf+0x40>
    237a:	ab 2f       	mov	r26, r27
    237c:	00 24       	eor	r0, r0
    237e:	46 95       	lsr	r20
    2380:	37 95       	ror	r19
    2382:	27 95       	ror	r18
    2384:	01 1c       	adc	r0, r1
    2386:	a3 95       	inc	r26
    2388:	d2 f3       	brmi	.-12     	; 0x237e <modf+0x22>
    238a:	00 20       	and	r0, r0
    238c:	69 f0       	breq	.+26     	; 0x23a8 <modf+0x4c>
    238e:	22 0f       	add	r18, r18
    2390:	33 1f       	adc	r19, r19
    2392:	44 1f       	adc	r20, r20
    2394:	b3 95       	inc	r27
    2396:	da f3       	brmi	.-10     	; 0x238e <modf+0x32>
    2398:	0d d0       	rcall	.+26     	; 0x23b4 <modf+0x58>
    239a:	76 c0       	rjmp	.+236    	; 0x2488 <__subsf3>
    239c:	61 30       	cpi	r22, 0x01	; 1
    239e:	71 05       	cpc	r23, r1
    23a0:	a0 e8       	ldi	r26, 0x80	; 128
    23a2:	8a 07       	cpc	r24, r26
    23a4:	b9 46       	sbci	r27, 0x69	; 105
    23a6:	30 f4       	brcc	.+12     	; 0x23b4 <modf+0x58>
    23a8:	9b 01       	movw	r18, r22
    23aa:	ac 01       	movw	r20, r24
    23ac:	66 27       	eor	r22, r22
    23ae:	77 27       	eor	r23, r23
    23b0:	88 27       	eor	r24, r24
    23b2:	90 78       	andi	r25, 0x80	; 128
    23b4:	30 96       	adiw	r30, 0x00	; 0
    23b6:	21 f0       	breq	.+8      	; 0x23c0 <modf+0x64>
    23b8:	20 83       	st	Z, r18
    23ba:	31 83       	std	Z+1, r19	; 0x01
    23bc:	42 83       	std	Z+2, r20	; 0x02
    23be:	53 83       	std	Z+3, r21	; 0x03
    23c0:	08 95       	ret

000023c2 <__mulsf3>:
    23c2:	0b d0       	rcall	.+22     	; 0x23da <__mulsf3x>
    23c4:	dd c0       	rjmp	.+442    	; 0x2580 <__fp_round>
    23c6:	ce d0       	rcall	.+412    	; 0x2564 <__fp_pscA>
    23c8:	28 f0       	brcs	.+10     	; 0x23d4 <__mulsf3+0x12>
    23ca:	d3 d0       	rcall	.+422    	; 0x2572 <__fp_pscB>
    23cc:	18 f0       	brcs	.+6      	; 0x23d4 <__mulsf3+0x12>
    23ce:	95 23       	and	r25, r21
    23d0:	09 f0       	breq	.+2      	; 0x23d4 <__mulsf3+0x12>
    23d2:	bf c0       	rjmp	.+382    	; 0x2552 <__fp_inf>
    23d4:	c4 c0       	rjmp	.+392    	; 0x255e <__fp_nan>
    23d6:	11 24       	eor	r1, r1
    23d8:	bb cf       	rjmp	.-138    	; 0x2350 <__fp_szero>

000023da <__mulsf3x>:
    23da:	97 df       	rcall	.-210    	; 0x230a <__fp_split3>
    23dc:	a0 f3       	brcs	.-24     	; 0x23c6 <__mulsf3+0x4>

000023de <__mulsf3_pse>:
    23de:	95 9f       	mul	r25, r21
    23e0:	d1 f3       	breq	.-12     	; 0x23d6 <__mulsf3+0x14>
    23e2:	95 0f       	add	r25, r21
    23e4:	50 e0       	ldi	r21, 0x00	; 0
    23e6:	55 1f       	adc	r21, r21
    23e8:	62 9f       	mul	r22, r18
    23ea:	f0 01       	movw	r30, r0
    23ec:	72 9f       	mul	r23, r18
    23ee:	bb 27       	eor	r27, r27
    23f0:	f0 0d       	add	r31, r0
    23f2:	b1 1d       	adc	r27, r1
    23f4:	63 9f       	mul	r22, r19
    23f6:	aa 27       	eor	r26, r26
    23f8:	f0 0d       	add	r31, r0
    23fa:	b1 1d       	adc	r27, r1
    23fc:	aa 1f       	adc	r26, r26
    23fe:	64 9f       	mul	r22, r20
    2400:	66 27       	eor	r22, r22
    2402:	b0 0d       	add	r27, r0
    2404:	a1 1d       	adc	r26, r1
    2406:	66 1f       	adc	r22, r22
    2408:	82 9f       	mul	r24, r18
    240a:	22 27       	eor	r18, r18
    240c:	b0 0d       	add	r27, r0
    240e:	a1 1d       	adc	r26, r1
    2410:	62 1f       	adc	r22, r18
    2412:	73 9f       	mul	r23, r19
    2414:	b0 0d       	add	r27, r0
    2416:	a1 1d       	adc	r26, r1
    2418:	62 1f       	adc	r22, r18
    241a:	83 9f       	mul	r24, r19
    241c:	a0 0d       	add	r26, r0
    241e:	61 1d       	adc	r22, r1
    2420:	22 1f       	adc	r18, r18
    2422:	74 9f       	mul	r23, r20
    2424:	33 27       	eor	r19, r19
    2426:	a0 0d       	add	r26, r0
    2428:	61 1d       	adc	r22, r1
    242a:	23 1f       	adc	r18, r19
    242c:	84 9f       	mul	r24, r20
    242e:	60 0d       	add	r22, r0
    2430:	21 1d       	adc	r18, r1
    2432:	82 2f       	mov	r24, r18
    2434:	76 2f       	mov	r23, r22
    2436:	6a 2f       	mov	r22, r26
    2438:	11 24       	eor	r1, r1
    243a:	9f 57       	subi	r25, 0x7F	; 127
    243c:	50 40       	sbci	r21, 0x00	; 0
    243e:	8a f0       	brmi	.+34     	; 0x2462 <__mulsf3_pse+0x84>
    2440:	e1 f0       	breq	.+56     	; 0x247a <__mulsf3_pse+0x9c>
    2442:	88 23       	and	r24, r24
    2444:	4a f0       	brmi	.+18     	; 0x2458 <__mulsf3_pse+0x7a>
    2446:	ee 0f       	add	r30, r30
    2448:	ff 1f       	adc	r31, r31
    244a:	bb 1f       	adc	r27, r27
    244c:	66 1f       	adc	r22, r22
    244e:	77 1f       	adc	r23, r23
    2450:	88 1f       	adc	r24, r24
    2452:	91 50       	subi	r25, 0x01	; 1
    2454:	50 40       	sbci	r21, 0x00	; 0
    2456:	a9 f7       	brne	.-22     	; 0x2442 <__mulsf3_pse+0x64>
    2458:	9e 3f       	cpi	r25, 0xFE	; 254
    245a:	51 05       	cpc	r21, r1
    245c:	70 f0       	brcs	.+28     	; 0x247a <__mulsf3_pse+0x9c>
    245e:	79 c0       	rjmp	.+242    	; 0x2552 <__fp_inf>
    2460:	77 cf       	rjmp	.-274    	; 0x2350 <__fp_szero>
    2462:	5f 3f       	cpi	r21, 0xFF	; 255
    2464:	ec f3       	brlt	.-6      	; 0x2460 <__mulsf3_pse+0x82>
    2466:	98 3e       	cpi	r25, 0xE8	; 232
    2468:	dc f3       	brlt	.-10     	; 0x2460 <__mulsf3_pse+0x82>
    246a:	86 95       	lsr	r24
    246c:	77 95       	ror	r23
    246e:	67 95       	ror	r22
    2470:	b7 95       	ror	r27
    2472:	f7 95       	ror	r31
    2474:	e7 95       	ror	r30
    2476:	9f 5f       	subi	r25, 0xFF	; 255
    2478:	c1 f7       	brne	.-16     	; 0x246a <__mulsf3_pse+0x8c>
    247a:	fe 2b       	or	r31, r30
    247c:	88 0f       	add	r24, r24
    247e:	91 1d       	adc	r25, r1
    2480:	96 95       	lsr	r25
    2482:	87 95       	ror	r24
    2484:	97 f9       	bld	r25, 7
    2486:	08 95       	ret

00002488 <__subsf3>:
    2488:	50 58       	subi	r21, 0x80	; 128

0000248a <__addsf3>:
    248a:	bb 27       	eor	r27, r27
    248c:	aa 27       	eor	r26, r26
    248e:	0e d0       	rcall	.+28     	; 0x24ac <__addsf3x>
    2490:	77 c0       	rjmp	.+238    	; 0x2580 <__fp_round>
    2492:	68 d0       	rcall	.+208    	; 0x2564 <__fp_pscA>
    2494:	30 f0       	brcs	.+12     	; 0x24a2 <__addsf3+0x18>
    2496:	6d d0       	rcall	.+218    	; 0x2572 <__fp_pscB>
    2498:	20 f0       	brcs	.+8      	; 0x24a2 <__addsf3+0x18>
    249a:	31 f4       	brne	.+12     	; 0x24a8 <__addsf3+0x1e>
    249c:	9f 3f       	cpi	r25, 0xFF	; 255
    249e:	11 f4       	brne	.+4      	; 0x24a4 <__addsf3+0x1a>
    24a0:	1e f4       	brtc	.+6      	; 0x24a8 <__addsf3+0x1e>
    24a2:	5d c0       	rjmp	.+186    	; 0x255e <__fp_nan>
    24a4:	0e f4       	brtc	.+2      	; 0x24a8 <__addsf3+0x1e>
    24a6:	e0 95       	com	r30
    24a8:	e7 fb       	bst	r30, 7
    24aa:	53 c0       	rjmp	.+166    	; 0x2552 <__fp_inf>

000024ac <__addsf3x>:
    24ac:	e9 2f       	mov	r30, r25
    24ae:	2d df       	rcall	.-422    	; 0x230a <__fp_split3>
    24b0:	80 f3       	brcs	.-32     	; 0x2492 <__addsf3+0x8>
    24b2:	ba 17       	cp	r27, r26
    24b4:	62 07       	cpc	r22, r18
    24b6:	73 07       	cpc	r23, r19
    24b8:	84 07       	cpc	r24, r20
    24ba:	95 07       	cpc	r25, r21
    24bc:	18 f0       	brcs	.+6      	; 0x24c4 <__addsf3x+0x18>
    24be:	71 f4       	brne	.+28     	; 0x24dc <__addsf3x+0x30>
    24c0:	9e f5       	brtc	.+102    	; 0x2528 <__addsf3x+0x7c>
    24c2:	45 cf       	rjmp	.-374    	; 0x234e <__fp_zero>
    24c4:	0e f4       	brtc	.+2      	; 0x24c8 <__addsf3x+0x1c>
    24c6:	e0 95       	com	r30
    24c8:	0b 2e       	mov	r0, r27
    24ca:	ba 2f       	mov	r27, r26
    24cc:	a0 2d       	mov	r26, r0
    24ce:	0b 01       	movw	r0, r22
    24d0:	b9 01       	movw	r22, r18
    24d2:	90 01       	movw	r18, r0
    24d4:	0c 01       	movw	r0, r24
    24d6:	ca 01       	movw	r24, r20
    24d8:	a0 01       	movw	r20, r0
    24da:	11 24       	eor	r1, r1
    24dc:	ff 27       	eor	r31, r31
    24de:	59 1b       	sub	r21, r25
    24e0:	99 f0       	breq	.+38     	; 0x2508 <__addsf3x+0x5c>
    24e2:	59 3f       	cpi	r21, 0xF9	; 249
    24e4:	50 f4       	brcc	.+20     	; 0x24fa <__addsf3x+0x4e>
    24e6:	50 3e       	cpi	r21, 0xE0	; 224
    24e8:	68 f1       	brcs	.+90     	; 0x2544 <__addsf3x+0x98>
    24ea:	1a 16       	cp	r1, r26
    24ec:	f0 40       	sbci	r31, 0x00	; 0
    24ee:	a2 2f       	mov	r26, r18
    24f0:	23 2f       	mov	r18, r19
    24f2:	34 2f       	mov	r19, r20
    24f4:	44 27       	eor	r20, r20
    24f6:	58 5f       	subi	r21, 0xF8	; 248
    24f8:	f3 cf       	rjmp	.-26     	; 0x24e0 <__addsf3x+0x34>
    24fa:	46 95       	lsr	r20
    24fc:	37 95       	ror	r19
    24fe:	27 95       	ror	r18
    2500:	a7 95       	ror	r26
    2502:	f0 40       	sbci	r31, 0x00	; 0
    2504:	53 95       	inc	r21
    2506:	c9 f7       	brne	.-14     	; 0x24fa <__addsf3x+0x4e>
    2508:	7e f4       	brtc	.+30     	; 0x2528 <__addsf3x+0x7c>
    250a:	1f 16       	cp	r1, r31
    250c:	ba 0b       	sbc	r27, r26
    250e:	62 0b       	sbc	r22, r18
    2510:	73 0b       	sbc	r23, r19
    2512:	84 0b       	sbc	r24, r20
    2514:	ba f0       	brmi	.+46     	; 0x2544 <__addsf3x+0x98>
    2516:	91 50       	subi	r25, 0x01	; 1
    2518:	a1 f0       	breq	.+40     	; 0x2542 <__addsf3x+0x96>
    251a:	ff 0f       	add	r31, r31
    251c:	bb 1f       	adc	r27, r27
    251e:	66 1f       	adc	r22, r22
    2520:	77 1f       	adc	r23, r23
    2522:	88 1f       	adc	r24, r24
    2524:	c2 f7       	brpl	.-16     	; 0x2516 <__addsf3x+0x6a>
    2526:	0e c0       	rjmp	.+28     	; 0x2544 <__addsf3x+0x98>
    2528:	ba 0f       	add	r27, r26
    252a:	62 1f       	adc	r22, r18
    252c:	73 1f       	adc	r23, r19
    252e:	84 1f       	adc	r24, r20
    2530:	48 f4       	brcc	.+18     	; 0x2544 <__addsf3x+0x98>
    2532:	87 95       	ror	r24
    2534:	77 95       	ror	r23
    2536:	67 95       	ror	r22
    2538:	b7 95       	ror	r27
    253a:	f7 95       	ror	r31
    253c:	9e 3f       	cpi	r25, 0xFE	; 254
    253e:	08 f0       	brcs	.+2      	; 0x2542 <__addsf3x+0x96>
    2540:	b3 cf       	rjmp	.-154    	; 0x24a8 <__addsf3+0x1e>
    2542:	93 95       	inc	r25
    2544:	88 0f       	add	r24, r24
    2546:	08 f0       	brcs	.+2      	; 0x254a <__addsf3x+0x9e>
    2548:	99 27       	eor	r25, r25
    254a:	ee 0f       	add	r30, r30
    254c:	97 95       	ror	r25
    254e:	87 95       	ror	r24
    2550:	08 95       	ret

00002552 <__fp_inf>:
    2552:	97 f9       	bld	r25, 7
    2554:	9f 67       	ori	r25, 0x7F	; 127
    2556:	80 e8       	ldi	r24, 0x80	; 128
    2558:	70 e0       	ldi	r23, 0x00	; 0
    255a:	60 e0       	ldi	r22, 0x00	; 0
    255c:	08 95       	ret

0000255e <__fp_nan>:
    255e:	9f ef       	ldi	r25, 0xFF	; 255
    2560:	80 ec       	ldi	r24, 0xC0	; 192
    2562:	08 95       	ret

00002564 <__fp_pscA>:
    2564:	00 24       	eor	r0, r0
    2566:	0a 94       	dec	r0
    2568:	16 16       	cp	r1, r22
    256a:	17 06       	cpc	r1, r23
    256c:	18 06       	cpc	r1, r24
    256e:	09 06       	cpc	r0, r25
    2570:	08 95       	ret

00002572 <__fp_pscB>:
    2572:	00 24       	eor	r0, r0
    2574:	0a 94       	dec	r0
    2576:	12 16       	cp	r1, r18
    2578:	13 06       	cpc	r1, r19
    257a:	14 06       	cpc	r1, r20
    257c:	05 06       	cpc	r0, r21
    257e:	08 95       	ret

00002580 <__fp_round>:
    2580:	09 2e       	mov	r0, r25
    2582:	03 94       	inc	r0
    2584:	00 0c       	add	r0, r0
    2586:	11 f4       	brne	.+4      	; 0x258c <__fp_round+0xc>
    2588:	88 23       	and	r24, r24
    258a:	52 f0       	brmi	.+20     	; 0x25a0 <__fp_round+0x20>
    258c:	bb 0f       	add	r27, r27
    258e:	40 f4       	brcc	.+16     	; 0x25a0 <__fp_round+0x20>
    2590:	bf 2b       	or	r27, r31
    2592:	11 f4       	brne	.+4      	; 0x2598 <__fp_round+0x18>
    2594:	60 ff       	sbrs	r22, 0
    2596:	04 c0       	rjmp	.+8      	; 0x25a0 <__fp_round+0x20>
    2598:	6f 5f       	subi	r22, 0xFF	; 255
    259a:	7f 4f       	sbci	r23, 0xFF	; 255
    259c:	8f 4f       	sbci	r24, 0xFF	; 255
    259e:	9f 4f       	sbci	r25, 0xFF	; 255
    25a0:	08 95       	ret

000025a2 <__mulsi3>:
    25a2:	62 9f       	mul	r22, r18
    25a4:	d0 01       	movw	r26, r0
    25a6:	73 9f       	mul	r23, r19
    25a8:	f0 01       	movw	r30, r0
    25aa:	82 9f       	mul	r24, r18
    25ac:	e0 0d       	add	r30, r0
    25ae:	f1 1d       	adc	r31, r1
    25b0:	64 9f       	mul	r22, r20
    25b2:	e0 0d       	add	r30, r0
    25b4:	f1 1d       	adc	r31, r1
    25b6:	92 9f       	mul	r25, r18
    25b8:	f0 0d       	add	r31, r0
    25ba:	83 9f       	mul	r24, r19
    25bc:	f0 0d       	add	r31, r0
    25be:	74 9f       	mul	r23, r20
    25c0:	f0 0d       	add	r31, r0
    25c2:	65 9f       	mul	r22, r21
    25c4:	f0 0d       	add	r31, r0
    25c6:	99 27       	eor	r25, r25
    25c8:	72 9f       	mul	r23, r18
    25ca:	b0 0d       	add	r27, r0
    25cc:	e1 1d       	adc	r30, r1
    25ce:	f9 1f       	adc	r31, r25
    25d0:	63 9f       	mul	r22, r19
    25d2:	b0 0d       	add	r27, r0
    25d4:	e1 1d       	adc	r30, r1
    25d6:	f9 1f       	adc	r31, r25
    25d8:	bd 01       	movw	r22, r26
    25da:	cf 01       	movw	r24, r30
    25dc:	11 24       	eor	r1, r1
    25de:	08 95       	ret

000025e0 <__udivmodhi4>:
    25e0:	aa 1b       	sub	r26, r26
    25e2:	bb 1b       	sub	r27, r27
    25e4:	51 e1       	ldi	r21, 0x11	; 17
    25e6:	07 c0       	rjmp	.+14     	; 0x25f6 <__udivmodhi4_ep>

000025e8 <__udivmodhi4_loop>:
    25e8:	aa 1f       	adc	r26, r26
    25ea:	bb 1f       	adc	r27, r27
    25ec:	a6 17       	cp	r26, r22
    25ee:	b7 07       	cpc	r27, r23
    25f0:	10 f0       	brcs	.+4      	; 0x25f6 <__udivmodhi4_ep>
    25f2:	a6 1b       	sub	r26, r22
    25f4:	b7 0b       	sbc	r27, r23

000025f6 <__udivmodhi4_ep>:
    25f6:	88 1f       	adc	r24, r24
    25f8:	99 1f       	adc	r25, r25
    25fa:	5a 95       	dec	r21
    25fc:	a9 f7       	brne	.-22     	; 0x25e8 <__udivmodhi4_loop>
    25fe:	80 95       	com	r24
    2600:	90 95       	com	r25
    2602:	bc 01       	movw	r22, r24
    2604:	cd 01       	movw	r24, r26
    2606:	08 95       	ret

00002608 <__divmodhi4>:
    2608:	97 fb       	bst	r25, 7
    260a:	09 2e       	mov	r0, r25
    260c:	07 26       	eor	r0, r23
    260e:	0a d0       	rcall	.+20     	; 0x2624 <__divmodhi4_neg1>
    2610:	77 fd       	sbrc	r23, 7
    2612:	04 d0       	rcall	.+8      	; 0x261c <__divmodhi4_neg2>
    2614:	e5 df       	rcall	.-54     	; 0x25e0 <__udivmodhi4>
    2616:	06 d0       	rcall	.+12     	; 0x2624 <__divmodhi4_neg1>
    2618:	00 20       	and	r0, r0
    261a:	1a f4       	brpl	.+6      	; 0x2622 <__divmodhi4_exit>

0000261c <__divmodhi4_neg2>:
    261c:	70 95       	com	r23
    261e:	61 95       	neg	r22
    2620:	7f 4f       	sbci	r23, 0xFF	; 255

00002622 <__divmodhi4_exit>:
    2622:	08 95       	ret

00002624 <__divmodhi4_neg1>:
    2624:	f6 f7       	brtc	.-4      	; 0x2622 <__divmodhi4_exit>
    2626:	90 95       	com	r25
    2628:	81 95       	neg	r24
    262a:	9f 4f       	sbci	r25, 0xFF	; 255
    262c:	08 95       	ret

0000262e <__udivmodsi4>:
    262e:	a1 e2       	ldi	r26, 0x21	; 33
    2630:	1a 2e       	mov	r1, r26
    2632:	aa 1b       	sub	r26, r26
    2634:	bb 1b       	sub	r27, r27
    2636:	fd 01       	movw	r30, r26
    2638:	0d c0       	rjmp	.+26     	; 0x2654 <__udivmodsi4_ep>

0000263a <__udivmodsi4_loop>:
    263a:	aa 1f       	adc	r26, r26
    263c:	bb 1f       	adc	r27, r27
    263e:	ee 1f       	adc	r30, r30
    2640:	ff 1f       	adc	r31, r31
    2642:	a2 17       	cp	r26, r18
    2644:	b3 07       	cpc	r27, r19
    2646:	e4 07       	cpc	r30, r20
    2648:	f5 07       	cpc	r31, r21
    264a:	20 f0       	brcs	.+8      	; 0x2654 <__udivmodsi4_ep>
    264c:	a2 1b       	sub	r26, r18
    264e:	b3 0b       	sbc	r27, r19
    2650:	e4 0b       	sbc	r30, r20
    2652:	f5 0b       	sbc	r31, r21

00002654 <__udivmodsi4_ep>:
    2654:	66 1f       	adc	r22, r22
    2656:	77 1f       	adc	r23, r23
    2658:	88 1f       	adc	r24, r24
    265a:	99 1f       	adc	r25, r25
    265c:	1a 94       	dec	r1
    265e:	69 f7       	brne	.-38     	; 0x263a <__udivmodsi4_loop>
    2660:	60 95       	com	r22
    2662:	70 95       	com	r23
    2664:	80 95       	com	r24
    2666:	90 95       	com	r25
    2668:	9b 01       	movw	r18, r22
    266a:	ac 01       	movw	r20, r24
    266c:	bd 01       	movw	r22, r26
    266e:	cf 01       	movw	r24, r30
    2670:	08 95       	ret

00002672 <toupper>:
    2672:	91 11       	cpse	r25, r1
    2674:	08 95       	ret
    2676:	81 56       	subi	r24, 0x61	; 97
    2678:	8a 51       	subi	r24, 0x1A	; 26
    267a:	08 f4       	brcc	.+2      	; 0x267e <toupper+0xc>
    267c:	80 52       	subi	r24, 0x20	; 32
    267e:	85 58       	subi	r24, 0x85	; 133
    2680:	08 95       	ret

00002682 <_exit>:
    2682:	f8 94       	cli

00002684 <__stop_program>:
    2684:	ff cf       	rjmp	.-2      	; 0x2684 <__stop_program>
