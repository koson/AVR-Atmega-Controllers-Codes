
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800200  00000db0  00000e44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000db0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000033  0080022a  0080022a  00000e6e  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001a9  00000000  00000000  00000e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bb7  00000000  00000000  00001037  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002b9  00000000  00000000  00001bee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000089b  00000000  00000000  00001ea7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000160  00000000  00000000  00002744  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000333  00000000  00000000  000028a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004a7  00000000  00000000  00002bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  0000307e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	e0 eb       	ldi	r30, 0xB0	; 176
  f8:	fd e0       	ldi	r31, 0x0D	; 13
  fa:	02 c0       	rjmp	.+4      	; 0x100 <.do_copy_data_start>

000000fc <.do_copy_data_loop>:
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0

00000100 <.do_copy_data_start>:
 100:	aa 32       	cpi	r26, 0x2A	; 42
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <.do_copy_data_loop>

00000106 <__do_clear_bss>:
 106:	12 e0       	ldi	r17, 0x02	; 2
 108:	aa e2       	ldi	r26, 0x2A	; 42
 10a:	b2 e0       	ldi	r27, 0x02	; 2
 10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
 10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
 110:	ad 35       	cpi	r26, 0x5D	; 93
 112:	b1 07       	cpc	r27, r17
 114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
 116:	0e 94 97 04 	call	0x92e	; 0x92e <main>
 11a:	0c 94 d6 06 	jmp	0xdac	; 0xdac <_exit>

0000011e <__bad_interrupt>:
 11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <_psx_gamepad_shift>:


/* Private.  The actual serial transfer.  Handles clock.  The PSX controller is full 
 * duplex, so this will send a byte as well as receive one.
 */
uint8_t _psx_gamepad_shift(uint8_t transmit_byte) {
 122:	6f 92       	push	r6
 124:	7f 92       	push	r7
 126:	9f 92       	push	r9
 128:	af 92       	push	r10
 12a:	bf 92       	push	r11
 12c:	cf 92       	push	r12
 12e:	df 92       	push	r13
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
  uint8_t received_byte = 0;
  for(uint8_t i = 0; i < 8; i++) {
    //Drop the clock...
    *_clock_port &= ~_BV(_clock_pin);
 13c:	e0 91 34 02 	lds	r30, 0x0234
 140:	f0 91 35 02 	lds	r31, 0x0235
 144:	21 e0       	ldi	r18, 0x01	; 1
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	a9 01       	movw	r20, r18
 14a:	00 90 44 02 	lds	r0, 0x0244
 14e:	02 c0       	rjmp	.+4      	; 0x154 <_psx_gamepad_shift+0x32>
 150:	44 0f       	add	r20, r20
 152:	55 1f       	adc	r21, r21
 154:	0a 94       	dec	r0
 156:	e2 f7       	brpl	.-8      	; 0x150 <_psx_gamepad_shift+0x2e>
 158:	14 2f       	mov	r17, r20
 15a:	a4 2e       	mov	r10, r20
 15c:	a0 94       	com	r10
  
    //...set the command (outgoing) pin...
    if (transmit_byte & (_BV(i))) {
      *_command_port |= _BV(_command_pin);
 15e:	a0 91 36 02 	lds	r26, 0x0236
 162:	b0 91 37 02 	lds	r27, 0x0237
 166:	a9 01       	movw	r20, r18
 168:	00 90 45 02 	lds	r0, 0x0245
 16c:	02 c0       	rjmp	.+4      	; 0x172 <_psx_gamepad_shift+0x50>
 16e:	44 0f       	add	r20, r20
 170:	55 1f       	adc	r21, r21
 172:	0a 94       	dec	r0
 174:	e2 f7       	brpl	.-8      	; 0x16e <_psx_gamepad_shift+0x4c>
 176:	04 2f       	mov	r16, r20
    }
    else {
      *_command_port &= ~_BV(_command_pin);
 178:	b4 2e       	mov	r11, r20
 17a:	b0 94       	com	r11
    
    //...raise the clock to HIGH...
    *_clock_port |= _BV(_clock_pin);
    
    //...at which point you read the data...
    if(*_data_in & _BV(_data_pin)) {
 17c:	e0 90 3a 02 	lds	r14, 0x023A
 180:	f0 90 3b 02 	lds	r15, 0x023B
 184:	39 01       	movw	r6, r18
 186:	00 90 47 02 	lds	r0, 0x0247
 18a:	02 c0       	rjmp	.+4      	; 0x190 <_psx_gamepad_shift+0x6e>
 18c:	66 0c       	add	r6, r6
 18e:	77 1c       	adc	r7, r7
 190:	0a 94       	dec	r0
 192:	e2 f7       	brpl	.-8      	; 0x18c <_psx_gamepad_shift+0x6a>
 194:	20 e0       	ldi	r18, 0x00	; 0
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	70 e0       	ldi	r23, 0x00	; 0
  for(uint8_t i = 0; i < 8; i++) {
    //Drop the clock...
    *_clock_port &= ~_BV(_clock_pin);
  
    //...set the command (outgoing) pin...
    if (transmit_byte & (_BV(i))) {
 19a:	48 2f       	mov	r20, r24
 19c:	50 e0       	ldi	r21, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 19e:	91 e3       	ldi	r25, 0x31	; 49
 1a0:	99 2e       	mov	r9, r25
    //...raise the clock to HIGH...
    *_clock_port |= _BV(_clock_pin);
    
    //...at which point you read the data...
    if(*_data_in & _BV(_data_pin)) {
      received_byte |= _BV(i);
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	c8 2e       	mov	r12, r24
 1a6:	d1 2c       	mov	r13, r1
 */
uint8_t _psx_gamepad_shift(uint8_t transmit_byte) {
  uint8_t received_byte = 0;
  for(uint8_t i = 0; i < 8; i++) {
    //Drop the clock...
    *_clock_port &= ~_BV(_clock_pin);
 1a8:	80 81       	ld	r24, Z
 1aa:	8a 21       	and	r24, r10
 1ac:	80 83       	st	Z, r24
 1ae:	36 2f       	mov	r19, r22
  
    //...set the command (outgoing) pin...
    if (transmit_byte & (_BV(i))) {
 1b0:	ca 01       	movw	r24, r20
 1b2:	06 2e       	mov	r0, r22
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <_psx_gamepad_shift+0x98>
 1b6:	95 95       	asr	r25
 1b8:	87 95       	ror	r24
 1ba:	0a 94       	dec	r0
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <_psx_gamepad_shift+0x94>
 1be:	80 ff       	sbrs	r24, 0
 1c0:	03 c0       	rjmp	.+6      	; 0x1c8 <_psx_gamepad_shift+0xa6>
      *_command_port |= _BV(_command_pin);
 1c2:	8c 91       	ld	r24, X
 1c4:	80 2b       	or	r24, r16
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <_psx_gamepad_shift+0xaa>
    }
    else {
      *_command_port &= ~_BV(_command_pin);
 1c8:	8c 91       	ld	r24, X
 1ca:	8b 21       	and	r24, r11
 1cc:	8c 93       	st	X, r24
 1ce:	89 2d       	mov	r24, r9
 1d0:	8a 95       	dec	r24
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <_psx_gamepad_shift+0xae>
    
    //...wait half the clock cycle...
    _delay_us(CTRL_CLK);
    
    //...raise the clock to HIGH...
    *_clock_port |= _BV(_clock_pin);
 1d4:	80 81       	ld	r24, Z
 1d6:	81 2b       	or	r24, r17
 1d8:	80 83       	st	Z, r24
    
    //...at which point you read the data...
    if(*_data_in & _BV(_data_pin)) {
 1da:	e7 01       	movw	r28, r14
 1dc:	88 81       	ld	r24, Y
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	86 21       	and	r24, r6
 1e2:	97 21       	and	r25, r7
 1e4:	89 2b       	or	r24, r25
 1e6:	39 f0       	breq	.+14     	; 0x1f6 <_psx_gamepad_shift+0xd4>
      received_byte |= _BV(i);
 1e8:	c6 01       	movw	r24, r12
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <_psx_gamepad_shift+0xce>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	3a 95       	dec	r19
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <_psx_gamepad_shift+0xca>
 1f4:	28 2b       	or	r18, r24
 1f6:	89 2d       	mov	r24, r9
 1f8:	8a 95       	dec	r24
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <_psx_gamepad_shift+0xd6>
 1fc:	6f 5f       	subi	r22, 0xFF	; 255
 1fe:	7f 4f       	sbci	r23, 0xFF	; 255
/* Private.  The actual serial transfer.  Handles clock.  The PSX controller is full 
 * duplex, so this will send a byte as well as receive one.
 */
uint8_t _psx_gamepad_shift(uint8_t transmit_byte) {
  uint8_t received_byte = 0;
  for(uint8_t i = 0; i < 8; i++) {
 200:	68 30       	cpi	r22, 0x08	; 8
 202:	71 05       	cpc	r23, r1
 204:	89 f6       	brne	.-94     	; 0x1a8 <_psx_gamepad_shift+0x86>
    //...and wait the other half of the clock cycle
    _delay_us(CTRL_CLK);
  }

  //Clock should already be high at this point, but just to be sure...
  *_clock_port |= _BV(_clock_pin);
 206:	80 81       	ld	r24, Z
 208:	18 2b       	or	r17, r24
 20a:	10 83       	st	Z, r17
  
  return received_byte;
}
 20c:	82 2f       	mov	r24, r18
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	1f 91       	pop	r17
 214:	0f 91       	pop	r16
 216:	ff 90       	pop	r15
 218:	ef 90       	pop	r14
 21a:	df 90       	pop	r13
 21c:	cf 90       	pop	r12
 21e:	bf 90       	pop	r11
 220:	af 90       	pop	r10
 222:	9f 90       	pop	r9
 224:	7f 90       	pop	r7
 226:	6f 90       	pop	r6
 228:	08 95       	ret

0000022a <_psx_send_command>:

/* Private.  Sends a command using the shift method.
 */
void _psx_send_command(uint8_t send_data[], uint8_t size){
 22a:	df 92       	push	r13
 22c:	ef 92       	push	r14
 22e:	ff 92       	push	r15
 230:	0f 93       	push	r16
 232:	1f 93       	push	r17
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	d6 2e       	mov	r13, r22
  //Before you submit each command packet, you must set attention low; once
  // you are done each packet, return it high.  You have to toggle the line before
  // you submit another command.
  *_attention_port &= ~(_BV(_attention_pin));
 23a:	e0 90 38 02 	lds	r14, 0x0238
 23e:	f0 90 39 02 	lds	r15, 0x0239
 242:	f7 01       	movw	r30, r14
 244:	40 81       	ld	r20, Z
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	70 e0       	ldi	r23, 0x00	; 0
 24a:	9b 01       	movw	r18, r22
 24c:	00 90 46 02 	lds	r0, 0x0246
 250:	02 c0       	rjmp	.+4      	; 0x256 <_psx_send_command+0x2c>
 252:	22 0f       	add	r18, r18
 254:	33 1f       	adc	r19, r19
 256:	0a 94       	dec	r0
 258:	e2 f7       	brpl	.-8      	; 0x252 <_psx_send_command+0x28>
 25a:	02 2f       	mov	r16, r18
 25c:	20 95       	com	r18
 25e:	24 23       	and	r18, r20
 260:	20 83       	st	Z, r18
  *_command_port |= _BV(_command_pin);
 262:	e0 91 36 02 	lds	r30, 0x0236
 266:	f0 91 37 02 	lds	r31, 0x0237
 26a:	40 81       	ld	r20, Z
 26c:	9b 01       	movw	r18, r22
 26e:	00 90 45 02 	lds	r0, 0x0245
 272:	02 c0       	rjmp	.+4      	; 0x278 <_psx_send_command+0x4e>
 274:	22 0f       	add	r18, r18
 276:	33 1f       	adc	r19, r19
 278:	0a 94       	dec	r0
 27a:	e2 f7       	brpl	.-8      	; 0x274 <_psx_send_command+0x4a>
 27c:	42 2b       	or	r20, r18
 27e:	40 83       	st	Z, r20

  //Clock should always be high; it is an active low line...
  *_clock_port |= _BV(_clock_pin);
 280:	e0 91 34 02 	lds	r30, 0x0234
 284:	f0 91 35 02 	lds	r31, 0x0235
 288:	20 81       	ld	r18, Z
 28a:	00 90 44 02 	lds	r0, 0x0244
 28e:	02 c0       	rjmp	.+4      	; 0x294 <_psx_send_command+0x6a>
 290:	66 0f       	add	r22, r22
 292:	77 1f       	adc	r23, r23
 294:	0a 94       	dec	r0
 296:	e2 f7       	brpl	.-8      	; 0x290 <_psx_send_command+0x66>
 298:	26 2b       	or	r18, r22
 29a:	20 83       	st	Z, r18
 29c:	ec 01       	movw	r28, r24
 29e:	10 e0       	ldi	r17, 0x00	; 0
 2a0:	05 c0       	rjmp	.+10     	; 0x2ac <_psx_send_command+0x82>
    
  for (uint8_t i = 0; i < size; i++){
    send_data[i] = _psx_gamepad_shift(send_data[i]);
 2a2:	88 81       	ld	r24, Y
 2a4:	0e 94 91 00 	call	0x122	; 0x122 <_psx_gamepad_shift>
 2a8:	89 93       	st	Y+, r24
  *_command_port |= _BV(_command_pin);

  //Clock should always be high; it is an active low line...
  *_clock_port |= _BV(_clock_pin);
    
  for (uint8_t i = 0; i < size; i++){
 2aa:	1f 5f       	subi	r17, 0xFF	; 255
 2ac:	1d 15       	cp	r17, r13
 2ae:	c8 f3       	brcs	.-14     	; 0x2a2 <_psx_send_command+0x78>
    send_data[i] = _psx_gamepad_shift(send_data[i]);
  }
  
  *_attention_port |= _BV(_attention_pin);
 2b0:	f7 01       	movw	r30, r14
 2b2:	80 81       	ld	r24, Z
 2b4:	08 2b       	or	r16, r24
 2b6:	00 83       	st	Z, r16
}
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	1f 91       	pop	r17
 2be:	0f 91       	pop	r16
 2c0:	ff 90       	pop	r15
 2c2:	ef 90       	pop	r14
 2c4:	df 90       	pop	r13
 2c6:	08 95       	ret

000002c8 <psx_read_gamepad>:


/* Reads the gamepad.  You need to call this whenever you want updated state.
 */
void psx_read_gamepad(void) {
  _data[0] = 0x01;
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	80 93 48 02 	sts	0x0248, r24
  _data[1] = 0x42;
 2ce:	82 e4       	ldi	r24, 0x42	; 66
 2d0:	80 93 49 02 	sts	0x0249, r24
 2d4:	ea e4       	ldi	r30, 0x4A	; 74
 2d6:	f2 e0       	ldi	r31, 0x02	; 2
  for (uint8_t i = 2; i < 21; i++){
    _data[i] = 0x00;
 2d8:	11 92       	st	Z+, r1
/* Reads the gamepad.  You need to call this whenever you want updated state.
 */
void psx_read_gamepad(void) {
  _data[0] = 0x01;
  _data[1] = 0x42;
  for (uint8_t i = 2; i < 21; i++){
 2da:	82 e0       	ldi	r24, 0x02	; 2
 2dc:	ed 35       	cpi	r30, 0x5D	; 93
 2de:	f8 07       	cpc	r31, r24
 2e0:	d9 f7       	brne	.-10     	; 0x2d8 <psx_read_gamepad+0x10>
    _data[i] = 0x00;
  }
  _psx_send_command(_data, 21);
 2e2:	cf 01       	movw	r24, r30
 2e4:	45 97       	sbiw	r24, 0x15	; 21
 2e6:	65 e1       	ldi	r22, 0x15	; 21
 2e8:	0e 94 15 01 	call	0x22a	; 0x22a <_psx_send_command>
}
 2ec:	08 95       	ret

000002ee <psx_init>:
 * equivalents, with DDRX at the next address after PORTX and PINX coming at the next
 * address after DDRX.  This is valid for all the chips I have looked at; however, it is
 * highly recommended that you check any new chips which you want to use this library with.
 */
void psx_init(volatile uint8_t *data_port, uint8_t data_pin,volatile uint8_t *clock_port, uint8_t clock_pin,volatile uint8_t *command_port, uint8_t command_pin,volatile uint8_t *attention_port, uint8_t attention_pin)
{
 2ee:	2f 92       	push	r2
 2f0:	3f 92       	push	r3
 2f2:	4f 92       	push	r4
 2f4:	5f 92       	push	r5
 2f6:	6f 92       	push	r6
 2f8:	7f 92       	push	r7
 2fa:	8f 92       	push	r8
 2fc:	9f 92       	push	r9
 2fe:	af 92       	push	r10
 300:	bf 92       	push	r11
 302:	cf 92       	push	r12
 304:	df 92       	push	r13
 306:	ef 92       	push	r14
 308:	ff 92       	push	r15
 30a:	0f 93       	push	r16
 30c:	1f 93       	push	r17
 30e:	df 93       	push	r29
 310:	cf 93       	push	r28
 312:	cd b7       	in	r28, 0x3d	; 61
 314:	de b7       	in	r29, 0x3e	; 62
 316:	67 97       	sbiw	r28, 0x17	; 23
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	f8 94       	cli
 31c:	de bf       	out	0x3e, r29	; 62
 31e:	0f be       	out	0x3f, r0	; 63
 320:	cd bf       	out	0x3d, r28	; 61
 322:	fc 01       	movw	r30, r24
 324:	3a 01       	movw	r6, r20
 326:	28 01       	movw	r4, r16
 328:	d6 01       	movw	r26, r12
  //Store the ports...
  _data_port = data_port;
 32a:	90 93 33 02 	sts	0x0233, r25
 32e:	80 93 32 02 	sts	0x0232, r24
  _clock_port = clock_port;
 332:	50 93 35 02 	sts	0x0235, r21
 336:	40 93 34 02 	sts	0x0234, r20
  _command_port = command_port;
 33a:	10 93 37 02 	sts	0x0237, r17
 33e:	00 93 36 02 	sts	0x0236, r16
  _attention_port = attention_port;
 342:	d0 92 39 02 	sts	0x0239, r13
 346:	c0 92 38 02 	sts	0x0238, r12
  
  //... and data direction registers...
  _data_ddr = data_port - 0x1;
 34a:	4c 01       	movw	r8, r24
 34c:	08 94       	sec
 34e:	81 08       	sbc	r8, r1
 350:	91 08       	sbc	r9, r1
 352:	90 92 3d 02 	sts	0x023D, r9
 356:	80 92 3c 02 	sts	0x023C, r8
  _clock_ddr = clock_port - 0x1;
 35a:	8a 01       	movw	r16, r20
 35c:	01 50       	subi	r16, 0x01	; 1
 35e:	10 40       	sbci	r17, 0x00	; 0
 360:	10 93 3f 02 	sts	0x023F, r17
 364:	00 93 3e 02 	sts	0x023E, r16
  _command_ddr = command_port - 0x1;
 368:	62 01       	movw	r12, r4
 36a:	08 94       	sec
 36c:	c1 08       	sbc	r12, r1
 36e:	d1 08       	sbc	r13, r1
 370:	d0 92 41 02 	sts	0x0241, r13
 374:	c0 92 40 02 	sts	0x0240, r12
  _attention_ddr = attention_port - 0x1;
 378:	1d 01       	movw	r2, r26
 37a:	08 94       	sec
 37c:	21 08       	sbc	r2, r1
 37e:	31 08       	sbc	r3, r1
 380:	30 92 43 02 	sts	0x0243, r3
 384:	20 92 42 02 	sts	0x0242, r2

  //... and data input register...
  _data_in = data_port - 0x2;
 388:	32 97       	sbiw	r30, 0x02	; 2
 38a:	f0 93 3b 02 	sts	0x023B, r31
 38e:	e0 93 3a 02 	sts	0x023A, r30
 392:	32 96       	adiw	r30, 0x02	; 2

  //... and pin numbers.
  _clock_pin = clock_pin;
 394:	20 93 44 02 	sts	0x0244, r18
  _command_pin = command_pin;
 398:	e0 92 45 02 	sts	0x0245, r14
  _attention_pin = attention_pin;
 39c:	a0 92 46 02 	sts	0x0246, r10
  _data_pin = data_pin;
 3a0:	60 93 47 02 	sts	0x0247, r22
  
  
  //Set clock, attention, and command pins to output mode
  *_clock_ddr |= _BV(_clock_pin);
 3a4:	d8 01       	movw	r26, r16
 3a6:	8c 91       	ld	r24, X
 3a8:	41 e0       	ldi	r20, 0x01	; 1
 3aa:	50 e0       	ldi	r21, 0x00	; 0
 3ac:	da 01       	movw	r26, r20
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <psx_init+0xc6>
 3b0:	aa 0f       	add	r26, r26
 3b2:	bb 1f       	adc	r27, r27
 3b4:	2a 95       	dec	r18
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <psx_init+0xc2>
 3b8:	9d 01       	movw	r18, r26
 3ba:	8a 2b       	or	r24, r26
 3bc:	d8 01       	movw	r26, r16
 3be:	8c 93       	st	X, r24
  *_attention_ddr |= _BV(_attention_pin);
 3c0:	d1 01       	movw	r26, r2
 3c2:	8c 91       	ld	r24, X
 3c4:	da 01       	movw	r26, r20
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <psx_init+0xde>
 3c8:	aa 0f       	add	r26, r26
 3ca:	bb 1f       	adc	r27, r27
 3cc:	aa 94       	dec	r10
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <psx_init+0xda>
 3d0:	8a 2b       	or	r24, r26
 3d2:	d1 01       	movw	r26, r2
 3d4:	8c 93       	st	X, r24
  *_command_ddr |= _BV(_command_pin);
 3d6:	d6 01       	movw	r26, r12
 3d8:	8c 91       	ld	r24, X
 3da:	da 01       	movw	r26, r20
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <psx_init+0xf4>
 3de:	aa 0f       	add	r26, r26
 3e0:	bb 1f       	adc	r27, r27
 3e2:	ea 94       	dec	r14
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <psx_init+0xf0>
 3e6:	7d 01       	movw	r14, r26
 3e8:	8a 2b       	or	r24, r26
 3ea:	d6 01       	movw	r26, r12
 3ec:	8c 93       	st	X, r24

  //Set data pin to input mode, and set pullup resistor
  *_data_ddr &= ~(_BV(_data_pin));
 3ee:	d4 01       	movw	r26, r8
 3f0:	9c 91       	ld	r25, X
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <psx_init+0x10a>
 3f4:	44 0f       	add	r20, r20
 3f6:	55 1f       	adc	r21, r21
 3f8:	6a 95       	dec	r22
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <psx_init+0x106>
 3fc:	84 2f       	mov	r24, r20
 3fe:	80 95       	com	r24
 400:	89 23       	and	r24, r25
 402:	8c 93       	st	X, r24
  *_data_port |= _BV(_data_pin);
 404:	80 81       	ld	r24, Z
 406:	48 2b       	or	r20, r24
 408:	40 83       	st	Z, r20

  //Initialize game pad
  *_clock_port |= _BV(_clock_pin);
 40a:	f3 01       	movw	r30, r6
 40c:	80 81       	ld	r24, Z
 40e:	28 2b       	or	r18, r24
 410:	20 83       	st	Z, r18
  *_command_port |= _BV(_command_pin);
 412:	d2 01       	movw	r26, r4
 414:	8c 91       	ld	r24, X
 416:	e8 2a       	or	r14, r24
 418:	ec 92       	st	X, r14
  
  
  //Init by polling once
  psx_read_gamepad();
 41a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <psx_read_gamepad>


  //Enter Config Mode
  uint8_t enter_config_command[] = {0x01, 0x43, 0x00, 0x01, 0x00};
 41e:	de 01       	movw	r26, r28
 420:	11 96       	adiw	r26, 0x01	; 1
 422:	e4 e2       	ldi	r30, 0x24	; 36
 424:	f2 e0       	ldi	r31, 0x02	; 2
 426:	85 e0       	ldi	r24, 0x05	; 5
 428:	01 90       	ld	r0, Z+
 42a:	0d 92       	st	X+, r0
 42c:	81 50       	subi	r24, 0x01	; 1
 42e:	e1 f7       	brne	.-8      	; 0x428 <psx_init+0x13a>
  _psx_send_command(enter_config_command, 5);
 430:	ce 01       	movw	r24, r28
 432:	01 96       	adiw	r24, 0x01	; 1
 434:	65 e0       	ldi	r22, 0x05	; 5
 436:	0e 94 15 01 	call	0x22a	; 0x22a <_psx_send_command>

  // Lock to Analog Mode on Stick
  uint8_t lock_analog_mode_command[] = {0x01, 0x44, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00};
 43a:	de 01       	movw	r26, r28
 43c:	16 96       	adiw	r26, 0x06	; 6
 43e:	eb e1       	ldi	r30, 0x1B	; 27
 440:	f2 e0       	ldi	r31, 0x02	; 2
 442:	89 e0       	ldi	r24, 0x09	; 9
 444:	01 90       	ld	r0, Z+
 446:	0d 92       	st	X+, r0
 448:	81 50       	subi	r24, 0x01	; 1
 44a:	e1 f7       	brne	.-8      	; 0x444 <psx_init+0x156>
  _psx_send_command(lock_analog_mode_command, 9);
 44c:	ce 01       	movw	r24, r28
 44e:	06 96       	adiw	r24, 0x06	; 6
 450:	69 e0       	ldi	r22, 0x09	; 9
 452:	0e 94 15 01 	call	0x22a	; 0x22a <_psx_send_command>

  //Exit config mode
  uint8_t exit_config_command[] = {0x01, 0x43, 0x00, 0x00, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A};
 456:	de 01       	movw	r26, r28
 458:	1f 96       	adiw	r26, 0x0f	; 15
 45a:	e2 e1       	ldi	r30, 0x12	; 18
 45c:	f2 e0       	ldi	r31, 0x02	; 2
 45e:	89 e0       	ldi	r24, 0x09	; 9
 460:	01 90       	ld	r0, Z+
 462:	0d 92       	st	X+, r0
 464:	81 50       	subi	r24, 0x01	; 1
 466:	e1 f7       	brne	.-8      	; 0x460 <psx_init+0x172>
  _psx_send_command(exit_config_command, 9);
 468:	ce 01       	movw	r24, r28
 46a:	0f 96       	adiw	r24, 0x0f	; 15
 46c:	69 e0       	ldi	r22, 0x09	; 9
 46e:	0e 94 15 01 	call	0x22a	; 0x22a <_psx_send_command>
}
 472:	67 96       	adiw	r28, 0x17	; 23
 474:	0f b6       	in	r0, 0x3f	; 63
 476:	f8 94       	cli
 478:	de bf       	out	0x3e, r29	; 62
 47a:	0f be       	out	0x3f, r0	; 63
 47c:	cd bf       	out	0x3d, r28	; 61
 47e:	cf 91       	pop	r28
 480:	df 91       	pop	r29
 482:	1f 91       	pop	r17
 484:	0f 91       	pop	r16
 486:	ff 90       	pop	r15
 488:	ef 90       	pop	r14
 48a:	df 90       	pop	r13
 48c:	cf 90       	pop	r12
 48e:	bf 90       	pop	r11
 490:	af 90       	pop	r10
 492:	9f 90       	pop	r9
 494:	8f 90       	pop	r8
 496:	7f 90       	pop	r7
 498:	6f 90       	pop	r6
 49a:	5f 90       	pop	r5
 49c:	4f 90       	pop	r4
 49e:	3f 90       	pop	r3
 4a0:	2f 90       	pop	r2
 4a2:	08 95       	ret

000004a4 <psx_buttons>:


uint16_t psx_buttons(void) {
 4a4:	20 91 4b 02 	lds	r18, 0x024B
 4a8:	30 91 4c 02 	lds	r19, 0x024C
 4ac:	20 95       	com	r18
 4ae:	30 95       	com	r19
  uint16_t buttons = *(uint16_t*)(_data + 3); //Get 2 bytes, comprising data positions 3 and 4.
  return ~buttons;
}
 4b0:	c9 01       	movw	r24, r18
 4b2:	08 95       	ret

000004b4 <psx_button>:

uint8_t psx_button(uint16_t button) {
 4b4:	40 e0       	ldi	r20, 0x00	; 0
 4b6:	20 91 4b 02 	lds	r18, 0x024B
 4ba:	30 91 4c 02 	lds	r19, 0x024C
 4be:	20 95       	com	r18
 4c0:	30 95       	com	r19
 4c2:	28 23       	and	r18, r24
 4c4:	39 23       	and	r19, r25
 4c6:	23 2b       	or	r18, r19
 4c8:	09 f0       	breq	.+2      	; 0x4cc <psx_button+0x18>
 4ca:	41 e0       	ldi	r20, 0x01	; 1
  uint16_t buttons = psx_buttons();
  return ((buttons & button) > 0);
}
 4cc:	84 2f       	mov	r24, r20
 4ce:	08 95       	ret

000004d0 <psx_stick>:

uint8_t psx_stick(unsigned int stick) {
 4d0:	fc 01       	movw	r30, r24
 4d2:	e8 5b       	subi	r30, 0xB8	; 184
 4d4:	fd 4f       	sbci	r31, 0xFD	; 253
  return _data[stick];
 4d6:	80 81       	ld	r24, Z
 4d8:	08 95       	ret

000004da <toggleE>:
}


void toggleE(void)
{
SETBIT(PORTE,BIT(0));
 4da:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 4dc:	83 e3       	ldi	r24, 0x33	; 51
 4de:	97 e0       	ldi	r25, 0x07	; 7
 4e0:	01 97       	sbiw	r24, 0x01	; 1
 4e2:	f1 f7       	brne	.-4      	; 0x4e0 <toggleE+0x6>
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
 4e4:	70 98       	cbi	0x0e, 0	; 14
}
 4e6:	08 95       	ret

000004e8 <dely_ns>:

void dely_ns(unsigned char tim)
{
 4e8:	20 91 2a 02 	lds	r18, 0x022A
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <dely_ns+0xc>
	for(j=0;j<tim;j++)
 4f0:	9f 5f       	subi	r25, 0xFF	; 255
 4f2:	2a e0       	ldi	r18, 0x0A	; 10
 4f4:	98 17       	cp	r25, r24
 4f6:	e0 f3       	brcs	.-8      	; 0x4f0 <dely_ns+0x8>
 4f8:	20 93 2a 02 	sts	0x022A, r18
 4fc:	90 93 2b 02 	sts	0x022B, r25
	{
		for(k=0;k<10;k++)
		{};
	}
}
 500:	08 95       	ret

00000502 <lcd_exit>:
}
		

void lcd_exit(void)
{
	PORTA=save;
 502:	80 91 2c 02 	lds	r24, 0x022C
 506:	82 b9       	out	0x02, r24	; 2
}
 508:	08 95       	ret

0000050a <WaitMs>:

/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
 50a:	0a c0       	rjmp	.+20     	; 0x520 <WaitMs+0x16>
	int i;

	while (ms-- > 0)
 50c:	20 e0       	ldi	r18, 0x00	; 0
 50e:	30 e0       	ldi	r19, 0x00	; 0
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 510:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 512:	2f 5f       	subi	r18, 0xFF	; 255
 514:	3f 4f       	sbci	r19, 0xFF	; 255
 516:	4c e0       	ldi	r20, 0x0C	; 12
 518:	2c 3c       	cpi	r18, 0xCC	; 204
 51a:	34 07       	cpc	r19, r20
 51c:	c9 f7       	brne	.-14     	; 0x510 <WaitMs+0x6>
 51e:	01 97       	sbiw	r24, 0x01	; 1
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 520:	00 97       	sbiw	r24, 0x00	; 0
 522:	a1 f7       	brne	.-24     	; 0x50c <WaitMs+0x2>
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
	}
}
 524:	08 95       	ret

00000526 <lcd_char>:

}


void lcd_char(unsigned char data)
{	
 526:	1f 93       	push	r17
 528:	18 2f       	mov	r17, r24
	int temp;
	WaitMs(15);
 52a:	8f e0       	ldi	r24, 0x0F	; 15
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 85 02 	call	0x50a	; 0x50a <WaitMs>
	SETBIT(PORTG,BIT(5));
 532:	a5 9a       	sbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 534:	70 98       	cbi	0x0e, 0	; 14
	temp= (data & 0b11000000); // '10'000000
 536:	21 2f       	mov	r18, r17
 538:	30 e0       	ldi	r19, 0x00	; 0
	PORTE=temp;
 53a:	c9 01       	movw	r24, r18
 53c:	80 7c       	andi	r24, 0xC0	; 192
 53e:	90 70       	andi	r25, 0x00	; 0
 540:	8e b9       	out	0x0e, r24	; 14
	temp=(data>>3) & 0b00000110; // 00000'11'0
	PORTE= PORTE | temp;
 542:	8e b1       	in	r24, 0x0e	; 14
 544:	16 95       	lsr	r17
 546:	16 95       	lsr	r17
 548:	16 95       	lsr	r17
 54a:	16 70       	andi	r17, 0x06	; 6
 54c:	81 2b       	or	r24, r17
 54e:	8e b9       	out	0x0e, r24	; 14
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 550:	68 e1       	ldi	r22, 0x18	; 24
 552:	86 2f       	mov	r24, r22
 554:	8a 95       	dec	r24
 556:	f1 f7       	brne	.-4      	; 0x554 <lcd_char+0x2e>
}


void toggleE(void)
{
SETBIT(PORTE,BIT(0));
 558:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 55a:	43 e3       	ldi	r20, 0x33	; 51
 55c:	57 e0       	ldi	r21, 0x07	; 7
 55e:	ca 01       	movw	r24, r20
 560:	01 97       	sbiw	r24, 0x01	; 1
 562:	f1 f7       	brne	.-4      	; 0x560 <lcd_char+0x3a>
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
 564:	70 98       	cbi	0x0e, 0	; 14
	toggleE();				// '10'000'11'0 (first nibble Done)
							/* PORTA = (data & 0xF0);
							PORTA = (data & 0xF0);
							PORTA = (data & 0xF0);*/

	CLEARBIT(PORTG,BIT(5));
 566:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 568:	70 98       	cbi	0x0e, 0	; 14
	SETBIT(PORTG,BIT(5));
 56a:	a5 9a       	sbi	0x14, 5	; 20
	temp=(data << 4) & 0b11000000; // '10'000000
	PORTE=temp;
 56c:	c9 01       	movw	r24, r18
 56e:	e4 e0       	ldi	r30, 0x04	; 4
 570:	88 0f       	add	r24, r24
 572:	99 1f       	adc	r25, r25
 574:	ea 95       	dec	r30
 576:	e1 f7       	brne	.-8      	; 0x570 <lcd_char+0x4a>
 578:	80 7c       	andi	r24, 0xC0	; 192
 57a:	90 70       	andi	r25, 0x00	; 0
 57c:	8e b9       	out	0x0e, r24	; 14
	temp=(data << 1) & 0b00000110; // 00000'01'0 
	PORTE= PORTE | temp;
 57e:	8e b1       	in	r24, 0x0e	; 14
 580:	22 0f       	add	r18, r18
 582:	33 1f       	adc	r19, r19
 584:	26 70       	andi	r18, 0x06	; 6
 586:	30 70       	andi	r19, 0x00	; 0
 588:	82 2b       	or	r24, r18
 58a:	8e b9       	out	0x0e, r24	; 14
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 58c:	6a 95       	dec	r22
 58e:	f1 f7       	brne	.-4      	; 0x58c <lcd_char+0x66>
}


void toggleE(void)
{
SETBIT(PORTE,BIT(0));
 590:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 592:	ca 01       	movw	r24, r20
 594:	01 97       	sbiw	r24, 0x01	; 1
 596:	f1 f7       	brne	.-4      	; 0x594 <lcd_char+0x6e>
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
 598:	70 98       	cbi	0x0e, 0	; 14
	_delay_us(5);
						/*PORTA = (data << 4);
						PORTA = (data << 4);
						PORTA = (data << 4);	*/					
	toggleE();
}
 59a:	1f 91       	pop	r17
 59c:	08 95       	ret

0000059e <lcd_showvalueh>:
{
	lcd_cmd(LINE2+pos);
}

void lcd_showvalueh(unsigned int num)	//prints the decimal 3digit value of num
{
 59e:	ef 92       	push	r14
 5a0:	ff 92       	push	r15
 5a2:	0f 93       	push	r16
 5a4:	1f 93       	push	r17
 5a6:	8c 01       	movw	r16, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
 5a8:	64 e6       	ldi	r22, 0x64	; 100
 5aa:	70 e0       	ldi	r23, 0x00	; 0
 5ac:	0e 94 a0 06 	call	0xd40	; 0xd40 <__udivmodhi4>
 5b0:	46 2f       	mov	r20, r22
	T=(num - (H*100))/10;
 5b2:	26 2f       	mov	r18, r22
 5b4:	30 e0       	ldi	r19, 0x00	; 0
 5b6:	8c e9       	ldi	r24, 0x9C	; 156
 5b8:	9f ef       	ldi	r25, 0xFF	; 255
 5ba:	28 9f       	mul	r18, r24
 5bc:	70 01       	movw	r14, r0
 5be:	29 9f       	mul	r18, r25
 5c0:	f0 0c       	add	r15, r0
 5c2:	38 9f       	mul	r19, r24
 5c4:	f0 0c       	add	r15, r0
 5c6:	11 24       	eor	r1, r1
 5c8:	c7 01       	movw	r24, r14
 5ca:	80 0f       	add	r24, r16
 5cc:	91 1f       	adc	r25, r17
 5ce:	6a e0       	ldi	r22, 0x0A	; 10
 5d0:	70 e0       	ldi	r23, 0x00	; 0
 5d2:	0e 94 a0 06 	call	0xd40	; 0xd40 <__udivmodhi4>
 5d6:	16 2f       	mov	r17, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+48);
 5d8:	84 2f       	mov	r24, r20
 5da:	80 5d       	subi	r24, 0xD0	; 208
 5dc:	0e 94 93 02 	call	0x526	; 0x526 <lcd_char>
	lcd_char(T+48);
 5e0:	81 2f       	mov	r24, r17
 5e2:	80 5d       	subi	r24, 0xD0	; 208
 5e4:	0e 94 93 02 	call	0x526	; 0x526 <lcd_char>
	lcd_char(O+48);
 5e8:	00 5d       	subi	r16, 0xD0	; 208
 5ea:	0e 0d       	add	r16, r14
 5ec:	86 ef       	ldi	r24, 0xF6	; 246
 5ee:	9f ef       	ldi	r25, 0xFF	; 255
 5f0:	18 9f       	mul	r17, r24
 5f2:	60 2d       	mov	r22, r0
 5f4:	11 24       	eor	r1, r1
 5f6:	86 2f       	mov	r24, r22
 5f8:	80 0f       	add	r24, r16
 5fa:	0e 94 93 02 	call	0x526	; 0x526 <lcd_char>
}
 5fe:	1f 91       	pop	r17
 600:	0f 91       	pop	r16
 602:	ff 90       	pop	r15
 604:	ef 90       	pop	r14
 606:	08 95       	ret

00000608 <lcd_showvalue>:
		}
}


void lcd_showvalue(unsigned long int num)
{
 608:	8f 92       	push	r8
 60a:	9f 92       	push	r9
 60c:	af 92       	push	r10
 60e:	bf 92       	push	r11
 610:	cf 92       	push	r12
 612:	df 92       	push	r13
 614:	ef 92       	push	r14
 616:	ff 92       	push	r15
 618:	1f 93       	push	r17
 61a:	cf 93       	push	r28
 61c:	df 93       	push	r29
 61e:	4b 01       	movw	r8, r22
 620:	5c 01       	movw	r10, r24
	
	unsigned long int n = 0;
	int flag = 0;


	if(num%100000 == 0)
 622:	20 ea       	ldi	r18, 0xA0	; 160
 624:	36 e8       	ldi	r19, 0x86	; 134
 626:	41 e0       	ldi	r20, 0x01	; 1
 628:	50 e0       	ldi	r21, 0x00	; 0
 62a:	0e 94 b4 06 	call	0xd68	; 0xd68 <__udivmodsi4>
 62e:	61 15       	cp	r22, r1
 630:	71 05       	cpc	r23, r1
 632:	81 05       	cpc	r24, r1
 634:	91 05       	cpc	r25, r1
 636:	19 f4       	brne	.+6      	; 0x63e <lcd_showvalue+0x36>
 638:	c5 e0       	ldi	r28, 0x05	; 5
 63a:	d0 e0       	ldi	r29, 0x00	; 0
 63c:	41 c0       	rjmp	.+130    	; 0x6c0 <lcd_showvalue+0xb8>
	{
		flag = 5;
	}
	
	else if(num%10000 == 0)
 63e:	c5 01       	movw	r24, r10
 640:	b4 01       	movw	r22, r8
 642:	20 e1       	ldi	r18, 0x10	; 16
 644:	37 e2       	ldi	r19, 0x27	; 39
 646:	40 e0       	ldi	r20, 0x00	; 0
 648:	50 e0       	ldi	r21, 0x00	; 0
 64a:	0e 94 b4 06 	call	0xd68	; 0xd68 <__udivmodsi4>
 64e:	61 15       	cp	r22, r1
 650:	71 05       	cpc	r23, r1
 652:	81 05       	cpc	r24, r1
 654:	91 05       	cpc	r25, r1
 656:	19 f4       	brne	.+6      	; 0x65e <lcd_showvalue+0x56>
 658:	c4 e0       	ldi	r28, 0x04	; 4
 65a:	d0 e0       	ldi	r29, 0x00	; 0
 65c:	31 c0       	rjmp	.+98     	; 0x6c0 <lcd_showvalue+0xb8>
	{
		flag = 4;
	}

	else if(num%1000 == 0) 
 65e:	c5 01       	movw	r24, r10
 660:	b4 01       	movw	r22, r8
 662:	28 ee       	ldi	r18, 0xE8	; 232
 664:	33 e0       	ldi	r19, 0x03	; 3
 666:	40 e0       	ldi	r20, 0x00	; 0
 668:	50 e0       	ldi	r21, 0x00	; 0
 66a:	0e 94 b4 06 	call	0xd68	; 0xd68 <__udivmodsi4>
 66e:	61 15       	cp	r22, r1
 670:	71 05       	cpc	r23, r1
 672:	81 05       	cpc	r24, r1
 674:	91 05       	cpc	r25, r1
 676:	19 f4       	brne	.+6      	; 0x67e <lcd_showvalue+0x76>
 678:	c3 e0       	ldi	r28, 0x03	; 3
 67a:	d0 e0       	ldi	r29, 0x00	; 0
 67c:	21 c0       	rjmp	.+66     	; 0x6c0 <lcd_showvalue+0xb8>
	{
		flag = 3;
	}

	else if(num%100 == 0) 
 67e:	c5 01       	movw	r24, r10
 680:	b4 01       	movw	r22, r8
 682:	24 e6       	ldi	r18, 0x64	; 100
 684:	30 e0       	ldi	r19, 0x00	; 0
 686:	40 e0       	ldi	r20, 0x00	; 0
 688:	50 e0       	ldi	r21, 0x00	; 0
 68a:	0e 94 b4 06 	call	0xd68	; 0xd68 <__udivmodsi4>
 68e:	61 15       	cp	r22, r1
 690:	71 05       	cpc	r23, r1
 692:	81 05       	cpc	r24, r1
 694:	91 05       	cpc	r25, r1
 696:	19 f4       	brne	.+6      	; 0x69e <lcd_showvalue+0x96>
 698:	c2 e0       	ldi	r28, 0x02	; 2
 69a:	d0 e0       	ldi	r29, 0x00	; 0
 69c:	11 c0       	rjmp	.+34     	; 0x6c0 <lcd_showvalue+0xb8>
 69e:	c0 e0       	ldi	r28, 0x00	; 0
 6a0:	d0 e0       	ldi	r29, 0x00	; 0
 6a2:	c5 01       	movw	r24, r10
 6a4:	b4 01       	movw	r22, r8
 6a6:	2a e0       	ldi	r18, 0x0A	; 10
 6a8:	30 e0       	ldi	r19, 0x00	; 0
 6aa:	40 e0       	ldi	r20, 0x00	; 0
 6ac:	50 e0       	ldi	r21, 0x00	; 0
 6ae:	0e 94 b4 06 	call	0xd68	; 0xd68 <__udivmodsi4>
 6b2:	61 15       	cp	r22, r1
 6b4:	71 05       	cpc	r23, r1
 6b6:	81 05       	cpc	r24, r1
 6b8:	91 05       	cpc	r25, r1
 6ba:	11 f4       	brne	.+4      	; 0x6c0 <lcd_showvalue+0xb8>
 6bc:	c1 e0       	ldi	r28, 0x01	; 1
 6be:	d0 e0       	ldi	r29, 0x00	; 0
 6c0:	cc 24       	eor	r12, r12
 6c2:	dd 24       	eor	r13, r13
 6c4:	76 01       	movw	r14, r12
 6c6:	23 c0       	rjmp	.+70     	; 0x70e <lcd_showvalue+0x106>


	while(num!=0)
	{
	
			H = num%10;
 6c8:	c5 01       	movw	r24, r10
 6ca:	b4 01       	movw	r22, r8
 6cc:	2a e0       	ldi	r18, 0x0A	; 10
 6ce:	30 e0       	ldi	r19, 0x00	; 0
 6d0:	40 e0       	ldi	r20, 0x00	; 0
 6d2:	50 e0       	ldi	r21, 0x00	; 0
 6d4:	0e 94 b4 06 	call	0xd68	; 0xd68 <__udivmodsi4>
 6d8:	16 2f       	mov	r17, r22
			num = num/10;
 6da:	c5 01       	movw	r24, r10
 6dc:	b4 01       	movw	r22, r8
 6de:	2a e0       	ldi	r18, 0x0A	; 10
 6e0:	30 e0       	ldi	r19, 0x00	; 0
 6e2:	40 e0       	ldi	r20, 0x00	; 0
 6e4:	50 e0       	ldi	r21, 0x00	; 0
 6e6:	0e 94 b4 06 	call	0xd68	; 0xd68 <__udivmodsi4>
 6ea:	c9 01       	movw	r24, r18
 6ec:	da 01       	movw	r26, r20
 6ee:	4c 01       	movw	r8, r24
 6f0:	5d 01       	movw	r10, r26
			n = (n*10)+H;
 6f2:	c7 01       	movw	r24, r14
 6f4:	b6 01       	movw	r22, r12
 6f6:	2a e0       	ldi	r18, 0x0A	; 10
 6f8:	30 e0       	ldi	r19, 0x00	; 0
 6fa:	40 e0       	ldi	r20, 0x00	; 0
 6fc:	50 e0       	ldi	r21, 0x00	; 0
 6fe:	0e 94 81 06 	call	0xd02	; 0xd02 <__mulsi3>
 702:	6b 01       	movw	r12, r22
 704:	7c 01       	movw	r14, r24
 706:	c1 0e       	add	r12, r17
 708:	d1 1c       	adc	r13, r1
 70a:	e1 1c       	adc	r14, r1
 70c:	f1 1c       	adc	r15, r1
		flag = 0;
	}



	while(num!=0)
 70e:	81 14       	cp	r8, r1
 710:	91 04       	cpc	r9, r1
 712:	a1 04       	cpc	r10, r1
 714:	b1 04       	cpc	r11, r1
 716:	c1 f6       	brne	.-80     	; 0x6c8 <lcd_showvalue+0xc0>
 718:	19 c0       	rjmp	.+50     	; 0x74c <lcd_showvalue+0x144>
	}
	
	while(n!=0)
	{
	
			H = n%10;
 71a:	c7 01       	movw	r24, r14
 71c:	b6 01       	movw	r22, r12
 71e:	2a e0       	ldi	r18, 0x0A	; 10
 720:	30 e0       	ldi	r19, 0x00	; 0
 722:	40 e0       	ldi	r20, 0x00	; 0
 724:	50 e0       	ldi	r21, 0x00	; 0
 726:	0e 94 b4 06 	call	0xd68	; 0xd68 <__udivmodsi4>
 72a:	16 2f       	mov	r17, r22
			n = n/10;
 72c:	c7 01       	movw	r24, r14
 72e:	b6 01       	movw	r22, r12
 730:	2a e0       	ldi	r18, 0x0A	; 10
 732:	30 e0       	ldi	r19, 0x00	; 0
 734:	40 e0       	ldi	r20, 0x00	; 0
 736:	50 e0       	ldi	r21, 0x00	; 0
 738:	0e 94 b4 06 	call	0xd68	; 0xd68 <__udivmodsi4>
 73c:	c9 01       	movw	r24, r18
 73e:	da 01       	movw	r26, r20
 740:	6c 01       	movw	r12, r24
 742:	7d 01       	movw	r14, r26
			lcd_char(H+48);
 744:	81 2f       	mov	r24, r17
 746:	80 5d       	subi	r24, 0xD0	; 208
 748:	0e 94 93 02 	call	0x526	; 0x526 <lcd_char>
			num = num/10;
			n = (n*10)+H;

	}
	
	while(n!=0)
 74c:	c1 14       	cp	r12, r1
 74e:	d1 04       	cpc	r13, r1
 750:	e1 04       	cpc	r14, r1
 752:	f1 04       	cpc	r15, r1
 754:	11 f7       	brne	.-60     	; 0x71a <lcd_showvalue+0x112>
 756:	04 c0       	rjmp	.+8      	; 0x760 <lcd_showvalue+0x158>
	}
	
	
	while(flag > 0)
	{
		lcd_char(48);
 758:	80 e3       	ldi	r24, 0x30	; 48
 75a:	0e 94 93 02 	call	0x526	; 0x526 <lcd_char>
		flag--;
 75e:	21 97       	sbiw	r28, 0x01	; 1
			lcd_char(H+48);

	}
	
	
	while(flag > 0)
 760:	20 97       	sbiw	r28, 0x00	; 0
 762:	d1 f7       	brne	.-12     	; 0x758 <lcd_showvalue+0x150>
	{
		lcd_char(48);
		flag--;
	}	

}
 764:	df 91       	pop	r29
 766:	cf 91       	pop	r28
 768:	1f 91       	pop	r17
 76a:	ff 90       	pop	r15
 76c:	ef 90       	pop	r14
 76e:	df 90       	pop	r13
 770:	cf 90       	pop	r12
 772:	bf 90       	pop	r11
 774:	af 90       	pop	r10
 776:	9f 90       	pop	r9
 778:	8f 90       	pop	r8
 77a:	08 95       	ret

0000077c <lcd_cmd>:
}

void lcd_cmd(unsigned char ch)
{
	int temp;
	CLEARBIT(PORTG,BIT(5));
 77c:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 77e:	70 98       	cbi	0x0e, 0	; 14
					/*PORTA = (ch & 0xF0);			// Send twice because ATMEGA is too fast 
  					PORTA = (ch & 0xF0); 			// for the LCD display !
  					PORTA = ch & 0xF0;
   					PORTA = ch & 0xF0;*/

	temp= ch & 0b11000000; // '10'000000
 780:	48 2f       	mov	r20, r24
 782:	50 e0       	ldi	r21, 0x00	; 0
	PORTE=temp;
 784:	9a 01       	movw	r18, r20
 786:	20 7c       	andi	r18, 0xC0	; 192
 788:	30 70       	andi	r19, 0x00	; 0
 78a:	2e b9       	out	0x0e, r18	; 14
	temp=(ch >> 3) & 0b00000110; // 00000'11'0
	PORTE= PORTE | temp;
 78c:	9e b1       	in	r25, 0x0e	; 14
 78e:	86 95       	lsr	r24
 790:	86 95       	lsr	r24
 792:	86 95       	lsr	r24
 794:	86 70       	andi	r24, 0x06	; 6
 796:	98 2b       	or	r25, r24
 798:	9e b9       	out	0x0e, r25	; 14
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 79a:	68 e1       	ldi	r22, 0x18	; 24
 79c:	86 2f       	mov	r24, r22
 79e:	8a 95       	dec	r24
 7a0:	f1 f7       	brne	.-4      	; 0x79e <lcd_cmd+0x22>
}


void toggleE(void)
{
SETBIT(PORTE,BIT(0));
 7a2:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 7a4:	23 e3       	ldi	r18, 0x33	; 51
 7a6:	37 e0       	ldi	r19, 0x07	; 7
 7a8:	c9 01       	movw	r24, r18
 7aa:	01 97       	sbiw	r24, 0x01	; 1
 7ac:	f1 f7       	brne	.-4      	; 0x7aa <lcd_cmd+0x2e>
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
 7ae:	70 98       	cbi	0x0e, 0	; 14
	temp=(ch >> 3) & 0b00000110; // 00000'11'0
	PORTE= PORTE | temp;
	_delay_us(5);
	toggleE();
   // Extract lower nibble
	SETBIT(PORTG,BIT(5));
 7b0:	a5 9a       	sbi	0x14, 5	; 20
   	CLEARBIT(PORTG,BIT(5));
 7b2:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 7b4:	70 98       	cbi	0x0e, 0	; 14
   					/*PORTA = ((ch << 4) & 0xF0); 	// Send twice because ATMEGA is too fast 
   					PORTA = ((ch << 4) & 0xF0);	// for the LCD display !
   					PORTA = (ch << 4) & 0xF0;
   					PORTA = (ch << 4) & 0xF0;*/
	temp=(ch << 4) & 0b11000000; // '10'000000
	PORTE=temp;
 7b6:	ca 01       	movw	r24, r20
 7b8:	a4 e0       	ldi	r26, 0x04	; 4
 7ba:	88 0f       	add	r24, r24
 7bc:	99 1f       	adc	r25, r25
 7be:	aa 95       	dec	r26
 7c0:	e1 f7       	brne	.-8      	; 0x7ba <lcd_cmd+0x3e>
 7c2:	80 7c       	andi	r24, 0xC0	; 192
 7c4:	90 70       	andi	r25, 0x00	; 0
 7c6:	8e b9       	out	0x0e, r24	; 14
	temp=(ch << 1) & 0b00000110; // 00000'01'0 
	PORTE= PORTE | temp;
 7c8:	8e b1       	in	r24, 0x0e	; 14
 7ca:	44 0f       	add	r20, r20
 7cc:	55 1f       	adc	r21, r21
 7ce:	46 70       	andi	r20, 0x06	; 6
 7d0:	50 70       	andi	r21, 0x00	; 0
 7d2:	84 2b       	or	r24, r20
 7d4:	8e b9       	out	0x0e, r24	; 14
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 7d6:	6a 95       	dec	r22
 7d8:	f1 f7       	brne	.-4      	; 0x7d6 <lcd_cmd+0x5a>
}


void toggleE(void)
{
SETBIT(PORTE,BIT(0));
 7da:	70 9a       	sbi	0x0e, 0	; 14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 7dc:	c9 01       	movw	r24, r18
 7de:	01 97       	sbiw	r24, 0x01	; 1
 7e0:	f1 f7       	brne	.-4      	; 0x7de <lcd_cmd+0x62>
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
 7e2:	70 98       	cbi	0x0e, 0	; 14
	PORTE=temp;
	temp=(ch << 1) & 0b00000110; // 00000'01'0 
	PORTE= PORTE | temp;
	_delay_us(5);
	toggleE();
   	PORTE = 0x00;
 7e4:	1e b8       	out	0x0e, r1	; 14
   	WaitMs(10);
 7e6:	8a e0       	ldi	r24, 0x0A	; 10
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	0e 94 85 02 	call	0x50a	; 0x50a <WaitMs>


}
 7ee:	08 95       	ret

000007f0 <lcd_gotoxy2>:
	lcd_cmd(LINE1+pos);
}

void lcd_gotoxy2(unsigned char pos)
{
	lcd_cmd(LINE2+pos);
 7f0:	80 54       	subi	r24, 0x40	; 64
 7f2:	0e 94 be 03 	call	0x77c	; 0x77c <lcd_cmd>
}
 7f6:	08 95       	ret

000007f8 <lcd_gotoxy1>:

}

void lcd_gotoxy1(unsigned char pos)
{
	lcd_cmd(LINE1+pos);
 7f8:	80 58       	subi	r24, 0x80	; 128
 7fa:	0e 94 be 03 	call	0x77c	; 0x77c <lcd_cmd>
}
 7fe:	08 95       	ret

00000800 <lcd_string>:
						PORTA = (data << 4);	*/					
	toggleE();
}

void lcd_string(unsigned char str[32])
{
 800:	cf 92       	push	r12
 802:	df 92       	push	r13
 804:	ef 92       	push	r14
 806:	ff 92       	push	r15
 808:	1f 93       	push	r17
 80a:	cf 93       	push	r28
 80c:	df 93       	push	r29
 80e:	7c 01       	movw	r14, r24
	int poop,bitch;
	unsigned char k=0;
	PORTA=0x01;
 810:	81 e0       	ldi	r24, 0x01	; 1
 812:	82 b9       	out	0x02, r24	; 2
	SETBIT(PORTG,BIT(5));
 814:	a5 9a       	sbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 816:	70 98       	cbi	0x0e, 0	; 14
 818:	10 e0       	ldi	r17, 0x00	; 0
 81a:	63 e3       	ldi	r22, 0x33	; 51
 81c:	c6 2e       	mov	r12, r22
 81e:	67 e0       	ldi	r22, 0x07	; 7
 820:	d6 2e       	mov	r13, r22
 822:	3a c0       	rjmp	.+116    	; 0x898 <lcd_string+0x98>
	while(str[k]!='\0')	//Till null character is encountered
		{
			if(k==16)
 824:	10 31       	cpi	r17, 0x10	; 16
 826:	19 f4       	brne	.+6      	; 0x82e <lcd_string+0x2e>
				lcd_cmd(LINE2);
 828:	80 ec       	ldi	r24, 0xC0	; 192
 82a:	0e 94 be 03 	call	0x77c	; 0x77c <lcd_cmd>
			SETBIT(PORTG,BIT(5));
 82e:	a5 9a       	sbi	0x14, 5	; 20
			CLEARBIT(PORTE,BIT(0));
 830:	70 98       	cbi	0x0e, 0	; 14
			bitch=str[k]; //10111001
 832:	28 81       	ld	r18, Y
 834:	30 e0       	ldi	r19, 0x00	; 0
			poop= bitch & 0b11000000; // '10'000000
			PORTE=poop;
 836:	c9 01       	movw	r24, r18
 838:	80 7c       	andi	r24, 0xC0	; 192
 83a:	90 70       	andi	r25, 0x00	; 0
 83c:	8e b9       	out	0x0e, r24	; 14
			poop=(bitch>>3) & 0b00000110; // 00000'11'0
			PORTE= PORTE | poop;
 83e:	4e b1       	in	r20, 0x0e	; 14
 840:	c9 01       	movw	r24, r18
 842:	53 e0       	ldi	r21, 0x03	; 3
 844:	95 95       	asr	r25
 846:	87 95       	ror	r24
 848:	5a 95       	dec	r21
 84a:	e1 f7       	brne	.-8      	; 0x844 <lcd_string+0x44>
 84c:	86 70       	andi	r24, 0x06	; 6
 84e:	90 70       	andi	r25, 0x00	; 0
 850:	48 2b       	or	r20, r24
 852:	4e b9       	out	0x0e, r20	; 14
}


void toggleE(void)
{
SETBIT(PORTE,BIT(0));
 854:	70 9a       	sbi	0x0e, 0	; 14
 856:	c6 01       	movw	r24, r12
 858:	01 97       	sbiw	r24, 0x01	; 1
 85a:	f1 f7       	brne	.-4      	; 0x858 <lcd_string+0x58>
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
 85c:	70 98       	cbi	0x0e, 0	; 14
			PORTE=poop;
			poop=(bitch>>3) & 0b00000110; // 00000'11'0
			PORTE= PORTE | poop;
			//PORTA=((str[k])&0xF0)|0x01;
			toggleE();
			CLEARBIT(PORTG,BIT(5))
 85e:	a5 98       	cbi	0x14, 5	; 20
			SETBIT(PORTG,BIT(5));
 860:	a5 9a       	sbi	0x14, 5	; 20
			CLEARBIT(PORTE,BIT(0));
 862:	70 98       	cbi	0x0e, 0	; 14
			bitch=str[k];
			poop=(bitch << 4) & 0b11000000; // '10'000000
			PORTE=poop;
 864:	c9 01       	movw	r24, r18
 866:	44 e0       	ldi	r20, 0x04	; 4
 868:	88 0f       	add	r24, r24
 86a:	99 1f       	adc	r25, r25
 86c:	4a 95       	dec	r20
 86e:	e1 f7       	brne	.-8      	; 0x868 <lcd_string+0x68>
 870:	80 7c       	andi	r24, 0xC0	; 192
 872:	90 70       	andi	r25, 0x00	; 0
 874:	8e b9       	out	0x0e, r24	; 14
			poop=(bitch << 1) & 0b00000110; // 00000'01'0 
			PORTE= PORTE | poop;
 876:	8e b1       	in	r24, 0x0e	; 14
 878:	22 0f       	add	r18, r18
 87a:	33 1f       	adc	r19, r19
 87c:	26 70       	andi	r18, 0x06	; 6
 87e:	30 70       	andi	r19, 0x00	; 0
 880:	82 2b       	or	r24, r18
 882:	8e b9       	out	0x0e, r24	; 14
}


void toggleE(void)
{
SETBIT(PORTE,BIT(0));
 884:	70 9a       	sbi	0x0e, 0	; 14
 886:	c6 01       	movw	r24, r12
 888:	01 97       	sbiw	r24, 0x01	; 1
 88a:	f1 f7       	brne	.-4      	; 0x888 <lcd_string+0x88>
_delay_us(500);
CLEARBIT(PORTE,BIT(0));
 88c:	70 98       	cbi	0x0e, 0	; 14
			PORTE=poop;
			poop=(bitch << 1) & 0b00000110; // 00000'01'0 
			PORTE= PORTE | poop;
			//PORTA=((str[k]&(0x0F))*16)|0x01;
			toggleE();
			k++;
 88e:	1f 5f       	subi	r17, 0xFF	; 255
			WaitMs(1);
 890:	81 e0       	ldi	r24, 0x01	; 1
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	0e 94 85 02 	call	0x50a	; 0x50a <WaitMs>
	int poop,bitch;
	unsigned char k=0;
	PORTA=0x01;
	SETBIT(PORTG,BIT(5));
	CLEARBIT(PORTE,BIT(0));
	while(str[k]!='\0')	//Till null character is encountered
 898:	e7 01       	movw	r28, r14
 89a:	c1 0f       	add	r28, r17
 89c:	d1 1d       	adc	r29, r1
 89e:	88 81       	ld	r24, Y
 8a0:	88 23       	and	r24, r24
 8a2:	09 f0       	breq	.+2      	; 0x8a6 <lcd_string+0xa6>
 8a4:	bf cf       	rjmp	.-130    	; 0x824 <lcd_string+0x24>
			//PORTA=((str[k]&(0x0F))*16)|0x01;
			toggleE();
			k++;
			WaitMs(1);
		}
}
 8a6:	df 91       	pop	r29
 8a8:	cf 91       	pop	r28
 8aa:	1f 91       	pop	r17
 8ac:	ff 90       	pop	r15
 8ae:	ef 90       	pop	r14
 8b0:	df 90       	pop	r13
 8b2:	cf 90       	pop	r12
 8b4:	08 95       	ret

000008b6 <lcd_init>:
void lcd_exit(void);
void WaitMs(unsigned int ms);

void lcd_init(void)	//init the lcd
{	
	DDRE=0xFF;
 8b6:	8f ef       	ldi	r24, 0xFF	; 255
 8b8:	8d b9       	out	0x0d, r24	; 13
	//DDRC=0x80;
	DDRG=0xFF;
 8ba:	83 bb       	out	0x13, r24	; 19
	WaitMs(15);
 8bc:	8f e0       	ldi	r24, 0x0F	; 15
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	0e 94 85 02 	call	0x50a	; 0x50a <WaitMs>
	CLEARBIT(PORTG,BIT(5));
 8c4:	a5 98       	cbi	0x14, 5	; 20
	CLEARBIT(PORTE,BIT(0));
 8c6:	70 98       	cbi	0x0e, 0	; 14
	PORTE=0x00;
 8c8:	1e b8       	out	0x0e, r1	; 14
	lcd_cmd(0x20);		//data is 8-bit length
 8ca:	80 e2       	ldi	r24, 0x20	; 32
 8cc:	0e 94 be 03 	call	0x77c	; 0x77c <lcd_cmd>
	WaitMs(1);
 8d0:	81 e0       	ldi	r24, 0x01	; 1
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	0e 94 85 02 	call	0x50a	; 0x50a <WaitMs>
	lcd_cmd(0x20);		//data is 8-bit length
 8d8:	80 e2       	ldi	r24, 0x20	; 32
 8da:	0e 94 be 03 	call	0x77c	; 0x77c <lcd_cmd>
	WaitMs(1);
 8de:	81 e0       	ldi	r24, 0x01	; 1
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	0e 94 85 02 	call	0x50a	; 0x50a <WaitMs>
	lcd_cmd(0x20);		//data is 8-bit length
 8e6:	80 e2       	ldi	r24, 0x20	; 32
 8e8:	0e 94 be 03 	call	0x77c	; 0x77c <lcd_cmd>
	WaitMs(1);
 8ec:	81 e0       	ldi	r24, 0x01	; 1
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	0e 94 85 02 	call	0x50a	; 0x50a <WaitMs>
	lcd_cmd(0x28);		//sets character font
 8f4:	88 e2       	ldi	r24, 0x28	; 40
 8f6:	0e 94 be 03 	call	0x77c	; 0x77c <lcd_cmd>
	WaitMs(1);
 8fa:	81 e0       	ldi	r24, 0x01	; 1
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	0e 94 85 02 	call	0x50a	; 0x50a <WaitMs>
	lcd_cmd(0x0E);		//display off(d,c,b=0) 08
 902:	8e e0       	ldi	r24, 0x0E	; 14
 904:	0e 94 be 03 	call	0x77c	; 0x77c <lcd_cmd>
	WaitMs(1);
 908:	81 e0       	ldi	r24, 0x01	; 1
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	0e 94 85 02 	call	0x50a	; 0x50a <WaitMs>
	lcd_cmd(0x01);		//clears the data
 910:	81 e0       	ldi	r24, 0x01	; 1
 912:	0e 94 be 03 	call	0x77c	; 0x77c <lcd_cmd>
	WaitMs(1);
 916:	81 e0       	ldi	r24, 0x01	; 1
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	0e 94 85 02 	call	0x50a	; 0x50a <WaitMs>
	//lcd_cmd(0x02);		//home
	//WaitMs(1);
	lcd_cmd(0x6);		//entry mode--increment
 91e:	86 e0       	ldi	r24, 0x06	; 6
 920:	0e 94 be 03 	call	0x77c	; 0x77c <lcd_cmd>
	WaitMs(1);
 924:	81 e0       	ldi	r24, 0x01	; 1
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	0e 94 85 02 	call	0x50a	; 0x50a <WaitMs>
	//lcd_cmd(0x0C);		//display--on,cursor--on.blinking--on
	//WaitMs(1);
}
 92c:	08 95       	ret

0000092e <main>:




int main (void) 
{	
 92e:	af 92       	push	r10
 930:	cf 92       	push	r12
 932:	df 92       	push	r13
 934:	ef 92       	push	r14
 936:	0f 93       	push	r16
 938:	1f 93       	push	r17
	lcd_init();
 93a:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <lcd_init>
	psx_init(&PORTD, 1,&PORTD, 0,&PORTD, 3,&PORTD, 4);
 93e:	8b e2       	ldi	r24, 0x2B	; 43
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	61 e0       	ldi	r22, 0x01	; 1
 944:	4b e2       	ldi	r20, 0x2B	; 43
 946:	50 e0       	ldi	r21, 0x00	; 0
 948:	20 e0       	ldi	r18, 0x00	; 0
 94a:	0b e2       	ldi	r16, 0x2B	; 43
 94c:	10 e0       	ldi	r17, 0x00	; 0
 94e:	f3 e0       	ldi	r31, 0x03	; 3
 950:	ef 2e       	mov	r14, r31
 952:	eb e2       	ldi	r30, 0x2B	; 43
 954:	ce 2e       	mov	r12, r30
 956:	d1 2c       	mov	r13, r1
 958:	74 e0       	ldi	r23, 0x04	; 4
 95a:	a7 2e       	mov	r10, r23
 95c:	0e 94 77 01 	call	0x2ee	; 0x2ee <psx_init>
	while(1)
	{
		psx_read_gamepad();
 960:	0e 94 64 01 	call	0x2c8	; 0x2c8 <psx_read_gamepad>
		
		lcd_gotoxy1(0);
 964:	80 e0       	ldi	r24, 0x00	; 0
 966:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <lcd_gotoxy1>
		lcd_showvalue(psx_stick(PSS_LX));
 96a:	60 91 4f 02 	lds	r22, 0x024F
 96e:	70 e0       	ldi	r23, 0x00	; 0
 970:	80 e0       	ldi	r24, 0x00	; 0
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	0e 94 04 03 	call	0x608	; 0x608 <lcd_showvalue>
		lcd_string("   ");
 978:	80 e0       	ldi	r24, 0x00	; 0
 97a:	92 e0       	ldi	r25, 0x02	; 2
 97c:	0e 94 00 04 	call	0x800	; 0x800 <lcd_string>
		lcd_gotoxy1(8);
 980:	88 e0       	ldi	r24, 0x08	; 8
 982:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <lcd_gotoxy1>
		lcd_string("LY:");
 986:	84 e0       	ldi	r24, 0x04	; 4
 988:	92 e0       	ldi	r25, 0x02	; 2
 98a:	0e 94 00 04 	call	0x800	; 0x800 <lcd_string>
		lcd_gotoxy1(11);
 98e:	8b e0       	ldi	r24, 0x0B	; 11
 990:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <lcd_gotoxy1>
		lcd_showvalue(psx_stick(PSS_LY));
 994:	60 91 50 02 	lds	r22, 0x0250
 998:	70 e0       	ldi	r23, 0x00	; 0
 99a:	80 e0       	ldi	r24, 0x00	; 0
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	0e 94 04 03 	call	0x608	; 0x608 <lcd_showvalue>
		lcd_string("   ");
 9a2:	80 e0       	ldi	r24, 0x00	; 0
 9a4:	92 e0       	ldi	r25, 0x02	; 2
 9a6:	0e 94 00 04 	call	0x800	; 0x800 <lcd_string>
 9aa:	da cf       	rjmp	.-76     	; 0x960 <main+0x32>

000009ac <lcd_showvaluef>:

}


void lcd_showvaluef(float num)
{
 9ac:	ef 92       	push	r14
 9ae:	ff 92       	push	r15
 9b0:	0f 93       	push	r16
 9b2:	1f 93       	push	r17
 9b4:	df 93       	push	r29
 9b6:	cf 93       	push	r28
 9b8:	00 d0       	rcall	.+0      	; 0x9ba <lcd_showvaluef+0xe>
 9ba:	00 d0       	rcall	.+0      	; 0x9bc <lcd_showvaluef+0x10>
 9bc:	cd b7       	in	r28, 0x3d	; 61
 9be:	de b7       	in	r29, 0x3e	; 62
 9c0:	7b 01       	movw	r14, r22
 9c2:	8c 01       	movw	r16, r24
	unsigned long int l;
	double fraction,integer;

	l = (unsigned long int)num;

	lcd_showvalue(l);
 9c4:	0e 94 09 05 	call	0xa12	; 0xa12 <__fixunssfsi>
 9c8:	0e 94 04 03 	call	0x608	; 0x608 <lcd_showvalue>

	fraction = modf((double)num,&integer);
 9cc:	c8 01       	movw	r24, r16
 9ce:	b7 01       	movw	r22, r14
 9d0:	ae 01       	movw	r20, r28
 9d2:	4f 5f       	subi	r20, 0xFF	; 255
 9d4:	5f 4f       	sbci	r21, 0xFF	; 255
 9d6:	0e 94 5e 05 	call	0xabc	; 0xabc <modf>
 9da:	7b 01       	movw	r14, r22
 9dc:	8c 01       	movw	r16, r24

	l = (unsigned long int)(fraction * 100000);

	lcd_char('.');
 9de:	8e e2       	ldi	r24, 0x2E	; 46
 9e0:	0e 94 93 02 	call	0x526	; 0x526 <lcd_char>

	lcd_showvalue(l);
 9e4:	c8 01       	movw	r24, r16
 9e6:	b7 01       	movw	r22, r14
 9e8:	20 e0       	ldi	r18, 0x00	; 0
 9ea:	30 e5       	ldi	r19, 0x50	; 80
 9ec:	43 ec       	ldi	r20, 0xC3	; 195
 9ee:	57 e4       	ldi	r21, 0x47	; 71
 9f0:	0e 94 91 05 	call	0xb22	; 0xb22 <__mulsf3>
 9f4:	0e 94 09 05 	call	0xa12	; 0xa12 <__fixunssfsi>
 9f8:	0e 94 04 03 	call	0x608	; 0x608 <lcd_showvalue>

}
 9fc:	0f 90       	pop	r0
 9fe:	0f 90       	pop	r0
 a00:	0f 90       	pop	r0
 a02:	0f 90       	pop	r0
 a04:	cf 91       	pop	r28
 a06:	df 91       	pop	r29
 a08:	1f 91       	pop	r17
 a0a:	0f 91       	pop	r16
 a0c:	ff 90       	pop	r15
 a0e:	ef 90       	pop	r14
 a10:	08 95       	ret

00000a12 <__fixunssfsi>:
 a12:	33 d0       	rcall	.+102    	; 0xa7a <__fp_splitA>
 a14:	88 f0       	brcs	.+34     	; 0xa38 <__fixunssfsi+0x26>
 a16:	9f 57       	subi	r25, 0x7F	; 127
 a18:	90 f0       	brcs	.+36     	; 0xa3e <__fixunssfsi+0x2c>
 a1a:	b9 2f       	mov	r27, r25
 a1c:	99 27       	eor	r25, r25
 a1e:	b7 51       	subi	r27, 0x17	; 23
 a20:	a0 f0       	brcs	.+40     	; 0xa4a <__fixunssfsi+0x38>
 a22:	d1 f0       	breq	.+52     	; 0xa58 <__fixunssfsi+0x46>
 a24:	66 0f       	add	r22, r22
 a26:	77 1f       	adc	r23, r23
 a28:	88 1f       	adc	r24, r24
 a2a:	99 1f       	adc	r25, r25
 a2c:	1a f0       	brmi	.+6      	; 0xa34 <__fixunssfsi+0x22>
 a2e:	ba 95       	dec	r27
 a30:	c9 f7       	brne	.-14     	; 0xa24 <__fixunssfsi+0x12>
 a32:	12 c0       	rjmp	.+36     	; 0xa58 <__fixunssfsi+0x46>
 a34:	b1 30       	cpi	r27, 0x01	; 1
 a36:	81 f0       	breq	.+32     	; 0xa58 <__fixunssfsi+0x46>
 a38:	3a d0       	rcall	.+116    	; 0xaae <__fp_zero>
 a3a:	b1 e0       	ldi	r27, 0x01	; 1
 a3c:	08 95       	ret
 a3e:	37 c0       	rjmp	.+110    	; 0xaae <__fp_zero>
 a40:	67 2f       	mov	r22, r23
 a42:	78 2f       	mov	r23, r24
 a44:	88 27       	eor	r24, r24
 a46:	b8 5f       	subi	r27, 0xF8	; 248
 a48:	39 f0       	breq	.+14     	; 0xa58 <__fixunssfsi+0x46>
 a4a:	b9 3f       	cpi	r27, 0xF9	; 249
 a4c:	cc f3       	brlt	.-14     	; 0xa40 <__fixunssfsi+0x2e>
 a4e:	86 95       	lsr	r24
 a50:	77 95       	ror	r23
 a52:	67 95       	ror	r22
 a54:	b3 95       	inc	r27
 a56:	d9 f7       	brne	.-10     	; 0xa4e <__fixunssfsi+0x3c>
 a58:	3e f4       	brtc	.+14     	; 0xa68 <__fixunssfsi+0x56>
 a5a:	90 95       	com	r25
 a5c:	80 95       	com	r24
 a5e:	70 95       	com	r23
 a60:	61 95       	neg	r22
 a62:	7f 4f       	sbci	r23, 0xFF	; 255
 a64:	8f 4f       	sbci	r24, 0xFF	; 255
 a66:	9f 4f       	sbci	r25, 0xFF	; 255
 a68:	08 95       	ret

00000a6a <__fp_split3>:
 a6a:	57 fd       	sbrc	r21, 7
 a6c:	90 58       	subi	r25, 0x80	; 128
 a6e:	44 0f       	add	r20, r20
 a70:	55 1f       	adc	r21, r21
 a72:	59 f0       	breq	.+22     	; 0xa8a <__fp_splitA+0x10>
 a74:	5f 3f       	cpi	r21, 0xFF	; 255
 a76:	71 f0       	breq	.+28     	; 0xa94 <__fp_splitA+0x1a>
 a78:	47 95       	ror	r20

00000a7a <__fp_splitA>:
 a7a:	88 0f       	add	r24, r24
 a7c:	97 fb       	bst	r25, 7
 a7e:	99 1f       	adc	r25, r25
 a80:	61 f0       	breq	.+24     	; 0xa9a <__fp_splitA+0x20>
 a82:	9f 3f       	cpi	r25, 0xFF	; 255
 a84:	79 f0       	breq	.+30     	; 0xaa4 <__fp_splitA+0x2a>
 a86:	87 95       	ror	r24
 a88:	08 95       	ret
 a8a:	12 16       	cp	r1, r18
 a8c:	13 06       	cpc	r1, r19
 a8e:	14 06       	cpc	r1, r20
 a90:	55 1f       	adc	r21, r21
 a92:	f2 cf       	rjmp	.-28     	; 0xa78 <__fp_split3+0xe>
 a94:	46 95       	lsr	r20
 a96:	f1 df       	rcall	.-30     	; 0xa7a <__fp_splitA>
 a98:	08 c0       	rjmp	.+16     	; 0xaaa <__fp_splitA+0x30>
 a9a:	16 16       	cp	r1, r22
 a9c:	17 06       	cpc	r1, r23
 a9e:	18 06       	cpc	r1, r24
 aa0:	99 1f       	adc	r25, r25
 aa2:	f1 cf       	rjmp	.-30     	; 0xa86 <__fp_splitA+0xc>
 aa4:	86 95       	lsr	r24
 aa6:	71 05       	cpc	r23, r1
 aa8:	61 05       	cpc	r22, r1
 aaa:	08 94       	sec
 aac:	08 95       	ret

00000aae <__fp_zero>:
 aae:	e8 94       	clt

00000ab0 <__fp_szero>:
 ab0:	bb 27       	eor	r27, r27
 ab2:	66 27       	eor	r22, r22
 ab4:	77 27       	eor	r23, r23
 ab6:	cb 01       	movw	r24, r22
 ab8:	97 f9       	bld	r25, 7
 aba:	08 95       	ret

00000abc <modf>:
 abc:	fa 01       	movw	r30, r20
 abe:	dc 01       	movw	r26, r24
 ac0:	aa 0f       	add	r26, r26
 ac2:	bb 1f       	adc	r27, r27
 ac4:	9b 01       	movw	r18, r22
 ac6:	ac 01       	movw	r20, r24
 ac8:	bf 57       	subi	r27, 0x7F	; 127
 aca:	28 f4       	brcc	.+10     	; 0xad6 <modf+0x1a>
 acc:	22 27       	eor	r18, r18
 ace:	33 27       	eor	r19, r19
 ad0:	44 27       	eor	r20, r20
 ad2:	50 78       	andi	r21, 0x80	; 128
 ad4:	1f c0       	rjmp	.+62     	; 0xb14 <modf+0x58>
 ad6:	b7 51       	subi	r27, 0x17	; 23
 ad8:	88 f4       	brcc	.+34     	; 0xafc <modf+0x40>
 ada:	ab 2f       	mov	r26, r27
 adc:	00 24       	eor	r0, r0
 ade:	46 95       	lsr	r20
 ae0:	37 95       	ror	r19
 ae2:	27 95       	ror	r18
 ae4:	01 1c       	adc	r0, r1
 ae6:	a3 95       	inc	r26
 ae8:	d2 f3       	brmi	.-12     	; 0xade <modf+0x22>
 aea:	00 20       	and	r0, r0
 aec:	69 f0       	breq	.+26     	; 0xb08 <modf+0x4c>
 aee:	22 0f       	add	r18, r18
 af0:	33 1f       	adc	r19, r19
 af2:	44 1f       	adc	r20, r20
 af4:	b3 95       	inc	r27
 af6:	da f3       	brmi	.-10     	; 0xaee <modf+0x32>
 af8:	0d d0       	rcall	.+26     	; 0xb14 <modf+0x58>
 afa:	76 c0       	rjmp	.+236    	; 0xbe8 <__subsf3>
 afc:	61 30       	cpi	r22, 0x01	; 1
 afe:	71 05       	cpc	r23, r1
 b00:	a0 e8       	ldi	r26, 0x80	; 128
 b02:	8a 07       	cpc	r24, r26
 b04:	b9 46       	sbci	r27, 0x69	; 105
 b06:	30 f4       	brcc	.+12     	; 0xb14 <modf+0x58>
 b08:	9b 01       	movw	r18, r22
 b0a:	ac 01       	movw	r20, r24
 b0c:	66 27       	eor	r22, r22
 b0e:	77 27       	eor	r23, r23
 b10:	88 27       	eor	r24, r24
 b12:	90 78       	andi	r25, 0x80	; 128
 b14:	30 96       	adiw	r30, 0x00	; 0
 b16:	21 f0       	breq	.+8      	; 0xb20 <modf+0x64>
 b18:	20 83       	st	Z, r18
 b1a:	31 83       	std	Z+1, r19	; 0x01
 b1c:	42 83       	std	Z+2, r20	; 0x02
 b1e:	53 83       	std	Z+3, r21	; 0x03
 b20:	08 95       	ret

00000b22 <__mulsf3>:
 b22:	0b d0       	rcall	.+22     	; 0xb3a <__mulsf3x>
 b24:	dd c0       	rjmp	.+442    	; 0xce0 <__fp_round>
 b26:	ce d0       	rcall	.+412    	; 0xcc4 <__fp_pscA>
 b28:	28 f0       	brcs	.+10     	; 0xb34 <__mulsf3+0x12>
 b2a:	d3 d0       	rcall	.+422    	; 0xcd2 <__fp_pscB>
 b2c:	18 f0       	brcs	.+6      	; 0xb34 <__mulsf3+0x12>
 b2e:	95 23       	and	r25, r21
 b30:	09 f0       	breq	.+2      	; 0xb34 <__mulsf3+0x12>
 b32:	bf c0       	rjmp	.+382    	; 0xcb2 <__fp_inf>
 b34:	c4 c0       	rjmp	.+392    	; 0xcbe <__fp_nan>
 b36:	11 24       	eor	r1, r1
 b38:	bb cf       	rjmp	.-138    	; 0xab0 <__fp_szero>

00000b3a <__mulsf3x>:
 b3a:	97 df       	rcall	.-210    	; 0xa6a <__fp_split3>
 b3c:	a0 f3       	brcs	.-24     	; 0xb26 <__mulsf3+0x4>

00000b3e <__mulsf3_pse>:
 b3e:	95 9f       	mul	r25, r21
 b40:	d1 f3       	breq	.-12     	; 0xb36 <__mulsf3+0x14>
 b42:	95 0f       	add	r25, r21
 b44:	50 e0       	ldi	r21, 0x00	; 0
 b46:	55 1f       	adc	r21, r21
 b48:	62 9f       	mul	r22, r18
 b4a:	f0 01       	movw	r30, r0
 b4c:	72 9f       	mul	r23, r18
 b4e:	bb 27       	eor	r27, r27
 b50:	f0 0d       	add	r31, r0
 b52:	b1 1d       	adc	r27, r1
 b54:	63 9f       	mul	r22, r19
 b56:	aa 27       	eor	r26, r26
 b58:	f0 0d       	add	r31, r0
 b5a:	b1 1d       	adc	r27, r1
 b5c:	aa 1f       	adc	r26, r26
 b5e:	64 9f       	mul	r22, r20
 b60:	66 27       	eor	r22, r22
 b62:	b0 0d       	add	r27, r0
 b64:	a1 1d       	adc	r26, r1
 b66:	66 1f       	adc	r22, r22
 b68:	82 9f       	mul	r24, r18
 b6a:	22 27       	eor	r18, r18
 b6c:	b0 0d       	add	r27, r0
 b6e:	a1 1d       	adc	r26, r1
 b70:	62 1f       	adc	r22, r18
 b72:	73 9f       	mul	r23, r19
 b74:	b0 0d       	add	r27, r0
 b76:	a1 1d       	adc	r26, r1
 b78:	62 1f       	adc	r22, r18
 b7a:	83 9f       	mul	r24, r19
 b7c:	a0 0d       	add	r26, r0
 b7e:	61 1d       	adc	r22, r1
 b80:	22 1f       	adc	r18, r18
 b82:	74 9f       	mul	r23, r20
 b84:	33 27       	eor	r19, r19
 b86:	a0 0d       	add	r26, r0
 b88:	61 1d       	adc	r22, r1
 b8a:	23 1f       	adc	r18, r19
 b8c:	84 9f       	mul	r24, r20
 b8e:	60 0d       	add	r22, r0
 b90:	21 1d       	adc	r18, r1
 b92:	82 2f       	mov	r24, r18
 b94:	76 2f       	mov	r23, r22
 b96:	6a 2f       	mov	r22, r26
 b98:	11 24       	eor	r1, r1
 b9a:	9f 57       	subi	r25, 0x7F	; 127
 b9c:	50 40       	sbci	r21, 0x00	; 0
 b9e:	8a f0       	brmi	.+34     	; 0xbc2 <__mulsf3_pse+0x84>
 ba0:	e1 f0       	breq	.+56     	; 0xbda <__mulsf3_pse+0x9c>
 ba2:	88 23       	and	r24, r24
 ba4:	4a f0       	brmi	.+18     	; 0xbb8 <__mulsf3_pse+0x7a>
 ba6:	ee 0f       	add	r30, r30
 ba8:	ff 1f       	adc	r31, r31
 baa:	bb 1f       	adc	r27, r27
 bac:	66 1f       	adc	r22, r22
 bae:	77 1f       	adc	r23, r23
 bb0:	88 1f       	adc	r24, r24
 bb2:	91 50       	subi	r25, 0x01	; 1
 bb4:	50 40       	sbci	r21, 0x00	; 0
 bb6:	a9 f7       	brne	.-22     	; 0xba2 <__mulsf3_pse+0x64>
 bb8:	9e 3f       	cpi	r25, 0xFE	; 254
 bba:	51 05       	cpc	r21, r1
 bbc:	70 f0       	brcs	.+28     	; 0xbda <__mulsf3_pse+0x9c>
 bbe:	79 c0       	rjmp	.+242    	; 0xcb2 <__fp_inf>
 bc0:	77 cf       	rjmp	.-274    	; 0xab0 <__fp_szero>
 bc2:	5f 3f       	cpi	r21, 0xFF	; 255
 bc4:	ec f3       	brlt	.-6      	; 0xbc0 <__mulsf3_pse+0x82>
 bc6:	98 3e       	cpi	r25, 0xE8	; 232
 bc8:	dc f3       	brlt	.-10     	; 0xbc0 <__mulsf3_pse+0x82>
 bca:	86 95       	lsr	r24
 bcc:	77 95       	ror	r23
 bce:	67 95       	ror	r22
 bd0:	b7 95       	ror	r27
 bd2:	f7 95       	ror	r31
 bd4:	e7 95       	ror	r30
 bd6:	9f 5f       	subi	r25, 0xFF	; 255
 bd8:	c1 f7       	brne	.-16     	; 0xbca <__mulsf3_pse+0x8c>
 bda:	fe 2b       	or	r31, r30
 bdc:	88 0f       	add	r24, r24
 bde:	91 1d       	adc	r25, r1
 be0:	96 95       	lsr	r25
 be2:	87 95       	ror	r24
 be4:	97 f9       	bld	r25, 7
 be6:	08 95       	ret

00000be8 <__subsf3>:
 be8:	50 58       	subi	r21, 0x80	; 128

00000bea <__addsf3>:
 bea:	bb 27       	eor	r27, r27
 bec:	aa 27       	eor	r26, r26
 bee:	0e d0       	rcall	.+28     	; 0xc0c <__addsf3x>
 bf0:	77 c0       	rjmp	.+238    	; 0xce0 <__fp_round>
 bf2:	68 d0       	rcall	.+208    	; 0xcc4 <__fp_pscA>
 bf4:	30 f0       	brcs	.+12     	; 0xc02 <__addsf3+0x18>
 bf6:	6d d0       	rcall	.+218    	; 0xcd2 <__fp_pscB>
 bf8:	20 f0       	brcs	.+8      	; 0xc02 <__addsf3+0x18>
 bfa:	31 f4       	brne	.+12     	; 0xc08 <__addsf3+0x1e>
 bfc:	9f 3f       	cpi	r25, 0xFF	; 255
 bfe:	11 f4       	brne	.+4      	; 0xc04 <__addsf3+0x1a>
 c00:	1e f4       	brtc	.+6      	; 0xc08 <__addsf3+0x1e>
 c02:	5d c0       	rjmp	.+186    	; 0xcbe <__fp_nan>
 c04:	0e f4       	brtc	.+2      	; 0xc08 <__addsf3+0x1e>
 c06:	e0 95       	com	r30
 c08:	e7 fb       	bst	r30, 7
 c0a:	53 c0       	rjmp	.+166    	; 0xcb2 <__fp_inf>

00000c0c <__addsf3x>:
 c0c:	e9 2f       	mov	r30, r25
 c0e:	2d df       	rcall	.-422    	; 0xa6a <__fp_split3>
 c10:	80 f3       	brcs	.-32     	; 0xbf2 <__addsf3+0x8>
 c12:	ba 17       	cp	r27, r26
 c14:	62 07       	cpc	r22, r18
 c16:	73 07       	cpc	r23, r19
 c18:	84 07       	cpc	r24, r20
 c1a:	95 07       	cpc	r25, r21
 c1c:	18 f0       	brcs	.+6      	; 0xc24 <__addsf3x+0x18>
 c1e:	71 f4       	brne	.+28     	; 0xc3c <__addsf3x+0x30>
 c20:	9e f5       	brtc	.+102    	; 0xc88 <__addsf3x+0x7c>
 c22:	45 cf       	rjmp	.-374    	; 0xaae <__fp_zero>
 c24:	0e f4       	brtc	.+2      	; 0xc28 <__addsf3x+0x1c>
 c26:	e0 95       	com	r30
 c28:	0b 2e       	mov	r0, r27
 c2a:	ba 2f       	mov	r27, r26
 c2c:	a0 2d       	mov	r26, r0
 c2e:	0b 01       	movw	r0, r22
 c30:	b9 01       	movw	r22, r18
 c32:	90 01       	movw	r18, r0
 c34:	0c 01       	movw	r0, r24
 c36:	ca 01       	movw	r24, r20
 c38:	a0 01       	movw	r20, r0
 c3a:	11 24       	eor	r1, r1
 c3c:	ff 27       	eor	r31, r31
 c3e:	59 1b       	sub	r21, r25
 c40:	99 f0       	breq	.+38     	; 0xc68 <__addsf3x+0x5c>
 c42:	59 3f       	cpi	r21, 0xF9	; 249
 c44:	50 f4       	brcc	.+20     	; 0xc5a <__addsf3x+0x4e>
 c46:	50 3e       	cpi	r21, 0xE0	; 224
 c48:	68 f1       	brcs	.+90     	; 0xca4 <__addsf3x+0x98>
 c4a:	1a 16       	cp	r1, r26
 c4c:	f0 40       	sbci	r31, 0x00	; 0
 c4e:	a2 2f       	mov	r26, r18
 c50:	23 2f       	mov	r18, r19
 c52:	34 2f       	mov	r19, r20
 c54:	44 27       	eor	r20, r20
 c56:	58 5f       	subi	r21, 0xF8	; 248
 c58:	f3 cf       	rjmp	.-26     	; 0xc40 <__addsf3x+0x34>
 c5a:	46 95       	lsr	r20
 c5c:	37 95       	ror	r19
 c5e:	27 95       	ror	r18
 c60:	a7 95       	ror	r26
 c62:	f0 40       	sbci	r31, 0x00	; 0
 c64:	53 95       	inc	r21
 c66:	c9 f7       	brne	.-14     	; 0xc5a <__addsf3x+0x4e>
 c68:	7e f4       	brtc	.+30     	; 0xc88 <__addsf3x+0x7c>
 c6a:	1f 16       	cp	r1, r31
 c6c:	ba 0b       	sbc	r27, r26
 c6e:	62 0b       	sbc	r22, r18
 c70:	73 0b       	sbc	r23, r19
 c72:	84 0b       	sbc	r24, r20
 c74:	ba f0       	brmi	.+46     	; 0xca4 <__addsf3x+0x98>
 c76:	91 50       	subi	r25, 0x01	; 1
 c78:	a1 f0       	breq	.+40     	; 0xca2 <__addsf3x+0x96>
 c7a:	ff 0f       	add	r31, r31
 c7c:	bb 1f       	adc	r27, r27
 c7e:	66 1f       	adc	r22, r22
 c80:	77 1f       	adc	r23, r23
 c82:	88 1f       	adc	r24, r24
 c84:	c2 f7       	brpl	.-16     	; 0xc76 <__addsf3x+0x6a>
 c86:	0e c0       	rjmp	.+28     	; 0xca4 <__addsf3x+0x98>
 c88:	ba 0f       	add	r27, r26
 c8a:	62 1f       	adc	r22, r18
 c8c:	73 1f       	adc	r23, r19
 c8e:	84 1f       	adc	r24, r20
 c90:	48 f4       	brcc	.+18     	; 0xca4 <__addsf3x+0x98>
 c92:	87 95       	ror	r24
 c94:	77 95       	ror	r23
 c96:	67 95       	ror	r22
 c98:	b7 95       	ror	r27
 c9a:	f7 95       	ror	r31
 c9c:	9e 3f       	cpi	r25, 0xFE	; 254
 c9e:	08 f0       	brcs	.+2      	; 0xca2 <__addsf3x+0x96>
 ca0:	b3 cf       	rjmp	.-154    	; 0xc08 <__addsf3+0x1e>
 ca2:	93 95       	inc	r25
 ca4:	88 0f       	add	r24, r24
 ca6:	08 f0       	brcs	.+2      	; 0xcaa <__addsf3x+0x9e>
 ca8:	99 27       	eor	r25, r25
 caa:	ee 0f       	add	r30, r30
 cac:	97 95       	ror	r25
 cae:	87 95       	ror	r24
 cb0:	08 95       	ret

00000cb2 <__fp_inf>:
 cb2:	97 f9       	bld	r25, 7
 cb4:	9f 67       	ori	r25, 0x7F	; 127
 cb6:	80 e8       	ldi	r24, 0x80	; 128
 cb8:	70 e0       	ldi	r23, 0x00	; 0
 cba:	60 e0       	ldi	r22, 0x00	; 0
 cbc:	08 95       	ret

00000cbe <__fp_nan>:
 cbe:	9f ef       	ldi	r25, 0xFF	; 255
 cc0:	80 ec       	ldi	r24, 0xC0	; 192
 cc2:	08 95       	ret

00000cc4 <__fp_pscA>:
 cc4:	00 24       	eor	r0, r0
 cc6:	0a 94       	dec	r0
 cc8:	16 16       	cp	r1, r22
 cca:	17 06       	cpc	r1, r23
 ccc:	18 06       	cpc	r1, r24
 cce:	09 06       	cpc	r0, r25
 cd0:	08 95       	ret

00000cd2 <__fp_pscB>:
 cd2:	00 24       	eor	r0, r0
 cd4:	0a 94       	dec	r0
 cd6:	12 16       	cp	r1, r18
 cd8:	13 06       	cpc	r1, r19
 cda:	14 06       	cpc	r1, r20
 cdc:	05 06       	cpc	r0, r21
 cde:	08 95       	ret

00000ce0 <__fp_round>:
 ce0:	09 2e       	mov	r0, r25
 ce2:	03 94       	inc	r0
 ce4:	00 0c       	add	r0, r0
 ce6:	11 f4       	brne	.+4      	; 0xcec <__fp_round+0xc>
 ce8:	88 23       	and	r24, r24
 cea:	52 f0       	brmi	.+20     	; 0xd00 <__fp_round+0x20>
 cec:	bb 0f       	add	r27, r27
 cee:	40 f4       	brcc	.+16     	; 0xd00 <__fp_round+0x20>
 cf0:	bf 2b       	or	r27, r31
 cf2:	11 f4       	brne	.+4      	; 0xcf8 <__fp_round+0x18>
 cf4:	60 ff       	sbrs	r22, 0
 cf6:	04 c0       	rjmp	.+8      	; 0xd00 <__fp_round+0x20>
 cf8:	6f 5f       	subi	r22, 0xFF	; 255
 cfa:	7f 4f       	sbci	r23, 0xFF	; 255
 cfc:	8f 4f       	sbci	r24, 0xFF	; 255
 cfe:	9f 4f       	sbci	r25, 0xFF	; 255
 d00:	08 95       	ret

00000d02 <__mulsi3>:
 d02:	62 9f       	mul	r22, r18
 d04:	d0 01       	movw	r26, r0
 d06:	73 9f       	mul	r23, r19
 d08:	f0 01       	movw	r30, r0
 d0a:	82 9f       	mul	r24, r18
 d0c:	e0 0d       	add	r30, r0
 d0e:	f1 1d       	adc	r31, r1
 d10:	64 9f       	mul	r22, r20
 d12:	e0 0d       	add	r30, r0
 d14:	f1 1d       	adc	r31, r1
 d16:	92 9f       	mul	r25, r18
 d18:	f0 0d       	add	r31, r0
 d1a:	83 9f       	mul	r24, r19
 d1c:	f0 0d       	add	r31, r0
 d1e:	74 9f       	mul	r23, r20
 d20:	f0 0d       	add	r31, r0
 d22:	65 9f       	mul	r22, r21
 d24:	f0 0d       	add	r31, r0
 d26:	99 27       	eor	r25, r25
 d28:	72 9f       	mul	r23, r18
 d2a:	b0 0d       	add	r27, r0
 d2c:	e1 1d       	adc	r30, r1
 d2e:	f9 1f       	adc	r31, r25
 d30:	63 9f       	mul	r22, r19
 d32:	b0 0d       	add	r27, r0
 d34:	e1 1d       	adc	r30, r1
 d36:	f9 1f       	adc	r31, r25
 d38:	bd 01       	movw	r22, r26
 d3a:	cf 01       	movw	r24, r30
 d3c:	11 24       	eor	r1, r1
 d3e:	08 95       	ret

00000d40 <__udivmodhi4>:
 d40:	aa 1b       	sub	r26, r26
 d42:	bb 1b       	sub	r27, r27
 d44:	51 e1       	ldi	r21, 0x11	; 17
 d46:	07 c0       	rjmp	.+14     	; 0xd56 <__udivmodhi4_ep>

00000d48 <__udivmodhi4_loop>:
 d48:	aa 1f       	adc	r26, r26
 d4a:	bb 1f       	adc	r27, r27
 d4c:	a6 17       	cp	r26, r22
 d4e:	b7 07       	cpc	r27, r23
 d50:	10 f0       	brcs	.+4      	; 0xd56 <__udivmodhi4_ep>
 d52:	a6 1b       	sub	r26, r22
 d54:	b7 0b       	sbc	r27, r23

00000d56 <__udivmodhi4_ep>:
 d56:	88 1f       	adc	r24, r24
 d58:	99 1f       	adc	r25, r25
 d5a:	5a 95       	dec	r21
 d5c:	a9 f7       	brne	.-22     	; 0xd48 <__udivmodhi4_loop>
 d5e:	80 95       	com	r24
 d60:	90 95       	com	r25
 d62:	bc 01       	movw	r22, r24
 d64:	cd 01       	movw	r24, r26
 d66:	08 95       	ret

00000d68 <__udivmodsi4>:
 d68:	a1 e2       	ldi	r26, 0x21	; 33
 d6a:	1a 2e       	mov	r1, r26
 d6c:	aa 1b       	sub	r26, r26
 d6e:	bb 1b       	sub	r27, r27
 d70:	fd 01       	movw	r30, r26
 d72:	0d c0       	rjmp	.+26     	; 0xd8e <__udivmodsi4_ep>

00000d74 <__udivmodsi4_loop>:
 d74:	aa 1f       	adc	r26, r26
 d76:	bb 1f       	adc	r27, r27
 d78:	ee 1f       	adc	r30, r30
 d7a:	ff 1f       	adc	r31, r31
 d7c:	a2 17       	cp	r26, r18
 d7e:	b3 07       	cpc	r27, r19
 d80:	e4 07       	cpc	r30, r20
 d82:	f5 07       	cpc	r31, r21
 d84:	20 f0       	brcs	.+8      	; 0xd8e <__udivmodsi4_ep>
 d86:	a2 1b       	sub	r26, r18
 d88:	b3 0b       	sbc	r27, r19
 d8a:	e4 0b       	sbc	r30, r20
 d8c:	f5 0b       	sbc	r31, r21

00000d8e <__udivmodsi4_ep>:
 d8e:	66 1f       	adc	r22, r22
 d90:	77 1f       	adc	r23, r23
 d92:	88 1f       	adc	r24, r24
 d94:	99 1f       	adc	r25, r25
 d96:	1a 94       	dec	r1
 d98:	69 f7       	brne	.-38     	; 0xd74 <__udivmodsi4_loop>
 d9a:	60 95       	com	r22
 d9c:	70 95       	com	r23
 d9e:	80 95       	com	r24
 da0:	90 95       	com	r25
 da2:	9b 01       	movw	r18, r22
 da4:	ac 01       	movw	r20, r24
 da6:	bd 01       	movw	r22, r26
 da8:	cf 01       	movw	r24, r30
 daa:	08 95       	ret

00000dac <_exit>:
 dac:	f8 94       	cli

00000dae <__stop_program>:
 dae:	ff cf       	rjmp	.-2      	; 0xdae <__stop_program>
