
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000052e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000052e  000005c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080006a  0080006a  000005cc  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001c9  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000570  00000000  00000000  000007b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001e4  00000000  00000000  00000d25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000859  00000000  00000000  00000f09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  00001764  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001a4  00000000  00000000  000018d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e6  00000000  00000000  00001a78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee e2       	ldi	r30, 0x2E	; 46
  3a:	f5 e0       	ldi	r31, 0x05	; 5
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	aa 36       	cpi	r26, 0x6A	; 106
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	aa e6       	ldi	r26, 0x6A	; 106
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ab 37       	cpi	r26, 0x7B	; 123
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	13 d2       	rcall	.+1062   	; 0x480 <main>
  5a:	67 c2       	rjmp	.+1230   	; 0x52a <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <ports_init>:

/************************************************/
void ports_init(void)
{

DDRC=0X03;
  5e:	83 e0       	ldi	r24, 0x03	; 3
  60:	84 bb       	out	0x14, r24	; 20
DDRB=0X06;
  62:	86 e0       	ldi	r24, 0x06	; 6
  64:	87 bb       	out	0x17, r24	; 23
DDRD=0X00;
  66:	11 ba       	out	0x11, r1	; 17
PORTC |=(1<<PC5)|(1<<PC4)|(1<<PC3)| (1<<PC2);
  68:	85 b3       	in	r24, 0x15	; 21
  6a:	8c 63       	ori	r24, 0x3C	; 60
  6c:	85 bb       	out	0x15, r24	; 21
}
  6e:	08 95       	ret

00000070 <delay_ns>:
WaitMs(1);
CLEARBIT(PORTB,BIT(7));
}

void delay_ns(unsigned char tim)
{
  70:	20 91 6a 00 	lds	r18, 0x006A
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	02 c0       	rjmp	.+4      	; 0x7c <delay_ns+0xc>
        for(j=0;j<tim;j++)
  78:	9f 5f       	subi	r25, 0xFF	; 255
  7a:	2a e0       	ldi	r18, 0x0A	; 10
  7c:	98 17       	cp	r25, r24
  7e:	e0 f3       	brcs	.-8      	; 0x78 <delay_ns+0x8>
  80:	20 93 6a 00 	sts	0x006A, r18
  84:	90 93 6b 00 	sts	0x006B, r25
        {
                for(k=0;k<10;k++)
                {};
        }
}
  88:	08 95       	ret

0000008a <WaitMs>:
        PORTC=save;
}*/

/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
  8a:	0f 93       	push	r16
  8c:	1f 93       	push	r17
  8e:	cf 93       	push	r28
  90:	df 93       	push	r29
  92:	8c 01       	movw	r16, r24
  94:	0a c0       	rjmp	.+20     	; 0xaa <WaitMs+0x20>
        int i;

        while (ms-- > 0)
  96:	c0 e0       	ldi	r28, 0x00	; 0
  98:	d0 e0       	ldi	r29, 0x00	; 0
        {
                /* 16380 (16k) clock cycles for 1ms; each time through loop
                   is 5 cycles (for loop control + nop) */
                for (i = 0; i < 100; ++i)
                        delay_ns(10000);
  9a:	80 e1       	ldi	r24, 0x10	; 16
  9c:	e9 df       	rcall	.-46     	; 0x70 <delay_ns>

        while (ms-- > 0)
        {
                /* 16380 (16k) clock cycles for 1ms; each time through loop
                   is 5 cycles (for loop control + nop) */
                for (i = 0; i < 100; ++i)
  9e:	21 96       	adiw	r28, 0x01	; 1
  a0:	c4 36       	cpi	r28, 0x64	; 100
  a2:	d1 05       	cpc	r29, r1
  a4:	d1 f7       	brne	.-12     	; 0x9a <WaitMs+0x10>
  a6:	01 50       	subi	r16, 0x01	; 1
  a8:	10 40       	sbci	r17, 0x00	; 0
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
        int i;

        while (ms-- > 0)
  aa:	01 15       	cp	r16, r1
  ac:	11 05       	cpc	r17, r1
  ae:	99 f7       	brne	.-26     	; 0x96 <WaitMs+0xc>
                /* 16380 (16k) clock cycles for 1ms; each time through loop
                   is 5 cycles (for loop control + nop) */
                for (i = 0; i < 100; ++i)
                        delay_ns(10000);
        }
  b0:	df 91       	pop	r29
  b2:	cf 91       	pop	r28
  b4:	1f 91       	pop	r17
  b6:	0f 91       	pop	r16
  b8:	08 95       	ret

000000ba <toggleE>:
        lcd_cmd(LINE1); 
}

void toggleE(void)
{
SETBIT(PORTB,BIT(7));
  ba:	c7 9a       	sbi	0x18, 7	; 24
WaitMs(1);
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	e4 df       	rcall	.-56     	; 0x8a <WaitMs>
CLEARBIT(PORTB,BIT(7));
  c2:	c7 98       	cbi	0x18, 7	; 24
}
  c4:	08 95       	ret

000000c6 <lcd_char>:
        }
}*/


void lcd_char(unsigned char single)
{
  c6:	1f 93       	push	r17
  c8:	18 2f       	mov	r17, r24
    WaitMs(1);
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	dd df       	rcall	.-70     	; 0x8a <WaitMs>
        SETBIT(PORTB,BIT(5));   
  d0:	c5 9a       	sbi	0x18, 5	; 24
        PORTD=single;                                           
  d2:	12 bb       	out	0x12, r17	; 18
        toggleE();
  d4:	f2 df       	rcall	.-28     	; 0xba <toggleE>
}
  d6:	1f 91       	pop	r17
  d8:	08 95       	ret

000000da <lcd_showvalue>:
                }
}


void lcd_showvalue(unsigned char num)   //prints the decimal 3digit value of num
{
  da:	ef 92       	push	r14
  dc:	ff 92       	push	r15
  de:	0f 93       	push	r16
  e0:	1f 93       	push	r17
  e2:	18 2f       	mov	r17, r24
        unsigned char H=0,T=0,O=0;
        H=num/100;
  e4:	64 e6       	ldi	r22, 0x64	; 100
  e6:	ee d1       	rcall	.+988    	; 0x4c4 <__udivmodqi4>
  e8:	48 2f       	mov	r20, r24
        T=(num - (H*100))/10;
  ea:	28 2f       	mov	r18, r24
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	8c e9       	ldi	r24, 0x9C	; 156
  f0:	9f ef       	ldi	r25, 0xFF	; 255
  f2:	28 9f       	mul	r18, r24
  f4:	70 01       	movw	r14, r0
  f6:	29 9f       	mul	r18, r25
  f8:	f0 0c       	add	r15, r0
  fa:	38 9f       	mul	r19, r24
  fc:	f0 0c       	add	r15, r0
  fe:	11 24       	eor	r1, r1
 100:	c7 01       	movw	r24, r14
 102:	81 0f       	add	r24, r17
 104:	91 1d       	adc	r25, r1
 106:	6a e0       	ldi	r22, 0x0A	; 10
 108:	70 e0       	ldi	r23, 0x00	; 0
 10a:	e8 d1       	rcall	.+976    	; 0x4dc <__divmodhi4>
 10c:	06 2f       	mov	r16, r22
        O=(num - (H*100) - (T*10));
        
        lcd_char(H+48);
 10e:	84 2f       	mov	r24, r20
 110:	80 5d       	subi	r24, 0xD0	; 208
 112:	d9 df       	rcall	.-78     	; 0xc6 <lcd_char>
        lcd_char(T+48);
 114:	80 2f       	mov	r24, r16
 116:	80 5d       	subi	r24, 0xD0	; 208
 118:	d6 df       	rcall	.-84     	; 0xc6 <lcd_char>
        lcd_char(O+48);
 11a:	10 5d       	subi	r17, 0xD0	; 208
 11c:	1e 0d       	add	r17, r14
 11e:	86 ef       	ldi	r24, 0xF6	; 246
 120:	9f ef       	ldi	r25, 0xFF	; 255
 122:	08 9f       	mul	r16, r24
 124:	00 2d       	mov	r16, r0
 126:	11 24       	eor	r1, r1
 128:	80 2f       	mov	r24, r16
 12a:	81 0f       	add	r24, r17
 12c:	cc df       	rcall	.-104    	; 0xc6 <lcd_char>
}
 12e:	1f 91       	pop	r17
 130:	0f 91       	pop	r16
 132:	ff 90       	pop	r15
 134:	ef 90       	pop	r14
 136:	08 95       	ret

00000138 <lcd_cmd>:
                {};
        }
}

void lcd_cmd(unsigned char cmd)
{   
 138:	1f 93       	push	r17
 13a:	18 2f       	mov	r17, r24
    WaitMs(2);
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	a4 df       	rcall	.-184    	; 0x8a <WaitMs>
        CLEARBIT(PORTB,BIT(5)+BIT(6)+BIT(7));
 142:	88 b3       	in	r24, 0x18	; 24
 144:	8f 79       	andi	r24, 0x9F	; 159
 146:	88 bb       	out	0x18, r24	; 24
        PORTD=cmd;                      
 148:	12 bb       	out	0x12, r17	; 18
        toggleE();
 14a:	b7 df       	rcall	.-146    	; 0xba <toggleE>
}
 14c:	1f 91       	pop	r17
 14e:	08 95       	ret

00000150 <lcd_gotoxy2>:
        lcd_cmd(LINE1+pos);
}

void lcd_gotoxy2(unsigned char pos)
{
        lcd_cmd(LINE2+pos);
 150:	80 54       	subi	r24, 0x40	; 64
 152:	f2 df       	rcall	.-28     	; 0x138 <lcd_cmd>
}
 154:	08 95       	ret

00000156 <lcd_gotoxy1>:
        lcd_char(O+48);
}

void lcd_gotoxy1(unsigned char pos)
{
        lcd_cmd(LINE1+pos);
 156:	80 58       	subi	r24, 0x80	; 128
 158:	ef df       	rcall	.-34     	; 0x138 <lcd_cmd>
}
 15a:	08 95       	ret

0000015c <lcd_string>:
        PORTD=single;                                           
        toggleE();
}

void lcd_string(unsigned char str[32])
{
 15c:	ef 92       	push	r14
 15e:	ff 92       	push	r15
 160:	1f 93       	push	r17
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	7c 01       	movw	r14, r24
        unsigned char k=0;
        SETBIT(PORTB,BIT(5));
 168:	c5 9a       	sbi	0x18, 5	; 24
        CLEARBIT(PORTB,BIT(6)+BIT(7));
 16a:	88 b3       	in	r24, 0x18	; 24
 16c:	8f 73       	andi	r24, 0x3F	; 63
 16e:	88 bb       	out	0x18, r24	; 24
 170:	10 e0       	ldi	r17, 0x00	; 0
 172:	0b c0       	rjmp	.+22     	; 0x18a <lcd_string+0x2e>
        while(str[k]!='\0')     //Till null character is encountered
                {   WaitMs(1);
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	88 df       	rcall	.-240    	; 0x8a <WaitMs>
                        if(k==16)
 17a:	10 31       	cpi	r17, 0x10	; 16
 17c:	11 f4       	brne	.+4      	; 0x182 <lcd_string+0x26>
                                lcd_cmd(LINE2);
 17e:	80 ec       	ldi	r24, 0xC0	; 192
 180:	db df       	rcall	.-74     	; 0x138 <lcd_cmd>
                        PORTD=str[k];
 182:	88 81       	ld	r24, Y
 184:	82 bb       	out	0x12, r24	; 18
                        toggleE();
 186:	99 df       	rcall	.-206    	; 0xba <toggleE>
                        k++;
 188:	1f 5f       	subi	r17, 0xFF	; 255
void lcd_string(unsigned char str[32])
{
        unsigned char k=0;
        SETBIT(PORTB,BIT(5));
        CLEARBIT(PORTB,BIT(6)+BIT(7));
        while(str[k]!='\0')     //Till null character is encountered
 18a:	e7 01       	movw	r28, r14
 18c:	c1 0f       	add	r28, r17
 18e:	d1 1d       	adc	r29, r1
 190:	88 81       	ld	r24, Y
 192:	88 23       	and	r24, r24
 194:	79 f7       	brne	.-34     	; 0x174 <lcd_string+0x18>
                                lcd_cmd(LINE2);
                        PORTD=str[k];
                        toggleE();
                        k++;
                }
}
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	1f 91       	pop	r17
 19c:	ff 90       	pop	r15
 19e:	ef 90       	pop	r14
 1a0:	08 95       	ret

000001a2 <lcd_init>:
void lcd_exit(void);
void WaitMs(unsigned int ms);

void lcd_init(void)     //init the lcd
{       
        DDRD=0xFF;
 1a2:	8f ef       	ldi	r24, 0xFF	; 255
 1a4:	81 bb       	out	0x11, r24	; 17
        DDRB=0xFF;
 1a6:	87 bb       	out	0x17, r24	; 23
        WaitMs(15);
 1a8:	8f e0       	ldi	r24, 0x0F	; 15
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	6e df       	rcall	.-292    	; 0x8a <WaitMs>
        CLEARBIT(PORTB,BIT(5)+BIT(6)+BIT(7));
 1ae:	88 b3       	in	r24, 0x18	; 24
 1b0:	8f 79       	andi	r24, 0x9F	; 159
 1b2:	88 bb       	out	0x18, r24	; 24
        lcd_cmd(0x38);
 1b4:	88 e3       	ldi	r24, 0x38	; 56
 1b6:	c0 df       	rcall	.-128    	; 0x138 <lcd_cmd>
        lcd_cmd(0x0E);
 1b8:	8e e0       	ldi	r24, 0x0E	; 14
 1ba:	be df       	rcall	.-132    	; 0x138 <lcd_cmd>
        lcd_cmd(LINE1); 
 1bc:	80 e8       	ldi	r24, 0x80	; 128
 1be:	bc df       	rcall	.-136    	; 0x138 <lcd_cmd>
}
 1c0:	08 95       	ret

000001c2 <fwd>:
#include<util/delay.h>
unsigned char count1=0,flag=0,stage=0,turn=0,count=0,stn=0,dtmf=0,x=0,y=0;


void fwd(int speed)  // generate pwm for forward motion of bot, 'speed' decides the duty cycle of that pwm
{                      //010 stage is considered as 0 stage
 1c2:	1f 93       	push	r17
 1c4:	18 2f       	mov	r17, r24
	stage=0;
 1c6:	10 92 74 00 	sts	0x0074, r1
	SETBIT(PORTC,BIT(0));      
 1ca:	a8 9a       	sbi	0x15, 0	; 21
	CLEARBIT(PORTC,BIT(1));
 1cc:	a9 98       	cbi	0x15, 1	; 21
	SETBIT(PORTB,BIT(1));
 1ce:	c1 9a       	sbi	0x18, 1	; 24
	CLEARBIT(PORTB,BIT(2));
 1d0:	c2 98       	cbi	0x18, 2	; 24
	delay_ns(speed);           //gives the ON time  
 1d2:	4e df       	rcall	.-356    	; 0x70 <delay_ns>
	CLEARBIT(PORTC,BIT(0));   
 1d4:	a8 98       	cbi	0x15, 0	; 21
	CLEARBIT(PORTC,BIT(1));
 1d6:	a9 98       	cbi	0x15, 1	; 21
	CLEARBIT(PORTB,BIT(2));
 1d8:	c2 98       	cbi	0x18, 2	; 24
	CLEARBIT(PORTB,BIT(1));
 1da:	c1 98       	cbi	0x18, 1	; 24
	delay_ns(200-speed);        //gives the OFF time
 1dc:	88 ec       	ldi	r24, 0xC8	; 200
 1de:	81 1b       	sub	r24, r17
 1e0:	47 df       	rcall	.-370    	; 0x70 <delay_ns>
}
 1e2:	1f 91       	pop	r17
 1e4:	08 95       	ret

000001e6 <back>:


void back(int speed)
{
 1e6:	1f 93       	push	r17
 1e8:	18 2f       	mov	r17, r24
	stage=0;
 1ea:	10 92 74 00 	sts	0x0074, r1
	SETBIT(PORTC,BIT(1));
 1ee:	a9 9a       	sbi	0x15, 1	; 21
	CLEARBIT(PORTC,BIT(0));
 1f0:	a8 98       	cbi	0x15, 0	; 21
	SETBIT(PORTB,BIT(2));
 1f2:	c2 9a       	sbi	0x18, 2	; 24
	CLEARBIT(PORTB,BIT(1));
 1f4:	c1 98       	cbi	0x18, 1	; 24
	delay_ns(speed);
 1f6:	3c df       	rcall	.-392    	; 0x70 <delay_ns>
	CLEARBIT(PORTC,BIT(0));
 1f8:	a8 98       	cbi	0x15, 0	; 21
	CLEARBIT(PORTC,BIT(1));
 1fa:	a9 98       	cbi	0x15, 1	; 21
	CLEARBIT(PORTB,BIT(2));
 1fc:	c2 98       	cbi	0x18, 2	; 24
	CLEARBIT(PORTB,BIT(1));
 1fe:	c1 98       	cbi	0x18, 1	; 24
	delay_ns(200-speed);
 200:	88 ec       	ldi	r24, 0xC8	; 200
 202:	81 1b       	sub	r24, r17
 204:	35 df       	rcall	.-406    	; 0x70 <delay_ns>
}
 206:	1f 91       	pop	r17
 208:	08 95       	ret

0000020a <left>:



void left(int speed)
{
 20a:	1f 93       	push	r17
 20c:	18 2f       	mov	r17, r24
	stage=1;
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	80 93 74 00 	sts	0x0074, r24
	SETBIT(PORTB,BIT(1));
 214:	c1 9a       	sbi	0x18, 1	; 24
	CLEARBIT(PORTB,BIT(2));
 216:	c2 98       	cbi	0x18, 2	; 24
	CLEARBIT(PORTC,BIT(0));
 218:	a8 98       	cbi	0x15, 0	; 21
	CLEARBIT(PORTC,BIT(1));
 21a:	a9 98       	cbi	0x15, 1	; 21
	delay_ns(speed);
 21c:	81 2f       	mov	r24, r17
 21e:	28 df       	rcall	.-432    	; 0x70 <delay_ns>
	CLEARBIT(PORTC,BIT(0));
 220:	a8 98       	cbi	0x15, 0	; 21
	CLEARBIT(PORTC,BIT(1));
 222:	a9 98       	cbi	0x15, 1	; 21
	CLEARBIT(PORTB,BIT(2));
 224:	c2 98       	cbi	0x18, 2	; 24
	CLEARBIT(PORTB,BIT(1));
 226:	c1 98       	cbi	0x18, 1	; 24
	delay_ns(200-speed);
 228:	88 ec       	ldi	r24, 0xC8	; 200
 22a:	81 1b       	sub	r24, r17
 22c:	21 df       	rcall	.-446    	; 0x70 <delay_ns>
}
 22e:	1f 91       	pop	r17
 230:	08 95       	ret

00000232 <right>:

void right(int speed)
{       
 232:	1f 93       	push	r17
 234:	18 2f       	mov	r17, r24
	stage=2;
 236:	82 e0       	ldi	r24, 0x02	; 2
 238:	80 93 74 00 	sts	0x0074, r24
	SETBIT(PORTC,BIT(0));
 23c:	a8 9a       	sbi	0x15, 0	; 21
	CLEARBIT(PORTC,BIT(1));
 23e:	a9 98       	cbi	0x15, 1	; 21
	CLEARBIT(PORTB,BIT(1));
 240:	c1 98       	cbi	0x18, 1	; 24
	CLEARBIT(PORTB,BIT(2));
 242:	c2 98       	cbi	0x18, 2	; 24
	delay_ns(speed);
 244:	81 2f       	mov	r24, r17
 246:	14 df       	rcall	.-472    	; 0x70 <delay_ns>
	CLEARBIT(PORTC,BIT(0));
 248:	a8 98       	cbi	0x15, 0	; 21
	CLEARBIT(PORTC,BIT(1));
 24a:	a9 98       	cbi	0x15, 1	; 21
	CLEARBIT(PORTB,BIT(2));
 24c:	c2 98       	cbi	0x18, 2	; 24
	CLEARBIT(PORTB,BIT(1));
 24e:	c1 98       	cbi	0x18, 1	; 24
	delay_ns(200-speed);
 250:	88 ec       	ldi	r24, 0xC8	; 200
 252:	81 1b       	sub	r24, r17
 254:	0d df       	rcall	.-486    	; 0x70 <delay_ns>
}
 256:	1f 91       	pop	r17
 258:	08 95       	ret

0000025a <stop>:

void stop(void)
{
	CLEARBIT(PORTC,BIT(0));
 25a:	a8 98       	cbi	0x15, 0	; 21
	CLEARBIT(PORTC,BIT(1));
 25c:	a9 98       	cbi	0x15, 1	; 21
	CLEARBIT(PORTB,BIT(2));
 25e:	c2 98       	cbi	0x18, 2	; 24
	CLEARBIT(PORTB,BIT(1));
 260:	c1 98       	cbi	0x18, 1	; 24
}
 262:	08 95       	ret

00000264 <trace_line>:

void trace_line(void)
{
	if(CHECKBIT(PIND,BIT(5)))//right
 264:	85 9b       	sbis	0x10, 5	; 16
 266:	12 c0       	rjmp	.+36     	; 0x28c <trace_line+0x28>
	{
		if(CHECKBIT(PIND,BIT(7)))//center
 268:	87 9b       	sbis	0x10, 7	; 16
 26a:	08 c0       	rjmp	.+16     	; 0x27c <trace_line+0x18>
		{
			if(CHECKBIT(PIND,BIT(6)))//left
 26c:	86 9b       	sbis	0x10, 6	; 16
 26e:	03 c0       	rjmp	.+6      	; 0x276 <trace_line+0x12>
			{
				fwd(90);
 270:	8a e5       	ldi	r24, 0x5A	; 90
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	11 c0       	rjmp	.+34     	; 0x298 <trace_line+0x34>
			}
			else
			{
				right(90);
 276:	8a e5       	ldi	r24, 0x5A	; 90
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	18 c0       	rjmp	.+48     	; 0x2ac <trace_line+0x48>
			}
		}
		else
		{
			if(CHECKBIT(PIND,BIT(6)))
 27c:	86 9b       	sbis	0x10, 6	; 16
 27e:	03 c0       	rjmp	.+6      	; 0x286 <trace_line+0x22>
			{
				left(120);
 280:	88 e7       	ldi	r24, 0x78	; 120
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0f c0       	rjmp	.+30     	; 0x2a4 <trace_line+0x40>
			}
			else
			{
				right(120);
 286:	88 e7       	ldi	r24, 0x78	; 120
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	10 c0       	rjmp	.+32     	; 0x2ac <trace_line+0x48>
		}
	}
   
	else
	{
		if(CHECKBIT(PIND,BIT(7)))
 28c:	87 9b       	sbis	0x10, 7	; 16
 28e:	06 c0       	rjmp	.+12     	; 0x29c <trace_line+0x38>
		{
			if(CHECKBIT(PIND,BIT(6)))
 290:	86 99       	sbic	0x10, 6	; 16
 292:	06 c0       	rjmp	.+12     	; 0x2a0 <trace_line+0x3c>
			{
				left(100);
			}
			else
			{   
				fwd(130);
 294:	82 e8       	ldi	r24, 0x82	; 130
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	94 df       	rcall	.-216    	; 0x1c2 <fwd>
 29a:	08 95       	ret
			}
		}
		else
		{
			if(CHECKBIT(PIND,BIT(6)))
 29c:	86 9b       	sbis	0x10, 6	; 16
 29e:	04 c0       	rjmp	.+8      	; 0x2a8 <trace_line+0x44>
			{
				left(100);
 2a0:	84 e6       	ldi	r24, 0x64	; 100
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	b2 df       	rcall	.-156    	; 0x20a <left>
 2a6:	08 95       	ret
			}
			else
			{
				right(100);
 2a8:	84 e6       	ldi	r24, 0x64	; 100
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	c2 df       	rcall	.-124    	; 0x232 <right>
 2ae:	08 95       	ret

000002b0 <mobile>:


void mobile()
{

        dtmf=PIND;
 2b0:	80 b3       	in	r24, 0x10	; 16
		dtmf=dtmf & 0x1b;	//00011011
 2b2:	8b 71       	andi	r24, 0x1B	; 27
 2b4:	80 93 78 00 	sts	0x0078, r24
        if(dtmf==0x02)
 2b8:	82 30       	cpi	r24, 0x02	; 2
 2ba:	19 f4       	brne	.+6      	; 0x2c2 <mobile+0x12>
        {
            fwd(150);
 2bc:	86 e9       	ldi	r24, 0x96	; 150
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	80 df       	rcall	.-256    	; 0x1c2 <fwd>
        }
        
        if(dtmf==0x10)
 2c2:	80 91 78 00 	lds	r24, 0x0078
 2c6:	80 31       	cpi	r24, 0x10	; 16
 2c8:	19 f4       	brne	.+6      	; 0x2d0 <mobile+0x20>
        {    
            back(150);
 2ca:	86 e9       	ldi	r24, 0x96	; 150
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	8b df       	rcall	.-234    	; 0x1e6 <back>
        }
        
        if(dtmf==0x08)
 2d0:	80 91 78 00 	lds	r24, 0x0078
 2d4:	88 30       	cpi	r24, 0x08	; 8
 2d6:	19 f4       	brne	.+6      	; 0x2de <mobile+0x2e>
        {
            left(120);
 2d8:	88 e7       	ldi	r24, 0x78	; 120
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	96 df       	rcall	.-212    	; 0x20a <left>
        }
        
        if(dtmf==0x0A)
 2de:	80 91 78 00 	lds	r24, 0x0078
 2e2:	8a 30       	cpi	r24, 0x0A	; 10
 2e4:	19 f4       	brne	.+6      	; 0x2ec <mobile+0x3c>
        {
            right(120);
 2e6:	88 e7       	ldi	r24, 0x78	; 120
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	a3 df       	rcall	.-186    	; 0x232 <right>
        }
        
        if(dtmf==0x09)
 2ec:	80 91 78 00 	lds	r24, 0x0078
 2f0:	89 30       	cpi	r24, 0x09	; 9
 2f2:	09 f4       	brne	.+2      	; 0x2f6 <mobile+0x46>
        {
            stop();
 2f4:	b2 df       	rcall	.-156    	; 0x25a <stop>
 2f6:	08 95       	ret

000002f8 <manual>:
}


void manual()
{
	if(bit_is_clear(PINC, 5))
 2f8:	9d 99       	sbic	0x13, 5	; 19
 2fa:	03 c0       	rjmp	.+6      	; 0x302 <manual+0xa>
	{
		SETBIT(PORTC,BIT(0));
 2fc:	a8 9a       	sbi	0x15, 0	; 21
		CLEARBIT(PORTC,BIT(1));
 2fe:	a9 98       	cbi	0x15, 1	; 21
 300:	07 c0       	rjmp	.+14     	; 0x310 <manual+0x18>
	}
	else if(bit_is_clear(PINC, 3))
 302:	9b 99       	sbic	0x13, 3	; 19
 304:	03 c0       	rjmp	.+6      	; 0x30c <manual+0x14>
	{
		SETBIT(PORTC,BIT(1));
 306:	a9 9a       	sbi	0x15, 1	; 21
		CLEARBIT(PORTC,BIT(0));
 308:	a8 98       	cbi	0x15, 0	; 21
 30a:	02 c0       	rjmp	.+4      	; 0x310 <manual+0x18>
	}
	else
	{
		SETBIT(PORTC,BIT(0));
 30c:	a8 9a       	sbi	0x15, 0	; 21
		SETBIT(PORTC,BIT(1));
 30e:	a9 9a       	sbi	0x15, 1	; 21
	}
	
	if(bit_is_clear(PINC, 4))
 310:	9c 99       	sbic	0x13, 4	; 19
 312:	03 c0       	rjmp	.+6      	; 0x31a <manual+0x22>
	{
		SETBIT(PORTB,BIT(1));
 314:	c1 9a       	sbi	0x18, 1	; 24
		CLEARBIT(PORTB,BIT(2));
 316:	c2 98       	cbi	0x18, 2	; 24
 318:	08 95       	ret
	}
	else if(bit_is_clear(PINC, 2))
 31a:	9a 99       	sbic	0x13, 2	; 19
 31c:	03 c0       	rjmp	.+6      	; 0x324 <manual+0x2c>
	{
		SETBIT(PORTB,BIT(2));
 31e:	c2 9a       	sbi	0x18, 2	; 24
		CLEARBIT(PORTB,BIT(1));
 320:	c1 98       	cbi	0x18, 1	; 24
 322:	08 95       	ret
	}
	else
	{
		SETBIT(PORTB,BIT(1));
 324:	c1 9a       	sbi	0x18, 1	; 24
		SETBIT(PORTB,BIT(2));
 326:	c2 9a       	sbi	0x18, 2	; 24
 328:	08 95       	ret

0000032a <obstacle>:




void obstacle()
{
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
	long unsigned int i,j;
	fwd(80);
 32e:	80 e5       	ldi	r24, 0x50	; 80
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	47 df       	rcall	.-370    	; 0x1c2 <fwd>
	if(CHECKBIT(PIND,BIT(6)) || CHECKBIT(PIND,BIT(5)))
 334:	86 99       	sbic	0x10, 6	; 16
 336:	02 c0       	rjmp	.+4      	; 0x33c <obstacle+0x12>
 338:	85 9b       	sbis	0x10, 5	; 16
 33a:	2b c0       	rjmp	.+86     	; 0x392 <obstacle+0x68>
	{
		stop();
 33c:	8e df       	rcall	.-228    	; 0x25a <stop>
 33e:	c0 e0       	ldi	r28, 0x00	; 0
 340:	d0 e0       	ldi	r29, 0x00	; 0
		for(i=10000;i>0;i--)
		{
			delay_ns(25);
 342:	89 e1       	ldi	r24, 0x19	; 25
 344:	95 de       	rcall	.-726    	; 0x70 <delay_ns>
 346:	21 96       	adiw	r28, 0x01	; 1
	long unsigned int i,j;
	fwd(80);
	if(CHECKBIT(PIND,BIT(6)) || CHECKBIT(PIND,BIT(5)))
	{
		stop();
		for(i=10000;i>0;i--)
 348:	87 e2       	ldi	r24, 0x27	; 39
 34a:	c0 31       	cpi	r28, 0x10	; 16
 34c:	d8 07       	cpc	r29, r24
 34e:	c9 f7       	brne	.-14     	; 0x342 <obstacle+0x18>
 350:	c0 e0       	ldi	r28, 0x00	; 0
 352:	d0 e0       	ldi	r29, 0x00	; 0
		{
			delay_ns(25);
		}			
		for(i=1000;i>0;i--)
		{
			back(120);
 354:	88 e7       	ldi	r24, 0x78	; 120
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	46 df       	rcall	.-372    	; 0x1e6 <back>
			delay_ns(7);
 35a:	87 e0       	ldi	r24, 0x07	; 7
 35c:	89 de       	rcall	.-750    	; 0x70 <delay_ns>
 35e:	21 96       	adiw	r28, 0x01	; 1
		stop();
		for(i=10000;i>0;i--)
		{
			delay_ns(25);
		}			
		for(i=1000;i>0;i--)
 360:	83 e0       	ldi	r24, 0x03	; 3
 362:	c8 3e       	cpi	r28, 0xE8	; 232
 364:	d8 07       	cpc	r29, r24
 366:	b1 f7       	brne	.-20     	; 0x354 <obstacle+0x2a>
 368:	c0 e0       	ldi	r28, 0x00	; 0
 36a:	d0 e0       	ldi	r29, 0x00	; 0
			back(120);
			delay_ns(7);
		}
		for(i=10000;i>0;i--)
		{
			delay_ns(25);
 36c:	89 e1       	ldi	r24, 0x19	; 25
 36e:	80 de       	rcall	.-768    	; 0x70 <delay_ns>
 370:	21 96       	adiw	r28, 0x01	; 1
		for(i=1000;i>0;i--)
		{
			back(120);
			delay_ns(7);
		}
		for(i=10000;i>0;i--)
 372:	87 e2       	ldi	r24, 0x27	; 39
 374:	c0 31       	cpi	r28, 0x10	; 16
 376:	d8 07       	cpc	r29, r24
 378:	c9 f7       	brne	.-14     	; 0x36c <obstacle+0x42>
 37a:	c0 e0       	ldi	r28, 0x00	; 0
 37c:	d0 e0       	ldi	r29, 0x00	; 0
		{
			delay_ns(25);
		}
		for(i=1000;i>0;i--)
		{
			right(100);
 37e:	84 e6       	ldi	r24, 0x64	; 100
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	57 df       	rcall	.-338    	; 0x232 <right>
			delay_ns(5);
 384:	85 e0       	ldi	r24, 0x05	; 5
 386:	74 de       	rcall	.-792    	; 0x70 <delay_ns>
 388:	21 96       	adiw	r28, 0x01	; 1
		}
		for(i=10000;i>0;i--)
		{
			delay_ns(25);
		}
		for(i=1000;i>0;i--)
 38a:	83 e0       	ldi	r24, 0x03	; 3
 38c:	c8 3e       	cpi	r28, 0xE8	; 232
 38e:	d8 07       	cpc	r29, r24
 390:	b1 f7       	brne	.-20     	; 0x37e <obstacle+0x54>
		{
			right(100);
			delay_ns(5);
		}
	}
}
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	08 95       	ret

00000398 <edge_detector>:

void edge_detector()
{
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
	long unsigned int i,j;	
	fwd(80);
 39c:	80 e5       	ldi	r24, 0x50	; 80
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	10 df       	rcall	.-480    	; 0x1c2 <fwd>
	if(!(CHECKBIT(PIND,BIT(7))))
 3a2:	87 99       	sbic	0x10, 7	; 16
 3a4:	22 c0       	rjmp	.+68     	; 0x3ea <edge_detector+0x52>
	{		
		stop();
 3a6:	59 df       	rcall	.-334    	; 0x25a <stop>
 3a8:	c0 e0       	ldi	r28, 0x00	; 0
 3aa:	d0 e0       	ldi	r29, 0x00	; 0
		for(i=10000;i>0;i--)
		{
			delay_ns(25);
 3ac:	89 e1       	ldi	r24, 0x19	; 25
 3ae:	60 de       	rcall	.-832    	; 0x70 <delay_ns>
 3b0:	21 96       	adiw	r28, 0x01	; 1
	long unsigned int i,j;	
	fwd(80);
	if(!(CHECKBIT(PIND,BIT(7))))
	{		
		stop();
		for(i=10000;i>0;i--)
 3b2:	87 e2       	ldi	r24, 0x27	; 39
 3b4:	c0 31       	cpi	r28, 0x10	; 16
 3b6:	d8 07       	cpc	r29, r24
 3b8:	c9 f7       	brne	.-14     	; 0x3ac <edge_detector+0x14>
 3ba:	c0 e0       	ldi	r28, 0x00	; 0
 3bc:	d0 e0       	ldi	r29, 0x00	; 0
			delay_ns(25);
		}
		
		 for(i=1000;i>0;i--)
		{
			back(120);
 3be:	88 e7       	ldi	r24, 0x78	; 120
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	11 df       	rcall	.-478    	; 0x1e6 <back>
			delay_ns(7);
 3c4:	87 e0       	ldi	r24, 0x07	; 7
 3c6:	54 de       	rcall	.-856    	; 0x70 <delay_ns>
 3c8:	21 96       	adiw	r28, 0x01	; 1
		for(i=10000;i>0;i--)
		{
			delay_ns(25);
		}
		
		 for(i=1000;i>0;i--)
 3ca:	83 e0       	ldi	r24, 0x03	; 3
 3cc:	c8 3e       	cpi	r28, 0xE8	; 232
 3ce:	d8 07       	cpc	r29, r24
 3d0:	b1 f7       	brne	.-20     	; 0x3be <edge_detector+0x26>
 3d2:	c0 e0       	ldi	r28, 0x00	; 0
 3d4:	d0 e0       	ldi	r29, 0x00	; 0
			delay_ns(7);
		}
		
		for(i=1000;i>0;i--)
		{
			left(100);
 3d6:	84 e6       	ldi	r24, 0x64	; 100
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	17 df       	rcall	.-466    	; 0x20a <left>
			delay_ns(5);
 3dc:	85 e0       	ldi	r24, 0x05	; 5
 3de:	48 de       	rcall	.-880    	; 0x70 <delay_ns>
 3e0:	21 96       	adiw	r28, 0x01	; 1
		{
			back(120);
			delay_ns(7);
		}
		
		for(i=1000;i>0;i--)
 3e2:	83 e0       	ldi	r24, 0x03	; 3
 3e4:	c8 3e       	cpi	r28, 0xE8	; 232
 3e6:	d8 07       	cpc	r29, r24
 3e8:	b1 f7       	brne	.-20     	; 0x3d6 <edge_detector+0x3e>
		{
			left(100);
			delay_ns(5);
		}	
	}
	if(!(CHECKBIT(PIND,BIT(6)))) //&& CHECKBIT(PIND,BIT(7)) && CHECKBIT(PIND,BIT(6)))
 3ea:	86 99       	sbic	0x10, 6	; 16
 3ec:	22 c0       	rjmp	.+68     	; 0x432 <edge_detector+0x9a>
	{		
		stop();
 3ee:	35 df       	rcall	.-406    	; 0x25a <stop>
 3f0:	c0 e0       	ldi	r28, 0x00	; 0
 3f2:	d0 e0       	ldi	r29, 0x00	; 0
		for(i=10000;i>0;i--)
		{
			delay_ns(25);
 3f4:	89 e1       	ldi	r24, 0x19	; 25
 3f6:	3c de       	rcall	.-904    	; 0x70 <delay_ns>
 3f8:	21 96       	adiw	r28, 0x01	; 1
		}	
	}
	if(!(CHECKBIT(PIND,BIT(6)))) //&& CHECKBIT(PIND,BIT(7)) && CHECKBIT(PIND,BIT(6)))
	{		
		stop();
		for(i=10000;i>0;i--)
 3fa:	87 e2       	ldi	r24, 0x27	; 39
 3fc:	c0 31       	cpi	r28, 0x10	; 16
 3fe:	d8 07       	cpc	r29, r24
 400:	c9 f7       	brne	.-14     	; 0x3f4 <edge_detector+0x5c>
 402:	c0 e0       	ldi	r28, 0x00	; 0
 404:	d0 e0       	ldi	r29, 0x00	; 0
			delay_ns(25);
		}
		
		 for(i=1000;i>0;i--)
		{
			back(120);
 406:	88 e7       	ldi	r24, 0x78	; 120
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	ed de       	rcall	.-550    	; 0x1e6 <back>
			delay_ns(7);
 40c:	87 e0       	ldi	r24, 0x07	; 7
 40e:	30 de       	rcall	.-928    	; 0x70 <delay_ns>
 410:	21 96       	adiw	r28, 0x01	; 1
		for(i=10000;i>0;i--)
		{
			delay_ns(25);
		}
		
		 for(i=1000;i>0;i--)
 412:	83 e0       	ldi	r24, 0x03	; 3
 414:	c8 3e       	cpi	r28, 0xE8	; 232
 416:	d8 07       	cpc	r29, r24
 418:	b1 f7       	brne	.-20     	; 0x406 <edge_detector+0x6e>
 41a:	c0 e0       	ldi	r28, 0x00	; 0
 41c:	d0 e0       	ldi	r29, 0x00	; 0
			delay_ns(7);
		}
		
		for(i=1000;i>0;i--)
		{
			left(100);
 41e:	84 e6       	ldi	r24, 0x64	; 100
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	f3 de       	rcall	.-538    	; 0x20a <left>
			delay_ns(5);
 424:	85 e0       	ldi	r24, 0x05	; 5
 426:	24 de       	rcall	.-952    	; 0x70 <delay_ns>
 428:	21 96       	adiw	r28, 0x01	; 1
		{
			back(120);
			delay_ns(7);
		}
		
		for(i=1000;i>0;i--)
 42a:	83 e0       	ldi	r24, 0x03	; 3
 42c:	c8 3e       	cpi	r28, 0xE8	; 232
 42e:	d8 07       	cpc	r29, r24
 430:	b1 f7       	brne	.-20     	; 0x41e <edge_detector+0x86>
		{
			left(100);
			delay_ns(5);
		}
	}
	if(!(CHECKBIT(PIND,BIT(5)))) //&& CHECKBIT(PIND,BIT(7)) && CHECKBIT(PIND,BIT(6)))
 432:	85 99       	sbic	0x10, 5	; 16
 434:	22 c0       	rjmp	.+68     	; 0x47a <__stack+0x1b>
	{
		stop();
 436:	11 df       	rcall	.-478    	; 0x25a <stop>
 438:	c0 e0       	ldi	r28, 0x00	; 0
 43a:	d0 e0       	ldi	r29, 0x00	; 0
		for(i=10000;i>0;i--)
		{
			delay_ns(25);
 43c:	89 e1       	ldi	r24, 0x19	; 25
 43e:	18 de       	rcall	.-976    	; 0x70 <delay_ns>
 440:	21 96       	adiw	r28, 0x01	; 1
		}
	}
	if(!(CHECKBIT(PIND,BIT(5)))) //&& CHECKBIT(PIND,BIT(7)) && CHECKBIT(PIND,BIT(6)))
	{
		stop();
		for(i=10000;i>0;i--)
 442:	87 e2       	ldi	r24, 0x27	; 39
 444:	c0 31       	cpi	r28, 0x10	; 16
 446:	d8 07       	cpc	r29, r24
 448:	c9 f7       	brne	.-14     	; 0x43c <edge_detector+0xa4>
 44a:	c0 e0       	ldi	r28, 0x00	; 0
 44c:	d0 e0       	ldi	r29, 0x00	; 0
		{
			delay_ns(25);
		}
		for(i=1000;i>0;i--)
		{
			back(120);
 44e:	88 e7       	ldi	r24, 0x78	; 120
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	c9 de       	rcall	.-622    	; 0x1e6 <back>
			delay_ns(7);
 454:	87 e0       	ldi	r24, 0x07	; 7
 456:	0c de       	rcall	.-1000   	; 0x70 <delay_ns>
 458:	21 96       	adiw	r28, 0x01	; 1
		stop();
		for(i=10000;i>0;i--)
		{
			delay_ns(25);
		}
		for(i=1000;i>0;i--)
 45a:	83 e0       	ldi	r24, 0x03	; 3
 45c:	c8 3e       	cpi	r28, 0xE8	; 232
 45e:	d8 07       	cpc	r29, r24
 460:	b1 f7       	brne	.-20     	; 0x44e <edge_detector+0xb6>
 462:	c0 e0       	ldi	r28, 0x00	; 0
 464:	d0 e0       	ldi	r29, 0x00	; 0
			back(120);
			delay_ns(7);
		}
		for(i=1000;i>0;i--)
		{
			right(100);
 466:	84 e6       	ldi	r24, 0x64	; 100
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	e3 de       	rcall	.-570    	; 0x232 <right>
			delay_ns(5);
 46c:	85 e0       	ldi	r24, 0x05	; 5
 46e:	00 de       	rcall	.-1024   	; 0x70 <delay_ns>
 470:	21 96       	adiw	r28, 0x01	; 1
		for(i=1000;i>0;i--)
		{
			back(120);
			delay_ns(7);
		}
		for(i=1000;i>0;i--)
 472:	83 e0       	ldi	r24, 0x03	; 3
 474:	c8 3e       	cpi	r28, 0xE8	; 232
 476:	d8 07       	cpc	r29, r24
 478:	b1 f7       	brne	.-20     	; 0x466 <__stack+0x7>
		{
			right(100);
			delay_ns(5);
		}	
	}
}
 47a:	df 91       	pop	r29
 47c:	cf 91       	pop	r28
 47e:	08 95       	ret

00000480 <main>:

/************************************************/
void ports_init(void)
{

DDRC=0X03;
 480:	83 e0       	ldi	r24, 0x03	; 3
 482:	84 bb       	out	0x14, r24	; 20
DDRB=0X06;
 484:	86 e0       	ldi	r24, 0x06	; 6
 486:	87 bb       	out	0x17, r24	; 23
DDRD=0X00;
 488:	11 ba       	out	0x11, r1	; 17
PORTC |=(1<<PC5)|(1<<PC4)|(1<<PC3)| (1<<PC2);
 48a:	85 b3       	in	r24, 0x15	; 21
 48c:	8c 63       	ori	r24, 0x3C	; 60
 48e:	85 bb       	out	0x15, r24	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 490:	8a ef       	ldi	r24, 0xFA	; 250
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	01 97       	sbiw	r24, 0x01	; 1
 496:	f1 f7       	brne	.-4      	; 0x494 <main+0x14>
	ports_init();
	_delay_ms(1);		

	while(1)
	{        
		if(CHECKBIT(PINB,BIT(6)))
 498:	b6 9b       	sbis	0x16, 6	; 22
 49a:	0e c0       	rjmp	.+28     	; 0x4b8 <main+0x38>
		{
			if(CHECKBIT(PINB,BIT(7)))
 49c:	b7 9b       	sbis	0x16, 7	; 22
 49e:	06 c0       	rjmp	.+12     	; 0x4ac <main+0x2c>
			{
				if(CHECKBIT(PINB,BIT(0)))
 4a0:	b0 9b       	sbis	0x16, 0	; 22
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <main+0x28>
				{
					trace_line();
 4a4:	df de       	rcall	.-578    	; 0x264 <trace_line>
 4a6:	f8 cf       	rjmp	.-16     	; 0x498 <main+0x18>
				}
				else
				{
					manual();
 4a8:	27 df       	rcall	.-434    	; 0x2f8 <manual>
 4aa:	f6 cf       	rjmp	.-20     	; 0x498 <main+0x18>
				}
			}
			else
			{
				if(CHECKBIT(PINB,BIT(0)))
 4ac:	b0 9b       	sbis	0x16, 0	; 22
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <main+0x34>
				{
					obstacle();
 4b0:	3c df       	rcall	.-392    	; 0x32a <obstacle>
 4b2:	f2 cf       	rjmp	.-28     	; 0x498 <main+0x18>
				}
				else
				{
					mobile();
 4b4:	fd de       	rcall	.-518    	; 0x2b0 <mobile>
 4b6:	f0 cf       	rjmp	.-32     	; 0x498 <main+0x18>
				}
			}
		}
		else
		{
			if(CHECKBIT(PINB,BIT(7)))
 4b8:	b7 9b       	sbis	0x16, 7	; 22
 4ba:	ee cf       	rjmp	.-36     	; 0x498 <main+0x18>
			{
				if(CHECKBIT(PINB,BIT(0)))
 4bc:	b0 9b       	sbis	0x16, 0	; 22
 4be:	ec cf       	rjmp	.-40     	; 0x498 <main+0x18>
				{
					edge_detector();
 4c0:	6b df       	rcall	.-298    	; 0x398 <edge_detector>
 4c2:	ea cf       	rjmp	.-44     	; 0x498 <main+0x18>

000004c4 <__udivmodqi4>:
 4c4:	99 1b       	sub	r25, r25
 4c6:	79 e0       	ldi	r23, 0x09	; 9
 4c8:	04 c0       	rjmp	.+8      	; 0x4d2 <__udivmodqi4_ep>

000004ca <__udivmodqi4_loop>:
 4ca:	99 1f       	adc	r25, r25
 4cc:	96 17       	cp	r25, r22
 4ce:	08 f0       	brcs	.+2      	; 0x4d2 <__udivmodqi4_ep>
 4d0:	96 1b       	sub	r25, r22

000004d2 <__udivmodqi4_ep>:
 4d2:	88 1f       	adc	r24, r24
 4d4:	7a 95       	dec	r23
 4d6:	c9 f7       	brne	.-14     	; 0x4ca <__udivmodqi4_loop>
 4d8:	80 95       	com	r24
 4da:	08 95       	ret

000004dc <__divmodhi4>:
 4dc:	97 fb       	bst	r25, 7
 4de:	09 2e       	mov	r0, r25
 4e0:	07 26       	eor	r0, r23
 4e2:	0a d0       	rcall	.+20     	; 0x4f8 <__divmodhi4_neg1>
 4e4:	77 fd       	sbrc	r23, 7
 4e6:	04 d0       	rcall	.+8      	; 0x4f0 <__divmodhi4_neg2>
 4e8:	0c d0       	rcall	.+24     	; 0x502 <__udivmodhi4>
 4ea:	06 d0       	rcall	.+12     	; 0x4f8 <__divmodhi4_neg1>
 4ec:	00 20       	and	r0, r0
 4ee:	1a f4       	brpl	.+6      	; 0x4f6 <__divmodhi4_exit>

000004f0 <__divmodhi4_neg2>:
 4f0:	70 95       	com	r23
 4f2:	61 95       	neg	r22
 4f4:	7f 4f       	sbci	r23, 0xFF	; 255

000004f6 <__divmodhi4_exit>:
 4f6:	08 95       	ret

000004f8 <__divmodhi4_neg1>:
 4f8:	f6 f7       	brtc	.-4      	; 0x4f6 <__divmodhi4_exit>
 4fa:	90 95       	com	r25
 4fc:	81 95       	neg	r24
 4fe:	9f 4f       	sbci	r25, 0xFF	; 255
 500:	08 95       	ret

00000502 <__udivmodhi4>:
 502:	aa 1b       	sub	r26, r26
 504:	bb 1b       	sub	r27, r27
 506:	51 e1       	ldi	r21, 0x11	; 17
 508:	07 c0       	rjmp	.+14     	; 0x518 <__udivmodhi4_ep>

0000050a <__udivmodhi4_loop>:
 50a:	aa 1f       	adc	r26, r26
 50c:	bb 1f       	adc	r27, r27
 50e:	a6 17       	cp	r26, r22
 510:	b7 07       	cpc	r27, r23
 512:	10 f0       	brcs	.+4      	; 0x518 <__udivmodhi4_ep>
 514:	a6 1b       	sub	r26, r22
 516:	b7 0b       	sbc	r27, r23

00000518 <__udivmodhi4_ep>:
 518:	88 1f       	adc	r24, r24
 51a:	99 1f       	adc	r25, r25
 51c:	5a 95       	dec	r21
 51e:	a9 f7       	brne	.-22     	; 0x50a <__udivmodhi4_loop>
 520:	80 95       	com	r24
 522:	90 95       	com	r25
 524:	bc 01       	movw	r22, r24
 526:	cd 01       	movw	r24, r26
 528:	08 95       	ret

0000052a <_exit>:
 52a:	f8 94       	cli

0000052c <__stop_program>:
 52c:	ff cf       	rjmp	.-2      	; 0x52c <__stop_program>
