
YASKAWA MPPT mCS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000154  00800100  00001ec2  00001f56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ec2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800254  00800254  000020aa  2**0
                  ALLOC
  3 .stab         0000354c  00000000  00000000  000020ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000bf3  00000000  00000000  000055f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000061eb  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001a0  00000000  00000000  0000621a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002961  00000000  00000000  000063ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000084c  00000000  00000000  00008d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001439  00000000  00000000  00009567  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004d0  00000000  00000000  0000a9a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000680  00000000  00000000  0000ae70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001c49  00000000  00000000  0000b4f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000188  00000000  00000000  0000d139  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e2 c0       	rjmp	.+452    	; 0x1c6 <__ctors_end>
       2:	00 00       	nop
       4:	fe c0       	rjmp	.+508    	; 0x202 <__bad_interrupt>
       6:	00 00       	nop
       8:	fc c0       	rjmp	.+504    	; 0x202 <__bad_interrupt>
       a:	00 00       	nop
       c:	fa c0       	rjmp	.+500    	; 0x202 <__bad_interrupt>
       e:	00 00       	nop
      10:	f8 c0       	rjmp	.+496    	; 0x202 <__bad_interrupt>
      12:	00 00       	nop
      14:	f6 c0       	rjmp	.+492    	; 0x202 <__bad_interrupt>
      16:	00 00       	nop
      18:	f4 c0       	rjmp	.+488    	; 0x202 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f2 c0       	rjmp	.+484    	; 0x202 <__bad_interrupt>
      1e:	00 00       	nop
      20:	f0 c0       	rjmp	.+480    	; 0x202 <__bad_interrupt>
      22:	00 00       	nop
      24:	ee c0       	rjmp	.+476    	; 0x202 <__bad_interrupt>
      26:	00 00       	nop
      28:	ec c0       	rjmp	.+472    	; 0x202 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	ea c0       	rjmp	.+468    	; 0x202 <__bad_interrupt>
      2e:	00 00       	nop
      30:	e8 c0       	rjmp	.+464    	; 0x202 <__bad_interrupt>
      32:	00 00       	nop
      34:	e6 c0       	rjmp	.+460    	; 0x202 <__bad_interrupt>
      36:	00 00       	nop
      38:	e4 c0       	rjmp	.+456    	; 0x202 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e2 c0       	rjmp	.+452    	; 0x202 <__bad_interrupt>
      3e:	00 00       	nop
      40:	e0 c0       	rjmp	.+448    	; 0x202 <__bad_interrupt>
      42:	00 00       	nop
      44:	de c0       	rjmp	.+444    	; 0x202 <__bad_interrupt>
      46:	00 00       	nop
      48:	dc c0       	rjmp	.+440    	; 0x202 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	da c0       	rjmp	.+436    	; 0x202 <__bad_interrupt>
      4e:	00 00       	nop
      50:	d8 c0       	rjmp	.+432    	; 0x202 <__bad_interrupt>
      52:	00 00       	nop
      54:	d6 c0       	rjmp	.+428    	; 0x202 <__bad_interrupt>
      56:	00 00       	nop
      58:	d4 c0       	rjmp	.+424    	; 0x202 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d2 c0       	rjmp	.+420    	; 0x202 <__bad_interrupt>
      5e:	00 00       	nop
      60:	d0 c0       	rjmp	.+416    	; 0x202 <__bad_interrupt>
      62:	00 00       	nop
      64:	ce c0       	rjmp	.+412    	; 0x202 <__bad_interrupt>
      66:	00 00       	nop
      68:	cc c0       	rjmp	.+408    	; 0x202 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ca c0       	rjmp	.+404    	; 0x202 <__bad_interrupt>
      6e:	00 00       	nop
      70:	c8 c0       	rjmp	.+400    	; 0x202 <__bad_interrupt>
      72:	00 00       	nop
      74:	c6 c0       	rjmp	.+396    	; 0x202 <__bad_interrupt>
      76:	00 00       	nop
      78:	c4 c0       	rjmp	.+392    	; 0x202 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c2 c0       	rjmp	.+388    	; 0x202 <__bad_interrupt>
      7e:	00 00       	nop
      80:	c0 c0       	rjmp	.+384    	; 0x202 <__bad_interrupt>
      82:	00 00       	nop
      84:	be c0       	rjmp	.+380    	; 0x202 <__bad_interrupt>
      86:	00 00       	nop
      88:	bc c0       	rjmp	.+376    	; 0x202 <__bad_interrupt>
	...

0000008c <LcdCustomChar>:
      8c:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      9c:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      ac:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      bc:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................
      cc:	00 40 7a 10 f3 5a 00 a0 72 4e 18 09 00 10 a5 d4     .@z..Z..rN......
      dc:	e8 00 00 e8 76 48 17 00 00 e4 0b 54 02 00 00 ca     ....vH.....T....
      ec:	9a 3b 00 00 00 e1 f5 05 00 00 80 96 98 00 00 00     .;..............
      fc:	40 42 0f 00 00 00 a0 86 01 00 00 00 10 27 00 00     @B...........'..
     10c:	00 00 e8 03 00 00 00 00 64 00 00 00 00 00 0a 00     ........d.......
     11c:	00 00 00 00 01 00 00 00 00 00 2c 76 d8 88 dc 67     ..........,v...g
     12c:	4f 08 23 df c1 df ae 59 e1 b1 b7 96 e5 e3 e4 53     O.#....Y.......S
     13c:	c6 3a e6 51 99 76 96 e8 e6 c2 84 26 eb 89 8c 9b     .:.Q.v.....&....
     14c:	62 ed 40 7c 6f fc ef bc 9c 9f 40 f2 ba a5 6f a5     b.@|o.....@...o.
     15c:	f4 90 05 5a 2a f7 5c 93 6b 6c f9 67 6d c1 1b fc     ...Z*.\.kl.gm...
     16c:	e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed 90 2e 03 00     ...G.. .........
     17c:	94 35 77 05 00 80 84 1e 08 00 00 20 4e 0a 00 00     .5w........ N...
     18c:	00 c8 0c 33 33 33 33 0f 98 6e 12 83 11 41 ef 8d     ...3333..n...A..
     19c:	21 14 89 3b e6 55 16 cf fe e6 db 18 d1 84 4b 38     !..;.U........K8
     1ac:	1b f7 7c 1d 90 1d a4 bb e4 24 20 32 84 72 5e 22     ..|......$ 2.r^"
     1bc:	81 00 c9 f1 24 ec a1 e5 3d 27                       ....$...='

000001c6 <__ctors_end>:
     1c6:	11 24       	eor	r1, r1
     1c8:	1f be       	out	0x3f, r1	; 63
     1ca:	cf ef       	ldi	r28, 0xFF	; 255
     1cc:	d0 e4       	ldi	r29, 0x40	; 64
     1ce:	de bf       	out	0x3e, r29	; 62
     1d0:	cd bf       	out	0x3d, r28	; 61

000001d2 <__do_copy_data>:
     1d2:	12 e0       	ldi	r17, 0x02	; 2
     1d4:	a0 e0       	ldi	r26, 0x00	; 0
     1d6:	b1 e0       	ldi	r27, 0x01	; 1
     1d8:	e2 ec       	ldi	r30, 0xC2	; 194
     1da:	fe e1       	ldi	r31, 0x1E	; 30
     1dc:	00 e0       	ldi	r16, 0x00	; 0
     1de:	0b bf       	out	0x3b, r16	; 59
     1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <__do_copy_data+0x14>
     1e2:	07 90       	elpm	r0, Z+
     1e4:	0d 92       	st	X+, r0
     1e6:	a4 35       	cpi	r26, 0x54	; 84
     1e8:	b1 07       	cpc	r27, r17
     1ea:	d9 f7       	brne	.-10     	; 0x1e2 <__do_copy_data+0x10>

000001ec <__do_clear_bss>:
     1ec:	22 e0       	ldi	r18, 0x02	; 2
     1ee:	a4 e5       	ldi	r26, 0x54	; 84
     1f0:	b2 e0       	ldi	r27, 0x02	; 2
     1f2:	01 c0       	rjmp	.+2      	; 0x1f6 <.do_clear_bss_start>

000001f4 <.do_clear_bss_loop>:
     1f4:	1d 92       	st	X+, r1

000001f6 <.do_clear_bss_start>:
     1f6:	a1 37       	cpi	r26, 0x71	; 113
     1f8:	b2 07       	cpc	r27, r18
     1fa:	e1 f7       	brne	.-8      	; 0x1f4 <.do_clear_bss_loop>
     1fc:	f1 d4       	rcall	.+2530   	; 0xbe0 <main>
     1fe:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <_exit>

00000202 <__bad_interrupt>:
     202:	fe ce       	rjmp	.-516    	; 0x0 <__vectors>

00000204 <LCDsendChar>:
{
	LCDsendCommand(0x0E);
}
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     204:	88 b9       	out	0x08, r24	; 8
     206:	5f 9a       	sbi	0x0b, 7	; 11
     208:	5d 9a       	sbi	0x0b, 5	; 11
     20a:	89 ef       	ldi	r24, 0xF9	; 249
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	01 97       	sbiw	r24, 0x01	; 1
     210:	f1 f7       	brne	.-4      	; 0x20e <LCDsendChar+0xa>
     212:	00 c0       	rjmp	.+0      	; 0x214 <LCDsendChar+0x10>
     214:	00 00       	nop
     216:	5d 98       	cbi	0x0b, 5	; 11
     218:	5f 98       	cbi	0x0b, 7	; 11
     21a:	89 ef       	ldi	r24, 0xF9	; 249
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	01 97       	sbiw	r24, 0x01	; 1
     220:	f1 f7       	brne	.-4      	; 0x21e <LCDsendChar+0x1a>
     222:	00 c0       	rjmp	.+0      	; 0x224 <LCDsendChar+0x20>
     224:	00 00       	nop
     226:	08 95       	ret

00000228 <LCDsendCommand>:
     228:	88 b9       	out	0x08, r24	; 8
     22a:	5d 9a       	sbi	0x0b, 5	; 11
     22c:	89 ef       	ldi	r24, 0xF9	; 249
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	01 97       	sbiw	r24, 0x01	; 1
     232:	f1 f7       	brne	.-4      	; 0x230 <LCDsendCommand+0x8>
     234:	00 c0       	rjmp	.+0      	; 0x236 <LCDsendCommand+0xe>
     236:	00 00       	nop
     238:	5d 98       	cbi	0x0b, 5	; 11
     23a:	89 ef       	ldi	r24, 0xF9	; 249
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	01 97       	sbiw	r24, 0x01	; 1
     240:	f1 f7       	brne	.-4      	; 0x23e <LCDsendCommand+0x16>
     242:	00 c0       	rjmp	.+0      	; 0x244 <LCDsendCommand+0x1c>
     244:	00 00       	nop
     246:	08 95       	ret

00000248 <LCDclr>:
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	ee cf       	rjmp	.-36     	; 0x228 <LCDsendCommand>

0000024c <LCDhome>:
     24c:	82 e0       	ldi	r24, 0x02	; 2
     24e:	ec cf       	rjmp	.-40     	; 0x228 <LCDsendCommand>

00000250 <LCDstring>:
     250:	0f 93       	push	r16
     252:	1f 93       	push	r17
     254:	cf 93       	push	r28
     256:	df 93       	push	r29
     258:	00 97       	sbiw	r24, 0x00	; 0
     25a:	71 f0       	breq	.+28     	; 0x278 <LCDstring+0x28>
     25c:	66 23       	and	r22, r22
     25e:	61 f0       	breq	.+24     	; 0x278 <LCDstring+0x28>
     260:	ec 01       	movw	r28, r24
     262:	8c 01       	movw	r16, r24
     264:	0f 5f       	subi	r16, 0xFF	; 255
     266:	1f 4f       	sbci	r17, 0xFF	; 255
     268:	61 50       	subi	r22, 0x01	; 1
     26a:	06 0f       	add	r16, r22
     26c:	11 1d       	adc	r17, r1
     26e:	89 91       	ld	r24, Y+
     270:	c9 df       	rcall	.-110    	; 0x204 <LCDsendChar>
     272:	c0 17       	cp	r28, r16
     274:	d1 07       	cpc	r29, r17
     276:	d9 f7       	brne	.-10     	; 0x26e <LCDstring+0x1e>
     278:	df 91       	pop	r29
     27a:	cf 91       	pop	r28
     27c:	1f 91       	pop	r17
     27e:	0f 91       	pop	r16
     280:	08 95       	ret

00000282 <LCDGotoXY>:
     282:	62 30       	cpi	r22, 0x02	; 2
     284:	31 f0       	breq	.+12     	; 0x292 <LCDGotoXY+0x10>
     286:	63 30       	cpi	r22, 0x03	; 3
     288:	31 f0       	breq	.+12     	; 0x296 <LCDGotoXY+0x14>
     28a:	61 30       	cpi	r22, 0x01	; 1
     28c:	29 f4       	brne	.+10     	; 0x298 <LCDGotoXY+0x16>
     28e:	80 5c       	subi	r24, 0xC0	; 192
     290:	03 c0       	rjmp	.+6      	; 0x298 <LCDGotoXY+0x16>
     292:	8c 5e       	subi	r24, 0xEC	; 236
     294:	01 c0       	rjmp	.+2      	; 0x298 <LCDGotoXY+0x16>
     296:	8c 5a       	subi	r24, 0xAC	; 172
     298:	80 68       	ori	r24, 0x80	; 128
     29a:	c6 cf       	rjmp	.-116    	; 0x228 <LCDsendCommand>

0000029c <LCDdefinechar>:
     29c:	ef 92       	push	r14
     29e:	ff 92       	push	r15
     2a0:	0f 93       	push	r16
     2a2:	1f 93       	push	r17
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
     2a8:	8c 01       	movw	r16, r24
     2aa:	66 0f       	add	r22, r22
     2ac:	66 0f       	add	r22, r22
     2ae:	66 0f       	add	r22, r22
     2b0:	68 94       	set
     2b2:	ee 24       	eor	r14, r14
     2b4:	e6 f8       	bld	r14, 6
     2b6:	e6 2a       	or	r14, r22
     2b8:	c0 e0       	ldi	r28, 0x00	; 0
     2ba:	d0 e0       	ldi	r29, 0x00	; 0
     2bc:	f8 01       	movw	r30, r16
     2be:	ec 0f       	add	r30, r28
     2c0:	fd 1f       	adc	r31, r29
     2c2:	f4 90       	lpm	r15, Z
     2c4:	8c 2f       	mov	r24, r28
     2c6:	8e 0d       	add	r24, r14
     2c8:	af df       	rcall	.-162    	; 0x228 <LCDsendCommand>
     2ca:	8f 2d       	mov	r24, r15
     2cc:	9b df       	rcall	.-202    	; 0x204 <LCDsendChar>
     2ce:	21 96       	adiw	r28, 0x01	; 1
     2d0:	c8 30       	cpi	r28, 0x08	; 8
     2d2:	d1 05       	cpc	r29, r1
     2d4:	99 f7       	brne	.-26     	; 0x2bc <LCDdefinechar+0x20>
     2d6:	df 91       	pop	r29
     2d8:	cf 91       	pop	r28
     2da:	1f 91       	pop	r17
     2dc:	0f 91       	pop	r16
     2de:	ff 90       	pop	r15
     2e0:	ef 90       	pop	r14
     2e2:	08 95       	ret

000002e4 <LCDinit>:
     2e4:	1f 93       	push	r17
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	85 ea       	ldi	r24, 0xA5	; 165
     2ec:	9e e0       	ldi	r25, 0x0E	; 14
     2ee:	01 97       	sbiw	r24, 0x01	; 1
     2f0:	f1 f7       	brne	.-4      	; 0x2ee <LCDinit+0xa>
     2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <LCDinit+0x10>
     2f4:	00 00       	nop
     2f6:	18 b8       	out	0x08, r1	; 8
     2f8:	1b b8       	out	0x0b, r1	; 11
     2fa:	87 b1       	in	r24, 0x07	; 7
     2fc:	8f ef       	ldi	r24, 0xFF	; 255
     2fe:	87 b9       	out	0x07, r24	; 7
     300:	8a b1       	in	r24, 0x0a	; 10
     302:	80 6e       	ori	r24, 0xE0	; 224
     304:	8a b9       	out	0x0a, r24	; 10
     306:	80 e3       	ldi	r24, 0x30	; 48
     308:	88 b9       	out	0x08, r24	; 8
     30a:	5d 9a       	sbi	0x0b, 5	; 11
     30c:	e9 ef       	ldi	r30, 0xF9	; 249
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	31 97       	sbiw	r30, 0x01	; 1
     312:	f1 f7       	brne	.-4      	; 0x310 <LCDinit+0x2c>
     314:	00 c0       	rjmp	.+0      	; 0x316 <LCDinit+0x32>
     316:	00 00       	nop
     318:	5d 98       	cbi	0x0b, 5	; 11
     31a:	e9 ef       	ldi	r30, 0xF9	; 249
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	31 97       	sbiw	r30, 0x01	; 1
     320:	f1 f7       	brne	.-4      	; 0x31e <LCDinit+0x3a>
     322:	00 c0       	rjmp	.+0      	; 0x324 <LCDinit+0x40>
     324:	00 00       	nop
     326:	88 b9       	out	0x08, r24	; 8
     328:	5d 9a       	sbi	0x0b, 5	; 11
     32a:	e9 ef       	ldi	r30, 0xF9	; 249
     32c:	f0 e0       	ldi	r31, 0x00	; 0
     32e:	31 97       	sbiw	r30, 0x01	; 1
     330:	f1 f7       	brne	.-4      	; 0x32e <LCDinit+0x4a>
     332:	00 c0       	rjmp	.+0      	; 0x334 <LCDinit+0x50>
     334:	00 00       	nop
     336:	5d 98       	cbi	0x0b, 5	; 11
     338:	e9 ef       	ldi	r30, 0xF9	; 249
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	31 97       	sbiw	r30, 0x01	; 1
     33e:	f1 f7       	brne	.-4      	; 0x33c <LCDinit+0x58>
     340:	00 c0       	rjmp	.+0      	; 0x342 <LCDinit+0x5e>
     342:	00 00       	nop
     344:	88 b9       	out	0x08, r24	; 8
     346:	5d 9a       	sbi	0x0b, 5	; 11
     348:	89 ef       	ldi	r24, 0xF9	; 249
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	01 97       	sbiw	r24, 0x01	; 1
     34e:	f1 f7       	brne	.-4      	; 0x34c <LCDinit+0x68>
     350:	00 c0       	rjmp	.+0      	; 0x352 <LCDinit+0x6e>
     352:	00 00       	nop
     354:	5d 98       	cbi	0x0b, 5	; 11
     356:	e9 ef       	ldi	r30, 0xF9	; 249
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	31 97       	sbiw	r30, 0x01	; 1
     35c:	f1 f7       	brne	.-4      	; 0x35a <LCDinit+0x76>
     35e:	00 c0       	rjmp	.+0      	; 0x360 <LCDinit+0x7c>
     360:	00 00       	nop
     362:	88 e3       	ldi	r24, 0x38	; 56
     364:	88 b9       	out	0x08, r24	; 8
     366:	5d 9a       	sbi	0x0b, 5	; 11
     368:	89 ef       	ldi	r24, 0xF9	; 249
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	01 97       	sbiw	r24, 0x01	; 1
     36e:	f1 f7       	brne	.-4      	; 0x36c <LCDinit+0x88>
     370:	00 c0       	rjmp	.+0      	; 0x372 <LCDinit+0x8e>
     372:	00 00       	nop
     374:	5d 98       	cbi	0x0b, 5	; 11
     376:	e9 ef       	ldi	r30, 0xF9	; 249
     378:	f0 e0       	ldi	r31, 0x00	; 0
     37a:	31 97       	sbiw	r30, 0x01	; 1
     37c:	f1 f7       	brne	.-4      	; 0x37a <LCDinit+0x96>
     37e:	00 c0       	rjmp	.+0      	; 0x380 <LCDinit+0x9c>
     380:	00 00       	nop
     382:	8c e0       	ldi	r24, 0x0C	; 12
     384:	88 b9       	out	0x08, r24	; 8
     386:	5d 9a       	sbi	0x0b, 5	; 11
     388:	89 ef       	ldi	r24, 0xF9	; 249
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	01 97       	sbiw	r24, 0x01	; 1
     38e:	f1 f7       	brne	.-4      	; 0x38c <LCDinit+0xa8>
     390:	00 c0       	rjmp	.+0      	; 0x392 <LCDinit+0xae>
     392:	00 00       	nop
     394:	5d 98       	cbi	0x0b, 5	; 11
     396:	e1 ee       	ldi	r30, 0xE1	; 225
     398:	f4 e0       	ldi	r31, 0x04	; 4
     39a:	31 97       	sbiw	r30, 0x01	; 1
     39c:	f1 f7       	brne	.-4      	; 0x39a <LCDinit+0xb6>
     39e:	00 c0       	rjmp	.+0      	; 0x3a0 <LCDinit+0xbc>
     3a0:	00 00       	nop
     3a2:	cc e8       	ldi	r28, 0x8C	; 140
     3a4:	d0 e0       	ldi	r29, 0x00	; 0
     3a6:	60 e0       	ldi	r22, 0x00	; 0
     3a8:	16 2f       	mov	r17, r22
     3aa:	1f 5f       	subi	r17, 0xFF	; 255
     3ac:	ce 01       	movw	r24, r28
     3ae:	76 df       	rcall	.-276    	; 0x29c <LCDdefinechar>
     3b0:	28 96       	adiw	r28, 0x08	; 8
     3b2:	61 2f       	mov	r22, r17
     3b4:	18 30       	cpi	r17, 0x08	; 8
     3b6:	c1 f7       	brne	.-16     	; 0x3a8 <LCDinit+0xc4>
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	1f 91       	pop	r17
     3be:	08 95       	ret

000003c0 <LCDcursorOFF>:
}
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     3c0:	8c e0       	ldi	r24, 0x0C	; 12
     3c2:	32 cf       	rjmp	.-412    	; 0x228 <LCDsendCommand>

000003c4 <UART_0_Init>:
#include <util/delay.h>
#include "UART_0.h"

void UART_0_Init()
{
	UBRR0H = (unsigned char) (((F_CPU/(BAUD*16UL))-1)>>8) ;
     3c4:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char) (F_CPU/(BAUD*16UL))-1;
     3c8:	83 e3       	ldi	r24, 0x33	; 51
     3ca:	80 93 c4 00 	sts	0x00C4, r24
	
	UCSR0A=0x00;
     3ce:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B=0x00;
     3d2:	e1 ec       	ldi	r30, 0xC1	; 193
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	10 82       	st	Z, r1

	UCSR0C=0b10000110;
     3d8:	86 e8       	ldi	r24, 0x86	; 134
     3da:	80 93 c2 00 	sts	0x00C2, r24
	// Set frame format: asynchronous, 8data, no parity, 1 stop bit

	UCSR0B=0x18;
     3de:	88 e1       	ldi	r24, 0x18	; 24
     3e0:	80 83       	st	Z, r24
     3e2:	08 95       	ret

000003e4 <UART_0_Putc>:
	
}
void UART_0_Putc(unsigned char data)
{

	while ( !(UCSR0A & (1<<UDRE0)) );  /* Wait for empty transmit buffer */
     3e4:	e0 ec       	ldi	r30, 0xC0	; 192
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	90 81       	ld	r25, Z
     3ea:	95 ff       	sbrs	r25, 5
     3ec:	fd cf       	rjmp	.-6      	; 0x3e8 <UART_0_Putc+0x4>

	UDR0 = data;         /* Start transmition */
     3ee:	80 93 c6 00 	sts	0x00C6, r24
     3f2:	08 95       	ret

000003f4 <UART_1_Init>:
#include <util/delay.h>
#include "UART_1.h"

void UART_1_Init()
{
	UBRR1H = (unsigned char) (((F_CPU/(BAUD*16UL))-1)>>8) ;
     3f4:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = (unsigned char) (F_CPU/(BAUD*16UL))-1;
     3f8:	83 e3       	ldi	r24, 0x33	; 51
     3fa:	80 93 cc 00 	sts	0x00CC, r24
	
	UCSR1A=0x00;
     3fe:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1B=0x00;
     402:	e9 ec       	ldi	r30, 0xC9	; 201
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	10 82       	st	Z, r1

	UCSR1C=0b10000110;
     408:	86 e8       	ldi	r24, 0x86	; 134
     40a:	80 93 ca 00 	sts	0x00CA, r24
	// Set frame format: asynchronous, 8data, no parity, 1 stop bit

	UCSR1B=0x18;
     40e:	88 e1       	ldi	r24, 0x18	; 24
     410:	80 83       	st	Z, r24
     412:	08 95       	ret

00000414 <UART_1_Putc>:
	
}
void UART_1_Putc(unsigned char data)
{

	while ( !(UCSR1A & (1<<UDRE1)) );  /* Wait for empty transmit buffer */
     414:	e8 ec       	ldi	r30, 0xC8	; 200
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	90 81       	ld	r25, Z
     41a:	95 ff       	sbrs	r25, 5
     41c:	fd cf       	rjmp	.-6      	; 0x418 <UART_1_Putc+0x4>

	UDR1 = data;         /* Start transmition */
     41e:	80 93 ce 00 	sts	0x00CE, r24
     422:	08 95       	ret

00000424 <UART_1_Puts>:

}
void UART_1_Puts(char *str)
{
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	ec 01       	movw	r28, r24
	
	while( *str != '\0' ){
     42a:	88 81       	ld	r24, Y
     42c:	88 23       	and	r24, r24
     42e:	29 f0       	breq	.+10     	; 0x43a <UART_1_Puts+0x16>
	while ( !(UCSR1A & (1<<UDRE1)) );  /* Wait for empty transmit buffer */

	UDR1 = data;         /* Start transmition */

}
void UART_1_Puts(char *str)
     430:	21 96       	adiw	r28, 0x01	; 1
{
	
	while( *str != '\0' ){
		
		UART_1_Putc( *str++ );
     432:	f0 df       	rcall	.-32     	; 0x414 <UART_1_Putc>

}
void UART_1_Puts(char *str)
{
	
	while( *str != '\0' ){
     434:	89 91       	ld	r24, Y+
     436:	81 11       	cpse	r24, r1
     438:	fc cf       	rjmp	.-8      	; 0x432 <UART_1_Puts+0xe>
		
		UART_1_Putc( *str++ );
	}
}
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	08 95       	ret

00000440 <Init_ADC>:
}

void Init_ADC()
{
	//Pre-scalar /8, Interrupt Disable, Auto Trigger off
	ADCSRA = 0b10000111;
     440:	87 e8       	ldi	r24, 0x87	; 135
     442:	80 93 7a 00 	sts	0x007A, r24
	//ADC-0
	ADMUX  = 0b01000000;
     446:	80 e4       	ldi	r24, 0x40	; 64
     448:	80 93 7c 00 	sts	0x007C, r24
     44c:	08 95       	ret

0000044e <Input_Current>:
}

double Input_Current()
{
     44e:	af 92       	push	r10
     450:	bf 92       	push	r11
     452:	cf 92       	push	r12
     454:	df 92       	push	r13
     456:	ef 92       	push	r14
     458:	ff 92       	push	r15
     45a:	0f 93       	push	r16
     45c:	1f 93       	push	r17
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
     466:	c8 5c       	subi	r28, 0xC8	; 200
     468:	d1 09       	sbc	r29, r1
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	f8 94       	cli
     46e:	de bf       	out	0x3e, r29	; 62
     470:	0f be       	out	0x3f, r0	; 63
     472:	cd bf       	out	0x3d, r28	; 61
     474:	be 01       	movw	r22, r28
     476:	6f 5f       	subi	r22, 0xFF	; 255
     478:	7f 4f       	sbci	r23, 0xFF	; 255
	ADCSRA = 0b10000111;
	//ADC-0
	ADMUX  = 0b01000000;
}

double Input_Current()
     47a:	6b 01       	movw	r12, r22
     47c:	ae 01       	movw	r20, r28
     47e:	47 53       	subi	r20, 0x37	; 55
     480:	5f 4f       	sbci	r21, 0xFF	; 255
	uint16_t filter_array[100],t;
	
	for (i=0;i<100;i++)
	{
		_delay_us(50);
		ADCSRA |= (1<<ADSC);
     482:	ea e7       	ldi	r30, 0x7A	; 122
     484:	f0 e0       	ldi	r31, 0x00	; 0
		while(!(ADCSRA & (1<<ADIF)));
		ADCSRA|=(1<<ADIF);
		filter_array[i] = ADC;
     486:	28 e7       	ldi	r18, 0x78	; 120
     488:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     48a:	85 e8       	ldi	r24, 0x85	; 133
     48c:	8a 95       	dec	r24
     48e:	f1 f7       	brne	.-4      	; 0x48c <Input_Current+0x3e>
     490:	00 00       	nop
	uint16_t filter_array[100],t;
	
	for (i=0;i<100;i++)
	{
		_delay_us(50);
		ADCSRA |= (1<<ADSC);
     492:	80 81       	ld	r24, Z
     494:	80 64       	ori	r24, 0x40	; 64
     496:	80 83       	st	Z, r24
		while(!(ADCSRA & (1<<ADIF)));
     498:	80 81       	ld	r24, Z
     49a:	84 ff       	sbrs	r24, 4
     49c:	fd cf       	rjmp	.-6      	; 0x498 <Input_Current+0x4a>
		ADCSRA|=(1<<ADIF);
     49e:	80 81       	ld	r24, Z
     4a0:	80 61       	ori	r24, 0x10	; 16
     4a2:	80 83       	st	Z, r24
		filter_array[i] = ADC;
     4a4:	d9 01       	movw	r26, r18
     4a6:	8d 91       	ld	r24, X+
     4a8:	9c 91       	ld	r25, X
     4aa:	db 01       	movw	r26, r22
     4ac:	8d 93       	st	X+, r24
     4ae:	9d 93       	st	X+, r25
     4b0:	bd 01       	movw	r22, r26
double Input_Current()
{
	uint8_t i=0,j=0;
	uint16_t filter_array[100],t;
	
	for (i=0;i<100;i++)
     4b2:	a4 17       	cp	r26, r20
     4b4:	b5 07       	cpc	r27, r21
     4b6:	49 f7       	brne	.-46     	; 0x48a <Input_Current+0x3c>
     4b8:	03 e6       	ldi	r16, 0x63	; 99
     4ba:	10 e0       	ldi	r17, 0x00	; 0
		filter_array[i] = ADC;
	}
	
	for(i=1;i<100;i++)
	{
		for(j=0;j<100-i;j++)
     4bc:	e1 2c       	mov	r14, r1
     4be:	f1 2c       	mov	r15, r1
     4c0:	a1 2c       	mov	r10, r1
     4c2:	39 c0       	rjmp	.+114    	; 0x536 <Input_Current+0xe8>
     4c4:	c7 01       	movw	r24, r14
     4c6:	ba 2c       	mov	r11, r10
		{
			if(filter_array[j]>=filter_array[j+1])
     4c8:	fc 01       	movw	r30, r24
     4ca:	ee 0f       	add	r30, r30
     4cc:	ff 1f       	adc	r31, r31
     4ce:	21 e0       	ldi	r18, 0x01	; 1
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	2c 0f       	add	r18, r28
     4d4:	3d 1f       	adc	r19, r29
     4d6:	e2 0f       	add	r30, r18
     4d8:	f3 1f       	adc	r31, r19
     4da:	20 81       	ld	r18, Z
     4dc:	31 81       	ldd	r19, Z+1	; 0x01
     4de:	ac 01       	movw	r20, r24
     4e0:	4f 5f       	subi	r20, 0xFF	; 255
     4e2:	5f 4f       	sbci	r21, 0xFF	; 255
     4e4:	fa 01       	movw	r30, r20
     4e6:	ee 0f       	add	r30, r30
     4e8:	ff 1f       	adc	r31, r31
     4ea:	61 e0       	ldi	r22, 0x01	; 1
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	6c 0f       	add	r22, r28
     4f0:	7d 1f       	adc	r23, r29
     4f2:	e6 0f       	add	r30, r22
     4f4:	f7 1f       	adc	r31, r23
     4f6:	60 81       	ld	r22, Z
     4f8:	71 81       	ldd	r23, Z+1	; 0x01
     4fa:	26 17       	cp	r18, r22
     4fc:	37 07       	cpc	r19, r23
     4fe:	90 f0       	brcs	.+36     	; 0x524 <Input_Current+0xd6>
			{
				t=filter_array[j];
				filter_array[j]=filter_array[j+1];
     500:	fc 01       	movw	r30, r24
     502:	ee 0f       	add	r30, r30
     504:	ff 1f       	adc	r31, r31
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	8c 0f       	add	r24, r28
     50c:	9d 1f       	adc	r25, r29
     50e:	e8 0f       	add	r30, r24
     510:	f9 1f       	adc	r31, r25
     512:	71 83       	std	Z+1, r23	; 0x01
     514:	60 83       	st	Z, r22
				filter_array[j+1]=t;
     516:	fa 01       	movw	r30, r20
     518:	ee 0f       	add	r30, r30
     51a:	ff 1f       	adc	r31, r31
     51c:	e8 0f       	add	r30, r24
     51e:	f9 1f       	adc	r31, r25
     520:	31 83       	std	Z+1, r19	; 0x01
     522:	20 83       	st	Z, r18
		filter_array[i] = ADC;
	}
	
	for(i=1;i<100;i++)
	{
		for(j=0;j<100-i;j++)
     524:	b3 94       	inc	r11
     526:	8b 2d       	mov	r24, r11
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	8a 17       	cp	r24, r26
     52c:	9b 07       	cpc	r25, r27
     52e:	64 f2       	brlt	.-104    	; 0x4c8 <Input_Current+0x7a>
     530:	01 50       	subi	r16, 0x01	; 1
     532:	11 09       	sbc	r17, r1
		while(!(ADCSRA & (1<<ADIF)));
		ADCSRA|=(1<<ADIF);
		filter_array[i] = ADC;
	}
	
	for(i=1;i<100;i++)
     534:	29 f0       	breq	.+10     	; 0x540 <Input_Current+0xf2>
	{
		for(j=0;j<100-i;j++)
     536:	d8 01       	movw	r26, r16
     538:	10 16       	cp	r1, r16
     53a:	11 06       	cpc	r1, r17
     53c:	1c f2       	brlt	.-122    	; 0x4c4 <Input_Current+0x76>
     53e:	f8 cf       	rjmp	.-16     	; 0x530 <Input_Current+0xe2>
     540:	fe 01       	movw	r30, r28
     542:	e5 5a       	subi	r30, 0xA5	; 165
     544:	ff 4f       	sbci	r31, 0xFF	; 255
	ADCSRA = 0b10000111;
	//ADC-0
	ADMUX  = 0b01000000;
}

double Input_Current()
     546:	9c e6       	ldi	r25, 0x6C	; 108
     548:	c9 0e       	add	r12, r25
     54a:	d1 1c       	adc	r13, r1
     54c:	60 e0       	ldi	r22, 0x00	; 0
     54e:	70 e0       	ldi	r23, 0x00	; 0
	}
	
	int sum=0;
	for (uint8_t count=45;count<54;count++)
	{
		sum=sum+filter_array[count];
     550:	81 91       	ld	r24, Z+
     552:	91 91       	ld	r25, Z+
     554:	68 0f       	add	r22, r24
     556:	79 1f       	adc	r23, r25
			}
		}
	}
	
	int sum=0;
	for (uint8_t count=45;count<54;count++)
     558:	ec 15       	cp	r30, r12
     55a:	fd 05       	cpc	r31, r13
     55c:	c9 f7       	brne	.-14     	; 0x550 <Input_Current+0x102>
	{
		sum=sum+filter_array[count];
	}
	
	double result = (((double)sum/10)-459.0)/18.52;
     55e:	88 27       	eor	r24, r24
     560:	77 fd       	sbrc	r23, 7
     562:	80 95       	com	r24
     564:	98 2f       	mov	r25, r24
     566:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__floatsisf>
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	40 e2       	ldi	r20, 0x20	; 32
     570:	51 e4       	ldi	r21, 0x41	; 65
     572:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__divsf3>
     576:	20 e0       	ldi	r18, 0x00	; 0
     578:	30 e8       	ldi	r19, 0x80	; 128
     57a:	45 ee       	ldi	r20, 0xE5	; 229
     57c:	53 e4       	ldi	r21, 0x43	; 67
     57e:	7f d7       	rcall	.+3838   	; 0x147e <__subsf3>
     580:	26 ef       	ldi	r18, 0xF6	; 246
     582:	38 e2       	ldi	r19, 0x28	; 40
     584:	44 e9       	ldi	r20, 0x94	; 148
     586:	51 e4       	ldi	r21, 0x41	; 65
     588:	f6 d7       	rcall	.+4076   	; 0x1576 <__divsf3>
	//double result = ((double)sum/10);
	
	return result;
} 
     58a:	c8 53       	subi	r28, 0x38	; 56
     58c:	df 4f       	sbci	r29, 0xFF	; 255
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	f8 94       	cli
     592:	de bf       	out	0x3e, r29	; 62
     594:	0f be       	out	0x3f, r0	; 63
     596:	cd bf       	out	0x3d, r28	; 61
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	1f 91       	pop	r17
     59e:	0f 91       	pop	r16
     5a0:	ff 90       	pop	r15
     5a2:	ef 90       	pop	r14
     5a4:	df 90       	pop	r13
     5a6:	cf 90       	pop	r12
     5a8:	bf 90       	pop	r11
     5aa:	af 90       	pop	r10
     5ac:	08 95       	ret

000005ae <MPPT>:

double MPPT(double vdc, double idc, uint16_t FRQ, uint16_t FRQ_previous, double* del_i,double* del_v, double* del_i_v, uint8_t uv)
{
     5ae:	2f 92       	push	r2
     5b0:	3f 92       	push	r3
     5b2:	4f 92       	push	r4
     5b4:	5f 92       	push	r5
     5b6:	6f 92       	push	r6
     5b8:	7f 92       	push	r7
     5ba:	8f 92       	push	r8
     5bc:	9f 92       	push	r9
     5be:	af 92       	push	r10
     5c0:	bf 92       	push	r11
     5c2:	cf 92       	push	r12
     5c4:	df 92       	push	r13
     5c6:	ef 92       	push	r14
     5c8:	ff 92       	push	r15
     5ca:	0f 93       	push	r16
     5cc:	1f 93       	push	r17
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	cd b7       	in	r28, 0x3d	; 61
     5d4:	de b7       	in	r29, 0x3e	; 62
     5d6:	2a 97       	sbiw	r28, 0x0a	; 10
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	f8 94       	cli
     5dc:	de bf       	out	0x3e, r29	; 62
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	cd bf       	out	0x3d, r28	; 61
     5e2:	2b 01       	movw	r4, r22
     5e4:	3c 01       	movw	r6, r24
     5e6:	29 83       	std	Y+1, r18	; 0x01
     5e8:	3a 83       	std	Y+2, r19	; 0x02
     5ea:	4b 83       	std	Y+3, r20	; 0x03
     5ec:	5c 83       	std	Y+4, r21	; 0x04
     5ee:	17 01       	movw	r2, r14
     5f0:	de 82       	std	Y+6, r13	; 0x06
     5f2:	cd 82       	std	Y+5, r12	; 0x05
     5f4:	b8 86       	std	Y+8, r11	; 0x08
     5f6:	af 82       	std	Y+7, r10	; 0x07
     5f8:	9a 86       	std	Y+10, r9	; 0x0a
     5fa:	89 86       	std	Y+9, r8	; 0x09
	static double New_Frq=0.0;
	static double vdc0=0.0, idc0=0.0;
	
	static uint8_t perIncrement=0, immediateDecrement=1;
	
	if (Frequency_Update==0){
     5fc:	c0 90 00 01 	lds	r12, 0x0100
     600:	d0 90 01 01 	lds	r13, 0x0101
     604:	e0 90 02 01 	lds	r14, 0x0102
     608:	f0 90 03 01 	lds	r15, 0x0103
     60c:	20 e0       	ldi	r18, 0x00	; 0
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	a9 01       	movw	r20, r18
     612:	c7 01       	movw	r24, r14
     614:	b6 01       	movw	r22, r12
     616:	ab d7       	rcall	.+3926   	; 0x156e <__cmpsf2>
     618:	81 11       	cpse	r24, r1
     61a:	14 c0       	rjmp	.+40     	; 0x644 <MPPT+0x96>
		dv=vdc-vdc0;
     61c:	20 91 54 02 	lds	r18, 0x0254
     620:	30 91 55 02 	lds	r19, 0x0255
     624:	40 91 56 02 	lds	r20, 0x0256
     628:	50 91 57 02 	lds	r21, 0x0257
     62c:	c3 01       	movw	r24, r6
     62e:	b2 01       	movw	r22, r4
     630:	26 d7       	rcall	.+3660   	; 0x147e <__subsf3>
     632:	60 93 58 02 	sts	0x0258, r22
     636:	70 93 59 02 	sts	0x0259, r23
     63a:	80 93 5a 02 	sts	0x025A, r24
     63e:	90 93 5b 02 	sts	0x025B, r25
     642:	1e c0       	rjmp	.+60     	; 0x680 <MPPT+0xd2>
	}else {
		dv=vdc-vdc0 + dv;
     644:	20 91 54 02 	lds	r18, 0x0254
     648:	30 91 55 02 	lds	r19, 0x0255
     64c:	40 91 56 02 	lds	r20, 0x0256
     650:	50 91 57 02 	lds	r21, 0x0257
     654:	c3 01       	movw	r24, r6
     656:	b2 01       	movw	r22, r4
     658:	12 d7       	rcall	.+3620   	; 0x147e <__subsf3>
     65a:	9b 01       	movw	r18, r22
     65c:	ac 01       	movw	r20, r24
     65e:	60 91 58 02 	lds	r22, 0x0258
     662:	70 91 59 02 	lds	r23, 0x0259
     666:	80 91 5a 02 	lds	r24, 0x025A
     66a:	90 91 5b 02 	lds	r25, 0x025B
     66e:	08 d7       	rcall	.+3600   	; 0x1480 <__addsf3>
     670:	60 93 58 02 	sts	0x0258, r22
     674:	70 93 59 02 	sts	0x0259, r23
     678:	80 93 5a 02 	sts	0x025A, r24
     67c:	90 93 5b 02 	sts	0x025B, r25
	}
	
	di=idc-idc0;
     680:	20 91 5c 02 	lds	r18, 0x025C
     684:	30 91 5d 02 	lds	r19, 0x025D
     688:	40 91 5e 02 	lds	r20, 0x025E
     68c:	50 91 5f 02 	lds	r21, 0x025F
     690:	69 81       	ldd	r22, Y+1	; 0x01
     692:	7a 81       	ldd	r23, Y+2	; 0x02
     694:	8b 81       	ldd	r24, Y+3	; 0x03
     696:	9c 81       	ldd	r25, Y+4	; 0x04
     698:	f2 d6       	rcall	.+3556   	; 0x147e <__subsf3>
     69a:	86 2e       	mov	r8, r22
     69c:	97 2e       	mov	r9, r23
     69e:	a8 2e       	mov	r10, r24
     6a0:	b9 2e       	mov	r11, r25
     6a2:	86 2f       	mov	r24, r22
     6a4:	99 2d       	mov	r25, r9
     6a6:	aa 2d       	mov	r26, r10
     6a8:	bb 2d       	mov	r27, r11
     6aa:	80 93 60 02 	sts	0x0260, r24
     6ae:	90 93 61 02 	sts	0x0261, r25
     6b2:	a0 93 62 02 	sts	0x0262, r26
     6b6:	b0 93 63 02 	sts	0x0263, r27
	
	Frequency_Update++;
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	40 e8       	ldi	r20, 0x80	; 128
     6c0:	5f e3       	ldi	r21, 0x3F	; 63
     6c2:	c7 01       	movw	r24, r14
     6c4:	b6 01       	movw	r22, r12
     6c6:	dc d6       	rcall	.+3512   	; 0x1480 <__addsf3>
     6c8:	60 93 00 01 	sts	0x0100, r22
     6cc:	70 93 01 01 	sts	0x0101, r23
     6d0:	80 93 02 01 	sts	0x0102, r24
     6d4:	90 93 03 01 	sts	0x0103, r25
	
	if (FRQ>FRQ_previous && dv>0){
     6d8:	20 16       	cp	r2, r16
     6da:	31 06       	cpc	r3, r17
     6dc:	80 f4       	brcc	.+32     	; 0x6fe <MPPT+0x150>
     6de:	20 e0       	ldi	r18, 0x00	; 0
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	a9 01       	movw	r20, r18
     6e4:	60 91 58 02 	lds	r22, 0x0258
     6e8:	70 91 59 02 	lds	r23, 0x0259
     6ec:	80 91 5a 02 	lds	r24, 0x025A
     6f0:	90 91 5b 02 	lds	r25, 0x025B
     6f4:	0e 94 41 0c 	call	0x1882	; 0x1882 <__gesf2>
     6f8:	18 16       	cp	r1, r24
     6fa:	0c f4       	brge	.+2      	; 0x6fe <MPPT+0x150>
     6fc:	ec c0       	rjmp	.+472    	; 0x8d6 <MPPT+0x328>
		//vg noise - if I increase freq, voltage should decrease; so do nothing
	}else {
		if (dv/vdc<-0.1 && immediateDecrement==1){
     6fe:	a3 01       	movw	r20, r6
     700:	92 01       	movw	r18, r4
     702:	60 91 58 02 	lds	r22, 0x0258
     706:	70 91 59 02 	lds	r23, 0x0259
     70a:	80 91 5a 02 	lds	r24, 0x025A
     70e:	90 91 5b 02 	lds	r25, 0x025B
     712:	31 d7       	rcall	.+3682   	; 0x1576 <__divsf3>
     714:	c6 2e       	mov	r12, r22
     716:	d7 2e       	mov	r13, r23
     718:	e8 2e       	mov	r14, r24
     71a:	f9 2e       	mov	r15, r25
     71c:	2d ec       	ldi	r18, 0xCD	; 205
     71e:	3c ec       	ldi	r19, 0xCC	; 204
     720:	4c ec       	ldi	r20, 0xCC	; 204
     722:	5d eb       	ldi	r21, 0xBD	; 189
     724:	24 d7       	rcall	.+3656   	; 0x156e <__cmpsf2>
     726:	88 23       	and	r24, r24
     728:	14 f5       	brge	.+68     	; 0x76e <MPPT+0x1c0>
     72a:	80 91 04 01 	lds	r24, 0x0104
     72e:	81 30       	cpi	r24, 0x01	; 1
     730:	f1 f4       	brne	.+60     	; 0x76e <MPPT+0x1c0>
			New_Frq = 0.009*(double)FRQ;
     732:	b8 01       	movw	r22, r16
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	b2 d7       	rcall	.+3940   	; 0x169e <__floatunsisf>
     73a:	2c eb       	ldi	r18, 0xBC	; 188
     73c:	34 e7       	ldi	r19, 0x74	; 116
     73e:	43 e1       	ldi	r20, 0x13	; 19
     740:	5c e3       	ldi	r21, 0x3C	; 60
     742:	0e 94 45 0c 	call	0x188a	; 0x188a <__mulsf3>
     746:	60 93 64 02 	sts	0x0264, r22
     74a:	70 93 65 02 	sts	0x0265, r23
     74e:	80 93 66 02 	sts	0x0266, r24
     752:	90 93 67 02 	sts	0x0267, r25
			perIncrement=0;
     756:	10 92 68 02 	sts	0x0268, r1
			Frequency_Update=0;
     75a:	10 92 00 01 	sts	0x0100, r1
     75e:	10 92 01 01 	sts	0x0101, r1
     762:	10 92 02 01 	sts	0x0102, r1
     766:	10 92 03 01 	sts	0x0103, r1
			immediateDecrement=0;
     76a:	10 92 04 01 	sts	0x0104, r1
		}
		if (dv/vdc<-0.02 && (Frequency_Update>2 || perIncrement>=1)){
     76e:	2a e0       	ldi	r18, 0x0A	; 10
     770:	37 ed       	ldi	r19, 0xD7	; 215
     772:	43 ea       	ldi	r20, 0xA3	; 163
     774:	5c eb       	ldi	r21, 0xBC	; 188
     776:	6c 2d       	mov	r22, r12
     778:	7d 2d       	mov	r23, r13
     77a:	8e 2d       	mov	r24, r14
     77c:	9f 2d       	mov	r25, r15
     77e:	f7 d6       	rcall	.+3566   	; 0x156e <__cmpsf2>
     780:	88 23       	and	r24, r24
     782:	9c f5       	brge	.+102    	; 0x7ea <MPPT+0x23c>
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	40 e0       	ldi	r20, 0x00	; 0
     78a:	50 e4       	ldi	r21, 0x40	; 64
     78c:	60 91 00 01 	lds	r22, 0x0100
     790:	70 91 01 01 	lds	r23, 0x0101
     794:	80 91 02 01 	lds	r24, 0x0102
     798:	90 91 03 01 	lds	r25, 0x0103
     79c:	0e 94 41 0c 	call	0x1882	; 0x1882 <__gesf2>
     7a0:	18 16       	cp	r1, r24
     7a2:	24 f0       	brlt	.+8      	; 0x7ac <MPPT+0x1fe>
     7a4:	80 91 68 02 	lds	r24, 0x0268
     7a8:	88 23       	and	r24, r24
     7aa:	f9 f0       	breq	.+62     	; 0x7ea <MPPT+0x23c>
			New_Frq = 0.0095*(double)FRQ;
     7ac:	b8 01       	movw	r22, r16
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	75 d7       	rcall	.+3818   	; 0x169e <__floatunsisf>
     7b4:	23 ee       	ldi	r18, 0xE3	; 227
     7b6:	35 ea       	ldi	r19, 0xA5	; 165
     7b8:	4b e1       	ldi	r20, 0x1B	; 27
     7ba:	5c e3       	ldi	r21, 0x3C	; 60
     7bc:	0e 94 45 0c 	call	0x188a	; 0x188a <__mulsf3>
     7c0:	60 93 64 02 	sts	0x0264, r22
     7c4:	70 93 65 02 	sts	0x0265, r23
     7c8:	80 93 66 02 	sts	0x0266, r24
     7cc:	90 93 67 02 	sts	0x0267, r25
			perIncrement=0;
     7d0:	10 92 68 02 	sts	0x0268, r1
			Frequency_Update=0;
     7d4:	10 92 00 01 	sts	0x0100, r1
     7d8:	10 92 01 01 	sts	0x0101, r1
     7dc:	10 92 02 01 	sts	0x0102, r1
     7e0:	10 92 03 01 	sts	0x0103, r1
			immediateDecrement=1;
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	80 93 04 01 	sts	0x0104, r24
		} 
		if (dv/vdc<-0.005 && (Frequency_Update>2 || perIncrement>=1)){
     7ea:	2a e0       	ldi	r18, 0x0A	; 10
     7ec:	37 ed       	ldi	r19, 0xD7	; 215
     7ee:	43 ea       	ldi	r20, 0xA3	; 163
     7f0:	5b eb       	ldi	r21, 0xBB	; 187
     7f2:	6c 2d       	mov	r22, r12
     7f4:	7d 2d       	mov	r23, r13
     7f6:	8e 2d       	mov	r24, r14
     7f8:	9f 2d       	mov	r25, r15
     7fa:	b9 d6       	rcall	.+3442   	; 0x156e <__cmpsf2>
     7fc:	88 23       	and	r24, r24
     7fe:	cc f5       	brge	.+114    	; 0x872 <MPPT+0x2c4>
     800:	20 e0       	ldi	r18, 0x00	; 0
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	40 e0       	ldi	r20, 0x00	; 0
     806:	50 e4       	ldi	r21, 0x40	; 64
     808:	60 91 00 01 	lds	r22, 0x0100
     80c:	70 91 01 01 	lds	r23, 0x0101
     810:	80 91 02 01 	lds	r24, 0x0102
     814:	90 91 03 01 	lds	r25, 0x0103
     818:	0e 94 41 0c 	call	0x1882	; 0x1882 <__gesf2>
     81c:	18 16       	cp	r1, r24
     81e:	24 f0       	brlt	.+8      	; 0x828 <MPPT+0x27a>
     820:	80 91 68 02 	lds	r24, 0x0268
     824:	88 23       	and	r24, r24
     826:	29 f1       	breq	.+74     	; 0x872 <MPPT+0x2c4>
			New_Frq = New_Frq-0.3;
     828:	2a e9       	ldi	r18, 0x9A	; 154
     82a:	39 e9       	ldi	r19, 0x99	; 153
     82c:	49 e9       	ldi	r20, 0x99	; 153
     82e:	5e e3       	ldi	r21, 0x3E	; 62
     830:	60 91 64 02 	lds	r22, 0x0264
     834:	70 91 65 02 	lds	r23, 0x0265
     838:	80 91 66 02 	lds	r24, 0x0266
     83c:	90 91 67 02 	lds	r25, 0x0267
     840:	1e d6       	rcall	.+3132   	; 0x147e <__subsf3>
     842:	60 93 64 02 	sts	0x0264, r22
     846:	70 93 65 02 	sts	0x0265, r23
     84a:	80 93 66 02 	sts	0x0266, r24
     84e:	90 93 67 02 	sts	0x0267, r25
			perIncrement--;
     852:	80 91 68 02 	lds	r24, 0x0268
     856:	81 50       	subi	r24, 0x01	; 1
     858:	80 93 68 02 	sts	0x0268, r24
			Frequency_Update=0;
     85c:	10 92 00 01 	sts	0x0100, r1
     860:	10 92 01 01 	sts	0x0101, r1
     864:	10 92 02 01 	sts	0x0102, r1
     868:	10 92 03 01 	sts	0x0103, r1
			immediateDecrement=1; 
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	80 93 04 01 	sts	0x0104, r24
		} 
		if (Frequency_Update>2){
     872:	20 e0       	ldi	r18, 0x00	; 0
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	40 e0       	ldi	r20, 0x00	; 0
     878:	50 e4       	ldi	r21, 0x40	; 64
     87a:	60 91 00 01 	lds	r22, 0x0100
     87e:	70 91 01 01 	lds	r23, 0x0101
     882:	80 91 02 01 	lds	r24, 0x0102
     886:	90 91 03 01 	lds	r25, 0x0103
     88a:	fb d7       	rcall	.+4086   	; 0x1882 <__gesf2>
     88c:	18 16       	cp	r1, r24
     88e:	1c f5       	brge	.+70     	; 0x8d6 <MPPT+0x328>
			New_Frq=New_Frq+0.1;
     890:	2d ec       	ldi	r18, 0xCD	; 205
     892:	3c ec       	ldi	r19, 0xCC	; 204
     894:	4c ec       	ldi	r20, 0xCC	; 204
     896:	5d e3       	ldi	r21, 0x3D	; 61
     898:	60 91 64 02 	lds	r22, 0x0264
     89c:	70 91 65 02 	lds	r23, 0x0265
     8a0:	80 91 66 02 	lds	r24, 0x0266
     8a4:	90 91 67 02 	lds	r25, 0x0267
     8a8:	eb d5       	rcall	.+3030   	; 0x1480 <__addsf3>
     8aa:	60 93 64 02 	sts	0x0264, r22
     8ae:	70 93 65 02 	sts	0x0265, r23
     8b2:	80 93 66 02 	sts	0x0266, r24
     8b6:	90 93 67 02 	sts	0x0267, r25
			Frequency_Update=0;
     8ba:	10 92 00 01 	sts	0x0100, r1
     8be:	10 92 01 01 	sts	0x0101, r1
     8c2:	10 92 02 01 	sts	0x0102, r1
     8c6:	10 92 03 01 	sts	0x0103, r1
			perIncrement=3;
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	80 93 68 02 	sts	0x0268, r24
			immediateDecrement=1;
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	80 93 04 01 	sts	0x0104, r24
		}
	}
	
	if (uv==1){
     8d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8d8:	81 30       	cpi	r24, 0x01	; 1
     8da:	e9 f4       	brne	.+58     	; 0x916 <MPPT+0x368>
		New_Frq=0.0095*(double)FRQ_previous;
     8dc:	b1 01       	movw	r22, r2
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	dd d6       	rcall	.+3514   	; 0x169e <__floatunsisf>
     8e4:	23 ee       	ldi	r18, 0xE3	; 227
     8e6:	35 ea       	ldi	r19, 0xA5	; 165
     8e8:	4b e1       	ldi	r20, 0x1B	; 27
     8ea:	5c e3       	ldi	r21, 0x3C	; 60
     8ec:	ce d7       	rcall	.+3996   	; 0x188a <__mulsf3>
     8ee:	60 93 64 02 	sts	0x0264, r22
     8f2:	70 93 65 02 	sts	0x0265, r23
     8f6:	80 93 66 02 	sts	0x0266, r24
     8fa:	90 93 67 02 	sts	0x0267, r25
		perIncrement=0;
     8fe:	10 92 68 02 	sts	0x0268, r1
		Frequency_Update=0;
     902:	10 92 00 01 	sts	0x0100, r1
     906:	10 92 01 01 	sts	0x0101, r1
     90a:	10 92 02 01 	sts	0x0102, r1
     90e:	10 92 03 01 	sts	0x0103, r1
		immediateDecrement=0;
     912:	10 92 04 01 	sts	0x0104, r1
	}
	
	if(New_Frq<30)
     916:	c0 90 64 02 	lds	r12, 0x0264
     91a:	d0 90 65 02 	lds	r13, 0x0265
     91e:	e0 90 66 02 	lds	r14, 0x0266
     922:	f0 90 67 02 	lds	r15, 0x0267
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	40 ef       	ldi	r20, 0xF0	; 240
     92c:	51 e4       	ldi	r21, 0x41	; 65
     92e:	c7 01       	movw	r24, r14
     930:	b6 01       	movw	r22, r12
     932:	1d d6       	rcall	.+3130   	; 0x156e <__cmpsf2>
     934:	88 23       	and	r24, r24
     936:	6c f4       	brge	.+26     	; 0x952 <MPPT+0x3a4>
	{
		New_Frq=30.0;
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 ef       	ldi	r26, 0xF0	; 240
     93e:	b1 e4       	ldi	r27, 0x41	; 65
     940:	80 93 64 02 	sts	0x0264, r24
     944:	90 93 65 02 	sts	0x0265, r25
     948:	a0 93 66 02 	sts	0x0266, r26
     94c:	b0 93 67 02 	sts	0x0267, r27
     950:	15 c0       	rjmp	.+42     	; 0x97c <MPPT+0x3ce>
	}
	
	if(New_Frq>87)
     952:	20 e0       	ldi	r18, 0x00	; 0
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	4e ea       	ldi	r20, 0xAE	; 174
     958:	52 e4       	ldi	r21, 0x42	; 66
     95a:	c7 01       	movw	r24, r14
     95c:	b6 01       	movw	r22, r12
     95e:	91 d7       	rcall	.+3874   	; 0x1882 <__gesf2>
     960:	18 16       	cp	r1, r24
     962:	64 f4       	brge	.+24     	; 0x97c <MPPT+0x3ce>
	{
		New_Frq=87.0;
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	ae ea       	ldi	r26, 0xAE	; 174
     96a:	b2 e4       	ldi	r27, 0x42	; 66
     96c:	80 93 64 02 	sts	0x0264, r24
     970:	90 93 65 02 	sts	0x0265, r25
     974:	a0 93 66 02 	sts	0x0266, r26
     978:	b0 93 67 02 	sts	0x0267, r27
	}
	
	// storing previous value of v and i
	vdc0 = vdc;
     97c:	40 92 54 02 	sts	0x0254, r4
     980:	50 92 55 02 	sts	0x0255, r5
     984:	60 92 56 02 	sts	0x0256, r6
     988:	70 92 57 02 	sts	0x0257, r7
	idc0 = idc;
     98c:	89 81       	ldd	r24, Y+1	; 0x01
     98e:	9a 81       	ldd	r25, Y+2	; 0x02
     990:	ab 81       	ldd	r26, Y+3	; 0x03
     992:	bc 81       	ldd	r27, Y+4	; 0x04
     994:	80 93 5c 02 	sts	0x025C, r24
     998:	90 93 5d 02 	sts	0x025D, r25
     99c:	a0 93 5e 02 	sts	0x025E, r26
     9a0:	b0 93 5f 02 	sts	0x025F, r27
		
	*del_i	= di;
     9a4:	88 2d       	mov	r24, r8
     9a6:	99 2d       	mov	r25, r9
     9a8:	aa 2d       	mov	r26, r10
     9aa:	bb 2d       	mov	r27, r11
     9ac:	ed 81       	ldd	r30, Y+5	; 0x05
     9ae:	fe 81       	ldd	r31, Y+6	; 0x06
     9b0:	80 83       	st	Z, r24
     9b2:	91 83       	std	Z+1, r25	; 0x01
     9b4:	a2 83       	std	Z+2, r26	; 0x02
     9b6:	b3 83       	std	Z+3, r27	; 0x03
	*del_v	= dv;
     9b8:	60 91 58 02 	lds	r22, 0x0258
     9bc:	70 91 59 02 	lds	r23, 0x0259
     9c0:	80 91 5a 02 	lds	r24, 0x025A
     9c4:	90 91 5b 02 	lds	r25, 0x025B
     9c8:	af 81       	ldd	r26, Y+7	; 0x07
     9ca:	b8 85       	ldd	r27, Y+8	; 0x08
     9cc:	6d 93       	st	X+, r22
     9ce:	7d 93       	st	X+, r23
     9d0:	8d 93       	st	X+, r24
     9d2:	9c 93       	st	X, r25
     9d4:	13 97       	sbiw	r26, 0x03	; 3
	*del_i_v= dv/vdc;
     9d6:	a3 01       	movw	r20, r6
     9d8:	92 01       	movw	r18, r4
     9da:	cd d5       	rcall	.+2970   	; 0x1576 <__divsf3>
     9dc:	e9 85       	ldd	r30, Y+9	; 0x09
     9de:	fa 85       	ldd	r31, Y+10	; 0x0a
     9e0:	60 83       	st	Z, r22
     9e2:	71 83       	std	Z+1, r23	; 0x01
     9e4:	82 83       	std	Z+2, r24	; 0x02
     9e6:	93 83       	std	Z+3, r25	; 0x03
	
	return New_Frq;
}
     9e8:	50 91 64 02 	lds	r21, 0x0264
     9ec:	40 91 65 02 	lds	r20, 0x0265
     9f0:	30 91 66 02 	lds	r19, 0x0266
     9f4:	20 91 67 02 	lds	r18, 0x0267
     9f8:	65 2f       	mov	r22, r21
     9fa:	74 2f       	mov	r23, r20
     9fc:	83 2f       	mov	r24, r19
     9fe:	92 2f       	mov	r25, r18
     a00:	2a 96       	adiw	r28, 0x0a	; 10
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	f8 94       	cli
     a06:	de bf       	out	0x3e, r29	; 62
     a08:	0f be       	out	0x3f, r0	; 63
     a0a:	cd bf       	out	0x3d, r28	; 61
     a0c:	df 91       	pop	r29
     a0e:	cf 91       	pop	r28
     a10:	1f 91       	pop	r17
     a12:	0f 91       	pop	r16
     a14:	ff 90       	pop	r15
     a16:	ef 90       	pop	r14
     a18:	df 90       	pop	r13
     a1a:	cf 90       	pop	r12
     a1c:	bf 90       	pop	r11
     a1e:	af 90       	pop	r10
     a20:	9f 90       	pop	r9
     a22:	8f 90       	pop	r8
     a24:	7f 90       	pop	r7
     a26:	6f 90       	pop	r6
     a28:	5f 90       	pop	r5
     a2a:	4f 90       	pop	r4
     a2c:	3f 90       	pop	r3
     a2e:	2f 90       	pop	r2
     a30:	08 95       	ret

00000a32 <CRC16_2>:

uint16_t CRC16_2(uint8_t* buf, uint8_t len)
{
	uint16_t crc = 0xFFFF;

	for (uint8_t pos = 0; pos < len; pos++)
     a32:	66 23       	and	r22, r22
     a34:	e1 f0       	breq	.+56     	; 0xa6e <CRC16_2+0x3c>
     a36:	78 2f       	mov	r23, r24
     a38:	e8 2f       	mov	r30, r24
     a3a:	f9 2f       	mov	r31, r25
	} 
}

uint16_t CRC16_2(uint8_t* buf, uint8_t len)
{
	uint16_t crc = 0xFFFF;
     a3c:	2f ef       	ldi	r18, 0xFF	; 255
     a3e:	3f ef       	ldi	r19, 0xFF	; 255

	for (uint8_t pos = 0; pos < len; pos++)
	{
		crc ^= (uint16_t)buf[pos];          // XOR byte into least sig. byte of crc
     a40:	48 e0       	ldi	r20, 0x08	; 8
     a42:	50 e0       	ldi	r21, 0x00	; 0
     a44:	81 91       	ld	r24, Z+
     a46:	28 27       	eor	r18, r24
     a48:	ca 01       	movw	r24, r20

		for (int i = 8; i != 0; i--) {		// Loop over each bit
			if ((crc & 0x0001) != 0) {      // If the LSB is set
     a4a:	20 ff       	sbrs	r18, 0
     a4c:	07 c0       	rjmp	.+14     	; 0xa5c <CRC16_2+0x2a>
				crc >>= 1;                  // Shift right and XOR 0xA001
     a4e:	36 95       	lsr	r19
     a50:	27 95       	ror	r18
				crc ^= 0xA001;
     a52:	a1 e0       	ldi	r26, 0x01	; 1
     a54:	2a 27       	eor	r18, r26
     a56:	a0 ea       	ldi	r26, 0xA0	; 160
     a58:	3a 27       	eor	r19, r26
     a5a:	02 c0       	rjmp	.+4      	; 0xa60 <CRC16_2+0x2e>
			}
			else                            // Else LSB is not set
			crc >>= 1;						// Just shift right
     a5c:	36 95       	lsr	r19
     a5e:	27 95       	ror	r18
     a60:	01 97       	sbiw	r24, 0x01	; 1

	for (uint8_t pos = 0; pos < len; pos++)
	{
		crc ^= (uint16_t)buf[pos];          // XOR byte into least sig. byte of crc

		for (int i = 8; i != 0; i--) {		// Loop over each bit
     a62:	99 f7       	brne	.-26     	; 0xa4a <CRC16_2+0x18>

uint16_t CRC16_2(uint8_t* buf, uint8_t len)
{
	uint16_t crc = 0xFFFF;

	for (uint8_t pos = 0; pos < len; pos++)
     a64:	8e 2f       	mov	r24, r30
     a66:	87 1b       	sub	r24, r23
     a68:	86 17       	cp	r24, r22
     a6a:	60 f3       	brcs	.-40     	; 0xa44 <CRC16_2+0x12>
     a6c:	02 c0       	rjmp	.+4      	; 0xa72 <CRC16_2+0x40>
	} 
}

uint16_t CRC16_2(uint8_t* buf, uint8_t len)
{
	uint16_t crc = 0xFFFF;
     a6e:	2f ef       	ldi	r18, 0xFF	; 255
     a70:	3f ef       	ldi	r19, 0xFF	; 255
			crc >>= 1;						// Just shift right
		}
	}
	// Note, this number has low and high bytes swapped, so use it accordingly (or swap bytes)
	return crc;
}
     a72:	82 2f       	mov	r24, r18
     a74:	93 2f       	mov	r25, r19
     a76:	08 95       	ret

00000a78 <Send_Command>:
	
	return New_Frq;
}

void Send_Command(uint8_t* cmd, uint16_t* value, uint8_t read_count,uint8_t write_count)
{
     a78:	2f 92       	push	r2
     a7a:	3f 92       	push	r3
     a7c:	4f 92       	push	r4
     a7e:	5f 92       	push	r5
     a80:	6f 92       	push	r6
     a82:	7f 92       	push	r7
     a84:	8f 92       	push	r8
     a86:	9f 92       	push	r9
     a88:	af 92       	push	r10
     a8a:	bf 92       	push	r11
     a8c:	cf 92       	push	r12
     a8e:	df 92       	push	r13
     a90:	ef 92       	push	r14
     a92:	ff 92       	push	r15
     a94:	0f 93       	push	r16
     a96:	1f 93       	push	r17
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	cd b7       	in	r28, 0x3d	; 61
     a9e:	de b7       	in	r29, 0x3e	; 62
     aa0:	2a 97       	sbiw	r28, 0x0a	; 10
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	f8 94       	cli
     aa6:	de bf       	out	0x3e, r29	; 62
     aa8:	0f be       	out	0x3f, r0	; 63
     aaa:	cd bf       	out	0x3d, r28	; 61
     aac:	8b 83       	std	Y+3, r24	; 0x03
     aae:	9c 83       	std	Y+4, r25	; 0x04
     ab0:	7a 87       	std	Y+10, r23	; 0x0a
     ab2:	69 87       	std	Y+9, r22	; 0x09
     ab4:	54 2e       	mov	r5, r20
     ab6:	22 2e       	mov	r2, r18
	uint8_t rx_try=9;
	uint16_t crc_sent=0, crc_received=0, crc_calculated=0;
	crc_sent = CRC16_2(cmd, write_count);
     ab8:	62 2f       	mov	r22, r18
     aba:	bb df       	rcall	.-138    	; 0xa32 <CRC16_2>
     abc:	8a 83       	std	Y+2, r24	; 0x02
		{
			UART_0_Putc(cmd[write_byte]);	
		}
			
		UART_0_Putc(crc_sent);
		UART_0_Putc(crc_sent>>8);
     abe:	99 83       	std	Y+1, r25	; 0x01
     ac0:	0f 2e       	mov	r0, r31
     ac2:	f9 e0       	ldi	r31, 0x09	; 9
     ac4:	4f 2e       	mov	r4, r31
     ac6:	f0 2d       	mov	r31, r0
	*del_i_v= dv/vdc;
	
	return New_Frq;
}

void Send_Command(uint8_t* cmd, uint16_t* value, uint8_t read_count,uint8_t write_count)
     ac8:	82 2d       	mov	r24, r2
     aca:	81 50       	subi	r24, 0x01	; 1
     acc:	68 2e       	mov	r6, r24
     ace:	71 2c       	mov	r7, r1
     ad0:	0f 2e       	mov	r0, r31
     ad2:	f9 e6       	ldi	r31, 0x69	; 105
     ad4:	cf 2e       	mov	r12, r31
     ad6:	f2 e0       	ldi	r31, 0x02	; 2
     ad8:	df 2e       	mov	r13, r31
     ada:	f0 2d       	mov	r31, r0
		//Response Read
		for( uint8_t read_byte=0; read_byte < read_count; read_byte++)
		{
			while ( !(UCSR0A & (1<<RXC0)) )
			;
			response[read_byte] = UDR0;
     adc:	0f 2e       	mov	r0, r31
     ade:	f6 ec       	ldi	r31, 0xC6	; 198
     ae0:	af 2e       	mov	r10, r31
     ae2:	b1 2c       	mov	r11, r1
     ae4:	f0 2d       	mov	r31, r0
		}

		_delay_ms(8);
		
		crc_received = (response[read_count-1]<<8) | response[read_count-2];
     ae6:	85 2d       	mov	r24, r5
     ae8:	90 e0       	ldi	r25, 0x00	; 0
		crc_calculated = CRC16_2(&response,read_count-2);	
     aea:	35 2c       	mov	r3, r5
     aec:	3a 94       	dec	r3
     aee:	3a 94       	dec	r3
			response[read_byte] = UDR0;
		}

		_delay_ms(8);
		
		crc_received = (response[read_count-1]<<8) | response[read_count-2];
     af0:	8c 0d       	add	r24, r12
     af2:	9d 1d       	adc	r25, r13
     af4:	9c 01       	movw	r18, r24
     af6:	21 50       	subi	r18, 0x01	; 1
     af8:	31 09       	sbc	r19, r1
     afa:	3e 83       	std	Y+6, r19	; 0x06
     afc:	2d 83       	std	Y+5, r18	; 0x05
     afe:	ac 01       	movw	r20, r24
     b00:	42 50       	subi	r20, 0x02	; 2
     b02:	51 09       	sbc	r21, r1
     b04:	58 87       	std	Y+8, r21	; 0x08
     b06:	4f 83       	std	Y+7, r20	; 0x07
	uint8_t rx_try=9;
	uint16_t crc_sent=0, crc_received=0, crc_calculated=0;
	crc_sent = CRC16_2(cmd, write_count);
 	while (rx_try>0) 
 	{
		sbi(PORTB,RE);	 
     b08:	29 9a       	sbi	0x05, 1	; 5
		for (uint8_t write_byte=0; write_byte < write_count; write_byte++)
     b0a:	22 20       	and	r2, r2
     b0c:	79 f0       	breq	.+30     	; 0xb2c <Send_Command+0xb4>
     b0e:	0b 81       	ldd	r16, Y+3	; 0x03
     b10:	1c 81       	ldd	r17, Y+4	; 0x04
	*del_i_v= dv/vdc;
	
	return New_Frq;
}

void Send_Command(uint8_t* cmd, uint16_t* value, uint8_t read_count,uint8_t write_count)
     b12:	78 01       	movw	r14, r16
     b14:	5f ef       	ldi	r21, 0xFF	; 255
     b16:	e5 1a       	sub	r14, r21
     b18:	f5 0a       	sbc	r15, r21
     b1a:	e6 0c       	add	r14, r6
     b1c:	f7 1c       	adc	r15, r7
 	while (rx_try>0) 
 	{
		sbi(PORTB,RE);	 
		for (uint8_t write_byte=0; write_byte < write_count; write_byte++)
		{
			UART_0_Putc(cmd[write_byte]);	
     b1e:	d8 01       	movw	r26, r16
     b20:	8d 91       	ld	r24, X+
     b22:	8d 01       	movw	r16, r26
     b24:	5f dc       	rcall	.-1858   	; 0x3e4 <UART_0_Putc>
	uint16_t crc_sent=0, crc_received=0, crc_calculated=0;
	crc_sent = CRC16_2(cmd, write_count);
 	while (rx_try>0) 
 	{
		sbi(PORTB,RE);	 
		for (uint8_t write_byte=0; write_byte < write_count; write_byte++)
     b26:	0e 15       	cp	r16, r14
     b28:	1f 05       	cpc	r17, r15
     b2a:	c9 f7       	brne	.-14     	; 0xb1e <Send_Command+0xa6>
		{
			UART_0_Putc(cmd[write_byte]);	
		}
			
		UART_0_Putc(crc_sent);
     b2c:	8a 81       	ldd	r24, Y+2	; 0x02
     b2e:	5a dc       	rcall	.-1868   	; 0x3e4 <UART_0_Putc>
		UART_0_Putc(crc_sent>>8);
     b30:	89 81       	ldd	r24, Y+1	; 0x01
     b32:	58 dc       	rcall	.-1872   	; 0x3e4 <UART_0_Putc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b34:	ef e3       	ldi	r30, 0x3F	; 63
     b36:	ff e1       	ldi	r31, 0x1F	; 31
     b38:	31 97       	sbiw	r30, 0x01	; 1
     b3a:	f1 f7       	brne	.-4      	; 0xb38 <Send_Command+0xc0>
     b3c:	00 c0       	rjmp	.+0      	; 0xb3e <Send_Command+0xc6>
     b3e:	00 00       	nop
				
		_delay_ms(4);
		cbi(PORTB,RE);
     b40:	29 98       	cbi	0x05, 1	; 5
		
		//Response Read
		for( uint8_t read_byte=0; read_byte < read_count; read_byte++)
     b42:	55 20       	and	r5, r5
     b44:	69 f0       	breq	.+26     	; 0xb60 <Send_Command+0xe8>
     b46:	f6 01       	movw	r30, r12
		{
			while ( !(UCSR0A & (1<<RXC0)) )
     b48:	a0 ec       	ldi	r26, 0xC0	; 192
     b4a:	b0 e0       	ldi	r27, 0x00	; 0
     b4c:	8c 91       	ld	r24, X
     b4e:	88 23       	and	r24, r24
     b50:	dc f7       	brge	.-10     	; 0xb48 <Send_Command+0xd0>
			;
			response[read_byte] = UDR0;
     b52:	d5 01       	movw	r26, r10
     b54:	8c 91       	ld	r24, X
     b56:	81 93       	st	Z+, r24
				
		_delay_ms(4);
		cbi(PORTB,RE);
		
		//Response Read
		for( uint8_t read_byte=0; read_byte < read_count; read_byte++)
     b58:	8e 2f       	mov	r24, r30
     b5a:	8c 19       	sub	r24, r12
     b5c:	85 15       	cp	r24, r5
     b5e:	a0 f3       	brcs	.-24     	; 0xb48 <Send_Command+0xd0>
     b60:	ef e7       	ldi	r30, 0x7F	; 127
     b62:	fe e3       	ldi	r31, 0x3E	; 62
     b64:	31 97       	sbiw	r30, 0x01	; 1
     b66:	f1 f7       	brne	.-4      	; 0xb64 <Send_Command+0xec>
     b68:	00 c0       	rjmp	.+0      	; 0xb6a <Send_Command+0xf2>
     b6a:	00 00       	nop
		}

		_delay_ms(8);
		
		crc_received = (response[read_count-1]<<8) | response[read_count-2];
		crc_calculated = CRC16_2(&response,read_count-2);	
     b6c:	63 2d       	mov	r22, r3
     b6e:	c6 01       	movw	r24, r12
     b70:	60 df       	rcall	.-320    	; 0xa32 <CRC16_2>
			response[read_byte] = UDR0;
		}

		_delay_ms(8);
		
		crc_received = (response[read_count-1]<<8) | response[read_count-2];
     b72:	ad 81       	ldd	r26, Y+5	; 0x05
     b74:	be 81       	ldd	r27, Y+6	; 0x06
     b76:	9c 90       	ld	r9, X
     b78:	81 2c       	mov	r8, r1
     b7a:	ef 81       	ldd	r30, Y+7	; 0x07
     b7c:	f8 85       	ldd	r31, Y+8	; 0x08
     b7e:	20 81       	ld	r18, Z
     b80:	a4 01       	movw	r20, r8
     b82:	42 2b       	or	r20, r18
     b84:	9a 01       	movw	r18, r20
		crc_calculated = CRC16_2(&response,read_count-2);	
		
		if ( crc_calculated == crc_received)
     b86:	82 17       	cp	r24, r18
     b88:	93 07       	cpc	r25, r19
     b8a:	19 f0       	breq	.+6      	; 0xb92 <Send_Command+0x11a>
     b8c:	4a 94       	dec	r4
void Send_Command(uint8_t* cmd, uint16_t* value, uint8_t read_count,uint8_t write_count)
{
	uint8_t rx_try=9;
	uint16_t crc_sent=0, crc_received=0, crc_calculated=0;
	crc_sent = CRC16_2(cmd, write_count);
 	while (rx_try>0) 
     b8e:	09 f0       	breq	.+2      	; 0xb92 <Send_Command+0x11a>
     b90:	bb cf       	rjmp	.-138    	; 0xb08 <Send_Command+0x90>
		
		rx_try--;
		
	} 
	
	if (read_count == read_Response)
     b92:	57 e0       	ldi	r21, 0x07	; 7
     b94:	55 12       	cpse	r5, r21
     b96:	0b c0       	rjmp	.+22     	; 0xbae <Send_Command+0x136>
	{
		*value = response[4] + response[3]*256;		
     b98:	20 91 6d 02 	lds	r18, 0x026D
     b9c:	90 91 6c 02 	lds	r25, 0x026C
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	82 0f       	add	r24, r18
     ba4:	91 1d       	adc	r25, r1
     ba6:	a9 85       	ldd	r26, Y+9	; 0x09
     ba8:	ba 85       	ldd	r27, Y+10	; 0x0a
     baa:	8d 93       	st	X+, r24
     bac:	9c 93       	st	X, r25
	} 
}
     bae:	2a 96       	adiw	r28, 0x0a	; 10
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	f8 94       	cli
     bb4:	de bf       	out	0x3e, r29	; 62
     bb6:	0f be       	out	0x3f, r0	; 63
     bb8:	cd bf       	out	0x3d, r28	; 61
     bba:	df 91       	pop	r29
     bbc:	cf 91       	pop	r28
     bbe:	1f 91       	pop	r17
     bc0:	0f 91       	pop	r16
     bc2:	ff 90       	pop	r15
     bc4:	ef 90       	pop	r14
     bc6:	df 90       	pop	r13
     bc8:	cf 90       	pop	r12
     bca:	bf 90       	pop	r11
     bcc:	af 90       	pop	r10
     bce:	9f 90       	pop	r9
     bd0:	8f 90       	pop	r8
     bd2:	7f 90       	pop	r7
     bd4:	6f 90       	pop	r6
     bd6:	5f 90       	pop	r5
     bd8:	4f 90       	pop	r4
     bda:	3f 90       	pop	r3
     bdc:	2f 90       	pop	r2
     bde:	08 95       	ret

00000be0 <main>:
void Init_ADC();
double Input_Current();


int main(void)
{
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
     be8:	ce 5a       	subi	r28, 0xAE	; 174
     bea:	d1 09       	sbc	r29, r1
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	f8 94       	cli
     bf0:	de bf       	out	0x3e, r29	; 62
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	cd bf       	out	0x3d, r28	; 61
     bf6:	2f ef       	ldi	r18, 0xFF	; 255
     bf8:	80 e7       	ldi	r24, 0x70	; 112
     bfa:	92 e0       	ldi	r25, 0x02	; 2
     bfc:	21 50       	subi	r18, 0x01	; 1
     bfe:	80 40       	sbci	r24, 0x00	; 0
     c00:	90 40       	sbci	r25, 0x00	; 0
     c02:	e1 f7       	brne	.-8      	; 0xbfc <main+0x1c>
     c04:	00 c0       	rjmp	.+0      	; 0xc06 <main+0x26>
     c06:	00 00       	nop
	// To stabilize the Oscillator
	
	_delay_ms(100);
	DDRD  = 0x0A;
     c08:	8a e0       	ldi	r24, 0x0A	; 10
     c0a:	8a b9       	out	0x0a, r24	; 10
	DDRB  = 0x03;
     c0c:	83 e0       	ldi	r24, 0x03	; 3
     c0e:	84 b9       	out	0x04, r24	; 4
	PORTD = 0xFF ;
     c10:	8f ef       	ldi	r24, 0xFF	; 255
     c12:	8b b9       	out	0x0b, r24	; 11
	DIDR0= 0xFF;	
     c14:	80 93 7e 00 	sts	0x007E, r24

	// InItilize UART Baud=9600,8 bit, 1 Stop bit, No Parity
	UART_0_Init();
     c18:	d5 db       	rcall	.-2134   	; 0x3c4 <UART_0_Init>
	UART_1_Init();
     c1a:	ec db       	rcall	.-2088   	; 0x3f4 <UART_1_Init>
	LCDinit();
     c1c:	63 db       	rcall	.-2362   	; 0x2e4 <LCDinit>
	LCDcursorOFF();
     c1e:	d0 db       	rcall	.-2144   	; 0x3c0 <LCDcursorOFF>
	Init_ADC();
     c20:	0f dc       	rcall	.-2018   	; 0x440 <Init_ADC>
	
	
	LCDclr; // Clear LCD
	LCDhome();
     c22:	14 db       	rcall	.-2520   	; 0x24c <LCDhome>
	LCDGotoXY(0,0);
     c24:	60 e0       	ldi	r22, 0x00	; 0
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	2c db       	rcall	.-2472   	; 0x282 <LCDGotoXY>
	LCDstring("  ecoZen        ",16);
     c2a:	60 e1       	ldi	r22, 0x10	; 16
     c2c:	85 e4       	ldi	r24, 0x45	; 69
     c2e:	91 e0       	ldi	r25, 0x01	; 1
     c30:	0f db       	rcall	.-2530   	; 0x250 <LCDstring>
	LCDGotoXY(0,1);
     c32:	61 e0       	ldi	r22, 0x01	; 1
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	25 db       	rcall	.-2486   	; 0x282 <LCDGotoXY>
	LCDstring("    Solutions   ",16);
     c38:	60 e1       	ldi	r22, 0x10	; 16
     c3a:	86 e5       	ldi	r24, 0x56	; 86
     c3c:	91 e0       	ldi	r25, 0x01	; 1
     c3e:	08 db       	rcall	.-2544   	; 0x250 <LCDstring>
	
	//Define variables
	uint8_t Dry_Run=0,toggle=0, DryRunCount=0, NoFault=1, MotorSwitch=0, uv=0;
	uint16_t DCV=0,OPW=0,OVO=0,OCU=0,FL1=0,DIP=0,FRQ=0,FRQ_previous=0,Dummy=0,FRQ_Write=0; 
     c40:	1a 82       	std	Y+2, r1	; 0x02
     c42:	19 82       	std	Y+1, r1	; 0x01
     c44:	1c 82       	std	Y+4, r1	; 0x04
     c46:	1b 82       	std	Y+3, r1	; 0x03
     c48:	1e 82       	std	Y+6, r1	; 0x06
     c4a:	1d 82       	std	Y+5, r1	; 0x05
     c4c:	18 86       	std	Y+8, r1	; 0x08
     c4e:	1f 82       	std	Y+7, r1	; 0x07
     c50:	1a 86       	std	Y+10, r1	; 0x0a
     c52:	19 86       	std	Y+9, r1	; 0x09
     c54:	1c 86       	std	Y+12, r1	; 0x0c
     c56:	1b 86       	std	Y+11, r1	; 0x0b
     c58:	1e 86       	std	Y+14, r1	; 0x0e
     c5a:	1d 86       	std	Y+13, r1	; 0x0d
     c5c:	18 8a       	std	Y+16, r1	; 0x10
     c5e:	1f 86       	std	Y+15, r1	; 0x0f
	char ch1[3],ch2[5],ch3[6],ch4[6],ch5[6],ch6[16],ch7[16],ch8[8], ch9[6],ch10[6],ch11[6],ch12[6],ch13[6];
	double Frequency=0.0, I_current=0.0, FRQ_Float=0.0, OPW_Float=0.0, OCU_Float=0.0;
	
	double New_FRQ=0.0,delta_i=0.0,delta_v=0.0,delta_i_v=0.0;
     c60:	6f 96       	adiw	r28, 0x1f	; 31
     c62:	1c ae       	std	Y+60, r1	; 0x3c
     c64:	1d ae       	std	Y+61, r1	; 0x3d
     c66:	1e ae       	std	Y+62, r1	; 0x3e
     c68:	1f ae       	std	Y+63, r1	; 0x3f
     c6a:	6f 97       	sbiw	r28, 0x1f	; 31
     c6c:	a3 96       	adiw	r28, 0x23	; 35
     c6e:	1c ae       	std	Y+60, r1	; 0x3c
     c70:	1d ae       	std	Y+61, r1	; 0x3d
     c72:	1e ae       	std	Y+62, r1	; 0x3e
     c74:	1f ae       	std	Y+63, r1	; 0x3f
     c76:	a3 97       	sbiw	r28, 0x23	; 35
     c78:	a7 96       	adiw	r28, 0x27	; 39
     c7a:	1c ae       	std	Y+60, r1	; 0x3c
     c7c:	1d ae       	std	Y+61, r1	; 0x3d
     c7e:	1e ae       	std	Y+62, r1	; 0x3e
     c80:	1f ae       	std	Y+63, r1	; 0x3f
     c82:	a7 97       	sbiw	r28, 0x27	; 39
		
	//Read Commands
	uint8_t DCV_Read_CMD[]={0x02,0x03,0x00,0x31,0x00,0x01};		// DC Bus Voltage
     c84:	86 e0       	ldi	r24, 0x06	; 6
     c86:	e5 e0       	ldi	r30, 0x05	; 5
     c88:	f1 e0       	ldi	r31, 0x01	; 1
     c8a:	de 01       	movw	r26, r28
     c8c:	a9 59       	subi	r26, 0x99	; 153
     c8e:	bf 4f       	sbci	r27, 0xFF	; 255
     c90:	01 90       	ld	r0, Z+
     c92:	0d 92       	st	X+, r0
     c94:	8a 95       	dec	r24
     c96:	e1 f7       	brne	.-8      	; 0xc90 <main+0xb0>
	uint8_t FRQ_Read_CMD[]={0x02,0x03,0x00,0x24,0x00,0x01};		// Frequency
     c98:	86 e0       	ldi	r24, 0x06	; 6
     c9a:	eb e0       	ldi	r30, 0x0B	; 11
     c9c:	f1 e0       	ldi	r31, 0x01	; 1
     c9e:	de 01       	movw	r26, r28
     ca0:	a3 59       	subi	r26, 0x93	; 147
     ca2:	bf 4f       	sbci	r27, 0xFF	; 255
     ca4:	01 90       	ld	r0, Z+
     ca6:	0d 92       	st	X+, r0
     ca8:	8a 95       	dec	r24
     caa:	e1 f7       	brne	.-8      	; 0xca4 <main+0xc4>
	uint8_t OPW_Read_CMD[]={0x02,0x03,0x00,0x27,0x00,0x01};		// Output Power
     cac:	86 e0       	ldi	r24, 0x06	; 6
     cae:	e1 e1       	ldi	r30, 0x11	; 17
     cb0:	f1 e0       	ldi	r31, 0x01	; 1
     cb2:	de 01       	movw	r26, r28
     cb4:	ad 58       	subi	r26, 0x8D	; 141
     cb6:	bf 4f       	sbci	r27, 0xFF	; 255
     cb8:	01 90       	ld	r0, Z+
     cba:	0d 92       	st	X+, r0
     cbc:	8a 95       	dec	r24
     cbe:	e1 f7       	brne	.-8      	; 0xcb8 <main+0xd8>
	uint8_t OCU_Read_CMD[]={0x02,0x03,0x00,0x26,0x00,0x01};		// Output Current
     cc0:	86 e0       	ldi	r24, 0x06	; 6
     cc2:	e7 e1       	ldi	r30, 0x17	; 23
     cc4:	f1 e0       	ldi	r31, 0x01	; 1
     cc6:	de 01       	movw	r26, r28
     cc8:	a7 58       	subi	r26, 0x87	; 135
     cca:	bf 4f       	sbci	r27, 0xFF	; 255
     ccc:	01 90       	ld	r0, Z+
     cce:	0d 92       	st	X+, r0
     cd0:	8a 95       	dec	r24
     cd2:	e1 f7       	brne	.-8      	; 0xccc <main+0xec>
	uint8_t OVO_Read_CMD[]={0x02,0x03,0x00,0x25,0x00,0x01};		// Output Voltage
     cd4:	86 e0       	ldi	r24, 0x06	; 6
     cd6:	ed e1       	ldi	r30, 0x1D	; 29
     cd8:	f1 e0       	ldi	r31, 0x01	; 1
     cda:	de 01       	movw	r26, r28
     cdc:	a1 58       	subi	r26, 0x81	; 129
     cde:	bf 4f       	sbci	r27, 0xFF	; 255
     ce0:	01 90       	ld	r0, Z+
     ce2:	0d 92       	st	X+, r0
     ce4:	8a 95       	dec	r24
     ce6:	e1 f7       	brne	.-8      	; 0xce0 <main+0x100>
	uint8_t FL1_Read_CMD[]={0x02,0x03,0x00,0x21,0x00,0x01};		// Fault Register 1
     ce8:	86 e0       	ldi	r24, 0x06	; 6
     cea:	e3 e2       	ldi	r30, 0x23	; 35
     cec:	f1 e0       	ldi	r31, 0x01	; 1
     cee:	de 01       	movw	r26, r28
     cf0:	ab 57       	subi	r26, 0x7B	; 123
     cf2:	bf 4f       	sbci	r27, 0xFF	; 255
     cf4:	01 90       	ld	r0, Z+
     cf6:	0d 92       	st	X+, r0
     cf8:	8a 95       	dec	r24
     cfa:	e1 f7       	brne	.-8      	; 0xcf4 <main+0x114>
	uint8_t DIP_Read_CMD[]={0x02,0x03,0x00,0x2B,0x00,0x01};		// Switch Read
     cfc:	86 e0       	ldi	r24, 0x06	; 6
     cfe:	e9 e2       	ldi	r30, 0x29	; 41
     d00:	f1 e0       	ldi	r31, 0x01	; 1
     d02:	de 01       	movw	r26, r28
     d04:	a5 57       	subi	r26, 0x75	; 117
     d06:	bf 4f       	sbci	r27, 0xFF	; 255
     d08:	01 90       	ld	r0, Z+
     d0a:	0d 92       	st	X+, r0
     d0c:	8a 95       	dec	r24
     d0e:	e1 f7       	brne	.-8      	; 0xd08 <main+0x128>
	uint8_t DSR_Read_CMD[]={0x02,0x03,0x00,0x2C,0x00,0x01};		// Drive Status Read; for Baseblock
	
	// write Commands
	uint8_t FRQ_SRT_Write_CMD[]={0x02,0x10,0x00,0x01,0x00,0x02,0x04,0x00,0x01,0x03,0xE8};	// Frequency write in REF 1
     d10:	8b e0       	ldi	r24, 0x0B	; 11
     d12:	ef e2       	ldi	r30, 0x2F	; 47
     d14:	f1 e0       	ldi	r31, 0x01	; 1
     d16:	de 01       	movw	r26, r28
     d18:	af 56       	subi	r26, 0x6F	; 111
     d1a:	bf 4f       	sbci	r27, 0xFF	; 255
     d1c:	01 90       	ld	r0, Z+
     d1e:	0d 92       	st	X+, r0
     d20:	8a 95       	dec	r24
     d22:	e1 f7       	brne	.-8      	; 0xd1c <main+0x13c>
	uint8_t FRQ_STP_Write_CMD[]={0x02,0x10,0x00,0x01,0x00,0x02,0x04,0x00,0x08,0x00,0x00};	// Stop Motor
     d24:	8b e0       	ldi	r24, 0x0B	; 11
     d26:	ea e3       	ldi	r30, 0x3A	; 58
     d28:	f1 e0       	ldi	r31, 0x01	; 1
     d2a:	de 01       	movw	r26, r28
     d2c:	a4 56       	subi	r26, 0x64	; 100
     d2e:	bf 4f       	sbci	r27, 0xFF	; 255
     d30:	01 90       	ld	r0, Z+
     d32:	0d 92       	st	X+, r0
     d34:	8a 95       	dec	r24
     d36:	e1 f7       	brne	.-8      	; 0xd30 <main+0x150>
		
	uint8_t firsttime=1; //vg Diagnostic
	
	sei();
     d38:	78 94       	sei

	cbi(PORTB,RE);
     d3a:	29 98       	cbi	0x05, 1	; 5
	sbi(PORTB,DE);
     d3c:	28 9a       	sbi	0x05, 0	; 5
	
	// initial drive reset
	Send_Command(&FRQ_STP_Write_CMD,&Dummy,write_Response,write_Command_Send_Count);
     d3e:	2b e0       	ldi	r18, 0x0B	; 11
     d40:	48 e0       	ldi	r20, 0x08	; 8
     d42:	be 01       	movw	r22, r28
     d44:	61 5f       	subi	r22, 0xF1	; 241
     d46:	7f 4f       	sbci	r23, 0xFF	; 255
     d48:	ce 01       	movw	r24, r28
     d4a:	84 56       	subi	r24, 0x64	; 100
     d4c:	9f 4f       	sbci	r25, 0xFF	; 255
     d4e:	94 de       	rcall	.-728    	; 0xa78 <Send_Command>
     d50:	2f ef       	ldi	r18, 0xFF	; 255
     d52:	83 e2       	ldi	r24, 0x23	; 35
     d54:	94 ef       	ldi	r25, 0xF4	; 244
     d56:	21 50       	subi	r18, 0x01	; 1
     d58:	80 40       	sbci	r24, 0x00	; 0
     d5a:	90 40       	sbci	r25, 0x00	; 0
     d5c:	e1 f7       	brne	.-8      	; 0xd56 <main+0x176>
     d5e:	00 c0       	rjmp	.+0      	; 0xd60 <main+0x180>
     d60:	00 00       	nop
	
	// write Commands
	uint8_t FRQ_SRT_Write_CMD[]={0x02,0x10,0x00,0x01,0x00,0x02,0x04,0x00,0x01,0x03,0xE8};	// Frequency write in REF 1
	uint8_t FRQ_STP_Write_CMD[]={0x02,0x10,0x00,0x01,0x00,0x02,0x04,0x00,0x08,0x00,0x00};	// Stop Motor
		
	uint8_t firsttime=1; //vg Diagnostic
     d62:	21 e0       	ldi	r18, 0x01	; 1
     d64:	c9 55       	subi	r28, 0x59	; 89
     d66:	df 4f       	sbci	r29, 0xFF	; 255
     d68:	28 83       	st	Y, r18
     d6a:	c7 5a       	subi	r28, 0xA7	; 167
     d6c:	d0 40       	sbci	r29, 0x00	; 0
	LCDGotoXY(0,1);
	LCDstring("    Solutions   ",16);
	
	//Define variables
	uint8_t Dry_Run=0,toggle=0, DryRunCount=0, NoFault=1, MotorSwitch=0, uv=0;
	uint16_t DCV=0,OPW=0,OVO=0,OCU=0,FL1=0,DIP=0,FRQ=0,FRQ_previous=0,Dummy=0,FRQ_Write=0; 
     d6e:	c4 55       	subi	r28, 0x54	; 84
     d70:	df 4f       	sbci	r29, 0xFF	; 255
     d72:	19 82       	std	Y+1, r1	; 0x01
     d74:	18 82       	st	Y, r1
     d76:	cc 5a       	subi	r28, 0xAC	; 172
     d78:	d0 40       	sbci	r29, 0x00	; 0
	LCDstring("  ecoZen        ",16);
	LCDGotoXY(0,1);
	LCDstring("    Solutions   ",16);
	
	//Define variables
	uint8_t Dry_Run=0,toggle=0, DryRunCount=0, NoFault=1, MotorSwitch=0, uv=0;
     d7a:	c8 55       	subi	r28, 0x58	; 88
     d7c:	df 4f       	sbci	r29, 0xFF	; 255
     d7e:	18 82       	st	Y, r1
     d80:	c8 5a       	subi	r28, 0xA8	; 168
     d82:	d0 40       	sbci	r29, 0x00	; 0
     d84:	22 24       	eor	r2, r2
     d86:	23 94       	inc	r2
     d88:	c2 55       	subi	r28, 0x52	; 82
     d8a:	df 4f       	sbci	r29, 0xFF	; 255
     d8c:	18 82       	st	Y, r1
     d8e:	ce 5a       	subi	r28, 0xAE	; 174
     d90:	d0 40       	sbci	r29, 0x00	; 0
	_delay_ms(10000);
	
	while(1)
    {
		if (firsttime==1 && Frequency==0){
			Frequency = 30.0;
     d92:	e1 2c       	mov	r14, r1
     d94:	f1 2c       	mov	r15, r1
     d96:	0f 2e       	mov	r0, r31
     d98:	f0 ef       	ldi	r31, 0xF0	; 240
     d9a:	3f 2e       	mov	r3, r31
     d9c:	f0 2d       	mov	r31, r0
     d9e:	0f 2e       	mov	r0, r31
     da0:	f1 e4       	ldi	r31, 0x41	; 65
     da2:	cf 2e       	mov	r12, r31
     da4:	f0 2d       	mov	r31, r0
     da6:	14 c0       	rjmp	.+40     	; 0xdd0 <main+0x1f0>
	Send_Command(&FRQ_STP_Write_CMD,&Dummy,write_Response,write_Command_Send_Count);
	_delay_ms(10000);
	
	while(1)
    {
		if (firsttime==1 && Frequency==0){
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	a9 01       	movw	r20, r18
     dae:	6e 2d       	mov	r22, r14
     db0:	7f 2d       	mov	r23, r15
     db2:	83 2d       	mov	r24, r3
     db4:	9c 2d       	mov	r25, r12
     db6:	db d3       	rcall	.+1974   	; 0x156e <__cmpsf2>
     db8:	81 11       	cpse	r24, r1
     dba:	0a c0       	rjmp	.+20     	; 0xdd0 <main+0x1f0>
			Frequency = 30.0;
     dbc:	e1 2c       	mov	r14, r1
     dbe:	f1 2c       	mov	r15, r1
     dc0:	0f 2e       	mov	r0, r31
     dc2:	f0 ef       	ldi	r31, 0xF0	; 240
     dc4:	3f 2e       	mov	r3, r31
     dc6:	f0 2d       	mov	r31, r0
     dc8:	0f 2e       	mov	r0, r31
     dca:	f1 e4       	ldi	r31, 0x41	; 65
     dcc:	cf 2e       	mov	r12, r31
     dce:	f0 2d       	mov	r31, r0
		}
		
		//_delay_ms(1000); //vg commenting out master delay
		//Read Output Frequency
		Send_Command(&FRQ_Read_CMD,&FRQ,read_Response,read_Command_Send_Count);
     dd0:	26 e0       	ldi	r18, 0x06	; 6
     dd2:	47 e0       	ldi	r20, 0x07	; 7
     dd4:	be 01       	movw	r22, r28
     dd6:	63 5f       	subi	r22, 0xF3	; 243
     dd8:	7f 4f       	sbci	r23, 0xFF	; 255
     dda:	ce 01       	movw	r24, r28
     ddc:	83 59       	subi	r24, 0x93	; 147
     dde:	9f 4f       	sbci	r25, 0xFF	; 255
     de0:	4b de       	rcall	.-874    	; 0xa78 <Send_Command>
		//Read Output Voltage
		Send_Command(&OVO_Read_CMD,&OVO,read_Response,read_Command_Send_Count);
     de2:	26 e0       	ldi	r18, 0x06	; 6
     de4:	47 e0       	ldi	r20, 0x07	; 7
     de6:	be 01       	movw	r22, r28
     de8:	6b 5f       	subi	r22, 0xFB	; 251
     dea:	7f 4f       	sbci	r23, 0xFF	; 255
     dec:	ce 01       	movw	r24, r28
     dee:	81 58       	subi	r24, 0x81	; 129
     df0:	9f 4f       	sbci	r25, 0xFF	; 255
     df2:	42 de       	rcall	.-892    	; 0xa78 <Send_Command>
		//Read Output Power
		Send_Command(&OPW_Read_CMD,&OPW,read_Response,read_Command_Send_Count);
     df4:	26 e0       	ldi	r18, 0x06	; 6
     df6:	47 e0       	ldi	r20, 0x07	; 7
     df8:	be 01       	movw	r22, r28
     dfa:	6d 5f       	subi	r22, 0xFD	; 253
     dfc:	7f 4f       	sbci	r23, 0xFF	; 255
     dfe:	ce 01       	movw	r24, r28
     e00:	8d 58       	subi	r24, 0x8D	; 141
     e02:	9f 4f       	sbci	r25, 0xFF	; 255
     e04:	39 de       	rcall	.-910    	; 0xa78 <Send_Command>
		//Read Output Current
		Send_Command(&OCU_Read_CMD,&OCU,read_Response,read_Command_Send_Count);
     e06:	26 e0       	ldi	r18, 0x06	; 6
     e08:	47 e0       	ldi	r20, 0x07	; 7
     e0a:	be 01       	movw	r22, r28
     e0c:	69 5f       	subi	r22, 0xF9	; 249
     e0e:	7f 4f       	sbci	r23, 0xFF	; 255
     e10:	ce 01       	movw	r24, r28
     e12:	87 58       	subi	r24, 0x87	; 135
     e14:	9f 4f       	sbci	r25, 0xFF	; 255
     e16:	30 de       	rcall	.-928    	; 0xa78 <Send_Command>
		//Read Fault 1
		Send_Command(&FL1_Read_CMD,&FL1,read_Response,read_Command_Send_Count);
     e18:	26 e0       	ldi	r18, 0x06	; 6
     e1a:	47 e0       	ldi	r20, 0x07	; 7
     e1c:	be 01       	movw	r22, r28
     e1e:	67 5f       	subi	r22, 0xF7	; 247
     e20:	7f 4f       	sbci	r23, 0xFF	; 255
     e22:	ce 01       	movw	r24, r28
     e24:	8b 57       	subi	r24, 0x7B	; 123
     e26:	9f 4f       	sbci	r25, 0xFF	; 255
     e28:	27 de       	rcall	.-946    	; 0xa78 <Send_Command>
		//Read DC bus Voltage
		Send_Command(&DCV_Read_CMD,&DCV,read_Response,read_Command_Send_Count);
     e2a:	26 e0       	ldi	r18, 0x06	; 6
     e2c:	47 e0       	ldi	r20, 0x07	; 7
     e2e:	be 01       	movw	r22, r28
     e30:	6f 5f       	subi	r22, 0xFF	; 255
     e32:	7f 4f       	sbci	r23, 0xFF	; 255
     e34:	ce 01       	movw	r24, r28
     e36:	89 59       	subi	r24, 0x99	; 153
     e38:	9f 4f       	sbci	r25, 0xFF	; 255
     e3a:	1e de       	rcall	.-964    	; 0xa78 <Send_Command>
		//Input Current
		I_current=Input_Current();
     e3c:	08 db       	rcall	.-2544   	; 0x44e <Input_Current>
     e3e:	2b 01       	movw	r4, r22
     e40:	3c 01       	movw	r6, r24
		
		if (FRQ>3000){
     e42:	0d 85       	ldd	r16, Y+13	; 0x0d
     e44:	1e 85       	ldd	r17, Y+14	; 0x0e
     e46:	09 3b       	cpi	r16, 0xB9	; 185
     e48:	8b e0       	ldi	r24, 0x0B	; 11
     e4a:	18 07       	cpc	r17, r24
     e4c:	30 f0       	brcs	.+12     	; 0xe5a <main+0x27a>
			FRQ_previous = FRQ;
     e4e:	c4 55       	subi	r28, 0x54	; 84
     e50:	df 4f       	sbci	r29, 0xFF	; 255
     e52:	19 83       	std	Y+1, r17	; 0x01
     e54:	08 83       	st	Y, r16
     e56:	cc 5a       	subi	r28, 0xAC	; 172
     e58:	d0 40       	sbci	r29, 0x00	; 0
		}
		//Int to float 
		FRQ_Float = (double)FRQ/100.0;
		OPW_Float = (double)OPW/100.0;
     e5a:	6b 81       	ldd	r22, Y+3	; 0x03
     e5c:	7c 81       	ldd	r23, Y+4	; 0x04
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	1d d4       	rcall	.+2106   	; 0x169e <__floatunsisf>
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	48 ec       	ldi	r20, 0xC8	; 200
     e6a:	52 e4       	ldi	r21, 0x42	; 66
     e6c:	84 d3       	rcall	.+1800   	; 0x1576 <__divsf3>
     e6e:	86 2e       	mov	r8, r22
     e70:	97 2e       	mov	r9, r23
     e72:	a8 2e       	mov	r10, r24
     e74:	b9 2e       	mov	r11, r25
		OCU_Float = (double)OCU/10.0;
     e76:	6f 81       	ldd	r22, Y+7	; 0x07
     e78:	78 85       	ldd	r23, Y+8	; 0x08
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	0f d4       	rcall	.+2078   	; 0x169e <__floatunsisf>
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	40 e2       	ldi	r20, 0x20	; 32
     e86:	51 e4       	ldi	r21, 0x41	; 65
     e88:	76 d3       	rcall	.+1772   	; 0x1576 <__divsf3>
     e8a:	d6 2e       	mov	r13, r22
     e8c:	c7 55       	subi	r28, 0x57	; 87
     e8e:	df 4f       	sbci	r29, 0xFF	; 255
     e90:	78 83       	st	Y, r23
     e92:	c9 5a       	subi	r28, 0xA9	; 169
     e94:	d0 40       	sbci	r29, 0x00	; 0
     e96:	c6 55       	subi	r28, 0x56	; 86
     e98:	df 4f       	sbci	r29, 0xFF	; 255
     e9a:	88 83       	st	Y, r24
     e9c:	ca 5a       	subi	r28, 0xAA	; 170
     e9e:	d0 40       	sbci	r29, 0x00	; 0
     ea0:	c5 55       	subi	r28, 0x55	; 85
     ea2:	df 4f       	sbci	r29, 0xFF	; 255
     ea4:	98 83       	st	Y, r25
     ea6:	cb 5a       	subi	r28, 0xAB	; 171
     ea8:	d0 40       	sbci	r29, 0x00	; 0
		
		// Convert Values to ASCII
		itoa(DCV,ch1,10);
     eaa:	4a e0       	ldi	r20, 0x0A	; 10
     eac:	50 e0       	ldi	r21, 0x00	; 0
     eae:	be 01       	movw	r22, r28
     eb0:	6f 5e       	subi	r22, 0xEF	; 239
     eb2:	7f 4f       	sbci	r23, 0xFF	; 255
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	9a 81       	ldd	r25, Y+2	; 0x02
     eb8:	7f d5       	rcall	.+2814   	; 0x19b8 <itoa>
		
		if (FRQ>3000){
			FRQ_previous = FRQ;
		}
		//Int to float 
		FRQ_Float = (double)FRQ/100.0;
     eba:	b8 01       	movw	r22, r16
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	ee d3       	rcall	.+2012   	; 0x169e <__floatunsisf>
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	48 ec       	ldi	r20, 0xC8	; 200
     ec8:	52 e4       	ldi	r21, 0x42	; 66
     eca:	55 d3       	rcall	.+1706   	; 0x1576 <__divsf3>
		OPW_Float = (double)OPW/100.0;
		OCU_Float = (double)OCU/10.0;
		
		// Convert Values to ASCII
		itoa(DCV,ch1,10);
		dtostrf(FRQ_Float,3,1,ch2);
     ecc:	8e 01       	movw	r16, r28
     ece:	0c 5e       	subi	r16, 0xEC	; 236
     ed0:	1f 4f       	sbci	r17, 0xFF	; 255
     ed2:	21 e0       	ldi	r18, 0x01	; 1
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	43 e0       	ldi	r20, 0x03	; 3
     ed8:	50 e0       	ldi	r21, 0x00	; 0
     eda:	4e d5       	rcall	.+2716   	; 0x1978 <dtostrf>
		dtostrf(OPW_Float,3,2,ch4);				
     edc:	8e 01       	movw	r16, r28
     ede:	01 5e       	subi	r16, 0xE1	; 225
     ee0:	1f 4f       	sbci	r17, 0xFF	; 255
     ee2:	22 e0       	ldi	r18, 0x02	; 2
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	43 e0       	ldi	r20, 0x03	; 3
     ee8:	50 e0       	ldi	r21, 0x00	; 0
     eea:	68 2d       	mov	r22, r8
     eec:	79 2d       	mov	r23, r9
     eee:	8a 2d       	mov	r24, r10
     ef0:	9b 2d       	mov	r25, r11
     ef2:	42 d5       	rcall	.+2692   	; 0x1978 <dtostrf>
		dtostrf(OCU_Float,3,1,ch5);
     ef4:	8e 01       	movw	r16, r28
     ef6:	0b 5d       	subi	r16, 0xDB	; 219
     ef8:	1f 4f       	sbci	r17, 0xFF	; 255
     efa:	21 e0       	ldi	r18, 0x01	; 1
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	43 e0       	ldi	r20, 0x03	; 3
     f00:	50 e0       	ldi	r21, 0x00	; 0
     f02:	c7 55       	subi	r28, 0x57	; 87
     f04:	df 4f       	sbci	r29, 0xFF	; 255
     f06:	a8 81       	ld	r26, Y
     f08:	c9 5a       	subi	r28, 0xA9	; 169
     f0a:	d0 40       	sbci	r29, 0x00	; 0
     f0c:	c6 55       	subi	r28, 0x56	; 86
     f0e:	df 4f       	sbci	r29, 0xFF	; 255
     f10:	f8 81       	ld	r31, Y
     f12:	ca 5a       	subi	r28, 0xAA	; 170
     f14:	d0 40       	sbci	r29, 0x00	; 0
     f16:	c5 55       	subi	r28, 0x55	; 85
     f18:	df 4f       	sbci	r29, 0xFF	; 255
     f1a:	e8 81       	ld	r30, Y
     f1c:	cb 5a       	subi	r28, 0xAB	; 171
     f1e:	d0 40       	sbci	r29, 0x00	; 0
     f20:	6d 2d       	mov	r22, r13
     f22:	7a 2f       	mov	r23, r26
     f24:	8f 2f       	mov	r24, r31
     f26:	9e 2f       	mov	r25, r30
     f28:	27 d5       	rcall	.+2638   	; 0x1978 <dtostrf>
		//itoa(FRQ,ch2,10);
		//itoa(OPW,ch4,10);
		//itoa(OCU,ch5,10);
		itoa(OVO,ch3,10);
     f2a:	4a e0       	ldi	r20, 0x0A	; 10
     f2c:	50 e0       	ldi	r21, 0x00	; 0
     f2e:	be 01       	movw	r22, r28
     f30:	67 5e       	subi	r22, 0xE7	; 231
     f32:	7f 4f       	sbci	r23, 0xFF	; 255
     f34:	8d 81       	ldd	r24, Y+5	; 0x05
     f36:	9e 81       	ldd	r25, Y+6	; 0x06
     f38:	3f d5       	rcall	.+2686   	; 0x19b8 <itoa>
		itoa(FL1,ch6,2);
     f3a:	42 e0       	ldi	r20, 0x02	; 2
     f3c:	50 e0       	ldi	r21, 0x00	; 0
     f3e:	be 01       	movw	r22, r28
     f40:	65 5d       	subi	r22, 0xD5	; 213
     f42:	7f 4f       	sbci	r23, 0xFF	; 255
     f44:	89 85       	ldd	r24, Y+9	; 0x09
     f46:	9a 85       	ldd	r25, Y+10	; 0x0a
     f48:	37 d5       	rcall	.+2670   	; 0x19b8 <itoa>
		dtostrf(I_current,3,2,ch8);
     f4a:	8e 01       	movw	r16, r28
     f4c:	05 5c       	subi	r16, 0xC5	; 197
     f4e:	1f 4f       	sbci	r17, 0xFF	; 255
     f50:	22 e0       	ldi	r18, 0x02	; 2
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	43 e0       	ldi	r20, 0x03	; 3
     f56:	50 e0       	ldi	r21, 0x00	; 0
     f58:	c3 01       	movw	r24, r6
     f5a:	b2 01       	movw	r22, r4
     f5c:	0d d5       	rcall	.+2586   	; 0x1978 <dtostrf>
		
		dtostrf(delta_i,6,3,ch9);
     f5e:	6f 96       	adiw	r28, 0x1f	; 31
     f60:	6c ad       	ldd	r22, Y+60	; 0x3c
     f62:	7d ad       	ldd	r23, Y+61	; 0x3d
     f64:	8e ad       	ldd	r24, Y+62	; 0x3e
     f66:	9f ad       	ldd	r25, Y+63	; 0x3f
     f68:	6f 97       	sbiw	r28, 0x1f	; 31
     f6a:	8e 01       	movw	r16, r28
     f6c:	0d 5b       	subi	r16, 0xBD	; 189
     f6e:	1f 4f       	sbci	r17, 0xFF	; 255
     f70:	23 e0       	ldi	r18, 0x03	; 3
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	46 e0       	ldi	r20, 0x06	; 6
     f76:	50 e0       	ldi	r21, 0x00	; 0
     f78:	ff d4       	rcall	.+2558   	; 0x1978 <dtostrf>
		dtostrf(delta_v,8,3 ,ch10);
     f7a:	a3 96       	adiw	r28, 0x23	; 35
     f7c:	6c ad       	ldd	r22, Y+60	; 0x3c
     f7e:	7d ad       	ldd	r23, Y+61	; 0x3d
     f80:	8e ad       	ldd	r24, Y+62	; 0x3e
     f82:	9f ad       	ldd	r25, Y+63	; 0x3f
     f84:	a3 97       	sbiw	r28, 0x23	; 35
     f86:	8e 01       	movw	r16, r28
     f88:	07 5b       	subi	r16, 0xB7	; 183
     f8a:	1f 4f       	sbci	r17, 0xFF	; 255
     f8c:	23 e0       	ldi	r18, 0x03	; 3
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	48 e0       	ldi	r20, 0x08	; 8
     f92:	50 e0       	ldi	r21, 0x00	; 0
     f94:	f1 d4       	rcall	.+2530   	; 0x1978 <dtostrf>
		dtostrf(delta_i_v,6,3,ch11);
     f96:	a7 96       	adiw	r28, 0x27	; 39
     f98:	6c ad       	ldd	r22, Y+60	; 0x3c
     f9a:	7d ad       	ldd	r23, Y+61	; 0x3d
     f9c:	8e ad       	ldd	r24, Y+62	; 0x3e
     f9e:	9f ad       	ldd	r25, Y+63	; 0x3f
     fa0:	a7 97       	sbiw	r28, 0x27	; 39
     fa2:	8e 01       	movw	r16, r28
     fa4:	01 5b       	subi	r16, 0xB1	; 177
     fa6:	1f 4f       	sbci	r17, 0xFF	; 255
     fa8:	23 e0       	ldi	r18, 0x03	; 3
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	46 e0       	ldi	r20, 0x06	; 6
     fae:	50 e0       	ldi	r21, 0x00	; 0
     fb0:	e3 d4       	rcall	.+2502   	; 0x1978 <dtostrf>
		dtostrf(Frequency*10,3,0,ch12);
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	40 e2       	ldi	r20, 0x20	; 32
     fb8:	51 e4       	ldi	r21, 0x41	; 65
     fba:	6e 2d       	mov	r22, r14
     fbc:	7f 2d       	mov	r23, r15
     fbe:	83 2d       	mov	r24, r3
     fc0:	9c 2d       	mov	r25, r12
     fc2:	63 d4       	rcall	.+2246   	; 0x188a <__mulsf3>
     fc4:	8e 01       	movw	r16, r28
     fc6:	0b 5a       	subi	r16, 0xAB	; 171
     fc8:	1f 4f       	sbci	r17, 0xFF	; 255
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	43 e0       	ldi	r20, 0x03	; 3
     fd0:	50 e0       	ldi	r21, 0x00	; 0
     fd2:	d2 d4       	rcall	.+2468   	; 0x1978 <dtostrf>
		
		// LCD Display
		if (NoFault && MotorSwitch){
     fd4:	22 20       	and	r2, r2
     fd6:	09 f4       	brne	.+2      	; 0xfda <main+0x3fa>
     fd8:	79 c0       	rjmp	.+242    	; 0x10cc <main+0x4ec>
     fda:	c8 55       	subi	r28, 0x58	; 88
     fdc:	df 4f       	sbci	r29, 0xFF	; 255
     fde:	98 81       	ld	r25, Y
     fe0:	c8 5a       	subi	r28, 0xA8	; 168
     fe2:	d0 40       	sbci	r29, 0x00	; 0
     fe4:	99 23       	and	r25, r25
     fe6:	09 f4       	brne	.+2      	; 0xfea <main+0x40a>
     fe8:	71 c0       	rjmp	.+226    	; 0x10cc <main+0x4ec>
			if (toggle<4)
     fea:	c2 55       	subi	r28, 0x52	; 82
     fec:	df 4f       	sbci	r29, 0xFF	; 255
     fee:	28 81       	ld	r18, Y
     ff0:	ce 5a       	subi	r28, 0xAE	; 174
     ff2:	d0 40       	sbci	r29, 0x00	; 0
     ff4:	24 30       	cpi	r18, 0x04	; 4
     ff6:	08 f0       	brcs	.+2      	; 0xffa <main+0x41a>
     ff8:	35 c0       	rjmp	.+106    	; 0x1064 <main+0x484>
			{	
				LCDinit();LCDclr();LCDhome();_delay_ms(1); 
     ffa:	74 d9       	rcall	.-3352   	; 0x2e4 <LCDinit>
     ffc:	25 d9       	rcall	.-3510   	; 0x248 <LCDclr>
     ffe:	26 d9       	rcall	.-3508   	; 0x24c <LCDhome>
    1000:	8f ec       	ldi	r24, 0xCF	; 207
    1002:	97 e0       	ldi	r25, 0x07	; 7
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	f1 f7       	brne	.-4      	; 0x1004 <main+0x424>
    1008:	00 c0       	rjmp	.+0      	; 0x100a <main+0x42a>
    100a:	00 00       	nop
				LCDGotoXY(0,0);	LCDstring("FREQUENCY ",10);	 LCDGotoXY(12,0); LCDstring(ch2,4); 
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	38 d9       	rcall	.-3472   	; 0x282 <LCDGotoXY>
    1012:	6a e0       	ldi	r22, 0x0A	; 10
    1014:	87 e6       	ldi	r24, 0x67	; 103
    1016:	91 e0       	ldi	r25, 0x01	; 1
    1018:	1b d9       	rcall	.-3530   	; 0x250 <LCDstring>
    101a:	60 e0       	ldi	r22, 0x00	; 0
    101c:	8c e0       	ldi	r24, 0x0C	; 12
    101e:	31 d9       	rcall	.-3486   	; 0x282 <LCDGotoXY>
    1020:	64 e0       	ldi	r22, 0x04	; 4
    1022:	ce 01       	movw	r24, r28
    1024:	44 96       	adiw	r24, 0x14	; 20
    1026:	14 d9       	rcall	.-3544   	; 0x250 <LCDstring>
				LCDGotoXY(0,1);	LCDstring("DC VOLTAGE ",11); LCDGotoXY(13,1); LCDstring(ch1,3); 
    1028:	61 e0       	ldi	r22, 0x01	; 1
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	2a d9       	rcall	.-3500   	; 0x282 <LCDGotoXY>
    102e:	6b e0       	ldi	r22, 0x0B	; 11
    1030:	82 e7       	ldi	r24, 0x72	; 114
    1032:	91 e0       	ldi	r25, 0x01	; 1
    1034:	0d d9       	rcall	.-3558   	; 0x250 <LCDstring>
    1036:	61 e0       	ldi	r22, 0x01	; 1
    1038:	8d e0       	ldi	r24, 0x0D	; 13
    103a:	23 d9       	rcall	.-3514   	; 0x282 <LCDGotoXY>
    103c:	63 e0       	ldi	r22, 0x03	; 3
    103e:	ce 01       	movw	r24, r28
    1040:	41 96       	adiw	r24, 0x11	; 17
    1042:	06 d9       	rcall	.-3572   	; 0x250 <LCDstring>
				toggle=(toggle+1)%8;
    1044:	c2 55       	subi	r28, 0x52	; 82
    1046:	df 4f       	sbci	r29, 0xFF	; 255
    1048:	28 81       	ld	r18, Y
    104a:	ce 5a       	subi	r28, 0xAE	; 174
    104c:	d0 40       	sbci	r29, 0x00	; 0
    104e:	82 2f       	mov	r24, r18
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	01 96       	adiw	r24, 0x01	; 1
    1054:	87 70       	andi	r24, 0x07	; 7
    1056:	90 78       	andi	r25, 0x80	; 128
    1058:	c2 55       	subi	r28, 0x52	; 82
    105a:	df 4f       	sbci	r29, 0xFF	; 255
    105c:	88 83       	st	Y, r24
    105e:	ce 5a       	subi	r28, 0xAE	; 174
    1060:	d0 40       	sbci	r29, 0x00	; 0
    1062:	34 c0       	rjmp	.+104    	; 0x10cc <main+0x4ec>
			} 
			else
			{
				LCDinit();LCDclr();LCDhome(); _delay_ms(1);
    1064:	3f d9       	rcall	.-3458   	; 0x2e4 <LCDinit>
    1066:	f0 d8       	rcall	.-3616   	; 0x248 <LCDclr>
    1068:	f1 d8       	rcall	.-3614   	; 0x24c <LCDhome>
    106a:	8f ec       	ldi	r24, 0xCF	; 207
    106c:	97 e0       	ldi	r25, 0x07	; 7
    106e:	01 97       	sbiw	r24, 0x01	; 1
    1070:	f1 f7       	brne	.-4      	; 0x106e <main+0x48e>
    1072:	00 c0       	rjmp	.+0      	; 0x1074 <main+0x494>
    1074:	00 00       	nop
				LCDGotoXY(0,0);		LCDstring("O/P POWER ",10);		LCDGotoXY(12,0); LCDstring(ch4,4);
    1076:	60 e0       	ldi	r22, 0x00	; 0
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	03 d9       	rcall	.-3578   	; 0x282 <LCDGotoXY>
    107c:	6a e0       	ldi	r22, 0x0A	; 10
    107e:	8e e7       	ldi	r24, 0x7E	; 126
    1080:	91 e0       	ldi	r25, 0x01	; 1
    1082:	e6 d8       	rcall	.-3636   	; 0x250 <LCDstring>
    1084:	60 e0       	ldi	r22, 0x00	; 0
    1086:	8c e0       	ldi	r24, 0x0C	; 12
    1088:	fc d8       	rcall	.-3592   	; 0x282 <LCDGotoXY>
    108a:	64 e0       	ldi	r22, 0x04	; 4
    108c:	ce 01       	movw	r24, r28
    108e:	4f 96       	adiw	r24, 0x1f	; 31
    1090:	df d8       	rcall	.-3650   	; 0x250 <LCDstring>
				LCDGotoXY(0,1);		LCDstring("O/P CURRENT ",12);	LCDGotoXY(13,1); LCDstring(ch5,3);
    1092:	61 e0       	ldi	r22, 0x01	; 1
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	f5 d8       	rcall	.-3606   	; 0x282 <LCDGotoXY>
    1098:	6c e0       	ldi	r22, 0x0C	; 12
    109a:	89 e8       	ldi	r24, 0x89	; 137
    109c:	91 e0       	ldi	r25, 0x01	; 1
    109e:	d8 d8       	rcall	.-3664   	; 0x250 <LCDstring>
    10a0:	61 e0       	ldi	r22, 0x01	; 1
    10a2:	8d e0       	ldi	r24, 0x0D	; 13
    10a4:	ee d8       	rcall	.-3620   	; 0x282 <LCDGotoXY>
    10a6:	63 e0       	ldi	r22, 0x03	; 3
    10a8:	ce 01       	movw	r24, r28
    10aa:	85 96       	adiw	r24, 0x25	; 37
    10ac:	d1 d8       	rcall	.-3678   	; 0x250 <LCDstring>
				toggle=(toggle+1)%8;
    10ae:	c2 55       	subi	r28, 0x52	; 82
    10b0:	df 4f       	sbci	r29, 0xFF	; 255
    10b2:	28 81       	ld	r18, Y
    10b4:	ce 5a       	subi	r28, 0xAE	; 174
    10b6:	d0 40       	sbci	r29, 0x00	; 0
    10b8:	82 2f       	mov	r24, r18
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	01 96       	adiw	r24, 0x01	; 1
    10be:	87 70       	andi	r24, 0x07	; 7
    10c0:	90 78       	andi	r25, 0x80	; 128
    10c2:	c2 55       	subi	r28, 0x52	; 82
    10c4:	df 4f       	sbci	r29, 0xFF	; 255
    10c6:	88 83       	st	Y, r24
    10c8:	ce 5a       	subi	r28, 0xAE	; 174
    10ca:	d0 40       	sbci	r29, 0x00	; 0
		}
		
		 
		/* Datalog */
		// Input Current
		UART_1_Putc('$');
    10cc:	84 e2       	ldi	r24, 0x24	; 36
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	a1 d9       	rcall	.-3262   	; 0x414 <UART_1_Putc>
		UART_1_Puts("A01=");
    10d2:	86 e9       	ldi	r24, 0x96	; 150
    10d4:	91 e0       	ldi	r25, 0x01	; 1
    10d6:	a6 d9       	rcall	.-3252   	; 0x424 <UART_1_Puts>
		UART_1_Puts(ch8);
    10d8:	ce 01       	movw	r24, r28
    10da:	cb 96       	adiw	r24, 0x3b	; 59
    10dc:	a3 d9       	rcall	.-3258   	; 0x424 <UART_1_Puts>
		// DC Voltage
		UART_1_Puts("&A02=");
    10de:	8b e9       	ldi	r24, 0x9B	; 155
    10e0:	91 e0       	ldi	r25, 0x01	; 1
    10e2:	a0 d9       	rcall	.-3264   	; 0x424 <UART_1_Puts>
		UART_1_Putc(ch1[0]);
    10e4:	89 89       	ldd	r24, Y+17	; 0x11
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	95 d9       	rcall	.-3286   	; 0x414 <UART_1_Putc>
		UART_1_Putc(ch1[1]);
    10ea:	8a 89       	ldd	r24, Y+18	; 0x12
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	92 d9       	rcall	.-3292   	; 0x414 <UART_1_Putc>
		UART_1_Putc(ch1[2]);
    10f0:	8b 89       	ldd	r24, Y+19	; 0x13
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	8f d9       	rcall	.-3298   	; 0x414 <UART_1_Putc>
		// Output Power
		UART_1_Puts("&A03=");
    10f6:	81 ea       	ldi	r24, 0xA1	; 161
    10f8:	91 e0       	ldi	r25, 0x01	; 1
    10fa:	94 d9       	rcall	.-3288   	; 0x424 <UART_1_Puts>
		UART_1_Puts(ch4);
    10fc:	ce 01       	movw	r24, r28
    10fe:	4f 96       	adiw	r24, 0x1f	; 31
    1100:	91 d9       	rcall	.-3294   	; 0x424 <UART_1_Puts>
		// Actual Frequency
		UART_1_Puts("&A04=");
    1102:	87 ea       	ldi	r24, 0xA7	; 167
    1104:	91 e0       	ldi	r25, 0x01	; 1
    1106:	8e d9       	rcall	.-3300   	; 0x424 <UART_1_Puts>
		UART_1_Puts(ch2);
    1108:	ce 01       	movw	r24, r28
    110a:	44 96       	adiw	r24, 0x14	; 20
    110c:	8b d9       	rcall	.-3306   	; 0x424 <UART_1_Puts>
		//vg Output Current
		UART_1_Puts("&A19=");
    110e:	8d ea       	ldi	r24, 0xAD	; 173
    1110:	91 e0       	ldi	r25, 0x01	; 1
    1112:	88 d9       	rcall	.-3312   	; 0x424 <UART_1_Puts>
		UART_1_Puts(ch5);
    1114:	ce 01       	movw	r24, r28
    1116:	85 96       	adiw	r24, 0x25	; 37
    1118:	85 d9       	rcall	.-3318   	; 0x424 <UART_1_Puts>
		
		// Over Current/Motor Short Circuit
		UART_1_Puts("&A05=");
    111a:	83 eb       	ldi	r24, 0xB3	; 179
    111c:	91 e0       	ldi	r25, 0x01	; 1
    111e:	82 d9       	rcall	.-3324   	; 0x424 <UART_1_Puts>
		if ((FL1 & 0x0001)==0x0001)
    1120:	89 85       	ldd	r24, Y+9	; 0x09
    1122:	80 ff       	sbrs	r24, 0
    1124:	1c c0       	rjmp	.+56     	; 0x115e <main+0x57e>
		{
			UART_1_Putc('1');
    1126:	81 e3       	ldi	r24, 0x31	; 49
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	74 d9       	rcall	.-3352   	; 0x414 <UART_1_Putc>
			NoFault = 0;
			LCDinit();LCDclr();LCDhome(); _delay_ms(1);
    112c:	db d8       	rcall	.-3658   	; 0x2e4 <LCDinit>
    112e:	8c d8       	rcall	.-3816   	; 0x248 <LCDclr>
    1130:	8d d8       	rcall	.-3814   	; 0x24c <LCDhome>
    1132:	8f ec       	ldi	r24, 0xCF	; 207
    1134:	97 e0       	ldi	r25, 0x07	; 7
    1136:	01 97       	sbiw	r24, 0x01	; 1
    1138:	f1 f7       	brne	.-4      	; 0x1136 <main+0x556>
    113a:	00 c0       	rjmp	.+0      	; 0x113c <main+0x55c>
    113c:	00 00       	nop
			LCDGotoXY(0,0);		LCDstring("  OC/SHORT CKT  ",16);
    113e:	60 e0       	ldi	r22, 0x00	; 0
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	9f d8       	rcall	.-3778   	; 0x282 <LCDGotoXY>
    1144:	60 e1       	ldi	r22, 0x10	; 16
    1146:	89 eb       	ldi	r24, 0xB9	; 185
    1148:	91 e0       	ldi	r25, 0x01	; 1
    114a:	82 d8       	rcall	.-3836   	; 0x250 <LCDstring>
			LCDGotoXY(0,1);		LCDstring(" PLEASE RESTART ",16);
    114c:	61 e0       	ldi	r22, 0x01	; 1
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	98 d8       	rcall	.-3792   	; 0x282 <LCDGotoXY>
    1152:	60 e1       	ldi	r22, 0x10	; 16
    1154:	8a ec       	ldi	r24, 0xCA	; 202
    1156:	91 e0       	ldi	r25, 0x01	; 1
    1158:	7b d8       	rcall	.-3850   	; 0x250 <LCDstring>
		// Over Current/Motor Short Circuit
		UART_1_Puts("&A05=");
		if ((FL1 & 0x0001)==0x0001)
		{
			UART_1_Putc('1');
			NoFault = 0;
    115a:	21 2c       	mov	r2, r1
    115c:	03 c0       	rjmp	.+6      	; 0x1164 <main+0x584>
			LCDGotoXY(0,0);		LCDstring("  OC/SHORT CKT  ",16);
			LCDGotoXY(0,1);		LCDstring(" PLEASE RESTART ",16);
		}
		else
		{
			UART_1_Putc('0');
    115e:	80 e3       	ldi	r24, 0x30	; 48
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	58 d9       	rcall	.-3408   	; 0x414 <UART_1_Putc>
		}
		
		// DC Over Voltage
		UART_1_Puts("&A06=");
    1164:	8b ed       	ldi	r24, 0xDB	; 219
    1166:	91 e0       	ldi	r25, 0x01	; 1
    1168:	5d d9       	rcall	.-3398   	; 0x424 <UART_1_Puts>
		if ((FL1 & 0x0002)==0x0002)
    116a:	89 85       	ldd	r24, Y+9	; 0x09
    116c:	81 ff       	sbrs	r24, 1
    116e:	1c c0       	rjmp	.+56     	; 0x11a8 <main+0x5c8>
		{
			UART_1_Putc('1');
    1170:	81 e3       	ldi	r24, 0x31	; 49
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	4f d9       	rcall	.-3426   	; 0x414 <UART_1_Putc>
			NoFault = 0;
			LCDinit();LCDclr();LCDhome(); _delay_ms(1);
    1176:	b6 d8       	rcall	.-3732   	; 0x2e4 <LCDinit>
    1178:	67 d8       	rcall	.-3890   	; 0x248 <LCDclr>
    117a:	68 d8       	rcall	.-3888   	; 0x24c <LCDhome>
    117c:	8f ec       	ldi	r24, 0xCF	; 207
    117e:	97 e0       	ldi	r25, 0x07	; 7
    1180:	01 97       	sbiw	r24, 0x01	; 1
    1182:	f1 f7       	brne	.-4      	; 0x1180 <main+0x5a0>
    1184:	00 c0       	rjmp	.+0      	; 0x1186 <main+0x5a6>
    1186:	00 00       	nop
			LCDGotoXY(0,0);		LCDstring("  OVER VOLTAGE  ",16);
    1188:	60 e0       	ldi	r22, 0x00	; 0
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	7a d8       	rcall	.-3852   	; 0x282 <LCDGotoXY>
    118e:	60 e1       	ldi	r22, 0x10	; 16
    1190:	81 ee       	ldi	r24, 0xE1	; 225
    1192:	91 e0       	ldi	r25, 0x01	; 1
    1194:	5d d8       	rcall	.-3910   	; 0x250 <LCDstring>
			LCDGotoXY(0,1);		LCDstring(" PLEASE RESTART ",16);
    1196:	61 e0       	ldi	r22, 0x01	; 1
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	73 d8       	rcall	.-3866   	; 0x282 <LCDGotoXY>
    119c:	60 e1       	ldi	r22, 0x10	; 16
    119e:	8a ec       	ldi	r24, 0xCA	; 202
    11a0:	91 e0       	ldi	r25, 0x01	; 1
    11a2:	56 d8       	rcall	.-3924   	; 0x250 <LCDstring>
		// DC Over Voltage
		UART_1_Puts("&A06=");
		if ((FL1 & 0x0002)==0x0002)
		{
			UART_1_Putc('1');
			NoFault = 0;
    11a4:	21 2c       	mov	r2, r1
    11a6:	03 c0       	rjmp	.+6      	; 0x11ae <main+0x5ce>
			LCDGotoXY(0,0);		LCDstring("  OVER VOLTAGE  ",16);
			LCDGotoXY(0,1);		LCDstring(" PLEASE RESTART ",16);
		}
		else
		{
			UART_1_Putc('0');
    11a8:	80 e3       	ldi	r24, 0x30	; 48
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	33 d9       	rcall	.-3482   	; 0x414 <UART_1_Putc>
		}
		
		// Motor OverLoad
		UART_1_Puts("&A07="); 
    11ae:	82 ef       	ldi	r24, 0xF2	; 242
    11b0:	91 e0       	ldi	r25, 0x01	; 1
    11b2:	38 d9       	rcall	.-3472   	; 0x424 <UART_1_Puts>
		if ((FL1 & 0x0004)==0x0004)
    11b4:	89 85       	ldd	r24, Y+9	; 0x09
    11b6:	82 ff       	sbrs	r24, 2
    11b8:	1c c0       	rjmp	.+56     	; 0x11f2 <main+0x612>
		{
			UART_1_Putc('1');
    11ba:	81 e3       	ldi	r24, 0x31	; 49
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	2a d9       	rcall	.-3500   	; 0x414 <UART_1_Putc>
			NoFault = 0;
			LCDinit();LCDclr();LCDhome(); _delay_ms(1);
    11c0:	91 d8       	rcall	.-3806   	; 0x2e4 <LCDinit>
    11c2:	42 d8       	rcall	.-3964   	; 0x248 <LCDclr>
    11c4:	43 d8       	rcall	.-3962   	; 0x24c <LCDhome>
    11c6:	8f ec       	ldi	r24, 0xCF	; 207
    11c8:	97 e0       	ldi	r25, 0x07	; 7
    11ca:	01 97       	sbiw	r24, 0x01	; 1
    11cc:	f1 f7       	brne	.-4      	; 0x11ca <main+0x5ea>
    11ce:	00 c0       	rjmp	.+0      	; 0x11d0 <main+0x5f0>
    11d0:	00 00       	nop
			LCDGotoXY(0,0);		LCDstring(" MOTOR OVERLOAD ",16);
    11d2:	60 e0       	ldi	r22, 0x00	; 0
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	55 d8       	rcall	.-3926   	; 0x282 <LCDGotoXY>
    11d8:	60 e1       	ldi	r22, 0x10	; 16
    11da:	88 ef       	ldi	r24, 0xF8	; 248
    11dc:	91 e0       	ldi	r25, 0x01	; 1
    11de:	38 d8       	rcall	.-3984   	; 0x250 <LCDstring>
			LCDGotoXY(0,1);		LCDstring(" PLEASE RESTART ",16);
    11e0:	61 e0       	ldi	r22, 0x01	; 1
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	4e d8       	rcall	.-3940   	; 0x282 <LCDGotoXY>
    11e6:	60 e1       	ldi	r22, 0x10	; 16
    11e8:	8a ec       	ldi	r24, 0xCA	; 202
    11ea:	91 e0       	ldi	r25, 0x01	; 1
    11ec:	31 d8       	rcall	.-3998   	; 0x250 <LCDstring>
		// Motor OverLoad
		UART_1_Puts("&A07="); 
		if ((FL1 & 0x0004)==0x0004)
		{
			UART_1_Putc('1');
			NoFault = 0;
    11ee:	21 2c       	mov	r2, r1
    11f0:	03 c0       	rjmp	.+6      	; 0x11f8 <main+0x618>
			LCDGotoXY(0,0);		LCDstring(" MOTOR OVERLOAD ",16);
			LCDGotoXY(0,1);		LCDstring(" PLEASE RESTART ",16);
		}
		else
		{
			UART_1_Putc('0');
    11f2:	80 e3       	ldi	r24, 0x30	; 48
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	0e d9       	rcall	.-3556   	; 0x414 <UART_1_Putc>
		}
		
		// DC bus under-voltage
		UART_1_Puts("&A12=");
    11f8:	89 e0       	ldi	r24, 0x09	; 9
    11fa:	92 e0       	ldi	r25, 0x02	; 2
    11fc:	13 d9       	rcall	.-3546   	; 0x424 <UART_1_Puts>
void Send_Command(uint8_t *cmd, uint16_t *value, uint8_t read_count, uint8_t write_count);
void Init_ADC();
double Input_Current();


int main(void)
    11fe:	89 85       	ldd	r24, Y+9	; 0x09
    1200:	9a 85       	ldd	r25, Y+10	; 0x0a
    1202:	88 27       	eor	r24, r24
    1204:	98 71       	andi	r25, 0x18	; 24
			UART_1_Putc('0');
		}
		
		// DC bus under-voltage
		UART_1_Puts("&A12=");
		if ((FL1 & 0x0800)==0x0800 || (FL1 & 0x1000)==0x1000)
    1206:	89 2b       	or	r24, r25
    1208:	e9 f0       	breq	.+58     	; 0x1244 <main+0x664>
		{ 
			UART_1_Putc('1');
    120a:	81 e3       	ldi	r24, 0x31	; 49
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	02 d9       	rcall	.-3580   	; 0x414 <UART_1_Putc>
			// to reset the drive on UV
			Send_Command(&FRQ_STP_Write_CMD,&Dummy,write_Response,write_Command_Send_Count);
    1210:	2b e0       	ldi	r18, 0x0B	; 11
    1212:	48 e0       	ldi	r20, 0x08	; 8
    1214:	be 01       	movw	r22, r28
    1216:	61 5f       	subi	r22, 0xF1	; 241
    1218:	7f 4f       	sbci	r23, 0xFF	; 255
    121a:	ce 01       	movw	r24, r28
    121c:	84 56       	subi	r24, 0x64	; 100
    121e:	9f 4f       	sbci	r25, 0xFF	; 255
    1220:	2b dc       	rcall	.-1962   	; 0xa78 <Send_Command>
    1222:	9f ef       	ldi	r25, 0xFF	; 255
    1224:	21 e1       	ldi	r18, 0x11	; 17
    1226:	8a e7       	ldi	r24, 0x7A	; 122
    1228:	91 50       	subi	r25, 0x01	; 1
    122a:	20 40       	sbci	r18, 0x00	; 0
    122c:	80 40       	sbci	r24, 0x00	; 0
    122e:	e1 f7       	brne	.-8      	; 0x1228 <main+0x648>
    1230:	00 c0       	rjmp	.+0      	; 0x1232 <main+0x652>
    1232:	00 00       	nop
			firsttime=0;
    1234:	c9 55       	subi	r28, 0x59	; 89
    1236:	df 4f       	sbci	r29, 0xFF	; 255
    1238:	18 82       	st	Y, r1
    123a:	c7 5a       	subi	r28, 0xA7	; 167
    123c:	d0 40       	sbci	r29, 0x00	; 0
			uv=1;
    123e:	dd 24       	eor	r13, r13
    1240:	d3 94       	inc	r13
    1242:	04 c0       	rjmp	.+8      	; 0x124c <main+0x66c>
			_delay_ms(5000);
		}
		else
		{
			UART_1_Putc('0');
    1244:	80 e3       	ldi	r24, 0x30	; 48
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	e5 d8       	rcall	.-3638   	; 0x414 <UART_1_Putc>
			uv=0;
    124a:	d1 2c       	mov	r13, r1
		}
		
		// Motor Phase Loss
		UART_1_Puts("&A13=");
    124c:	8f e0       	ldi	r24, 0x0F	; 15
    124e:	92 e0       	ldi	r25, 0x02	; 2
    1250:	e9 d8       	rcall	.-3630   	; 0x424 <UART_1_Puts>
		if ((FL1 & 0x2000)==0x2000)
    1252:	89 85       	ldd	r24, Y+9	; 0x09
    1254:	9a 85       	ldd	r25, Y+10	; 0x0a
    1256:	95 ff       	sbrs	r25, 5
    1258:	21 c0       	rjmp	.+66     	; 0x129c <main+0x6bc>
		{
			UART_1_Putc('1');
    125a:	81 e3       	ldi	r24, 0x31	; 49
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	da d8       	rcall	.-3660   	; 0x414 <UART_1_Putc>
			NoFault = 0;
			LCDinit();LCDclr();LCDhome(); _delay_ms(1);
    1260:	41 d8       	rcall	.-3966   	; 0x2e4 <LCDinit>
    1262:	0e 94 24 01 	call	0x248	; 0x248 <LCDclr>
    1266:	0e 94 26 01 	call	0x24c	; 0x24c <LCDhome>
    126a:	8f ec       	ldi	r24, 0xCF	; 207
    126c:	97 e0       	ldi	r25, 0x07	; 7
    126e:	01 97       	sbiw	r24, 0x01	; 1
    1270:	f1 f7       	brne	.-4      	; 0x126e <main+0x68e>
    1272:	00 c0       	rjmp	.+0      	; 0x1274 <main+0x694>
    1274:	00 00       	nop
			LCDGotoXY(0,0);		LCDstring(" MTR PHASE LOSS ",16);
    1276:	60 e0       	ldi	r22, 0x00	; 0
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	03 d8       	rcall	.-4090   	; 0x282 <LCDGotoXY>
    127c:	60 e1       	ldi	r22, 0x10	; 16
    127e:	85 e1       	ldi	r24, 0x15	; 21
    1280:	92 e0       	ldi	r25, 0x02	; 2
    1282:	0e 94 28 01 	call	0x250	; 0x250 <LCDstring>
			LCDGotoXY(0,1);		LCDstring(" PLEASE RESTART ",16);
    1286:	61 e0       	ldi	r22, 0x01	; 1
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	0e 94 41 01 	call	0x282	; 0x282 <LCDGotoXY>
    128e:	60 e1       	ldi	r22, 0x10	; 16
    1290:	8a ec       	ldi	r24, 0xCA	; 202
    1292:	91 e0       	ldi	r25, 0x01	; 1
    1294:	0e 94 28 01 	call	0x250	; 0x250 <LCDstring>
		// Motor Phase Loss
		UART_1_Puts("&A13=");
		if ((FL1 & 0x2000)==0x2000)
		{
			UART_1_Putc('1');
			NoFault = 0;
    1298:	21 2c       	mov	r2, r1
    129a:	03 c0       	rjmp	.+6      	; 0x12a2 <main+0x6c2>
			LCDGotoXY(0,0);		LCDstring(" MTR PHASE LOSS ",16);
			LCDGotoXY(0,1);		LCDstring(" PLEASE RESTART ",16);
		}
		else
		{
			UART_1_Putc('0');
    129c:	80 e3       	ldi	r24, 0x30	; 48
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	b9 d8       	rcall	.-3726   	; 0x414 <UART_1_Putc>
		}
		
		// Motor Dry Run
		UART_1_Puts("&A15=");
    12a2:	86 e2       	ldi	r24, 0x26	; 38
    12a4:	92 e0       	ldi	r25, 0x02	; 2
    12a6:	be d8       	rcall	.-3716   	; 0x424 <UART_1_Puts>
		{
			UART_1_Putc('1');
		}
		else
		{
			UART_1_Putc('0');
    12a8:	80 e3       	ldi	r24, 0x30	; 48
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	b3 d8       	rcall	.-3738   	; 0x414 <UART_1_Putc>
		}
		
		//vg Motor Switch
		UART_1_Puts("&A16=");
    12ae:	8c e2       	ldi	r24, 0x2C	; 44
    12b0:	92 e0       	ldi	r25, 0x02	; 2
    12b2:	b8 d8       	rcall	.-3728   	; 0x424 <UART_1_Puts>
		if (MotorSwitch==1)
    12b4:	c8 55       	subi	r28, 0x58	; 88
    12b6:	df 4f       	sbci	r29, 0xFF	; 255
    12b8:	98 81       	ld	r25, Y
    12ba:	c8 5a       	subi	r28, 0xA8	; 168
    12bc:	d0 40       	sbci	r29, 0x00	; 0
    12be:	91 30       	cpi	r25, 0x01	; 1
    12c0:	21 f4       	brne	.+8      	; 0x12ca <main+0x6ea>
		{
			UART_1_Putc('1');
    12c2:	81 e3       	ldi	r24, 0x31	; 49
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	a6 d8       	rcall	.-3764   	; 0x414 <UART_1_Putc>
    12c8:	03 c0       	rjmp	.+6      	; 0x12d0 <main+0x6f0>
		}
		else
		{
			UART_1_Putc('0');
    12ca:	80 e3       	ldi	r24, 0x30	; 48
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	a2 d8       	rcall	.-3772   	; 0x414 <UART_1_Putc>
		}
		
		UART_1_Putc('#'); //vg data log terminator
    12d0:	83 e2       	ldi	r24, 0x23	; 35
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	9f d8       	rcall	.-3778   	; 0x414 <UART_1_Putc>
		UART_1_Puts(" dI=");	UART_1_Puts(ch9); 
		UART_1_Puts(" dV=");	UART_1_Puts(ch10); UART_1_Puts("\r\n");
		//UART_1_Puts(" dI_dV=");	UART_1_Puts(ch11); */
		
		// vg Diagnostic
		if (firsttime==1){
    12d6:	c9 55       	subi	r28, 0x59	; 89
    12d8:	df 4f       	sbci	r29, 0xFF	; 255
    12da:	28 81       	ld	r18, Y
    12dc:	c7 5a       	subi	r28, 0xA7	; 167
    12de:	d0 40       	sbci	r29, 0x00	; 0
    12e0:	21 30       	cpi	r18, 0x01	; 1
    12e2:	89 f5       	brne	.+98     	; 0x1346 <main+0x766>
			if (Frequency<87.0){
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	4e ea       	ldi	r20, 0xAE	; 174
    12ea:	52 e4       	ldi	r21, 0x42	; 66
    12ec:	6e 2d       	mov	r22, r14
    12ee:	7f 2d       	mov	r23, r15
    12f0:	83 2d       	mov	r24, r3
    12f2:	9c 2d       	mov	r25, r12
    12f4:	3c d1       	rcall	.+632    	; 0x156e <__cmpsf2>
    12f6:	88 23       	and	r24, r24
    12f8:	0c f0       	brlt	.+2      	; 0x12fc <main+0x71c>
    12fa:	5a c0       	rjmp	.+180    	; 0x13b0 <main+0x7d0>
				Frequency = NoFault*(Frequency + 1.0);
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	40 e8       	ldi	r20, 0x80	; 128
    1302:	5f e3       	ldi	r21, 0x3F	; 63
    1304:	6e 2d       	mov	r22, r14
    1306:	7f 2d       	mov	r23, r15
    1308:	83 2d       	mov	r24, r3
    130a:	9c 2d       	mov	r25, r12
    130c:	b9 d0       	rcall	.+370    	; 0x1480 <__addsf3>
    130e:	e6 2e       	mov	r14, r22
    1310:	f7 2e       	mov	r15, r23
    1312:	08 2f       	mov	r16, r24
    1314:	19 2f       	mov	r17, r25
    1316:	62 2d       	mov	r22, r2
    1318:	70 e0       	ldi	r23, 0x00	; 0
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	c1 d1       	rcall	.+898    	; 0x16a2 <__floatsisf>
    1320:	2e 2d       	mov	r18, r14
    1322:	3f 2d       	mov	r19, r15
    1324:	40 2f       	mov	r20, r16
    1326:	51 2f       	mov	r21, r17
    1328:	b0 d2       	rcall	.+1376   	; 0x188a <__mulsf3>
    132a:	e6 2e       	mov	r14, r22
    132c:	f7 2e       	mov	r15, r23
    132e:	38 2e       	mov	r3, r24
    1330:	c9 2e       	mov	r12, r25
    1332:	8f ef       	ldi	r24, 0xFF	; 255
    1334:	91 ee       	ldi	r25, 0xE1	; 225
    1336:	24 e0       	ldi	r18, 0x04	; 4
    1338:	81 50       	subi	r24, 0x01	; 1
    133a:	90 40       	sbci	r25, 0x00	; 0
    133c:	20 40       	sbci	r18, 0x00	; 0
    133e:	e1 f7       	brne	.-8      	; 0x1338 <main+0x758>
    1340:	00 c0       	rjmp	.+0      	; 0x1342 <main+0x762>
    1342:	00 00       	nop
    1344:	35 c0       	rjmp	.+106    	; 0x13b0 <main+0x7d0>
				_delay_ms(200);
			}
		}else 
		{
			Frequency = NoFault*MPPT((double)DCV, I_current, FRQ, FRQ_previous, &delta_i, &delta_v, &delta_i_v, uv);	
    1346:	0d 85       	ldd	r16, Y+13	; 0x0d
    1348:	1e 85       	ldd	r17, Y+14	; 0x0e
    134a:	69 81       	ldd	r22, Y+1	; 0x01
    134c:	7a 81       	ldd	r23, Y+2	; 0x02
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	a5 d1       	rcall	.+842    	; 0x169e <__floatunsisf>
    1354:	df 92       	push	r13
    1356:	0f 2e       	mov	r0, r31
    1358:	f3 e6       	ldi	r31, 0x63	; 99
    135a:	8f 2e       	mov	r8, r31
    135c:	91 2c       	mov	r9, r1
    135e:	f0 2d       	mov	r31, r0
    1360:	8c 0e       	add	r8, r28
    1362:	9d 1e       	adc	r9, r29
    1364:	0f 2e       	mov	r0, r31
    1366:	ff e5       	ldi	r31, 0x5F	; 95
    1368:	af 2e       	mov	r10, r31
    136a:	b1 2c       	mov	r11, r1
    136c:	f0 2d       	mov	r31, r0
    136e:	ac 0e       	add	r10, r28
    1370:	bd 1e       	adc	r11, r29
    1372:	0f 2e       	mov	r0, r31
    1374:	fb e5       	ldi	r31, 0x5B	; 91
    1376:	cf 2e       	mov	r12, r31
    1378:	d1 2c       	mov	r13, r1
    137a:	f0 2d       	mov	r31, r0
    137c:	cc 0e       	add	r12, r28
    137e:	dd 1e       	adc	r13, r29
    1380:	c4 55       	subi	r28, 0x54	; 84
    1382:	df 4f       	sbci	r29, 0xFF	; 255
    1384:	e8 80       	ld	r14, Y
    1386:	f9 80       	ldd	r15, Y+1	; 0x01
    1388:	cc 5a       	subi	r28, 0xAC	; 172
    138a:	d0 40       	sbci	r29, 0x00	; 0
    138c:	a3 01       	movw	r20, r6
    138e:	92 01       	movw	r18, r4
    1390:	0e d9       	rcall	.-3556   	; 0x5ae <MPPT>
    1392:	6b 01       	movw	r12, r22
    1394:	7c 01       	movw	r14, r24
    1396:	62 2d       	mov	r22, r2
    1398:	70 e0       	ldi	r23, 0x00	; 0
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	81 d1       	rcall	.+770    	; 0x16a2 <__floatsisf>
    13a0:	a7 01       	movw	r20, r14
    13a2:	96 01       	movw	r18, r12
    13a4:	72 d2       	rcall	.+1252   	; 0x188a <__mulsf3>
    13a6:	e6 2e       	mov	r14, r22
    13a8:	f7 2e       	mov	r15, r23
    13aa:	38 2e       	mov	r3, r24
    13ac:	c9 2e       	mov	r12, r25
    13ae:	0f 90       	pop	r0
		}
		
		//Motor Switch Sensing
		Send_Command(&DIP_Read_CMD,&DIP,read_Response,read_Command_Send_Count);
    13b0:	26 e0       	ldi	r18, 0x06	; 6
    13b2:	47 e0       	ldi	r20, 0x07	; 7
    13b4:	be 01       	movw	r22, r28
    13b6:	65 5f       	subi	r22, 0xF5	; 245
    13b8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ba:	ce 01       	movw	r24, r28
    13bc:	85 57       	subi	r24, 0x75	; 117
    13be:	9f 4f       	sbci	r25, 0xFF	; 255
    13c0:	5b db       	rcall	.-2378   	; 0xa78 <Send_Command>
		if ((DIP & 0x0004)!=0x0004){
    13c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    13c4:	82 fd       	sbrc	r24, 2
    13c6:	2e c0       	rjmp	.+92     	; 0x1424 <main+0x844>
			Frequency = 0.0;
			MotorSwitch = 0;
			firsttime = 1;
			LCDinit();LCDclr();LCDhome();_delay_ms(1);
    13c8:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCDinit>
    13cc:	0e 94 24 01 	call	0x248	; 0x248 <LCDclr>
    13d0:	0e 94 26 01 	call	0x24c	; 0x24c <LCDhome>
    13d4:	8f ec       	ldi	r24, 0xCF	; 207
    13d6:	97 e0       	ldi	r25, 0x07	; 7
    13d8:	01 97       	sbiw	r24, 0x01	; 1
    13da:	f1 f7       	brne	.-4      	; 0x13d8 <main+0x7f8>
    13dc:	00 c0       	rjmp	.+0      	; 0x13de <main+0x7fe>
    13de:	00 00       	nop
			LCDGotoXY(0,0);		LCDstring(" PLEASE  SWITCH ",16);
    13e0:	60 e0       	ldi	r22, 0x00	; 0
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	0e 94 41 01 	call	0x282	; 0x282 <LCDGotoXY>
    13e8:	60 e1       	ldi	r22, 0x10	; 16
    13ea:	82 e3       	ldi	r24, 0x32	; 50
    13ec:	92 e0       	ldi	r25, 0x02	; 2
    13ee:	0e 94 28 01 	call	0x250	; 0x250 <LCDstring>
			LCDGotoXY(0,1);		LCDstring("MOTOR/SUPPLY  ON",16);
    13f2:	61 e0       	ldi	r22, 0x01	; 1
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	0e 94 41 01 	call	0x282	; 0x282 <LCDGotoXY>
    13fa:	60 e1       	ldi	r22, 0x10	; 16
    13fc:	83 e4       	ldi	r24, 0x43	; 67
    13fe:	92 e0       	ldi	r25, 0x02	; 2
    1400:	0e 94 28 01 	call	0x250	; 0x250 <LCDstring>
		//Motor Switch Sensing
		Send_Command(&DIP_Read_CMD,&DIP,read_Response,read_Command_Send_Count);
		if ((DIP & 0x0004)!=0x0004){
			Frequency = 0.0;
			MotorSwitch = 0;
			firsttime = 1;
    1404:	91 e0       	ldi	r25, 0x01	; 1
    1406:	c9 55       	subi	r28, 0x59	; 89
    1408:	df 4f       	sbci	r29, 0xFF	; 255
    140a:	98 83       	st	Y, r25
    140c:	c7 5a       	subi	r28, 0xA7	; 167
    140e:	d0 40       	sbci	r29, 0x00	; 0
		}
		
		//Motor Switch Sensing
		Send_Command(&DIP_Read_CMD,&DIP,read_Response,read_Command_Send_Count);
		if ((DIP & 0x0004)!=0x0004){
			Frequency = 0.0;
    1410:	e1 2c       	mov	r14, r1
    1412:	f1 2c       	mov	r15, r1
    1414:	31 2c       	mov	r3, r1
    1416:	c1 2c       	mov	r12, r1
			MotorSwitch = 0;
    1418:	c8 55       	subi	r28, 0x58	; 88
    141a:	df 4f       	sbci	r29, 0xFF	; 255
    141c:	18 82       	st	Y, r1
    141e:	c8 5a       	subi	r28, 0xA8	; 168
    1420:	d0 40       	sbci	r29, 0x00	; 0
    1422:	06 c0       	rjmp	.+12     	; 0x1430 <main+0x850>
			firsttime = 1;
			LCDinit();LCDclr();LCDhome();_delay_ms(1);
			LCDGotoXY(0,0);		LCDstring(" PLEASE  SWITCH ",16);
			LCDGotoXY(0,1);		LCDstring("MOTOR/SUPPLY  ON",16);
		} else {
			MotorSwitch = 1;
    1424:	21 e0       	ldi	r18, 0x01	; 1
    1426:	c8 55       	subi	r28, 0x58	; 88
    1428:	df 4f       	sbci	r29, 0xFF	; 255
    142a:	28 83       	st	Y, r18
    142c:	c8 5a       	subi	r28, 0xA8	; 168
    142e:	d0 40       	sbci	r29, 0x00	; 0
		}
		
		FRQ_Write = ceil(Frequency*100);
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	48 ec       	ldi	r20, 0xC8	; 200
    1436:	52 e4       	ldi	r21, 0x42	; 66
    1438:	6e 2d       	mov	r22, r14
    143a:	7f 2d       	mov	r23, r15
    143c:	83 2d       	mov	r24, r3
    143e:	9c 2d       	mov	r25, r12
    1440:	24 d2       	rcall	.+1096   	; 0x188a <__mulsf3>
    1442:	82 d0       	rcall	.+260    	; 0x1548 <ceil>
    1444:	00 d1       	rcall	.+512    	; 0x1646 <__fixunssfsi>
		FRQ_SRT_Write_CMD[9] = FRQ_Write>>8;
    1446:	c6 56       	subi	r28, 0x66	; 102
    1448:	df 4f       	sbci	r29, 0xFF	; 255
    144a:	78 83       	st	Y, r23
    144c:	ca 59       	subi	r28, 0x9A	; 154
    144e:	d0 40       	sbci	r29, 0x00	; 0
		FRQ_SRT_Write_CMD[10]= FRQ_Write;
    1450:	c5 56       	subi	r28, 0x65	; 101
    1452:	df 4f       	sbci	r29, 0xFF	; 255
    1454:	68 83       	st	Y, r22
    1456:	cb 59       	subi	r28, 0x9B	; 155
    1458:	d0 40       	sbci	r29, 0x00	; 0
		Send_Command(&FRQ_SRT_Write_CMD,&Dummy, write_Response, write_Command_Send_Count);
    145a:	2b e0       	ldi	r18, 0x0B	; 11
    145c:	48 e0       	ldi	r20, 0x08	; 8
    145e:	be 01       	movw	r22, r28
    1460:	61 5f       	subi	r22, 0xF1	; 241
    1462:	7f 4f       	sbci	r23, 0xFF	; 255
    1464:	ce 01       	movw	r24, r28
    1466:	8f 56       	subi	r24, 0x6F	; 111
    1468:	9f 4f       	sbci	r25, 0xFF	; 255
    146a:	06 db       	rcall	.-2548   	; 0xa78 <Send_Command>
	Send_Command(&FRQ_STP_Write_CMD,&Dummy,write_Response,write_Command_Send_Count);
	_delay_ms(10000);
	
	while(1)
    {
		if (firsttime==1 && Frequency==0){
    146c:	c9 55       	subi	r28, 0x59	; 89
    146e:	df 4f       	sbci	r29, 0xFF	; 255
    1470:	88 81       	ld	r24, Y
    1472:	c7 5a       	subi	r28, 0xA7	; 167
    1474:	d0 40       	sbci	r29, 0x00	; 0
    1476:	81 30       	cpi	r24, 0x01	; 1
    1478:	09 f0       	breq	.+2      	; 0x147c <main+0x89c>
    147a:	aa cc       	rjmp	.-1708   	; 0xdd0 <main+0x1f0>
    147c:	95 cc       	rjmp	.-1750   	; 0xda8 <main+0x1c8>

0000147e <__subsf3>:
    147e:	50 58       	subi	r21, 0x80	; 128

00001480 <__addsf3>:
    1480:	bb 27       	eor	r27, r27
    1482:	aa 27       	eor	r26, r26
    1484:	0e d0       	rcall	.+28     	; 0x14a2 <__addsf3x>
    1486:	ac c1       	rjmp	.+856    	; 0x17e0 <__fp_round>
    1488:	9d d1       	rcall	.+826    	; 0x17c4 <__fp_pscA>
    148a:	30 f0       	brcs	.+12     	; 0x1498 <__addsf3+0x18>
    148c:	a2 d1       	rcall	.+836    	; 0x17d2 <__fp_pscB>
    148e:	20 f0       	brcs	.+8      	; 0x1498 <__addsf3+0x18>
    1490:	31 f4       	brne	.+12     	; 0x149e <__addsf3+0x1e>
    1492:	9f 3f       	cpi	r25, 0xFF	; 255
    1494:	11 f4       	brne	.+4      	; 0x149a <__addsf3+0x1a>
    1496:	1e f4       	brtc	.+6      	; 0x149e <__addsf3+0x1e>
    1498:	92 c1       	rjmp	.+804    	; 0x17be <__fp_nan>
    149a:	0e f4       	brtc	.+2      	; 0x149e <__addsf3+0x1e>
    149c:	e0 95       	com	r30
    149e:	e7 fb       	bst	r30, 7
    14a0:	5f c1       	rjmp	.+702    	; 0x1760 <__fp_inf>

000014a2 <__addsf3x>:
    14a2:	e9 2f       	mov	r30, r25
    14a4:	ae d1       	rcall	.+860    	; 0x1802 <__fp_split3>
    14a6:	80 f3       	brcs	.-32     	; 0x1488 <__addsf3+0x8>
    14a8:	ba 17       	cp	r27, r26
    14aa:	62 07       	cpc	r22, r18
    14ac:	73 07       	cpc	r23, r19
    14ae:	84 07       	cpc	r24, r20
    14b0:	95 07       	cpc	r25, r21
    14b2:	18 f0       	brcs	.+6      	; 0x14ba <__addsf3x+0x18>
    14b4:	71 f4       	brne	.+28     	; 0x14d2 <__addsf3x+0x30>
    14b6:	9e f5       	brtc	.+102    	; 0x151e <__addsf3x+0x7c>
    14b8:	dd c1       	rjmp	.+954    	; 0x1874 <__fp_zero>
    14ba:	0e f4       	brtc	.+2      	; 0x14be <__addsf3x+0x1c>
    14bc:	e0 95       	com	r30
    14be:	0b 2e       	mov	r0, r27
    14c0:	ba 2f       	mov	r27, r26
    14c2:	a0 2d       	mov	r26, r0
    14c4:	0b 01       	movw	r0, r22
    14c6:	b9 01       	movw	r22, r18
    14c8:	90 01       	movw	r18, r0
    14ca:	0c 01       	movw	r0, r24
    14cc:	ca 01       	movw	r24, r20
    14ce:	a0 01       	movw	r20, r0
    14d0:	11 24       	eor	r1, r1
    14d2:	ff 27       	eor	r31, r31
    14d4:	59 1b       	sub	r21, r25
    14d6:	99 f0       	breq	.+38     	; 0x14fe <__addsf3x+0x5c>
    14d8:	59 3f       	cpi	r21, 0xF9	; 249
    14da:	50 f4       	brcc	.+20     	; 0x14f0 <__addsf3x+0x4e>
    14dc:	50 3e       	cpi	r21, 0xE0	; 224
    14de:	68 f1       	brcs	.+90     	; 0x153a <__addsf3x+0x98>
    14e0:	1a 16       	cp	r1, r26
    14e2:	f0 40       	sbci	r31, 0x00	; 0
    14e4:	a2 2f       	mov	r26, r18
    14e6:	23 2f       	mov	r18, r19
    14e8:	34 2f       	mov	r19, r20
    14ea:	44 27       	eor	r20, r20
    14ec:	58 5f       	subi	r21, 0xF8	; 248
    14ee:	f3 cf       	rjmp	.-26     	; 0x14d6 <__addsf3x+0x34>
    14f0:	46 95       	lsr	r20
    14f2:	37 95       	ror	r19
    14f4:	27 95       	ror	r18
    14f6:	a7 95       	ror	r26
    14f8:	f0 40       	sbci	r31, 0x00	; 0
    14fa:	53 95       	inc	r21
    14fc:	c9 f7       	brne	.-14     	; 0x14f0 <__addsf3x+0x4e>
    14fe:	7e f4       	brtc	.+30     	; 0x151e <__addsf3x+0x7c>
    1500:	1f 16       	cp	r1, r31
    1502:	ba 0b       	sbc	r27, r26
    1504:	62 0b       	sbc	r22, r18
    1506:	73 0b       	sbc	r23, r19
    1508:	84 0b       	sbc	r24, r20
    150a:	ba f0       	brmi	.+46     	; 0x153a <__addsf3x+0x98>
    150c:	91 50       	subi	r25, 0x01	; 1
    150e:	a1 f0       	breq	.+40     	; 0x1538 <__addsf3x+0x96>
    1510:	ff 0f       	add	r31, r31
    1512:	bb 1f       	adc	r27, r27
    1514:	66 1f       	adc	r22, r22
    1516:	77 1f       	adc	r23, r23
    1518:	88 1f       	adc	r24, r24
    151a:	c2 f7       	brpl	.-16     	; 0x150c <__addsf3x+0x6a>
    151c:	0e c0       	rjmp	.+28     	; 0x153a <__addsf3x+0x98>
    151e:	ba 0f       	add	r27, r26
    1520:	62 1f       	adc	r22, r18
    1522:	73 1f       	adc	r23, r19
    1524:	84 1f       	adc	r24, r20
    1526:	48 f4       	brcc	.+18     	; 0x153a <__addsf3x+0x98>
    1528:	87 95       	ror	r24
    152a:	77 95       	ror	r23
    152c:	67 95       	ror	r22
    152e:	b7 95       	ror	r27
    1530:	f7 95       	ror	r31
    1532:	9e 3f       	cpi	r25, 0xFE	; 254
    1534:	08 f0       	brcs	.+2      	; 0x1538 <__addsf3x+0x96>
    1536:	b3 cf       	rjmp	.-154    	; 0x149e <__addsf3+0x1e>
    1538:	93 95       	inc	r25
    153a:	88 0f       	add	r24, r24
    153c:	08 f0       	brcs	.+2      	; 0x1540 <__addsf3x+0x9e>
    153e:	99 27       	eor	r25, r25
    1540:	ee 0f       	add	r30, r30
    1542:	97 95       	ror	r25
    1544:	87 95       	ror	r24
    1546:	08 95       	ret

00001548 <ceil>:
    1548:	7e d1       	rcall	.+764    	; 0x1846 <__fp_trunc>
    154a:	80 f0       	brcs	.+32     	; 0x156c <ceil+0x24>
    154c:	9f 37       	cpi	r25, 0x7F	; 127
    154e:	40 f4       	brcc	.+16     	; 0x1560 <ceil+0x18>
    1550:	91 11       	cpse	r25, r1
    1552:	0e f4       	brtc	.+2      	; 0x1556 <ceil+0xe>
    1554:	90 c1       	rjmp	.+800    	; 0x1876 <__fp_szero>
    1556:	60 e0       	ldi	r22, 0x00	; 0
    1558:	70 e0       	ldi	r23, 0x00	; 0
    155a:	80 e8       	ldi	r24, 0x80	; 128
    155c:	9f e3       	ldi	r25, 0x3F	; 63
    155e:	08 95       	ret
    1560:	26 f0       	brts	.+8      	; 0x156a <ceil+0x22>
    1562:	1b 16       	cp	r1, r27
    1564:	61 1d       	adc	r22, r1
    1566:	71 1d       	adc	r23, r1
    1568:	81 1d       	adc	r24, r1
    156a:	00 c1       	rjmp	.+512    	; 0x176c <__fp_mintl>
    156c:	1a c1       	rjmp	.+564    	; 0x17a2 <__fp_mpack>

0000156e <__cmpsf2>:
    156e:	d4 d0       	rcall	.+424    	; 0x1718 <__fp_cmp>
    1570:	08 f4       	brcc	.+2      	; 0x1574 <__cmpsf2+0x6>
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	08 95       	ret

00001576 <__divsf3>:
    1576:	0c d0       	rcall	.+24     	; 0x1590 <__divsf3x>
    1578:	33 c1       	rjmp	.+614    	; 0x17e0 <__fp_round>
    157a:	2b d1       	rcall	.+598    	; 0x17d2 <__fp_pscB>
    157c:	40 f0       	brcs	.+16     	; 0x158e <__divsf3+0x18>
    157e:	22 d1       	rcall	.+580    	; 0x17c4 <__fp_pscA>
    1580:	30 f0       	brcs	.+12     	; 0x158e <__divsf3+0x18>
    1582:	21 f4       	brne	.+8      	; 0x158c <__divsf3+0x16>
    1584:	5f 3f       	cpi	r21, 0xFF	; 255
    1586:	19 f0       	breq	.+6      	; 0x158e <__divsf3+0x18>
    1588:	eb c0       	rjmp	.+470    	; 0x1760 <__fp_inf>
    158a:	51 11       	cpse	r21, r1
    158c:	74 c1       	rjmp	.+744    	; 0x1876 <__fp_szero>
    158e:	17 c1       	rjmp	.+558    	; 0x17be <__fp_nan>

00001590 <__divsf3x>:
    1590:	38 d1       	rcall	.+624    	; 0x1802 <__fp_split3>
    1592:	98 f3       	brcs	.-26     	; 0x157a <__divsf3+0x4>

00001594 <__divsf3_pse>:
    1594:	99 23       	and	r25, r25
    1596:	c9 f3       	breq	.-14     	; 0x158a <__divsf3+0x14>
    1598:	55 23       	and	r21, r21
    159a:	b1 f3       	breq	.-20     	; 0x1588 <__divsf3+0x12>
    159c:	95 1b       	sub	r25, r21
    159e:	55 0b       	sbc	r21, r21
    15a0:	bb 27       	eor	r27, r27
    15a2:	aa 27       	eor	r26, r26
    15a4:	62 17       	cp	r22, r18
    15a6:	73 07       	cpc	r23, r19
    15a8:	84 07       	cpc	r24, r20
    15aa:	38 f0       	brcs	.+14     	; 0x15ba <__divsf3_pse+0x26>
    15ac:	9f 5f       	subi	r25, 0xFF	; 255
    15ae:	5f 4f       	sbci	r21, 0xFF	; 255
    15b0:	22 0f       	add	r18, r18
    15b2:	33 1f       	adc	r19, r19
    15b4:	44 1f       	adc	r20, r20
    15b6:	aa 1f       	adc	r26, r26
    15b8:	a9 f3       	breq	.-22     	; 0x15a4 <__divsf3_pse+0x10>
    15ba:	33 d0       	rcall	.+102    	; 0x1622 <__divsf3_pse+0x8e>
    15bc:	0e 2e       	mov	r0, r30
    15be:	3a f0       	brmi	.+14     	; 0x15ce <__divsf3_pse+0x3a>
    15c0:	e0 e8       	ldi	r30, 0x80	; 128
    15c2:	30 d0       	rcall	.+96     	; 0x1624 <__divsf3_pse+0x90>
    15c4:	91 50       	subi	r25, 0x01	; 1
    15c6:	50 40       	sbci	r21, 0x00	; 0
    15c8:	e6 95       	lsr	r30
    15ca:	00 1c       	adc	r0, r0
    15cc:	ca f7       	brpl	.-14     	; 0x15c0 <__divsf3_pse+0x2c>
    15ce:	29 d0       	rcall	.+82     	; 0x1622 <__divsf3_pse+0x8e>
    15d0:	fe 2f       	mov	r31, r30
    15d2:	27 d0       	rcall	.+78     	; 0x1622 <__divsf3_pse+0x8e>
    15d4:	66 0f       	add	r22, r22
    15d6:	77 1f       	adc	r23, r23
    15d8:	88 1f       	adc	r24, r24
    15da:	bb 1f       	adc	r27, r27
    15dc:	26 17       	cp	r18, r22
    15de:	37 07       	cpc	r19, r23
    15e0:	48 07       	cpc	r20, r24
    15e2:	ab 07       	cpc	r26, r27
    15e4:	b0 e8       	ldi	r27, 0x80	; 128
    15e6:	09 f0       	breq	.+2      	; 0x15ea <__divsf3_pse+0x56>
    15e8:	bb 0b       	sbc	r27, r27
    15ea:	80 2d       	mov	r24, r0
    15ec:	bf 01       	movw	r22, r30
    15ee:	ff 27       	eor	r31, r31
    15f0:	93 58       	subi	r25, 0x83	; 131
    15f2:	5f 4f       	sbci	r21, 0xFF	; 255
    15f4:	2a f0       	brmi	.+10     	; 0x1600 <__divsf3_pse+0x6c>
    15f6:	9e 3f       	cpi	r25, 0xFE	; 254
    15f8:	51 05       	cpc	r21, r1
    15fa:	68 f0       	brcs	.+26     	; 0x1616 <__divsf3_pse+0x82>
    15fc:	b1 c0       	rjmp	.+354    	; 0x1760 <__fp_inf>
    15fe:	3b c1       	rjmp	.+630    	; 0x1876 <__fp_szero>
    1600:	5f 3f       	cpi	r21, 0xFF	; 255
    1602:	ec f3       	brlt	.-6      	; 0x15fe <__divsf3_pse+0x6a>
    1604:	98 3e       	cpi	r25, 0xE8	; 232
    1606:	dc f3       	brlt	.-10     	; 0x15fe <__divsf3_pse+0x6a>
    1608:	86 95       	lsr	r24
    160a:	77 95       	ror	r23
    160c:	67 95       	ror	r22
    160e:	b7 95       	ror	r27
    1610:	f7 95       	ror	r31
    1612:	9f 5f       	subi	r25, 0xFF	; 255
    1614:	c9 f7       	brne	.-14     	; 0x1608 <__divsf3_pse+0x74>
    1616:	88 0f       	add	r24, r24
    1618:	91 1d       	adc	r25, r1
    161a:	96 95       	lsr	r25
    161c:	87 95       	ror	r24
    161e:	97 f9       	bld	r25, 7
    1620:	08 95       	ret
    1622:	e1 e0       	ldi	r30, 0x01	; 1
    1624:	66 0f       	add	r22, r22
    1626:	77 1f       	adc	r23, r23
    1628:	88 1f       	adc	r24, r24
    162a:	bb 1f       	adc	r27, r27
    162c:	62 17       	cp	r22, r18
    162e:	73 07       	cpc	r23, r19
    1630:	84 07       	cpc	r24, r20
    1632:	ba 07       	cpc	r27, r26
    1634:	20 f0       	brcs	.+8      	; 0x163e <__divsf3_pse+0xaa>
    1636:	62 1b       	sub	r22, r18
    1638:	73 0b       	sbc	r23, r19
    163a:	84 0b       	sbc	r24, r20
    163c:	ba 0b       	sbc	r27, r26
    163e:	ee 1f       	adc	r30, r30
    1640:	88 f7       	brcc	.-30     	; 0x1624 <__divsf3_pse+0x90>
    1642:	e0 95       	com	r30
    1644:	08 95       	ret

00001646 <__fixunssfsi>:
    1646:	e5 d0       	rcall	.+458    	; 0x1812 <__fp_splitA>
    1648:	88 f0       	brcs	.+34     	; 0x166c <__fixunssfsi+0x26>
    164a:	9f 57       	subi	r25, 0x7F	; 127
    164c:	90 f0       	brcs	.+36     	; 0x1672 <__fixunssfsi+0x2c>
    164e:	b9 2f       	mov	r27, r25
    1650:	99 27       	eor	r25, r25
    1652:	b7 51       	subi	r27, 0x17	; 23
    1654:	a0 f0       	brcs	.+40     	; 0x167e <__fixunssfsi+0x38>
    1656:	d1 f0       	breq	.+52     	; 0x168c <__fixunssfsi+0x46>
    1658:	66 0f       	add	r22, r22
    165a:	77 1f       	adc	r23, r23
    165c:	88 1f       	adc	r24, r24
    165e:	99 1f       	adc	r25, r25
    1660:	1a f0       	brmi	.+6      	; 0x1668 <__fixunssfsi+0x22>
    1662:	ba 95       	dec	r27
    1664:	c9 f7       	brne	.-14     	; 0x1658 <__fixunssfsi+0x12>
    1666:	12 c0       	rjmp	.+36     	; 0x168c <__fixunssfsi+0x46>
    1668:	b1 30       	cpi	r27, 0x01	; 1
    166a:	81 f0       	breq	.+32     	; 0x168c <__fixunssfsi+0x46>
    166c:	03 d1       	rcall	.+518    	; 0x1874 <__fp_zero>
    166e:	b1 e0       	ldi	r27, 0x01	; 1
    1670:	08 95       	ret
    1672:	00 c1       	rjmp	.+512    	; 0x1874 <__fp_zero>
    1674:	67 2f       	mov	r22, r23
    1676:	78 2f       	mov	r23, r24
    1678:	88 27       	eor	r24, r24
    167a:	b8 5f       	subi	r27, 0xF8	; 248
    167c:	39 f0       	breq	.+14     	; 0x168c <__fixunssfsi+0x46>
    167e:	b9 3f       	cpi	r27, 0xF9	; 249
    1680:	cc f3       	brlt	.-14     	; 0x1674 <__fixunssfsi+0x2e>
    1682:	86 95       	lsr	r24
    1684:	77 95       	ror	r23
    1686:	67 95       	ror	r22
    1688:	b3 95       	inc	r27
    168a:	d9 f7       	brne	.-10     	; 0x1682 <__fixunssfsi+0x3c>
    168c:	3e f4       	brtc	.+14     	; 0x169c <__fixunssfsi+0x56>
    168e:	90 95       	com	r25
    1690:	80 95       	com	r24
    1692:	70 95       	com	r23
    1694:	61 95       	neg	r22
    1696:	7f 4f       	sbci	r23, 0xFF	; 255
    1698:	8f 4f       	sbci	r24, 0xFF	; 255
    169a:	9f 4f       	sbci	r25, 0xFF	; 255
    169c:	08 95       	ret

0000169e <__floatunsisf>:
    169e:	e8 94       	clt
    16a0:	09 c0       	rjmp	.+18     	; 0x16b4 <__floatsisf+0x12>

000016a2 <__floatsisf>:
    16a2:	97 fb       	bst	r25, 7
    16a4:	3e f4       	brtc	.+14     	; 0x16b4 <__floatsisf+0x12>
    16a6:	90 95       	com	r25
    16a8:	80 95       	com	r24
    16aa:	70 95       	com	r23
    16ac:	61 95       	neg	r22
    16ae:	7f 4f       	sbci	r23, 0xFF	; 255
    16b0:	8f 4f       	sbci	r24, 0xFF	; 255
    16b2:	9f 4f       	sbci	r25, 0xFF	; 255
    16b4:	99 23       	and	r25, r25
    16b6:	a9 f0       	breq	.+42     	; 0x16e2 <__floatsisf+0x40>
    16b8:	f9 2f       	mov	r31, r25
    16ba:	96 e9       	ldi	r25, 0x96	; 150
    16bc:	bb 27       	eor	r27, r27
    16be:	93 95       	inc	r25
    16c0:	f6 95       	lsr	r31
    16c2:	87 95       	ror	r24
    16c4:	77 95       	ror	r23
    16c6:	67 95       	ror	r22
    16c8:	b7 95       	ror	r27
    16ca:	f1 11       	cpse	r31, r1
    16cc:	f8 cf       	rjmp	.-16     	; 0x16be <__floatsisf+0x1c>
    16ce:	fa f4       	brpl	.+62     	; 0x170e <__floatsisf+0x6c>
    16d0:	bb 0f       	add	r27, r27
    16d2:	11 f4       	brne	.+4      	; 0x16d8 <__floatsisf+0x36>
    16d4:	60 ff       	sbrs	r22, 0
    16d6:	1b c0       	rjmp	.+54     	; 0x170e <__floatsisf+0x6c>
    16d8:	6f 5f       	subi	r22, 0xFF	; 255
    16da:	7f 4f       	sbci	r23, 0xFF	; 255
    16dc:	8f 4f       	sbci	r24, 0xFF	; 255
    16de:	9f 4f       	sbci	r25, 0xFF	; 255
    16e0:	16 c0       	rjmp	.+44     	; 0x170e <__floatsisf+0x6c>
    16e2:	88 23       	and	r24, r24
    16e4:	11 f0       	breq	.+4      	; 0x16ea <__floatsisf+0x48>
    16e6:	96 e9       	ldi	r25, 0x96	; 150
    16e8:	11 c0       	rjmp	.+34     	; 0x170c <__floatsisf+0x6a>
    16ea:	77 23       	and	r23, r23
    16ec:	21 f0       	breq	.+8      	; 0x16f6 <__floatsisf+0x54>
    16ee:	9e e8       	ldi	r25, 0x8E	; 142
    16f0:	87 2f       	mov	r24, r23
    16f2:	76 2f       	mov	r23, r22
    16f4:	05 c0       	rjmp	.+10     	; 0x1700 <__floatsisf+0x5e>
    16f6:	66 23       	and	r22, r22
    16f8:	71 f0       	breq	.+28     	; 0x1716 <__floatsisf+0x74>
    16fa:	96 e8       	ldi	r25, 0x86	; 134
    16fc:	86 2f       	mov	r24, r22
    16fe:	70 e0       	ldi	r23, 0x00	; 0
    1700:	60 e0       	ldi	r22, 0x00	; 0
    1702:	2a f0       	brmi	.+10     	; 0x170e <__floatsisf+0x6c>
    1704:	9a 95       	dec	r25
    1706:	66 0f       	add	r22, r22
    1708:	77 1f       	adc	r23, r23
    170a:	88 1f       	adc	r24, r24
    170c:	da f7       	brpl	.-10     	; 0x1704 <__floatsisf+0x62>
    170e:	88 0f       	add	r24, r24
    1710:	96 95       	lsr	r25
    1712:	87 95       	ror	r24
    1714:	97 f9       	bld	r25, 7
    1716:	08 95       	ret

00001718 <__fp_cmp>:
    1718:	99 0f       	add	r25, r25
    171a:	00 08       	sbc	r0, r0
    171c:	55 0f       	add	r21, r21
    171e:	aa 0b       	sbc	r26, r26
    1720:	e0 e8       	ldi	r30, 0x80	; 128
    1722:	fe ef       	ldi	r31, 0xFE	; 254
    1724:	16 16       	cp	r1, r22
    1726:	17 06       	cpc	r1, r23
    1728:	e8 07       	cpc	r30, r24
    172a:	f9 07       	cpc	r31, r25
    172c:	c0 f0       	brcs	.+48     	; 0x175e <__fp_cmp+0x46>
    172e:	12 16       	cp	r1, r18
    1730:	13 06       	cpc	r1, r19
    1732:	e4 07       	cpc	r30, r20
    1734:	f5 07       	cpc	r31, r21
    1736:	98 f0       	brcs	.+38     	; 0x175e <__fp_cmp+0x46>
    1738:	62 1b       	sub	r22, r18
    173a:	73 0b       	sbc	r23, r19
    173c:	84 0b       	sbc	r24, r20
    173e:	95 0b       	sbc	r25, r21
    1740:	39 f4       	brne	.+14     	; 0x1750 <__fp_cmp+0x38>
    1742:	0a 26       	eor	r0, r26
    1744:	61 f0       	breq	.+24     	; 0x175e <__fp_cmp+0x46>
    1746:	23 2b       	or	r18, r19
    1748:	24 2b       	or	r18, r20
    174a:	25 2b       	or	r18, r21
    174c:	21 f4       	brne	.+8      	; 0x1756 <__fp_cmp+0x3e>
    174e:	08 95       	ret
    1750:	0a 26       	eor	r0, r26
    1752:	09 f4       	brne	.+2      	; 0x1756 <__fp_cmp+0x3e>
    1754:	a1 40       	sbci	r26, 0x01	; 1
    1756:	a6 95       	lsr	r26
    1758:	8f ef       	ldi	r24, 0xFF	; 255
    175a:	81 1d       	adc	r24, r1
    175c:	81 1d       	adc	r24, r1
    175e:	08 95       	ret

00001760 <__fp_inf>:
    1760:	97 f9       	bld	r25, 7
    1762:	9f 67       	ori	r25, 0x7F	; 127
    1764:	80 e8       	ldi	r24, 0x80	; 128
    1766:	70 e0       	ldi	r23, 0x00	; 0
    1768:	60 e0       	ldi	r22, 0x00	; 0
    176a:	08 95       	ret

0000176c <__fp_mintl>:
    176c:	88 23       	and	r24, r24
    176e:	71 f4       	brne	.+28     	; 0x178c <__fp_mintl+0x20>
    1770:	77 23       	and	r23, r23
    1772:	21 f0       	breq	.+8      	; 0x177c <__fp_mintl+0x10>
    1774:	98 50       	subi	r25, 0x08	; 8
    1776:	87 2b       	or	r24, r23
    1778:	76 2f       	mov	r23, r22
    177a:	07 c0       	rjmp	.+14     	; 0x178a <__fp_mintl+0x1e>
    177c:	66 23       	and	r22, r22
    177e:	11 f4       	brne	.+4      	; 0x1784 <__fp_mintl+0x18>
    1780:	99 27       	eor	r25, r25
    1782:	0d c0       	rjmp	.+26     	; 0x179e <__fp_mintl+0x32>
    1784:	90 51       	subi	r25, 0x10	; 16
    1786:	86 2b       	or	r24, r22
    1788:	70 e0       	ldi	r23, 0x00	; 0
    178a:	60 e0       	ldi	r22, 0x00	; 0
    178c:	2a f0       	brmi	.+10     	; 0x1798 <__fp_mintl+0x2c>
    178e:	9a 95       	dec	r25
    1790:	66 0f       	add	r22, r22
    1792:	77 1f       	adc	r23, r23
    1794:	88 1f       	adc	r24, r24
    1796:	da f7       	brpl	.-10     	; 0x178e <__fp_mintl+0x22>
    1798:	88 0f       	add	r24, r24
    179a:	96 95       	lsr	r25
    179c:	87 95       	ror	r24
    179e:	97 f9       	bld	r25, 7
    17a0:	08 95       	ret

000017a2 <__fp_mpack>:
    17a2:	9f 3f       	cpi	r25, 0xFF	; 255
    17a4:	31 f0       	breq	.+12     	; 0x17b2 <__fp_mpack_finite+0xc>

000017a6 <__fp_mpack_finite>:
    17a6:	91 50       	subi	r25, 0x01	; 1
    17a8:	20 f4       	brcc	.+8      	; 0x17b2 <__fp_mpack_finite+0xc>
    17aa:	87 95       	ror	r24
    17ac:	77 95       	ror	r23
    17ae:	67 95       	ror	r22
    17b0:	b7 95       	ror	r27
    17b2:	88 0f       	add	r24, r24
    17b4:	91 1d       	adc	r25, r1
    17b6:	96 95       	lsr	r25
    17b8:	87 95       	ror	r24
    17ba:	97 f9       	bld	r25, 7
    17bc:	08 95       	ret

000017be <__fp_nan>:
    17be:	9f ef       	ldi	r25, 0xFF	; 255
    17c0:	80 ec       	ldi	r24, 0xC0	; 192
    17c2:	08 95       	ret

000017c4 <__fp_pscA>:
    17c4:	00 24       	eor	r0, r0
    17c6:	0a 94       	dec	r0
    17c8:	16 16       	cp	r1, r22
    17ca:	17 06       	cpc	r1, r23
    17cc:	18 06       	cpc	r1, r24
    17ce:	09 06       	cpc	r0, r25
    17d0:	08 95       	ret

000017d2 <__fp_pscB>:
    17d2:	00 24       	eor	r0, r0
    17d4:	0a 94       	dec	r0
    17d6:	12 16       	cp	r1, r18
    17d8:	13 06       	cpc	r1, r19
    17da:	14 06       	cpc	r1, r20
    17dc:	05 06       	cpc	r0, r21
    17de:	08 95       	ret

000017e0 <__fp_round>:
    17e0:	09 2e       	mov	r0, r25
    17e2:	03 94       	inc	r0
    17e4:	00 0c       	add	r0, r0
    17e6:	11 f4       	brne	.+4      	; 0x17ec <__fp_round+0xc>
    17e8:	88 23       	and	r24, r24
    17ea:	52 f0       	brmi	.+20     	; 0x1800 <__fp_round+0x20>
    17ec:	bb 0f       	add	r27, r27
    17ee:	40 f4       	brcc	.+16     	; 0x1800 <__fp_round+0x20>
    17f0:	bf 2b       	or	r27, r31
    17f2:	11 f4       	brne	.+4      	; 0x17f8 <__fp_round+0x18>
    17f4:	60 ff       	sbrs	r22, 0
    17f6:	04 c0       	rjmp	.+8      	; 0x1800 <__fp_round+0x20>
    17f8:	6f 5f       	subi	r22, 0xFF	; 255
    17fa:	7f 4f       	sbci	r23, 0xFF	; 255
    17fc:	8f 4f       	sbci	r24, 0xFF	; 255
    17fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1800:	08 95       	ret

00001802 <__fp_split3>:
    1802:	57 fd       	sbrc	r21, 7
    1804:	90 58       	subi	r25, 0x80	; 128
    1806:	44 0f       	add	r20, r20
    1808:	55 1f       	adc	r21, r21
    180a:	59 f0       	breq	.+22     	; 0x1822 <__fp_splitA+0x10>
    180c:	5f 3f       	cpi	r21, 0xFF	; 255
    180e:	71 f0       	breq	.+28     	; 0x182c <__fp_splitA+0x1a>
    1810:	47 95       	ror	r20

00001812 <__fp_splitA>:
    1812:	88 0f       	add	r24, r24
    1814:	97 fb       	bst	r25, 7
    1816:	99 1f       	adc	r25, r25
    1818:	61 f0       	breq	.+24     	; 0x1832 <__fp_splitA+0x20>
    181a:	9f 3f       	cpi	r25, 0xFF	; 255
    181c:	79 f0       	breq	.+30     	; 0x183c <__fp_splitA+0x2a>
    181e:	87 95       	ror	r24
    1820:	08 95       	ret
    1822:	12 16       	cp	r1, r18
    1824:	13 06       	cpc	r1, r19
    1826:	14 06       	cpc	r1, r20
    1828:	55 1f       	adc	r21, r21
    182a:	f2 cf       	rjmp	.-28     	; 0x1810 <__fp_split3+0xe>
    182c:	46 95       	lsr	r20
    182e:	f1 df       	rcall	.-30     	; 0x1812 <__fp_splitA>
    1830:	08 c0       	rjmp	.+16     	; 0x1842 <__fp_splitA+0x30>
    1832:	16 16       	cp	r1, r22
    1834:	17 06       	cpc	r1, r23
    1836:	18 06       	cpc	r1, r24
    1838:	99 1f       	adc	r25, r25
    183a:	f1 cf       	rjmp	.-30     	; 0x181e <__fp_splitA+0xc>
    183c:	86 95       	lsr	r24
    183e:	71 05       	cpc	r23, r1
    1840:	61 05       	cpc	r22, r1
    1842:	08 94       	sec
    1844:	08 95       	ret

00001846 <__fp_trunc>:
    1846:	e5 df       	rcall	.-54     	; 0x1812 <__fp_splitA>
    1848:	a0 f0       	brcs	.+40     	; 0x1872 <__fp_trunc+0x2c>
    184a:	be e7       	ldi	r27, 0x7E	; 126
    184c:	b9 17       	cp	r27, r25
    184e:	88 f4       	brcc	.+34     	; 0x1872 <__fp_trunc+0x2c>
    1850:	bb 27       	eor	r27, r27
    1852:	9f 38       	cpi	r25, 0x8F	; 143
    1854:	60 f4       	brcc	.+24     	; 0x186e <__fp_trunc+0x28>
    1856:	16 16       	cp	r1, r22
    1858:	b1 1d       	adc	r27, r1
    185a:	67 2f       	mov	r22, r23
    185c:	78 2f       	mov	r23, r24
    185e:	88 27       	eor	r24, r24
    1860:	98 5f       	subi	r25, 0xF8	; 248
    1862:	f7 cf       	rjmp	.-18     	; 0x1852 <__fp_trunc+0xc>
    1864:	86 95       	lsr	r24
    1866:	77 95       	ror	r23
    1868:	67 95       	ror	r22
    186a:	b1 1d       	adc	r27, r1
    186c:	93 95       	inc	r25
    186e:	96 39       	cpi	r25, 0x96	; 150
    1870:	c8 f3       	brcs	.-14     	; 0x1864 <__fp_trunc+0x1e>
    1872:	08 95       	ret

00001874 <__fp_zero>:
    1874:	e8 94       	clt

00001876 <__fp_szero>:
    1876:	bb 27       	eor	r27, r27
    1878:	66 27       	eor	r22, r22
    187a:	77 27       	eor	r23, r23
    187c:	cb 01       	movw	r24, r22
    187e:	97 f9       	bld	r25, 7
    1880:	08 95       	ret

00001882 <__gesf2>:
    1882:	4a df       	rcall	.-364    	; 0x1718 <__fp_cmp>
    1884:	08 f4       	brcc	.+2      	; 0x1888 <__gesf2+0x6>
    1886:	8f ef       	ldi	r24, 0xFF	; 255
    1888:	08 95       	ret

0000188a <__mulsf3>:
    188a:	0b d0       	rcall	.+22     	; 0x18a2 <__mulsf3x>
    188c:	a9 cf       	rjmp	.-174    	; 0x17e0 <__fp_round>
    188e:	9a df       	rcall	.-204    	; 0x17c4 <__fp_pscA>
    1890:	28 f0       	brcs	.+10     	; 0x189c <__mulsf3+0x12>
    1892:	9f df       	rcall	.-194    	; 0x17d2 <__fp_pscB>
    1894:	18 f0       	brcs	.+6      	; 0x189c <__mulsf3+0x12>
    1896:	95 23       	and	r25, r21
    1898:	09 f0       	breq	.+2      	; 0x189c <__mulsf3+0x12>
    189a:	62 cf       	rjmp	.-316    	; 0x1760 <__fp_inf>
    189c:	90 cf       	rjmp	.-224    	; 0x17be <__fp_nan>
    189e:	11 24       	eor	r1, r1
    18a0:	ea cf       	rjmp	.-44     	; 0x1876 <__fp_szero>

000018a2 <__mulsf3x>:
    18a2:	af df       	rcall	.-162    	; 0x1802 <__fp_split3>
    18a4:	a0 f3       	brcs	.-24     	; 0x188e <__mulsf3+0x4>

000018a6 <__mulsf3_pse>:
    18a6:	95 9f       	mul	r25, r21
    18a8:	d1 f3       	breq	.-12     	; 0x189e <__mulsf3+0x14>
    18aa:	95 0f       	add	r25, r21
    18ac:	50 e0       	ldi	r21, 0x00	; 0
    18ae:	55 1f       	adc	r21, r21
    18b0:	62 9f       	mul	r22, r18
    18b2:	f0 01       	movw	r30, r0
    18b4:	72 9f       	mul	r23, r18
    18b6:	bb 27       	eor	r27, r27
    18b8:	f0 0d       	add	r31, r0
    18ba:	b1 1d       	adc	r27, r1
    18bc:	63 9f       	mul	r22, r19
    18be:	aa 27       	eor	r26, r26
    18c0:	f0 0d       	add	r31, r0
    18c2:	b1 1d       	adc	r27, r1
    18c4:	aa 1f       	adc	r26, r26
    18c6:	64 9f       	mul	r22, r20
    18c8:	66 27       	eor	r22, r22
    18ca:	b0 0d       	add	r27, r0
    18cc:	a1 1d       	adc	r26, r1
    18ce:	66 1f       	adc	r22, r22
    18d0:	82 9f       	mul	r24, r18
    18d2:	22 27       	eor	r18, r18
    18d4:	b0 0d       	add	r27, r0
    18d6:	a1 1d       	adc	r26, r1
    18d8:	62 1f       	adc	r22, r18
    18da:	73 9f       	mul	r23, r19
    18dc:	b0 0d       	add	r27, r0
    18de:	a1 1d       	adc	r26, r1
    18e0:	62 1f       	adc	r22, r18
    18e2:	83 9f       	mul	r24, r19
    18e4:	a0 0d       	add	r26, r0
    18e6:	61 1d       	adc	r22, r1
    18e8:	22 1f       	adc	r18, r18
    18ea:	74 9f       	mul	r23, r20
    18ec:	33 27       	eor	r19, r19
    18ee:	a0 0d       	add	r26, r0
    18f0:	61 1d       	adc	r22, r1
    18f2:	23 1f       	adc	r18, r19
    18f4:	84 9f       	mul	r24, r20
    18f6:	60 0d       	add	r22, r0
    18f8:	21 1d       	adc	r18, r1
    18fa:	82 2f       	mov	r24, r18
    18fc:	76 2f       	mov	r23, r22
    18fe:	6a 2f       	mov	r22, r26
    1900:	11 24       	eor	r1, r1
    1902:	9f 57       	subi	r25, 0x7F	; 127
    1904:	50 40       	sbci	r21, 0x00	; 0
    1906:	8a f0       	brmi	.+34     	; 0x192a <__mulsf3_pse+0x84>
    1908:	e1 f0       	breq	.+56     	; 0x1942 <__mulsf3_pse+0x9c>
    190a:	88 23       	and	r24, r24
    190c:	4a f0       	brmi	.+18     	; 0x1920 <__mulsf3_pse+0x7a>
    190e:	ee 0f       	add	r30, r30
    1910:	ff 1f       	adc	r31, r31
    1912:	bb 1f       	adc	r27, r27
    1914:	66 1f       	adc	r22, r22
    1916:	77 1f       	adc	r23, r23
    1918:	88 1f       	adc	r24, r24
    191a:	91 50       	subi	r25, 0x01	; 1
    191c:	50 40       	sbci	r21, 0x00	; 0
    191e:	a9 f7       	brne	.-22     	; 0x190a <__mulsf3_pse+0x64>
    1920:	9e 3f       	cpi	r25, 0xFE	; 254
    1922:	51 05       	cpc	r21, r1
    1924:	70 f0       	brcs	.+28     	; 0x1942 <__mulsf3_pse+0x9c>
    1926:	1c cf       	rjmp	.-456    	; 0x1760 <__fp_inf>
    1928:	a6 cf       	rjmp	.-180    	; 0x1876 <__fp_szero>
    192a:	5f 3f       	cpi	r21, 0xFF	; 255
    192c:	ec f3       	brlt	.-6      	; 0x1928 <__mulsf3_pse+0x82>
    192e:	98 3e       	cpi	r25, 0xE8	; 232
    1930:	dc f3       	brlt	.-10     	; 0x1928 <__mulsf3_pse+0x82>
    1932:	86 95       	lsr	r24
    1934:	77 95       	ror	r23
    1936:	67 95       	ror	r22
    1938:	b7 95       	ror	r27
    193a:	f7 95       	ror	r31
    193c:	e7 95       	ror	r30
    193e:	9f 5f       	subi	r25, 0xFF	; 255
    1940:	c1 f7       	brne	.-16     	; 0x1932 <__mulsf3_pse+0x8c>
    1942:	fe 2b       	or	r31, r30
    1944:	88 0f       	add	r24, r24
    1946:	91 1d       	adc	r25, r1
    1948:	96 95       	lsr	r25
    194a:	87 95       	ror	r24
    194c:	97 f9       	bld	r25, 7
    194e:	08 95       	ret

00001950 <__udivmodhi4>:
    1950:	aa 1b       	sub	r26, r26
    1952:	bb 1b       	sub	r27, r27
    1954:	51 e1       	ldi	r21, 0x11	; 17
    1956:	07 c0       	rjmp	.+14     	; 0x1966 <__udivmodhi4_ep>

00001958 <__udivmodhi4_loop>:
    1958:	aa 1f       	adc	r26, r26
    195a:	bb 1f       	adc	r27, r27
    195c:	a6 17       	cp	r26, r22
    195e:	b7 07       	cpc	r27, r23
    1960:	10 f0       	brcs	.+4      	; 0x1966 <__udivmodhi4_ep>
    1962:	a6 1b       	sub	r26, r22
    1964:	b7 0b       	sbc	r27, r23

00001966 <__udivmodhi4_ep>:
    1966:	88 1f       	adc	r24, r24
    1968:	99 1f       	adc	r25, r25
    196a:	5a 95       	dec	r21
    196c:	a9 f7       	brne	.-22     	; 0x1958 <__udivmodhi4_loop>
    196e:	80 95       	com	r24
    1970:	90 95       	com	r25
    1972:	bc 01       	movw	r22, r24
    1974:	cd 01       	movw	r24, r26
    1976:	08 95       	ret

00001978 <dtostrf>:
    1978:	ef 92       	push	r14
    197a:	0f 93       	push	r16
    197c:	1f 93       	push	r17
    197e:	cf 93       	push	r28
    1980:	c0 2f       	mov	r28, r16
    1982:	47 ff       	sbrs	r20, 7
    1984:	02 c0       	rjmp	.+4      	; 0x198a <dtostrf+0x12>
    1986:	34 e1       	ldi	r19, 0x14	; 20
    1988:	01 c0       	rjmp	.+2      	; 0x198c <dtostrf+0x14>
    198a:	34 e0       	ldi	r19, 0x04	; 4
    198c:	e4 2f       	mov	r30, r20
    198e:	ff 27       	eor	r31, r31
    1990:	e7 fd       	sbrc	r30, 7
    1992:	f0 95       	com	r31
    1994:	f7 ff       	sbrs	r31, 7
    1996:	03 c0       	rjmp	.+6      	; 0x199e <dtostrf+0x26>
    1998:	f1 95       	neg	r31
    199a:	e1 95       	neg	r30
    199c:	f1 09       	sbc	r31, r1
    199e:	e3 2e       	mov	r14, r19
    19a0:	02 2f       	mov	r16, r18
    19a2:	2e 2f       	mov	r18, r30
    19a4:	4c 2f       	mov	r20, r28
    19a6:	51 2f       	mov	r21, r17
    19a8:	26 d0       	rcall	.+76     	; 0x19f6 <dtoa_prf>
    19aa:	8c 2f       	mov	r24, r28
    19ac:	91 2f       	mov	r25, r17
    19ae:	cf 91       	pop	r28
    19b0:	1f 91       	pop	r17
    19b2:	0f 91       	pop	r16
    19b4:	ef 90       	pop	r14
    19b6:	08 95       	ret

000019b8 <itoa>:
    19b8:	fb 01       	movw	r30, r22
    19ba:	9f 01       	movw	r18, r30
    19bc:	e8 94       	clt
    19be:	42 30       	cpi	r20, 0x02	; 2
    19c0:	bc f0       	brlt	.+46     	; 0x19f0 <itoa+0x38>
    19c2:	45 32       	cpi	r20, 0x25	; 37
    19c4:	ac f4       	brge	.+42     	; 0x19f0 <itoa+0x38>
    19c6:	4a 30       	cpi	r20, 0x0A	; 10
    19c8:	29 f4       	brne	.+10     	; 0x19d4 <itoa+0x1c>
    19ca:	97 fb       	bst	r25, 7
    19cc:	1e f4       	brtc	.+6      	; 0x19d4 <itoa+0x1c>
    19ce:	90 95       	com	r25
    19d0:	81 95       	neg	r24
    19d2:	9f 4f       	sbci	r25, 0xFF	; 255
    19d4:	64 2f       	mov	r22, r20
    19d6:	77 27       	eor	r23, r23
    19d8:	bb df       	rcall	.-138    	; 0x1950 <__udivmodhi4>
    19da:	80 5d       	subi	r24, 0xD0	; 208
    19dc:	8a 33       	cpi	r24, 0x3A	; 58
    19de:	0c f0       	brlt	.+2      	; 0x19e2 <itoa+0x2a>
    19e0:	89 5d       	subi	r24, 0xD9	; 217
    19e2:	81 93       	st	Z+, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	00 97       	sbiw	r24, 0x00	; 0
    19e8:	a9 f7       	brne	.-22     	; 0x19d4 <itoa+0x1c>
    19ea:	16 f4       	brtc	.+4      	; 0x19f0 <itoa+0x38>
    19ec:	5d e2       	ldi	r21, 0x2D	; 45
    19ee:	51 93       	st	Z+, r21
    19f0:	10 82       	st	Z, r1
    19f2:	c9 01       	movw	r24, r18
    19f4:	54 c2       	rjmp	.+1192   	; 0x1e9e <strrev>

000019f6 <dtoa_prf>:
    19f6:	6f 92       	push	r6
    19f8:	7f 92       	push	r7
    19fa:	9f 92       	push	r9
    19fc:	af 92       	push	r10
    19fe:	bf 92       	push	r11
    1a00:	cf 92       	push	r12
    1a02:	df 92       	push	r13
    1a04:	ef 92       	push	r14
    1a06:	ff 92       	push	r15
    1a08:	0f 93       	push	r16
    1a0a:	1f 93       	push	r17
    1a0c:	cf 93       	push	r28
    1a0e:	df 93       	push	r29
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	29 97       	sbiw	r28, 0x09	; 9
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	f8 94       	cli
    1a1a:	de bf       	out	0x3e, r29	; 62
    1a1c:	0f be       	out	0x3f, r0	; 63
    1a1e:	cd bf       	out	0x3d, r28	; 61
    1a20:	6a 01       	movw	r12, r20
    1a22:	b2 2e       	mov	r11, r18
    1a24:	10 2f       	mov	r17, r16
    1a26:	0c 33       	cpi	r16, 0x3C	; 60
    1a28:	18 f4       	brcc	.+6      	; 0x1a30 <dtoa_prf+0x3a>
    1a2a:	f0 2e       	mov	r15, r16
    1a2c:	f3 94       	inc	r15
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <dtoa_prf+0x3e>
    1a30:	5c e3       	ldi	r21, 0x3C	; 60
    1a32:	f5 2e       	mov	r15, r21
    1a34:	0f 2d       	mov	r16, r15
    1a36:	27 e0       	ldi	r18, 0x07	; 7
    1a38:	ae 01       	movw	r20, r28
    1a3a:	4f 5f       	subi	r20, 0xFF	; 255
    1a3c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a3e:	57 d1       	rcall	.+686    	; 0x1cee <__ftoa_engine>
    1a40:	79 81       	ldd	r23, Y+1	; 0x01
    1a42:	27 2f       	mov	r18, r23
    1a44:	29 70       	andi	r18, 0x09	; 9
    1a46:	21 30       	cpi	r18, 0x01	; 1
    1a48:	31 f0       	breq	.+12     	; 0x1a56 <dtoa_prf+0x60>
    1a4a:	e1 fc       	sbrc	r14, 1
    1a4c:	06 c0       	rjmp	.+12     	; 0x1a5a <dtoa_prf+0x64>
    1a4e:	e0 fe       	sbrs	r14, 0
    1a50:	06 c0       	rjmp	.+12     	; 0x1a5e <dtoa_prf+0x68>
    1a52:	60 e2       	ldi	r22, 0x20	; 32
    1a54:	05 c0       	rjmp	.+10     	; 0x1a60 <dtoa_prf+0x6a>
    1a56:	6d e2       	ldi	r22, 0x2D	; 45
    1a58:	03 c0       	rjmp	.+6      	; 0x1a60 <dtoa_prf+0x6a>
    1a5a:	6b e2       	ldi	r22, 0x2B	; 43
    1a5c:	01 c0       	rjmp	.+2      	; 0x1a60 <dtoa_prf+0x6a>
    1a5e:	60 e0       	ldi	r22, 0x00	; 0
    1a60:	73 ff       	sbrs	r23, 3
    1a62:	3d c0       	rjmp	.+122    	; 0x1ade <dtoa_prf+0xe8>
    1a64:	66 23       	and	r22, r22
    1a66:	11 f0       	breq	.+4      	; 0x1a6c <dtoa_prf+0x76>
    1a68:	84 e0       	ldi	r24, 0x04	; 4
    1a6a:	01 c0       	rjmp	.+2      	; 0x1a6e <dtoa_prf+0x78>
    1a6c:	83 e0       	ldi	r24, 0x03	; 3
    1a6e:	8b 15       	cp	r24, r11
    1a70:	10 f4       	brcc	.+4      	; 0x1a76 <dtoa_prf+0x80>
    1a72:	b8 1a       	sub	r11, r24
    1a74:	01 c0       	rjmp	.+2      	; 0x1a78 <dtoa_prf+0x82>
    1a76:	b1 2c       	mov	r11, r1
    1a78:	e4 fc       	sbrc	r14, 4
    1a7a:	0b c0       	rjmp	.+22     	; 0x1a92 <dtoa_prf+0x9c>
    1a7c:	8b 2d       	mov	r24, r11
    1a7e:	f6 01       	movw	r30, r12
    1a80:	90 e2       	ldi	r25, 0x20	; 32
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <dtoa_prf+0x92>
    1a84:	91 93       	st	Z+, r25
    1a86:	81 50       	subi	r24, 0x01	; 1
    1a88:	81 11       	cpse	r24, r1
    1a8a:	fc cf       	rjmp	.-8      	; 0x1a84 <dtoa_prf+0x8e>
    1a8c:	cb 0c       	add	r12, r11
    1a8e:	d1 1c       	adc	r13, r1
    1a90:	b1 2c       	mov	r11, r1
    1a92:	66 23       	and	r22, r22
    1a94:	19 f0       	breq	.+6      	; 0x1a9c <dtoa_prf+0xa6>
    1a96:	d6 01       	movw	r26, r12
    1a98:	6d 93       	st	X+, r22
    1a9a:	6d 01       	movw	r12, r26
    1a9c:	e2 fe       	sbrs	r14, 2
    1a9e:	0a c0       	rjmp	.+20     	; 0x1ab4 <dtoa_prf+0xbe>
    1aa0:	8e e4       	ldi	r24, 0x4E	; 78
    1aa2:	f6 01       	movw	r30, r12
    1aa4:	80 83       	st	Z, r24
    1aa6:	91 e4       	ldi	r25, 0x41	; 65
    1aa8:	91 83       	std	Z+1, r25	; 0x01
    1aaa:	82 83       	std	Z+2, r24	; 0x02
    1aac:	f3 e0       	ldi	r31, 0x03	; 3
    1aae:	cf 0e       	add	r12, r31
    1ab0:	d1 1c       	adc	r13, r1
    1ab2:	0c c0       	rjmp	.+24     	; 0x1acc <dtoa_prf+0xd6>
    1ab4:	8e e6       	ldi	r24, 0x6E	; 110
    1ab6:	d6 01       	movw	r26, r12
    1ab8:	8c 93       	st	X, r24
    1aba:	91 e6       	ldi	r25, 0x61	; 97
    1abc:	11 96       	adiw	r26, 0x01	; 1
    1abe:	9c 93       	st	X, r25
    1ac0:	11 97       	sbiw	r26, 0x01	; 1
    1ac2:	12 96       	adiw	r26, 0x02	; 2
    1ac4:	8c 93       	st	X, r24
    1ac6:	b3 e0       	ldi	r27, 0x03	; 3
    1ac8:	cb 0e       	add	r12, r27
    1aca:	d1 1c       	adc	r13, r1
    1acc:	8b 2d       	mov	r24, r11
    1ace:	f6 01       	movw	r30, r12
    1ad0:	90 e2       	ldi	r25, 0x20	; 32
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <dtoa_prf+0xe2>
    1ad4:	91 93       	st	Z+, r25
    1ad6:	81 50       	subi	r24, 0x01	; 1
    1ad8:	81 11       	cpse	r24, r1
    1ada:	fc cf       	rjmp	.-8      	; 0x1ad4 <dtoa_prf+0xde>
    1adc:	40 c0       	rjmp	.+128    	; 0x1b5e <dtoa_prf+0x168>
    1ade:	72 ff       	sbrs	r23, 2
    1ae0:	45 c0       	rjmp	.+138    	; 0x1b6c <dtoa_prf+0x176>
    1ae2:	66 23       	and	r22, r22
    1ae4:	11 f0       	breq	.+4      	; 0x1aea <dtoa_prf+0xf4>
    1ae6:	84 e0       	ldi	r24, 0x04	; 4
    1ae8:	01 c0       	rjmp	.+2      	; 0x1aec <dtoa_prf+0xf6>
    1aea:	83 e0       	ldi	r24, 0x03	; 3
    1aec:	8b 15       	cp	r24, r11
    1aee:	10 f4       	brcc	.+4      	; 0x1af4 <dtoa_prf+0xfe>
    1af0:	b8 1a       	sub	r11, r24
    1af2:	01 c0       	rjmp	.+2      	; 0x1af6 <dtoa_prf+0x100>
    1af4:	b1 2c       	mov	r11, r1
    1af6:	e4 fc       	sbrc	r14, 4
    1af8:	0b c0       	rjmp	.+22     	; 0x1b10 <dtoa_prf+0x11a>
    1afa:	8b 2d       	mov	r24, r11
    1afc:	f6 01       	movw	r30, r12
    1afe:	90 e2       	ldi	r25, 0x20	; 32
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <dtoa_prf+0x110>
    1b02:	91 93       	st	Z+, r25
    1b04:	81 50       	subi	r24, 0x01	; 1
    1b06:	81 11       	cpse	r24, r1
    1b08:	fc cf       	rjmp	.-8      	; 0x1b02 <dtoa_prf+0x10c>
    1b0a:	cb 0c       	add	r12, r11
    1b0c:	d1 1c       	adc	r13, r1
    1b0e:	b1 2c       	mov	r11, r1
    1b10:	66 23       	and	r22, r22
    1b12:	19 f0       	breq	.+6      	; 0x1b1a <dtoa_prf+0x124>
    1b14:	f6 01       	movw	r30, r12
    1b16:	61 93       	st	Z+, r22
    1b18:	6f 01       	movw	r12, r30
    1b1a:	e2 fe       	sbrs	r14, 2
    1b1c:	0e c0       	rjmp	.+28     	; 0x1b3a <dtoa_prf+0x144>
    1b1e:	89 e4       	ldi	r24, 0x49	; 73
    1b20:	d6 01       	movw	r26, r12
    1b22:	8c 93       	st	X, r24
    1b24:	8e e4       	ldi	r24, 0x4E	; 78
    1b26:	11 96       	adiw	r26, 0x01	; 1
    1b28:	8c 93       	st	X, r24
    1b2a:	11 97       	sbiw	r26, 0x01	; 1
    1b2c:	86 e4       	ldi	r24, 0x46	; 70
    1b2e:	12 96       	adiw	r26, 0x02	; 2
    1b30:	8c 93       	st	X, r24
    1b32:	b3 e0       	ldi	r27, 0x03	; 3
    1b34:	cb 0e       	add	r12, r27
    1b36:	d1 1c       	adc	r13, r1
    1b38:	0a c0       	rjmp	.+20     	; 0x1b4e <dtoa_prf+0x158>
    1b3a:	89 e6       	ldi	r24, 0x69	; 105
    1b3c:	f6 01       	movw	r30, r12
    1b3e:	80 83       	st	Z, r24
    1b40:	8e e6       	ldi	r24, 0x6E	; 110
    1b42:	81 83       	std	Z+1, r24	; 0x01
    1b44:	86 e6       	ldi	r24, 0x66	; 102
    1b46:	82 83       	std	Z+2, r24	; 0x02
    1b48:	f3 e0       	ldi	r31, 0x03	; 3
    1b4a:	cf 0e       	add	r12, r31
    1b4c:	d1 1c       	adc	r13, r1
    1b4e:	8b 2d       	mov	r24, r11
    1b50:	f6 01       	movw	r30, r12
    1b52:	90 e2       	ldi	r25, 0x20	; 32
    1b54:	02 c0       	rjmp	.+4      	; 0x1b5a <dtoa_prf+0x164>
    1b56:	91 93       	st	Z+, r25
    1b58:	81 50       	subi	r24, 0x01	; 1
    1b5a:	81 11       	cpse	r24, r1
    1b5c:	fc cf       	rjmp	.-8      	; 0x1b56 <dtoa_prf+0x160>
    1b5e:	f6 01       	movw	r30, r12
    1b60:	eb 0d       	add	r30, r11
    1b62:	f1 1d       	adc	r31, r1
    1b64:	10 82       	st	Z, r1
    1b66:	2e ef       	ldi	r18, 0xFE	; 254
    1b68:	3f ef       	ldi	r19, 0xFF	; 255
    1b6a:	ac c0       	rjmp	.+344    	; 0x1cc4 <dtoa_prf+0x2ce>
    1b6c:	a1 e0       	ldi	r26, 0x01	; 1
    1b6e:	61 11       	cpse	r22, r1
    1b70:	01 c0       	rjmp	.+2      	; 0x1b74 <dtoa_prf+0x17e>
    1b72:	a0 e0       	ldi	r26, 0x00	; 0
    1b74:	4a 2f       	mov	r20, r26
    1b76:	50 e0       	ldi	r21, 0x00	; 0
    1b78:	18 16       	cp	r1, r24
    1b7a:	19 06       	cpc	r1, r25
    1b7c:	24 f4       	brge	.+8      	; 0x1b86 <dtoa_prf+0x190>
    1b7e:	9c 01       	movw	r18, r24
    1b80:	2f 5f       	subi	r18, 0xFF	; 255
    1b82:	3f 4f       	sbci	r19, 0xFF	; 255
    1b84:	02 c0       	rjmp	.+4      	; 0x1b8a <dtoa_prf+0x194>
    1b86:	21 e0       	ldi	r18, 0x01	; 1
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	24 0f       	add	r18, r20
    1b8c:	35 1f       	adc	r19, r21
    1b8e:	11 23       	and	r17, r17
    1b90:	29 f0       	breq	.+10     	; 0x1b9c <dtoa_prf+0x1a6>
    1b92:	41 2f       	mov	r20, r17
    1b94:	50 e0       	ldi	r21, 0x00	; 0
    1b96:	4f 5f       	subi	r20, 0xFF	; 255
    1b98:	5f 4f       	sbci	r21, 0xFF	; 255
    1b9a:	02 c0       	rjmp	.+4      	; 0x1ba0 <dtoa_prf+0x1aa>
    1b9c:	40 e0       	ldi	r20, 0x00	; 0
    1b9e:	50 e0       	ldi	r21, 0x00	; 0
    1ba0:	42 0f       	add	r20, r18
    1ba2:	53 1f       	adc	r21, r19
    1ba4:	2b 2d       	mov	r18, r11
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	42 17       	cp	r20, r18
    1baa:	53 07       	cpc	r21, r19
    1bac:	14 f4       	brge	.+4      	; 0x1bb2 <dtoa_prf+0x1bc>
    1bae:	b4 1a       	sub	r11, r20
    1bb0:	01 c0       	rjmp	.+2      	; 0x1bb4 <dtoa_prf+0x1be>
    1bb2:	b1 2c       	mov	r11, r1
    1bb4:	3e 2d       	mov	r19, r14
    1bb6:	30 71       	andi	r19, 0x10	; 16
    1bb8:	e4 fc       	sbrc	r14, 4
    1bba:	0d c0       	rjmp	.+26     	; 0x1bd6 <dtoa_prf+0x1e0>
    1bbc:	e3 fc       	sbrc	r14, 3
    1bbe:	0b c0       	rjmp	.+22     	; 0x1bd6 <dtoa_prf+0x1e0>
    1bc0:	2b 2d       	mov	r18, r11
    1bc2:	f6 01       	movw	r30, r12
    1bc4:	40 e2       	ldi	r20, 0x20	; 32
    1bc6:	02 c0       	rjmp	.+4      	; 0x1bcc <dtoa_prf+0x1d6>
    1bc8:	41 93       	st	Z+, r20
    1bca:	21 50       	subi	r18, 0x01	; 1
    1bcc:	21 11       	cpse	r18, r1
    1bce:	fc cf       	rjmp	.-8      	; 0x1bc8 <dtoa_prf+0x1d2>
    1bd0:	cb 0c       	add	r12, r11
    1bd2:	d1 1c       	adc	r13, r1
    1bd4:	b1 2c       	mov	r11, r1
    1bd6:	aa 23       	and	r26, r26
    1bd8:	19 f0       	breq	.+6      	; 0x1be0 <dtoa_prf+0x1ea>
    1bda:	d6 01       	movw	r26, r12
    1bdc:	6d 93       	st	X+, r22
    1bde:	6d 01       	movw	r12, r26
    1be0:	31 11       	cpse	r19, r1
    1be2:	0b c0       	rjmp	.+22     	; 0x1bfa <dtoa_prf+0x204>
    1be4:	2b 2d       	mov	r18, r11
    1be6:	f6 01       	movw	r30, r12
    1be8:	30 e3       	ldi	r19, 0x30	; 48
    1bea:	02 c0       	rjmp	.+4      	; 0x1bf0 <dtoa_prf+0x1fa>
    1bec:	31 93       	st	Z+, r19
    1bee:	21 50       	subi	r18, 0x01	; 1
    1bf0:	21 11       	cpse	r18, r1
    1bf2:	fc cf       	rjmp	.-8      	; 0x1bec <dtoa_prf+0x1f6>
    1bf4:	cb 0c       	add	r12, r11
    1bf6:	d1 1c       	adc	r13, r1
    1bf8:	b1 2c       	mov	r11, r1
    1bfa:	f8 0e       	add	r15, r24
    1bfc:	0a 81       	ldd	r16, Y+2	; 0x02
    1bfe:	40 e1       	ldi	r20, 0x10	; 16
    1c00:	a4 2e       	mov	r10, r20
    1c02:	a7 22       	and	r10, r23
    1c04:	74 ff       	sbrs	r23, 4
    1c06:	03 c0       	rjmp	.+6      	; 0x1c0e <dtoa_prf+0x218>
    1c08:	01 33       	cpi	r16, 0x31	; 49
    1c0a:	09 f4       	brne	.+2      	; 0x1c0e <dtoa_prf+0x218>
    1c0c:	fa 94       	dec	r15
    1c0e:	1f 14       	cp	r1, r15
    1c10:	2c f4       	brge	.+10     	; 0x1c1c <dtoa_prf+0x226>
    1c12:	2f 2d       	mov	r18, r15
    1c14:	29 30       	cpi	r18, 0x09	; 9
    1c16:	18 f0       	brcs	.+6      	; 0x1c1e <dtoa_prf+0x228>
    1c18:	28 e0       	ldi	r18, 0x08	; 8
    1c1a:	01 c0       	rjmp	.+2      	; 0x1c1e <dtoa_prf+0x228>
    1c1c:	21 e0       	ldi	r18, 0x01	; 1
    1c1e:	ac 01       	movw	r20, r24
    1c20:	97 ff       	sbrs	r25, 7
    1c22:	02 c0       	rjmp	.+4      	; 0x1c28 <dtoa_prf+0x232>
    1c24:	40 e0       	ldi	r20, 0x00	; 0
    1c26:	50 e0       	ldi	r21, 0x00	; 0
    1c28:	60 e0       	ldi	r22, 0x00	; 0
    1c2a:	70 e0       	ldi	r23, 0x00	; 0
    1c2c:	3e e2       	ldi	r19, 0x2E	; 46
    1c2e:	93 2e       	mov	r9, r19
    1c30:	fc 01       	movw	r30, r24
    1c32:	e2 1b       	sub	r30, r18
    1c34:	f1 09       	sbc	r31, r1
    1c36:	9f 01       	movw	r18, r30
    1c38:	dc 01       	movw	r26, r24
    1c3a:	a4 1b       	sub	r26, r20
    1c3c:	b5 0b       	sbc	r27, r21
    1c3e:	fe 01       	movw	r30, r28
    1c40:	31 96       	adiw	r30, 0x01	; 1
    1c42:	ea 0f       	add	r30, r26
    1c44:	fb 1f       	adc	r31, r27
    1c46:	a1 2f       	mov	r26, r17
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	66 24       	eor	r6, r6
    1c4c:	77 24       	eor	r7, r7
    1c4e:	6a 1a       	sub	r6, r26
    1c50:	7b 0a       	sbc	r7, r27
    1c52:	4f 3f       	cpi	r20, 0xFF	; 255
    1c54:	1f ef       	ldi	r17, 0xFF	; 255
    1c56:	51 07       	cpc	r21, r17
    1c58:	19 f4       	brne	.+6      	; 0x1c60 <dtoa_prf+0x26a>
    1c5a:	d6 01       	movw	r26, r12
    1c5c:	9d 92       	st	X+, r9
    1c5e:	6d 01       	movw	r12, r26
    1c60:	84 17       	cp	r24, r20
    1c62:	95 07       	cpc	r25, r21
    1c64:	54 f0       	brlt	.+20     	; 0x1c7a <dtoa_prf+0x284>
    1c66:	24 17       	cp	r18, r20
    1c68:	35 07       	cpc	r19, r21
    1c6a:	3c f4       	brge	.+14     	; 0x1c7a <dtoa_prf+0x284>
    1c6c:	7f 01       	movw	r14, r30
    1c6e:	e6 0e       	add	r14, r22
    1c70:	f7 1e       	adc	r15, r23
    1c72:	d7 01       	movw	r26, r14
    1c74:	11 96       	adiw	r26, 0x01	; 1
    1c76:	1c 91       	ld	r17, X
    1c78:	01 c0       	rjmp	.+2      	; 0x1c7c <dtoa_prf+0x286>
    1c7a:	10 e3       	ldi	r17, 0x30	; 48
    1c7c:	41 50       	subi	r20, 0x01	; 1
    1c7e:	51 09       	sbc	r21, r1
    1c80:	6f 5f       	subi	r22, 0xFF	; 255
    1c82:	7f 4f       	sbci	r23, 0xFF	; 255
    1c84:	46 15       	cp	r20, r6
    1c86:	57 05       	cpc	r21, r7
    1c88:	24 f0       	brlt	.+8      	; 0x1c92 <dtoa_prf+0x29c>
    1c8a:	d6 01       	movw	r26, r12
    1c8c:	1d 93       	st	X+, r17
    1c8e:	6d 01       	movw	r12, r26
    1c90:	e0 cf       	rjmp	.-64     	; 0x1c52 <dtoa_prf+0x25c>
    1c92:	48 17       	cp	r20, r24
    1c94:	59 07       	cpc	r21, r25
    1c96:	39 f4       	brne	.+14     	; 0x1ca6 <dtoa_prf+0x2b0>
    1c98:	06 33       	cpi	r16, 0x36	; 54
    1c9a:	20 f4       	brcc	.+8      	; 0x1ca4 <dtoa_prf+0x2ae>
    1c9c:	05 33       	cpi	r16, 0x35	; 53
    1c9e:	19 f4       	brne	.+6      	; 0x1ca6 <dtoa_prf+0x2b0>
    1ca0:	a1 10       	cpse	r10, r1
    1ca2:	01 c0       	rjmp	.+2      	; 0x1ca6 <dtoa_prf+0x2b0>
    1ca4:	11 e3       	ldi	r17, 0x31	; 49
    1ca6:	f6 01       	movw	r30, r12
    1ca8:	11 93       	st	Z+, r17
    1caa:	8b 2d       	mov	r24, r11
    1cac:	df 01       	movw	r26, r30
    1cae:	90 e2       	ldi	r25, 0x20	; 32
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <dtoa_prf+0x2c0>
    1cb2:	9d 93       	st	X+, r25
    1cb4:	81 50       	subi	r24, 0x01	; 1
    1cb6:	81 11       	cpse	r24, r1
    1cb8:	fc cf       	rjmp	.-8      	; 0x1cb2 <dtoa_prf+0x2bc>
    1cba:	eb 0d       	add	r30, r11
    1cbc:	f1 1d       	adc	r31, r1
    1cbe:	10 82       	st	Z, r1
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	c9 01       	movw	r24, r18
    1cc6:	29 96       	adiw	r28, 0x09	; 9
    1cc8:	0f b6       	in	r0, 0x3f	; 63
    1cca:	f8 94       	cli
    1ccc:	de bf       	out	0x3e, r29	; 62
    1cce:	0f be       	out	0x3f, r0	; 63
    1cd0:	cd bf       	out	0x3d, r28	; 61
    1cd2:	df 91       	pop	r29
    1cd4:	cf 91       	pop	r28
    1cd6:	1f 91       	pop	r17
    1cd8:	0f 91       	pop	r16
    1cda:	ff 90       	pop	r15
    1cdc:	ef 90       	pop	r14
    1cde:	df 90       	pop	r13
    1ce0:	cf 90       	pop	r12
    1ce2:	bf 90       	pop	r11
    1ce4:	af 90       	pop	r10
    1ce6:	9f 90       	pop	r9
    1ce8:	7f 90       	pop	r7
    1cea:	6f 90       	pop	r6
    1cec:	08 95       	ret

00001cee <__ftoa_engine>:
    1cee:	28 30       	cpi	r18, 0x08	; 8
    1cf0:	08 f0       	brcs	.+2      	; 0x1cf4 <__ftoa_engine+0x6>
    1cf2:	27 e0       	ldi	r18, 0x07	; 7
    1cf4:	33 27       	eor	r19, r19
    1cf6:	da 01       	movw	r26, r20
    1cf8:	99 0f       	add	r25, r25
    1cfa:	31 1d       	adc	r19, r1
    1cfc:	87 fd       	sbrc	r24, 7
    1cfe:	91 60       	ori	r25, 0x01	; 1
    1d00:	00 96       	adiw	r24, 0x00	; 0
    1d02:	61 05       	cpc	r22, r1
    1d04:	71 05       	cpc	r23, r1
    1d06:	39 f4       	brne	.+14     	; 0x1d16 <__ftoa_engine+0x28>
    1d08:	32 60       	ori	r19, 0x02	; 2
    1d0a:	2e 5f       	subi	r18, 0xFE	; 254
    1d0c:	3d 93       	st	X+, r19
    1d0e:	30 e3       	ldi	r19, 0x30	; 48
    1d10:	2a 95       	dec	r18
    1d12:	e1 f7       	brne	.-8      	; 0x1d0c <__ftoa_engine+0x1e>
    1d14:	08 95       	ret
    1d16:	9f 3f       	cpi	r25, 0xFF	; 255
    1d18:	30 f0       	brcs	.+12     	; 0x1d26 <__ftoa_engine+0x38>
    1d1a:	80 38       	cpi	r24, 0x80	; 128
    1d1c:	71 05       	cpc	r23, r1
    1d1e:	61 05       	cpc	r22, r1
    1d20:	09 f0       	breq	.+2      	; 0x1d24 <__ftoa_engine+0x36>
    1d22:	3c 5f       	subi	r19, 0xFC	; 252
    1d24:	3c 5f       	subi	r19, 0xFC	; 252
    1d26:	3d 93       	st	X+, r19
    1d28:	91 30       	cpi	r25, 0x01	; 1
    1d2a:	08 f0       	brcs	.+2      	; 0x1d2e <__ftoa_engine+0x40>
    1d2c:	80 68       	ori	r24, 0x80	; 128
    1d2e:	91 1d       	adc	r25, r1
    1d30:	df 93       	push	r29
    1d32:	cf 93       	push	r28
    1d34:	1f 93       	push	r17
    1d36:	0f 93       	push	r16
    1d38:	ff 92       	push	r15
    1d3a:	ef 92       	push	r14
    1d3c:	19 2f       	mov	r17, r25
    1d3e:	98 7f       	andi	r25, 0xF8	; 248
    1d40:	96 95       	lsr	r25
    1d42:	e9 2f       	mov	r30, r25
    1d44:	96 95       	lsr	r25
    1d46:	96 95       	lsr	r25
    1d48:	e9 0f       	add	r30, r25
    1d4a:	ff 27       	eor	r31, r31
    1d4c:	ea 5d       	subi	r30, 0xDA	; 218
    1d4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d50:	99 27       	eor	r25, r25
    1d52:	33 27       	eor	r19, r19
    1d54:	ee 24       	eor	r14, r14
    1d56:	ff 24       	eor	r15, r15
    1d58:	a7 01       	movw	r20, r14
    1d5a:	e7 01       	movw	r28, r14
    1d5c:	05 90       	lpm	r0, Z+
    1d5e:	08 94       	sec
    1d60:	07 94       	ror	r0
    1d62:	28 f4       	brcc	.+10     	; 0x1d6e <__ftoa_engine+0x80>
    1d64:	36 0f       	add	r19, r22
    1d66:	e7 1e       	adc	r14, r23
    1d68:	f8 1e       	adc	r15, r24
    1d6a:	49 1f       	adc	r20, r25
    1d6c:	51 1d       	adc	r21, r1
    1d6e:	66 0f       	add	r22, r22
    1d70:	77 1f       	adc	r23, r23
    1d72:	88 1f       	adc	r24, r24
    1d74:	99 1f       	adc	r25, r25
    1d76:	06 94       	lsr	r0
    1d78:	a1 f7       	brne	.-24     	; 0x1d62 <__ftoa_engine+0x74>
    1d7a:	05 90       	lpm	r0, Z+
    1d7c:	07 94       	ror	r0
    1d7e:	28 f4       	brcc	.+10     	; 0x1d8a <__ftoa_engine+0x9c>
    1d80:	e7 0e       	add	r14, r23
    1d82:	f8 1e       	adc	r15, r24
    1d84:	49 1f       	adc	r20, r25
    1d86:	56 1f       	adc	r21, r22
    1d88:	c1 1d       	adc	r28, r1
    1d8a:	77 0f       	add	r23, r23
    1d8c:	88 1f       	adc	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	66 1f       	adc	r22, r22
    1d92:	06 94       	lsr	r0
    1d94:	a1 f7       	brne	.-24     	; 0x1d7e <__ftoa_engine+0x90>
    1d96:	05 90       	lpm	r0, Z+
    1d98:	07 94       	ror	r0
    1d9a:	28 f4       	brcc	.+10     	; 0x1da6 <__ftoa_engine+0xb8>
    1d9c:	f8 0e       	add	r15, r24
    1d9e:	49 1f       	adc	r20, r25
    1da0:	56 1f       	adc	r21, r22
    1da2:	c7 1f       	adc	r28, r23
    1da4:	d1 1d       	adc	r29, r1
    1da6:	88 0f       	add	r24, r24
    1da8:	99 1f       	adc	r25, r25
    1daa:	66 1f       	adc	r22, r22
    1dac:	77 1f       	adc	r23, r23
    1dae:	06 94       	lsr	r0
    1db0:	a1 f7       	brne	.-24     	; 0x1d9a <__ftoa_engine+0xac>
    1db2:	05 90       	lpm	r0, Z+
    1db4:	07 94       	ror	r0
    1db6:	20 f4       	brcc	.+8      	; 0x1dc0 <__ftoa_engine+0xd2>
    1db8:	49 0f       	add	r20, r25
    1dba:	56 1f       	adc	r21, r22
    1dbc:	c7 1f       	adc	r28, r23
    1dbe:	d8 1f       	adc	r29, r24
    1dc0:	99 0f       	add	r25, r25
    1dc2:	66 1f       	adc	r22, r22
    1dc4:	77 1f       	adc	r23, r23
    1dc6:	88 1f       	adc	r24, r24
    1dc8:	06 94       	lsr	r0
    1dca:	a9 f7       	brne	.-22     	; 0x1db6 <__ftoa_engine+0xc8>
    1dcc:	84 91       	lpm	r24, Z
    1dce:	10 95       	com	r17
    1dd0:	17 70       	andi	r17, 0x07	; 7
    1dd2:	41 f0       	breq	.+16     	; 0x1de4 <__ftoa_engine+0xf6>
    1dd4:	d6 95       	lsr	r29
    1dd6:	c7 95       	ror	r28
    1dd8:	57 95       	ror	r21
    1dda:	47 95       	ror	r20
    1ddc:	f7 94       	ror	r15
    1dde:	e7 94       	ror	r14
    1de0:	1a 95       	dec	r17
    1de2:	c1 f7       	brne	.-16     	; 0x1dd4 <__ftoa_engine+0xe6>
    1de4:	ec ec       	ldi	r30, 0xCC	; 204
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	68 94       	set
    1dea:	15 90       	lpm	r1, Z+
    1dec:	15 91       	lpm	r17, Z+
    1dee:	35 91       	lpm	r19, Z+
    1df0:	65 91       	lpm	r22, Z+
    1df2:	95 91       	lpm	r25, Z+
    1df4:	05 90       	lpm	r0, Z+
    1df6:	7f e2       	ldi	r23, 0x2F	; 47
    1df8:	73 95       	inc	r23
    1dfa:	e1 18       	sub	r14, r1
    1dfc:	f1 0a       	sbc	r15, r17
    1dfe:	43 0b       	sbc	r20, r19
    1e00:	56 0b       	sbc	r21, r22
    1e02:	c9 0b       	sbc	r28, r25
    1e04:	d0 09       	sbc	r29, r0
    1e06:	c0 f7       	brcc	.-16     	; 0x1df8 <__ftoa_engine+0x10a>
    1e08:	e1 0c       	add	r14, r1
    1e0a:	f1 1e       	adc	r15, r17
    1e0c:	43 1f       	adc	r20, r19
    1e0e:	56 1f       	adc	r21, r22
    1e10:	c9 1f       	adc	r28, r25
    1e12:	d0 1d       	adc	r29, r0
    1e14:	7e f4       	brtc	.+30     	; 0x1e34 <__ftoa_engine+0x146>
    1e16:	70 33       	cpi	r23, 0x30	; 48
    1e18:	11 f4       	brne	.+4      	; 0x1e1e <__ftoa_engine+0x130>
    1e1a:	8a 95       	dec	r24
    1e1c:	e6 cf       	rjmp	.-52     	; 0x1dea <__ftoa_engine+0xfc>
    1e1e:	e8 94       	clt
    1e20:	01 50       	subi	r16, 0x01	; 1
    1e22:	30 f0       	brcs	.+12     	; 0x1e30 <__ftoa_engine+0x142>
    1e24:	08 0f       	add	r16, r24
    1e26:	0a f4       	brpl	.+2      	; 0x1e2a <__ftoa_engine+0x13c>
    1e28:	00 27       	eor	r16, r16
    1e2a:	02 17       	cp	r16, r18
    1e2c:	08 f4       	brcc	.+2      	; 0x1e30 <__ftoa_engine+0x142>
    1e2e:	20 2f       	mov	r18, r16
    1e30:	23 95       	inc	r18
    1e32:	02 2f       	mov	r16, r18
    1e34:	7a 33       	cpi	r23, 0x3A	; 58
    1e36:	28 f0       	brcs	.+10     	; 0x1e42 <__ftoa_engine+0x154>
    1e38:	79 e3       	ldi	r23, 0x39	; 57
    1e3a:	7d 93       	st	X+, r23
    1e3c:	2a 95       	dec	r18
    1e3e:	e9 f7       	brne	.-6      	; 0x1e3a <__ftoa_engine+0x14c>
    1e40:	10 c0       	rjmp	.+32     	; 0x1e62 <__ftoa_engine+0x174>
    1e42:	7d 93       	st	X+, r23
    1e44:	2a 95       	dec	r18
    1e46:	89 f6       	brne	.-94     	; 0x1dea <__ftoa_engine+0xfc>
    1e48:	06 94       	lsr	r0
    1e4a:	97 95       	ror	r25
    1e4c:	67 95       	ror	r22
    1e4e:	37 95       	ror	r19
    1e50:	17 95       	ror	r17
    1e52:	17 94       	ror	r1
    1e54:	e1 18       	sub	r14, r1
    1e56:	f1 0a       	sbc	r15, r17
    1e58:	43 0b       	sbc	r20, r19
    1e5a:	56 0b       	sbc	r21, r22
    1e5c:	c9 0b       	sbc	r28, r25
    1e5e:	d0 09       	sbc	r29, r0
    1e60:	98 f0       	brcs	.+38     	; 0x1e88 <__ftoa_engine+0x19a>
    1e62:	23 95       	inc	r18
    1e64:	7e 91       	ld	r23, -X
    1e66:	73 95       	inc	r23
    1e68:	7a 33       	cpi	r23, 0x3A	; 58
    1e6a:	08 f0       	brcs	.+2      	; 0x1e6e <__ftoa_engine+0x180>
    1e6c:	70 e3       	ldi	r23, 0x30	; 48
    1e6e:	7c 93       	st	X, r23
    1e70:	20 13       	cpse	r18, r16
    1e72:	b8 f7       	brcc	.-18     	; 0x1e62 <__ftoa_engine+0x174>
    1e74:	7e 91       	ld	r23, -X
    1e76:	70 61       	ori	r23, 0x10	; 16
    1e78:	7d 93       	st	X+, r23
    1e7a:	30 f0       	brcs	.+12     	; 0x1e88 <__ftoa_engine+0x19a>
    1e7c:	83 95       	inc	r24
    1e7e:	71 e3       	ldi	r23, 0x31	; 49
    1e80:	7d 93       	st	X+, r23
    1e82:	70 e3       	ldi	r23, 0x30	; 48
    1e84:	2a 95       	dec	r18
    1e86:	e1 f7       	brne	.-8      	; 0x1e80 <__ftoa_engine+0x192>
    1e88:	11 24       	eor	r1, r1
    1e8a:	ef 90       	pop	r14
    1e8c:	ff 90       	pop	r15
    1e8e:	0f 91       	pop	r16
    1e90:	1f 91       	pop	r17
    1e92:	cf 91       	pop	r28
    1e94:	df 91       	pop	r29
    1e96:	99 27       	eor	r25, r25
    1e98:	87 fd       	sbrc	r24, 7
    1e9a:	90 95       	com	r25
    1e9c:	08 95       	ret

00001e9e <strrev>:
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	fc 01       	movw	r30, r24
    1ea2:	67 2f       	mov	r22, r23
    1ea4:	71 91       	ld	r23, Z+
    1ea6:	77 23       	and	r23, r23
    1ea8:	e1 f7       	brne	.-8      	; 0x1ea2 <strrev+0x4>
    1eaa:	32 97       	sbiw	r30, 0x02	; 2
    1eac:	04 c0       	rjmp	.+8      	; 0x1eb6 <strrev+0x18>
    1eae:	7c 91       	ld	r23, X
    1eb0:	6d 93       	st	X+, r22
    1eb2:	70 83       	st	Z, r23
    1eb4:	62 91       	ld	r22, -Z
    1eb6:	ae 17       	cp	r26, r30
    1eb8:	bf 07       	cpc	r27, r31
    1eba:	c8 f3       	brcs	.-14     	; 0x1eae <strrev+0x10>
    1ebc:	08 95       	ret

00001ebe <_exit>:
    1ebe:	f8 94       	cli

00001ec0 <__stop_program>:
    1ec0:	ff cf       	rjmp	.-2      	; 0x1ec0 <__stop_program>
