
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000049  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000011b  00000000  00000000  0000018d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e2  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000010d  00000000  00000000  0000038a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  00000498  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000093  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000013  00000000  00000000  0000057b  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ed       	ldi	r30, 0xD0	; 208
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 57 00 	call	0xae	; 0xae <main>
  8a:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ports_init>:
#define TOGGLEBIT(x,b)  x^=b;


/************************************************/
void ports_init(void)
{
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	87 bb       	out	0x17, r24	; 23
//DDRC=0XFF;
DDRB=0XFF;
//DDRD=0XFF;
//DDRA=0XFF;
}
  96:	08 95       	ret

00000098 <transmit_data>:
#include <avr/interrupt.h>
#include "PORT.h"
//16MASTER

char transmit_data(char data)
{	
  98:	c4 98       	cbi	0x18, 4	; 24
	//_delay_ms(10);
	CLEARBIT(PORTB,BIT(4));
	SPDR=data;
  9a:	8f b9       	out	0x0f, r24	; 15
	while(!(CHECKBIT(SPSR,BIT(7))))
  9c:	77 9b       	sbis	0x0e, 7	; 14
  9e:	fe cf       	rjmp	.-4      	; 0x9c <transmit_data+0x4>
	{
	;
	}			
    SETBIT(PORTB,BIT(4));
  a0:	c4 9a       	sbi	0x18, 4	; 24
	
}
  a2:	08 95       	ret

000000a4 <spi_init>:



int spi_init(void)
{
  a4:	80 e5       	ldi	r24, 0x50	; 80
  a6:	8d b9       	out	0x0d, r24	; 13

SPCR=0X50;
return 0;
}
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	08 95       	ret

000000ae <main>:

int main (void)
{
  ae:	8f eb       	ldi	r24, 0xBF	; 191
  b0:	87 bb       	out	0x17, r24	; 23

char data='F';

	DDRB=0XBF;	
	DDRA=0XFF;
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	8a bb       	out	0x1a, r24	; 26
	DDRD=0XFE;
  b6:	8e ef       	ldi	r24, 0xFE	; 254
  b8:	81 bb       	out	0x11, r24	; 17


int spi_init(void)
{

SPCR=0X50;
  ba:	80 e5       	ldi	r24, 0x50	; 80
  bc:	8d b9       	out	0x0d, r24	; 13

char transmit_data(char data)
{	
	//_delay_ms(10);
	CLEARBIT(PORTB,BIT(4));
	SPDR=data;
  be:	86 e4       	ldi	r24, 0x46	; 70
//16MASTER

char transmit_data(char data)
{	
	//_delay_ms(10);
	CLEARBIT(PORTB,BIT(4));
  c0:	c4 98       	cbi	0x18, 4	; 24
	SPDR=data;
  c2:	8f b9       	out	0x0f, r24	; 15
	while(!(CHECKBIT(SPSR,BIT(7))))
  c4:	77 9b       	sbis	0x0e, 7	; 14
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <main+0x16>
	{
	;
	}			
    SETBIT(PORTB,BIT(4));
  c8:	c4 9a       	sbi	0x18, 4	; 24
  ca:	fa cf       	rjmp	.-12     	; 0xc0 <main+0x12>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
