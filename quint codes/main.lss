
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000582  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000582  00000616  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  0080006a  0080006a  00000620  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001c7  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004f5  00000000  00000000  00000807  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000018e  00000000  00000000  00000cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000806  00000000  00000000  00000e8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  00001690  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000016d  00000000  00000000  00001810  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a6  00000000  00000000  0000197d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 e8       	ldi	r30, 0x82	; 130
  3a:	f5 e0       	ldi	r31, 0x05	; 5
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	aa 36       	cpi	r26, 0x6A	; 106
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	aa e6       	ldi	r26, 0x6A	; 106
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a9 37       	cpi	r26, 0x79	; 121
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	3e d2       	rcall	.+1148   	; 0x4d6 <main>
  5a:	91 c2       	rjmp	.+1314   	; 0x57e <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <ports_init>:


/************************************************/
void ports_init(void)
{
DDRD=0b00110000;
  5e:	80 e3       	ldi	r24, 0x30	; 48
  60:	81 bb       	out	0x11, r24	; 17
DDRC=0b00001010;
  62:	8a e0       	ldi	r24, 0x0A	; 10
  64:	84 bb       	out	0x14, r24	; 20
}
  66:	08 95       	ret

00000068 <delay_ns>:
WaitMs(1);
CLEARBIT(PORTB,BIT(7));
}

void delay_ns(unsigned char tim)
{
  68:	20 91 6a 00 	lds	r18, 0x006A
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	02 c0       	rjmp	.+4      	; 0x74 <delay_ns+0xc>
        for(j=0;j<tim;j++)
  70:	9f 5f       	subi	r25, 0xFF	; 255
  72:	2a e0       	ldi	r18, 0x0A	; 10
  74:	98 17       	cp	r25, r24
  76:	e0 f3       	brcs	.-8      	; 0x70 <delay_ns+0x8>
  78:	20 93 6a 00 	sts	0x006A, r18
  7c:	90 93 6b 00 	sts	0x006B, r25
        {
                for(k=0;k<10;k++)
                {};
        }
}
  80:	08 95       	ret

00000082 <WaitMs>:
        PORTC=save;
}*/

/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
  82:	0f 93       	push	r16
  84:	1f 93       	push	r17
  86:	cf 93       	push	r28
  88:	df 93       	push	r29
  8a:	8c 01       	movw	r16, r24
  8c:	0a c0       	rjmp	.+20     	; 0xa2 <WaitMs+0x20>
        int i;

        while (ms-- > 0)
  8e:	c0 e0       	ldi	r28, 0x00	; 0
  90:	d0 e0       	ldi	r29, 0x00	; 0
        {
                /* 16380 (16k) clock cycles for 1ms; each time through loop
                   is 5 cycles (for loop control + nop) */
                for (i = 0; i < 100; ++i)
                        delay_ns(10000);
  92:	80 e1       	ldi	r24, 0x10	; 16
  94:	e9 df       	rcall	.-46     	; 0x68 <delay_ns>

        while (ms-- > 0)
        {
                /* 16380 (16k) clock cycles for 1ms; each time through loop
                   is 5 cycles (for loop control + nop) */
                for (i = 0; i < 100; ++i)
  96:	21 96       	adiw	r28, 0x01	; 1
  98:	c4 36       	cpi	r28, 0x64	; 100
  9a:	d1 05       	cpc	r29, r1
  9c:	d1 f7       	brne	.-12     	; 0x92 <WaitMs+0x10>
  9e:	01 50       	subi	r16, 0x01	; 1
  a0:	10 40       	sbci	r17, 0x00	; 0
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
        int i;

        while (ms-- > 0)
  a2:	01 15       	cp	r16, r1
  a4:	11 05       	cpc	r17, r1
  a6:	99 f7       	brne	.-26     	; 0x8e <WaitMs+0xc>
                /* 16380 (16k) clock cycles for 1ms; each time through loop
                   is 5 cycles (for loop control + nop) */
                for (i = 0; i < 100; ++i)
                        delay_ns(10000);
        }
  a8:	df 91       	pop	r29
  aa:	cf 91       	pop	r28
  ac:	1f 91       	pop	r17
  ae:	0f 91       	pop	r16
  b0:	08 95       	ret

000000b2 <toggleE>:
        lcd_cmd(LINE1); 
}

void toggleE(void)
{
SETBIT(PORTB,BIT(7));
  b2:	c7 9a       	sbi	0x18, 7	; 24
WaitMs(1);
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	e4 df       	rcall	.-56     	; 0x82 <WaitMs>
CLEARBIT(PORTB,BIT(7));
  ba:	c7 98       	cbi	0x18, 7	; 24
}
  bc:	08 95       	ret

000000be <lcd_char>:
        }
}*/


void lcd_char(unsigned char single)
{
  be:	1f 93       	push	r17
  c0:	18 2f       	mov	r17, r24
    WaitMs(1);
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	dd df       	rcall	.-70     	; 0x82 <WaitMs>
        SETBIT(PORTB,BIT(5));   
  c8:	c5 9a       	sbi	0x18, 5	; 24
        PORTD=single;                                           
  ca:	12 bb       	out	0x12, r17	; 18
        toggleE();
  cc:	f2 df       	rcall	.-28     	; 0xb2 <toggleE>
}
  ce:	1f 91       	pop	r17
  d0:	08 95       	ret

000000d2 <lcd_showvalue>:
                }
}


void lcd_showvalue(unsigned char num)   //prints the decimal 3digit value of num
{
  d2:	ef 92       	push	r14
  d4:	ff 92       	push	r15
  d6:	0f 93       	push	r16
  d8:	1f 93       	push	r17
  da:	18 2f       	mov	r17, r24
        unsigned char H=0,T=0,O=0;
        H=num/100;
  dc:	64 e6       	ldi	r22, 0x64	; 100
  de:	1c d2       	rcall	.+1080   	; 0x518 <__udivmodqi4>
  e0:	48 2f       	mov	r20, r24
        T=(num - (H*100))/10;
  e2:	28 2f       	mov	r18, r24
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	8c e9       	ldi	r24, 0x9C	; 156
  e8:	9f ef       	ldi	r25, 0xFF	; 255
  ea:	28 9f       	mul	r18, r24
  ec:	70 01       	movw	r14, r0
  ee:	29 9f       	mul	r18, r25
  f0:	f0 0c       	add	r15, r0
  f2:	38 9f       	mul	r19, r24
  f4:	f0 0c       	add	r15, r0
  f6:	11 24       	eor	r1, r1
  f8:	c7 01       	movw	r24, r14
  fa:	81 0f       	add	r24, r17
  fc:	91 1d       	adc	r25, r1
  fe:	6a e0       	ldi	r22, 0x0A	; 10
 100:	70 e0       	ldi	r23, 0x00	; 0
 102:	16 d2       	rcall	.+1068   	; 0x530 <__divmodhi4>
 104:	06 2f       	mov	r16, r22
        O=(num - (H*100) - (T*10));
        
        lcd_char(H+48);
 106:	84 2f       	mov	r24, r20
 108:	80 5d       	subi	r24, 0xD0	; 208
 10a:	d9 df       	rcall	.-78     	; 0xbe <lcd_char>
        lcd_char(T+48);
 10c:	80 2f       	mov	r24, r16
 10e:	80 5d       	subi	r24, 0xD0	; 208
 110:	d6 df       	rcall	.-84     	; 0xbe <lcd_char>
        lcd_char(O+48);
 112:	10 5d       	subi	r17, 0xD0	; 208
 114:	1e 0d       	add	r17, r14
 116:	86 ef       	ldi	r24, 0xF6	; 246
 118:	9f ef       	ldi	r25, 0xFF	; 255
 11a:	08 9f       	mul	r16, r24
 11c:	00 2d       	mov	r16, r0
 11e:	11 24       	eor	r1, r1
 120:	80 2f       	mov	r24, r16
 122:	81 0f       	add	r24, r17
 124:	cc df       	rcall	.-104    	; 0xbe <lcd_char>
}
 126:	1f 91       	pop	r17
 128:	0f 91       	pop	r16
 12a:	ff 90       	pop	r15
 12c:	ef 90       	pop	r14
 12e:	08 95       	ret

00000130 <lcd_cmd>:
                {};
        }
}

void lcd_cmd(unsigned char cmd)
{   
 130:	1f 93       	push	r17
 132:	18 2f       	mov	r17, r24
    WaitMs(2);
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	a4 df       	rcall	.-184    	; 0x82 <WaitMs>
        CLEARBIT(PORTB,BIT(5)+BIT(6)+BIT(7));
 13a:	88 b3       	in	r24, 0x18	; 24
 13c:	8f 79       	andi	r24, 0x9F	; 159
 13e:	88 bb       	out	0x18, r24	; 24
        PORTD=cmd;                      
 140:	12 bb       	out	0x12, r17	; 18
        toggleE();
 142:	b7 df       	rcall	.-146    	; 0xb2 <toggleE>
}
 144:	1f 91       	pop	r17
 146:	08 95       	ret

00000148 <lcd_gotoxy2>:
        lcd_cmd(LINE1+pos);
}

void lcd_gotoxy2(unsigned char pos)
{
        lcd_cmd(LINE2+pos);
 148:	80 54       	subi	r24, 0x40	; 64
 14a:	f2 df       	rcall	.-28     	; 0x130 <lcd_cmd>
}
 14c:	08 95       	ret

0000014e <lcd_gotoxy1>:
        lcd_char(O+48);
}

void lcd_gotoxy1(unsigned char pos)
{
        lcd_cmd(LINE1+pos);
 14e:	80 58       	subi	r24, 0x80	; 128
 150:	ef df       	rcall	.-34     	; 0x130 <lcd_cmd>
}
 152:	08 95       	ret

00000154 <lcd_string>:
        PORTD=single;                                           
        toggleE();
}

void lcd_string(unsigned char str[32])
{
 154:	ef 92       	push	r14
 156:	ff 92       	push	r15
 158:	1f 93       	push	r17
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	7c 01       	movw	r14, r24
        unsigned char k=0;
        SETBIT(PORTB,BIT(5));
 160:	c5 9a       	sbi	0x18, 5	; 24
        CLEARBIT(PORTB,BIT(6)+BIT(7));
 162:	88 b3       	in	r24, 0x18	; 24
 164:	8f 73       	andi	r24, 0x3F	; 63
 166:	88 bb       	out	0x18, r24	; 24
 168:	10 e0       	ldi	r17, 0x00	; 0
 16a:	0b c0       	rjmp	.+22     	; 0x182 <lcd_string+0x2e>
        while(str[k]!='\0')     //Till null character is encountered
                {   WaitMs(1);
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	88 df       	rcall	.-240    	; 0x82 <WaitMs>
                        if(k==16)
 172:	10 31       	cpi	r17, 0x10	; 16
 174:	11 f4       	brne	.+4      	; 0x17a <lcd_string+0x26>
                                lcd_cmd(LINE2);
 176:	80 ec       	ldi	r24, 0xC0	; 192
 178:	db df       	rcall	.-74     	; 0x130 <lcd_cmd>
                        PORTD=str[k];
 17a:	88 81       	ld	r24, Y
 17c:	82 bb       	out	0x12, r24	; 18
                        toggleE();
 17e:	99 df       	rcall	.-206    	; 0xb2 <toggleE>
                        k++;
 180:	1f 5f       	subi	r17, 0xFF	; 255
void lcd_string(unsigned char str[32])
{
        unsigned char k=0;
        SETBIT(PORTB,BIT(5));
        CLEARBIT(PORTB,BIT(6)+BIT(7));
        while(str[k]!='\0')     //Till null character is encountered
 182:	e7 01       	movw	r28, r14
 184:	c1 0f       	add	r28, r17
 186:	d1 1d       	adc	r29, r1
 188:	88 81       	ld	r24, Y
 18a:	88 23       	and	r24, r24
 18c:	79 f7       	brne	.-34     	; 0x16c <lcd_string+0x18>
                                lcd_cmd(LINE2);
                        PORTD=str[k];
                        toggleE();
                        k++;
                }
}
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	1f 91       	pop	r17
 194:	ff 90       	pop	r15
 196:	ef 90       	pop	r14
 198:	08 95       	ret

0000019a <lcd_init>:
void lcd_exit(void);
void WaitMs(unsigned int ms);

void lcd_init(void)     //init the lcd
{       
        DDRD=0xFF;
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	81 bb       	out	0x11, r24	; 17
        DDRB=0xFF;
 19e:	87 bb       	out	0x17, r24	; 23
        WaitMs(15);
 1a0:	8f e0       	ldi	r24, 0x0F	; 15
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	6e df       	rcall	.-292    	; 0x82 <WaitMs>
        CLEARBIT(PORTB,BIT(5)+BIT(6)+BIT(7));
 1a6:	88 b3       	in	r24, 0x18	; 24
 1a8:	8f 79       	andi	r24, 0x9F	; 159
 1aa:	88 bb       	out	0x18, r24	; 24
        lcd_cmd(0x38);
 1ac:	88 e3       	ldi	r24, 0x38	; 56
 1ae:	c0 df       	rcall	.-128    	; 0x130 <lcd_cmd>
        lcd_cmd(0x0E);
 1b0:	8e e0       	ldi	r24, 0x0E	; 14
 1b2:	be df       	rcall	.-132    	; 0x130 <lcd_cmd>
        lcd_cmd(LINE1); 
 1b4:	80 e8       	ldi	r24, 0x80	; 128
 1b6:	bc df       	rcall	.-136    	; 0x130 <lcd_cmd>
}
 1b8:	08 95       	ret

000001ba <fwd>:
#include<util/delay.h>
unsigned char count1=0,flag=0,stage=0,turn=0,count=0,stn=0,dtmf=0;


void fwd(int speed)  // generate pwm for forward motion of bot, 'speed' decides the duty cycle of that pwm
{
 1ba:	1f 93       	push	r17
 1bc:	18 2f       	mov	r17, r24
                      //010 stage is considered as 0 stage
        stage=0;
 1be:	10 92 74 00 	sts	0x0074, r1
        SETBIT(PORTC,BIT(0));      
 1c2:	a8 9a       	sbi	0x15, 0	; 21
        CLEARBIT(PORTC,BIT(1));
 1c4:	a9 98       	cbi	0x15, 1	; 21
        SETBIT(PORTB,BIT(1));
 1c6:	c1 9a       	sbi	0x18, 1	; 24
        CLEARBIT(PORTB,BIT(2));
 1c8:	c2 98       	cbi	0x18, 2	; 24
        delay_ns(speed);           //gives the ON time  
 1ca:	4e df       	rcall	.-356    	; 0x68 <delay_ns>
        CLEARBIT(PORTC,BIT(0));   
 1cc:	a8 98       	cbi	0x15, 0	; 21
        CLEARBIT(PORTC,BIT(1));
 1ce:	a9 98       	cbi	0x15, 1	; 21
        CLEARBIT(PORTB,BIT(2));
 1d0:	c2 98       	cbi	0x18, 2	; 24
        CLEARBIT(PORTB,BIT(1));
 1d2:	c1 98       	cbi	0x18, 1	; 24
        delay_ns(200-speed);        //gives the OFF time
 1d4:	88 ec       	ldi	r24, 0xC8	; 200
 1d6:	81 1b       	sub	r24, r17
 1d8:	47 df       	rcall	.-370    	; 0x68 <delay_ns>
}
 1da:	1f 91       	pop	r17
 1dc:	08 95       	ret

000001de <back>:


void back(int speed)
{
 1de:	1f 93       	push	r17
 1e0:	18 2f       	mov	r17, r24
        stage=0;
 1e2:	10 92 74 00 	sts	0x0074, r1
        SETBIT(PORTC,BIT(1));
 1e6:	a9 9a       	sbi	0x15, 1	; 21
        CLEARBIT(PORTC,BIT(0));
 1e8:	a8 98       	cbi	0x15, 0	; 21
        SETBIT(PORTB,BIT(2));
 1ea:	c2 9a       	sbi	0x18, 2	; 24
        CLEARBIT(PORTB,BIT(1));
 1ec:	c1 98       	cbi	0x18, 1	; 24
        delay_ns(speed);
 1ee:	3c df       	rcall	.-392    	; 0x68 <delay_ns>
        CLEARBIT(PORTC,BIT(0));
 1f0:	a8 98       	cbi	0x15, 0	; 21
        CLEARBIT(PORTC,BIT(1));
 1f2:	a9 98       	cbi	0x15, 1	; 21
        CLEARBIT(PORTB,BIT(2));
 1f4:	c2 98       	cbi	0x18, 2	; 24
        CLEARBIT(PORTB,BIT(1));
 1f6:	c1 98       	cbi	0x18, 1	; 24
        delay_ns(200-speed);
 1f8:	88 ec       	ldi	r24, 0xC8	; 200
 1fa:	81 1b       	sub	r24, r17
 1fc:	35 df       	rcall	.-406    	; 0x68 <delay_ns>
}
 1fe:	1f 91       	pop	r17
 200:	08 95       	ret

00000202 <left>:



void left(int speed)
{
 202:	1f 93       	push	r17
 204:	18 2f       	mov	r17, r24
        stage=1;
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	80 93 74 00 	sts	0x0074, r24
        SETBIT(PORTB,BIT(1));
 20c:	c1 9a       	sbi	0x18, 1	; 24
        CLEARBIT(PORTB,BIT(2));
 20e:	c2 98       	cbi	0x18, 2	; 24
        CLEARBIT(PORTC,BIT(0));
 210:	a8 98       	cbi	0x15, 0	; 21
        CLEARBIT(PORTC,BIT(1));
 212:	a9 98       	cbi	0x15, 1	; 21
        delay_ns(speed);
 214:	81 2f       	mov	r24, r17
 216:	28 df       	rcall	.-432    	; 0x68 <delay_ns>
        CLEARBIT(PORTC,BIT(0));
 218:	a8 98       	cbi	0x15, 0	; 21
        CLEARBIT(PORTC,BIT(1));
 21a:	a9 98       	cbi	0x15, 1	; 21
        CLEARBIT(PORTB,BIT(2));
 21c:	c2 98       	cbi	0x18, 2	; 24
        CLEARBIT(PORTB,BIT(1));
 21e:	c1 98       	cbi	0x18, 1	; 24
        delay_ns(200-speed);
 220:	88 ec       	ldi	r24, 0xC8	; 200
 222:	81 1b       	sub	r24, r17
 224:	21 df       	rcall	.-446    	; 0x68 <delay_ns>

}
 226:	1f 91       	pop	r17
 228:	08 95       	ret

0000022a <right>:

void right(int speed)
{       stage=2;
 22a:	1f 93       	push	r17
 22c:	18 2f       	mov	r17, r24
 22e:	82 e0       	ldi	r24, 0x02	; 2
 230:	80 93 74 00 	sts	0x0074, r24
        SETBIT(PORTC,BIT(0));
 234:	a8 9a       	sbi	0x15, 0	; 21
        CLEARBIT(PORTC,BIT(1));
 236:	a9 98       	cbi	0x15, 1	; 21
        CLEARBIT(PORTB,BIT(1));
 238:	c1 98       	cbi	0x18, 1	; 24
        CLEARBIT(PORTB,BIT(2));
 23a:	c2 98       	cbi	0x18, 2	; 24
        delay_ns(speed);
 23c:	81 2f       	mov	r24, r17
 23e:	14 df       	rcall	.-472    	; 0x68 <delay_ns>
        CLEARBIT(PORTC,BIT(0));
 240:	a8 98       	cbi	0x15, 0	; 21
        CLEARBIT(PORTC,BIT(1));
 242:	a9 98       	cbi	0x15, 1	; 21
        CLEARBIT(PORTB,BIT(2));
 244:	c2 98       	cbi	0x18, 2	; 24
        CLEARBIT(PORTB,BIT(1));
 246:	c1 98       	cbi	0x18, 1	; 24
        delay_ns(200-speed);
 248:	88 ec       	ldi	r24, 0xC8	; 200
 24a:	81 1b       	sub	r24, r17
 24c:	0d df       	rcall	.-486    	; 0x68 <delay_ns>
        
}
 24e:	1f 91       	pop	r17
 250:	08 95       	ret

00000252 <stop>:

void stop(void)
{
        CLEARBIT(PORTC,BIT(0));
 252:	a8 98       	cbi	0x15, 0	; 21
        CLEARBIT(PORTC,BIT(1));
 254:	a9 98       	cbi	0x15, 1	; 21
        CLEARBIT(PORTB,BIT(2));
 256:	c2 98       	cbi	0x18, 2	; 24
        CLEARBIT(PORTB,BIT(1));
 258:	c1 98       	cbi	0x18, 1	; 24
}
 25a:	08 95       	ret

0000025c <check>:
   
}*/

int check(void)
{
	if (CHECKBIT(PIND,BIT(5)) && CHECKBIT(PIND,BIT(6)) && CHECKBIT(PIND,BIT(7))) return 0;
 25c:	85 9b       	sbis	0x10, 5	; 16
 25e:	04 c0       	rjmp	.+8      	; 0x268 <check+0xc>
 260:	86 9b       	sbis	0x10, 6	; 16
 262:	02 c0       	rjmp	.+4      	; 0x268 <check+0xc>
 264:	87 99       	sbic	0x10, 7	; 16
 266:	1a c0       	rjmp	.+52     	; 0x29c <check+0x40>
	if(CHECKBIT(PIND,BIT(5)) && CHECKBIT(PIND,BIT(7))) return 1;
 268:	85 9b       	sbis	0x10, 5	; 16
 26a:	05 c0       	rjmp	.+10     	; 0x276 <check+0x1a>
 26c:	87 9b       	sbis	0x10, 7	; 16
 26e:	03 c0       	rjmp	.+6      	; 0x276 <check+0x1a>
 270:	21 e0       	ldi	r18, 0x01	; 1
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	15 c0       	rjmp	.+42     	; 0x2a0 <check+0x44>
    if(CHECKBIT(PIND,BIT(6)) && CHECKBIT(PIND,BIT(7))) return -1;
 276:	86 9b       	sbis	0x10, 6	; 16
 278:	05 c0       	rjmp	.+10     	; 0x284 <check+0x28>
 27a:	87 9b       	sbis	0x10, 7	; 16
 27c:	03 c0       	rjmp	.+6      	; 0x284 <check+0x28>
 27e:	2f ef       	ldi	r18, 0xFF	; 255
 280:	3f ef       	ldi	r19, 0xFF	; 255
 282:	0e c0       	rjmp	.+28     	; 0x2a0 <check+0x44>
    if(CHECKBIT(PIND,BIT(5))) return 2;
 284:	85 9b       	sbis	0x10, 5	; 16
 286:	03 c0       	rjmp	.+6      	; 0x28e <check+0x32>
 288:	22 e0       	ldi	r18, 0x02	; 2
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	09 c0       	rjmp	.+18     	; 0x2a0 <check+0x44>
    if(CHECKBIT(PIND,BIT(6))) return -2;
 28e:	86 9b       	sbis	0x10, 6	; 16
 290:	03 c0       	rjmp	.+6      	; 0x298 <check+0x3c>
 292:	2e ef       	ldi	r18, 0xFE	; 254
 294:	3f ef       	ldi	r19, 0xFF	; 255
 296:	04 c0       	rjmp	.+8      	; 0x2a0 <check+0x44>
    if(CHECKBIT(PIND,BIT(7))) return 0;
 298:	87 9b       	sbis	0x10, 7	; 16
 29a:	08 95       	ret
}
 29c:	20 e0       	ldi	r18, 0x00	; 0
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	c9 01       	movw	r24, r18
 2a2:	08 95       	ret

000002a4 <trace_line>:

void trace_line(void)
{
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
	int k=50;
	int err;
	err=k*check();
 2a8:	d9 df       	rcall	.-78     	; 0x25c <check>
 2aa:	22 e3       	ldi	r18, 0x32	; 50
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	82 9f       	mul	r24, r18
 2b0:	e0 01       	movw	r28, r0
 2b2:	83 9f       	mul	r24, r19
 2b4:	d0 0d       	add	r29, r0
 2b6:	92 9f       	mul	r25, r18
 2b8:	d0 0d       	add	r29, r0
 2ba:	11 24       	eor	r1, r1
	if(check()== 0)
 2bc:	cf df       	rcall	.-98     	; 0x25c <check>
 2be:	89 2b       	or	r24, r25
 2c0:	19 f4       	brne	.+6      	; 0x2c8 <trace_line+0x24>
		fwd(190);
 2c2:	8e eb       	ldi	r24, 0xBE	; 190
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	79 df       	rcall	.-270    	; 0x1ba <fwd>
	if(check() == -1 || check() == -2)
 2c8:	c9 df       	rcall	.-110    	; 0x25c <check>
 2ca:	8f 5f       	subi	r24, 0xFF	; 255
 2cc:	9f 4f       	sbci	r25, 0xFF	; 255
 2ce:	21 f0       	breq	.+8      	; 0x2d8 <trace_line+0x34>
 2d0:	c5 df       	rcall	.-118    	; 0x25c <check>
 2d2:	8e 5f       	subi	r24, 0xFE	; 254
 2d4:	9f 4f       	sbci	r25, 0xFF	; 255
 2d6:	29 f4       	brne	.+10     	; 0x2e2 <trace_line+0x3e>
		right(-err);
 2d8:	88 27       	eor	r24, r24
 2da:	99 27       	eor	r25, r25
 2dc:	8c 1b       	sub	r24, r28
 2de:	9d 0b       	sbc	r25, r29
 2e0:	a4 df       	rcall	.-184    	; 0x22a <right>
	if(check() == 1 || check() == 2)
 2e2:	bc df       	rcall	.-136    	; 0x25c <check>
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	19 f0       	breq	.+6      	; 0x2ee <trace_line+0x4a>
 2e8:	b9 df       	rcall	.-142    	; 0x25c <check>
 2ea:	02 97       	sbiw	r24, 0x02	; 2
 2ec:	11 f4       	brne	.+4      	; 0x2f2 <trace_line+0x4e>
		left(err);
 2ee:	ce 01       	movw	r24, r28
 2f0:	88 df       	rcall	.-240    	; 0x202 <left>
}
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	08 95       	ret

000002f8 <mobile>:


void mobile()
{

        dtmf=PIND;
 2f8:	80 b3       	in	r24, 0x10	; 16
        dtmf=dtmf & 0x1b;
 2fa:	8b 71       	andi	r24, 0x1B	; 27
 2fc:	80 93 78 00 	sts	0x0078, r24
        if(dtmf==0x02)
 300:	82 30       	cpi	r24, 0x02	; 2
 302:	19 f4       	brne	.+6      	; 0x30a <mobile+0x12>
        {
                fwd(150);
 304:	86 e9       	ldi	r24, 0x96	; 150
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	58 df       	rcall	.-336    	; 0x1ba <fwd>
        }
        
        if(dtmf==0x10)
 30a:	80 91 78 00 	lds	r24, 0x0078
 30e:	80 31       	cpi	r24, 0x10	; 16
 310:	19 f4       	brne	.+6      	; 0x318 <mobile+0x20>
        {       
                
                back(150);
 312:	86 e9       	ldi	r24, 0x96	; 150
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	63 df       	rcall	.-314    	; 0x1de <back>
        }
        
        if(dtmf==0x08)
 318:	80 91 78 00 	lds	r24, 0x0078
 31c:	88 30       	cpi	r24, 0x08	; 8
 31e:	19 f4       	brne	.+6      	; 0x326 <mobile+0x2e>
        {
                left(120);
 320:	88 e7       	ldi	r24, 0x78	; 120
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	6e df       	rcall	.-292    	; 0x202 <left>
        }
        
        if(dtmf==0x0A)
 326:	80 91 78 00 	lds	r24, 0x0078
 32a:	8a 30       	cpi	r24, 0x0A	; 10
 32c:	19 f4       	brne	.+6      	; 0x334 <mobile+0x3c>
        {
                right(120);
 32e:	88 e7       	ldi	r24, 0x78	; 120
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	7b df       	rcall	.-266    	; 0x22a <right>
        }
        
        if(dtmf==0x09)
 334:	80 91 78 00 	lds	r24, 0x0078
 338:	89 30       	cpi	r24, 0x09	; 9
 33a:	09 f4       	brne	.+2      	; 0x33e <mobile+0x46>
        {
                stop();
 33c:	8a df       	rcall	.-236    	; 0x252 <stop>
 33e:	08 95       	ret

00000340 <manual>:


void manual()
{

        if(CHECKBIT(PINC,BIT(2)))
 340:	9a 9b       	sbis	0x13, 2	; 19
 342:	05 c0       	rjmp	.+10     	; 0x34e <manual+0xe>
        {
                if(CHECKBIT(PINC,BIT(3))) 
 344:	9b 99       	sbic	0x13, 3	; 19
 346:	08 c0       	rjmp	.+16     	; 0x358 <manual+0x18>
                        SETBIT(PORTC,BIT(0));
                        SETBIT(PORTC,BIT(1));
                }
                else
                {
                        SETBIT(PORTC,BIT(0));      
 348:	a8 9a       	sbi	0x15, 0	; 21
                        CLEARBIT(PORTC,BIT(1));
 34a:	a9 98       	cbi	0x15, 1	; 21
 34c:	07 c0       	rjmp	.+14     	; 0x35c <manual+0x1c>
                }

        }       
        else
        {
                if(CHECKBIT(PINC,BIT(3))) 
 34e:	9b 9b       	sbis	0x13, 3	; 19
 350:	03 c0       	rjmp	.+6      	; 0x358 <manual+0x18>
                {
                SETBIT(PORTC,BIT(1));
 352:	a9 9a       	sbi	0x15, 1	; 21
                CLEARBIT(PORTC,BIT(0));
 354:	a8 98       	cbi	0x15, 0	; 21
 356:	02 c0       	rjmp	.+4      	; 0x35c <manual+0x1c>
                }
                else
                {
                        SETBIT(PORTC,BIT(0));
 358:	a8 9a       	sbi	0x15, 0	; 21
                        SETBIT(PORTC,BIT(1));
 35a:	a9 9a       	sbi	0x15, 1	; 21
                }
        }

        if(CHECKBIT(PINC,BIT(4)))
 35c:	9c 9b       	sbis	0x13, 4	; 19
 35e:	08 c0       	rjmp	.+16     	; 0x370 <manual+0x30>
        {
                if(CHECKBIT(PINC,BIT(5))) 
 360:	9d 9b       	sbis	0x13, 5	; 19
 362:	03 c0       	rjmp	.+6      	; 0x36a <manual+0x2a>
                {
                        SETBIT(PORTB,BIT(1));
 364:	c1 9a       	sbi	0x18, 1	; 24
                        SETBIT(PORTB,BIT(2));
 366:	c2 9a       	sbi	0x18, 2	; 24
 368:	08 95       	ret
                }
                else
                {
                        SETBIT(PORTB,BIT(1));      
 36a:	c1 9a       	sbi	0x18, 1	; 24
                        CLEARBIT(PORTB,BIT(2));
 36c:	c2 98       	cbi	0x18, 2	; 24
 36e:	08 95       	ret
                }

        }       
        else
        {
                if(CHECKBIT(PINC,BIT(5))) 
 370:	9d 9b       	sbis	0x13, 5	; 19
 372:	03 c0       	rjmp	.+6      	; 0x37a <manual+0x3a>
                {
                SETBIT(PORTB,BIT(2));
 374:	c2 9a       	sbi	0x18, 2	; 24
                CLEARBIT(PORTB,BIT(1));
 376:	c1 98       	cbi	0x18, 1	; 24
 378:	08 95       	ret
                }
                else
                {
                        SETBIT(PORTB,BIT(2));
 37a:	c2 9a       	sbi	0x18, 2	; 24
                        SETBIT(PORTB,BIT(1));
 37c:	c1 9a       	sbi	0x18, 1	; 24
 37e:	08 95       	ret

00000380 <obstacle>:




void obstacle()
{
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
        long unsigned int i,j;
        
        //i=1000;
        fwd(80);
 384:	80 e5       	ldi	r24, 0x50	; 80
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	18 df       	rcall	.-464    	; 0x1ba <fwd>
        //void delay_ms(i);
        //right(100);
        //WaitMs(1000);
        //*void delay_ms(i);
        if(CHECKBIT(PIND,BIT(6)) || CHECKBIT(PIND,BIT(5)))
 38a:	86 99       	sbic	0x10, 6	; 16
 38c:	02 c0       	rjmp	.+4      	; 0x392 <obstacle+0x12>
 38e:	85 9b       	sbis	0x10, 5	; 16
 390:	2b c0       	rjmp	.+86     	; 0x3e8 <obstacle+0x68>
                {
                        //i=10000;
                        stop();
 392:	5f df       	rcall	.-322    	; 0x252 <stop>
 394:	c0 e0       	ldi	r28, 0x00	; 0
 396:	d0 e0       	ldi	r29, 0x00	; 0
                //      WaitMs(1);
                    for(i=10000;i>0;i--)
                        {
                                delay_ns(25);
 398:	89 e1       	ldi	r24, 0x19	; 25
 39a:	66 de       	rcall	.-820    	; 0x68 <delay_ns>
 39c:	21 96       	adiw	r28, 0x01	; 1
        if(CHECKBIT(PIND,BIT(6)) || CHECKBIT(PIND,BIT(5)))
                {
                        //i=10000;
                        stop();
                //      WaitMs(1);
                    for(i=10000;i>0;i--)
 39e:	87 e2       	ldi	r24, 0x27	; 39
 3a0:	c0 31       	cpi	r28, 0x10	; 16
 3a2:	d8 07       	cpc	r29, r24
 3a4:	c9 f7       	brne	.-14     	; 0x398 <obstacle+0x18>
 3a6:	c0 e0       	ldi	r28, 0x00	; 0
 3a8:	d0 e0       	ldi	r29, 0x00	; 0
                                delay_ns(25);
                        }
                        
                         for(i=1000;i>0;i--)
                        {
                                back(120);
 3aa:	88 e7       	ldi	r24, 0x78	; 120
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	17 df       	rcall	.-466    	; 0x1de <back>
                                delay_ns(7);
 3b0:	87 e0       	ldi	r24, 0x07	; 7
 3b2:	5a de       	rcall	.-844    	; 0x68 <delay_ns>
 3b4:	21 96       	adiw	r28, 0x01	; 1
                    for(i=10000;i>0;i--)
                        {
                                delay_ns(25);
                        }
                        
                         for(i=1000;i>0;i--)
 3b6:	83 e0       	ldi	r24, 0x03	; 3
 3b8:	c8 3e       	cpi	r28, 0xE8	; 232
 3ba:	d8 07       	cpc	r29, r24
 3bc:	b1 f7       	brne	.-20     	; 0x3aa <obstacle+0x2a>
 3be:	c0 e0       	ldi	r28, 0x00	; 0
 3c0:	d0 e0       	ldi	r29, 0x00	; 0
                                back(120);
                                delay_ns(7);
                        }
                        for(i=10000;i>0;i--)
                        {
                                delay_ns(25);
 3c2:	89 e1       	ldi	r24, 0x19	; 25
 3c4:	51 de       	rcall	.-862    	; 0x68 <delay_ns>
 3c6:	21 96       	adiw	r28, 0x01	; 1
                         for(i=1000;i>0;i--)
                        {
                                back(120);
                                delay_ns(7);
                        }
                        for(i=10000;i>0;i--)
 3c8:	87 e2       	ldi	r24, 0x27	; 39
 3ca:	c0 31       	cpi	r28, 0x10	; 16
 3cc:	d8 07       	cpc	r29, r24
 3ce:	c9 f7       	brne	.-14     	; 0x3c2 <obstacle+0x42>
 3d0:	c0 e0       	ldi	r28, 0x00	; 0
 3d2:	d0 e0       	ldi	r29, 0x00	; 0
                        {
                                delay_ns(25);
                        }
                    for(i=1000;i>0;i--)
                        {
                                right(100);
 3d4:	84 e6       	ldi	r24, 0x64	; 100
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	28 df       	rcall	.-432    	; 0x22a <right>
                                delay_ns(5);
 3da:	85 e0       	ldi	r24, 0x05	; 5
 3dc:	45 de       	rcall	.-886    	; 0x68 <delay_ns>
 3de:	21 96       	adiw	r28, 0x01	; 1
                        }
                        for(i=10000;i>0;i--)
                        {
                                delay_ns(25);
                        }
                    for(i=1000;i>0;i--)
 3e0:	83 e0       	ldi	r24, 0x03	; 3
 3e2:	c8 3e       	cpi	r28, 0xE8	; 232
 3e4:	d8 07       	cpc	r29, r24
 3e6:	b1 f7       	brne	.-20     	; 0x3d4 <obstacle+0x54>
                        }
                //      delay_ns(200);
                //  WaitMs(1);
                }

}
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	08 95       	ret

000003ee <edge_detector>:

void edge_detector()
{
 3ee:	cf 93       	push	r28
 3f0:	df 93       	push	r29

	*/

	long unsigned int i,j;
	
	fwd(80);
 3f2:	80 e5       	ldi	r24, 0x50	; 80
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	e1 de       	rcall	.-574    	; 0x1ba <fwd>
	
	if(!(CHECKBIT(PIND,BIT(7))))
 3f8:	87 99       	sbic	0x10, 7	; 16
 3fa:	22 c0       	rjmp	.+68     	; 0x440 <edge_detector+0x52>
		{
			
			stop();
 3fc:	2a df       	rcall	.-428    	; 0x252 <stop>
 3fe:	c0 e0       	ldi	r28, 0x00	; 0
 400:	d0 e0       	ldi	r29, 0x00	; 0
		
		    for(i=10000;i>0;i--)
			{
				delay_ns(25);
 402:	89 e1       	ldi	r24, 0x19	; 25
 404:	31 de       	rcall	.-926    	; 0x68 <delay_ns>
 406:	21 96       	adiw	r28, 0x01	; 1
	if(!(CHECKBIT(PIND,BIT(7))))
		{
			
			stop();
		
		    for(i=10000;i>0;i--)
 408:	87 e2       	ldi	r24, 0x27	; 39
 40a:	c0 31       	cpi	r28, 0x10	; 16
 40c:	d8 07       	cpc	r29, r24
 40e:	c9 f7       	brne	.-14     	; 0x402 <edge_detector+0x14>
 410:	c0 e0       	ldi	r28, 0x00	; 0
 412:	d0 e0       	ldi	r29, 0x00	; 0
				delay_ns(25);
			}
			
			 for(i=1000;i>0;i--)
			{
				back(120);
 414:	88 e7       	ldi	r24, 0x78	; 120
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	e2 de       	rcall	.-572    	; 0x1de <back>
				delay_ns(7);
 41a:	87 e0       	ldi	r24, 0x07	; 7
 41c:	25 de       	rcall	.-950    	; 0x68 <delay_ns>
 41e:	21 96       	adiw	r28, 0x01	; 1
		    for(i=10000;i>0;i--)
			{
				delay_ns(25);
			}
			
			 for(i=1000;i>0;i--)
 420:	83 e0       	ldi	r24, 0x03	; 3
 422:	c8 3e       	cpi	r28, 0xE8	; 232
 424:	d8 07       	cpc	r29, r24
 426:	b1 f7       	brne	.-20     	; 0x414 <edge_detector+0x26>
 428:	c0 e0       	ldi	r28, 0x00	; 0
 42a:	d0 e0       	ldi	r29, 0x00	; 0
				delay_ns(7);
			}
			
		    for(i=1000;i>0;i--)
			{
				left(180);
 42c:	84 eb       	ldi	r24, 0xB4	; 180
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	e8 de       	rcall	.-560    	; 0x202 <left>
				delay_ns(5);
 432:	85 e0       	ldi	r24, 0x05	; 5
 434:	19 de       	rcall	.-974    	; 0x68 <delay_ns>
 436:	21 96       	adiw	r28, 0x01	; 1
			{
				back(120);
				delay_ns(7);
			}
			
		    for(i=1000;i>0;i--)
 438:	83 e0       	ldi	r24, 0x03	; 3
 43a:	c8 3e       	cpi	r28, 0xE8	; 232
 43c:	d8 07       	cpc	r29, r24
 43e:	b1 f7       	brne	.-20     	; 0x42c <edge_detector+0x3e>
				left(180);
				delay_ns(5);
			}
		
		}
	if(!(CHECKBIT(PIND,BIT(6)))) //&& CHECKBIT(PIND,BIT(7)) && CHECKBIT(PIND,BIT(6)))
 440:	86 99       	sbic	0x10, 6	; 16
 442:	22 c0       	rjmp	.+68     	; 0x488 <__stack+0x29>
		{
			
			stop();
 444:	06 df       	rcall	.-500    	; 0x252 <stop>
 446:	c0 e0       	ldi	r28, 0x00	; 0
 448:	d0 e0       	ldi	r29, 0x00	; 0
		
		    for(i=10000;i>0;i--)
			{
				delay_ns(25);
 44a:	89 e1       	ldi	r24, 0x19	; 25
 44c:	0d de       	rcall	.-998    	; 0x68 <delay_ns>
 44e:	21 96       	adiw	r28, 0x01	; 1
	if(!(CHECKBIT(PIND,BIT(6)))) //&& CHECKBIT(PIND,BIT(7)) && CHECKBIT(PIND,BIT(6)))
		{
			
			stop();
		
		    for(i=10000;i>0;i--)
 450:	87 e2       	ldi	r24, 0x27	; 39
 452:	c0 31       	cpi	r28, 0x10	; 16
 454:	d8 07       	cpc	r29, r24
 456:	c9 f7       	brne	.-14     	; 0x44a <edge_detector+0x5c>
 458:	c0 e0       	ldi	r28, 0x00	; 0
 45a:	d0 e0       	ldi	r29, 0x00	; 0
				delay_ns(25);
			}
			
			 for(i=1000;i>0;i--)
			{
				back(120);
 45c:	88 e7       	ldi	r24, 0x78	; 120
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	be de       	rcall	.-644    	; 0x1de <back>
				delay_ns(7);
 462:	87 e0       	ldi	r24, 0x07	; 7
 464:	01 de       	rcall	.-1022   	; 0x68 <delay_ns>
 466:	21 96       	adiw	r28, 0x01	; 1
		    for(i=10000;i>0;i--)
			{
				delay_ns(25);
			}
			
			 for(i=1000;i>0;i--)
 468:	83 e0       	ldi	r24, 0x03	; 3
 46a:	c8 3e       	cpi	r28, 0xE8	; 232
 46c:	d8 07       	cpc	r29, r24
 46e:	b1 f7       	brne	.-20     	; 0x45c <edge_detector+0x6e>
 470:	c0 e0       	ldi	r28, 0x00	; 0
 472:	d0 e0       	ldi	r29, 0x00	; 0
				delay_ns(7);
			}
			
		    for(i=1000;i>0;i--)
			{
				left(100);
 474:	84 e6       	ldi	r24, 0x64	; 100
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	c4 de       	rcall	.-632    	; 0x202 <left>
				delay_ns(5);
 47a:	85 e0       	ldi	r24, 0x05	; 5
 47c:	f5 dd       	rcall	.-1046   	; 0x68 <delay_ns>
 47e:	21 96       	adiw	r28, 0x01	; 1
			{
				back(120);
				delay_ns(7);
			}
			
		    for(i=1000;i>0;i--)
 480:	83 e0       	ldi	r24, 0x03	; 3
 482:	c8 3e       	cpi	r28, 0xE8	; 232
 484:	d8 07       	cpc	r29, r24
 486:	b1 f7       	brne	.-20     	; 0x474 <__stack+0x15>
				left(100);
				delay_ns(5);
			}
		
		}
	if(!(CHECKBIT(PIND,BIT(5)))) //&& CHECKBIT(PIND,BIT(7)) && CHECKBIT(PIND,BIT(6)))
 488:	85 99       	sbic	0x10, 5	; 16
 48a:	22 c0       	rjmp	.+68     	; 0x4d0 <__stack+0x71>
		{
			
			stop();
 48c:	e2 de       	rcall	.-572    	; 0x252 <stop>
 48e:	c0 e0       	ldi	r28, 0x00	; 0
 490:	d0 e0       	ldi	r29, 0x00	; 0
		
		    for(i=10000;i>0;i--)
			{
				delay_ns(25);
 492:	89 e1       	ldi	r24, 0x19	; 25
 494:	e9 dd       	rcall	.-1070   	; 0x68 <delay_ns>
 496:	21 96       	adiw	r28, 0x01	; 1
	if(!(CHECKBIT(PIND,BIT(5)))) //&& CHECKBIT(PIND,BIT(7)) && CHECKBIT(PIND,BIT(6)))
		{
			
			stop();
		
		    for(i=10000;i>0;i--)
 498:	87 e2       	ldi	r24, 0x27	; 39
 49a:	c0 31       	cpi	r28, 0x10	; 16
 49c:	d8 07       	cpc	r29, r24
 49e:	c9 f7       	brne	.-14     	; 0x492 <__stack+0x33>
 4a0:	c0 e0       	ldi	r28, 0x00	; 0
 4a2:	d0 e0       	ldi	r29, 0x00	; 0
				delay_ns(25);
			}
			
			 for(i=1000;i>0;i--)
			{
				back(120);
 4a4:	88 e7       	ldi	r24, 0x78	; 120
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	9a de       	rcall	.-716    	; 0x1de <back>
				delay_ns(7);
 4aa:	87 e0       	ldi	r24, 0x07	; 7
 4ac:	dd dd       	rcall	.-1094   	; 0x68 <delay_ns>
 4ae:	21 96       	adiw	r28, 0x01	; 1
		    for(i=10000;i>0;i--)
			{
				delay_ns(25);
			}
			
			 for(i=1000;i>0;i--)
 4b0:	83 e0       	ldi	r24, 0x03	; 3
 4b2:	c8 3e       	cpi	r28, 0xE8	; 232
 4b4:	d8 07       	cpc	r29, r24
 4b6:	b1 f7       	brne	.-20     	; 0x4a4 <__stack+0x45>
 4b8:	c0 e0       	ldi	r28, 0x00	; 0
 4ba:	d0 e0       	ldi	r29, 0x00	; 0
				delay_ns(7);
			}
			
		    for(i=1000;i>0;i--)
			{
				right(100);
 4bc:	84 e6       	ldi	r24, 0x64	; 100
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	b4 de       	rcall	.-664    	; 0x22a <right>
				delay_ns(5);
 4c2:	85 e0       	ldi	r24, 0x05	; 5
 4c4:	d1 dd       	rcall	.-1118   	; 0x68 <delay_ns>
 4c6:	21 96       	adiw	r28, 0x01	; 1
			{
				back(120);
				delay_ns(7);
			}
			
		    for(i=1000;i>0;i--)
 4c8:	83 e0       	ldi	r24, 0x03	; 3
 4ca:	c8 3e       	cpi	r28, 0xE8	; 232
 4cc:	d8 07       	cpc	r29, r24
 4ce:	b1 f7       	brne	.-20     	; 0x4bc <__stack+0x5d>
		
		}



}
 4d0:	df 91       	pop	r29
 4d2:	cf 91       	pop	r28
 4d4:	08 95       	ret

000004d6 <main>:


/************************************************/
void ports_init(void)
{
DDRD=0b00110000;
 4d6:	80 e3       	ldi	r24, 0x30	; 48
 4d8:	81 bb       	out	0x11, r24	; 17
DDRC=0b00001010;
 4da:	8a e0       	ldi	r24, 0x0A	; 10
 4dc:	84 bb       	out	0x14, r24	; 20

int main(void)
{

ports_init();
        SETBIT(PORTC,BIT(4));
 4de:	ac 9a       	sbi	0x15, 4	; 21
        SETBIT(PORTC,BIT(5));
 4e0:	ad 9a       	sbi	0x15, 5	; 21
        SETBIT(PORTB,BIT(6));
 4e2:	c6 9a       	sbi	0x18, 6	; 24
        SETBIT(PORTB,BIT(7));
 4e4:	c7 9a       	sbi	0x18, 7	; 24
        SETBIT(PORTB,BIT(0));
 4e6:	c0 9a       	sbi	0x18, 0	; 24
        SETBIT(PORTC,BIT(2));
 4e8:	aa 9a       	sbi	0x15, 2	; 21
        SETBIT(PORTC,BIT(3));
 4ea:	ab 9a       	sbi	0x15, 3	; 21
while(1)
{
        
        if(CHECKBIT(PINB,BIT(6)))
 4ec:	b6 9b       	sbis	0x16, 6	; 22
 4ee:	0e c0       	rjmp	.+28     	; 0x50c <main+0x36>
        {
                if(CHECKBIT(PINB,BIT(7)))
 4f0:	b7 9b       	sbis	0x16, 7	; 22
 4f2:	06 c0       	rjmp	.+12     	; 0x500 <main+0x2a>
                {
                        if(CHECKBIT(PINB,BIT(0)))
 4f4:	b0 9b       	sbis	0x16, 0	; 22
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <main+0x26>
                        {
                                trace_line();
 4f8:	d5 de       	rcall	.-598    	; 0x2a4 <trace_line>
 4fa:	f8 cf       	rjmp	.-16     	; 0x4ec <main+0x16>
                        }
                        else
                        {
                                manual();
 4fc:	21 df       	rcall	.-446    	; 0x340 <manual>
 4fe:	f6 cf       	rjmp	.-20     	; 0x4ec <main+0x16>
                        }
                }
                else
                {
                        if(CHECKBIT(PINB,BIT(0)))
 500:	b0 9b       	sbis	0x16, 0	; 22
 502:	02 c0       	rjmp	.+4      	; 0x508 <main+0x32>
                        {
                                obstacle();
 504:	3d df       	rcall	.-390    	; 0x380 <obstacle>
 506:	f2 cf       	rjmp	.-28     	; 0x4ec <main+0x16>
                        }
                        else
                        {
                                mobile();
 508:	f7 de       	rcall	.-530    	; 0x2f8 <mobile>
 50a:	f0 cf       	rjmp	.-32     	; 0x4ec <main+0x16>
                        }
                }
        }
        else
        {
                if(CHECKBIT(PINB,BIT(7)))
 50c:	b7 9b       	sbis	0x16, 7	; 22
 50e:	ee cf       	rjmp	.-36     	; 0x4ec <main+0x16>
                {
                        if(CHECKBIT(PINB,BIT(0)))
 510:	b0 9b       	sbis	0x16, 0	; 22
 512:	ec cf       	rjmp	.-40     	; 0x4ec <main+0x16>
                        {
                                edge_detector();
 514:	6c df       	rcall	.-296    	; 0x3ee <edge_detector>
 516:	ea cf       	rjmp	.-44     	; 0x4ec <main+0x16>

00000518 <__udivmodqi4>:
 518:	99 1b       	sub	r25, r25
 51a:	79 e0       	ldi	r23, 0x09	; 9
 51c:	04 c0       	rjmp	.+8      	; 0x526 <__udivmodqi4_ep>

0000051e <__udivmodqi4_loop>:
 51e:	99 1f       	adc	r25, r25
 520:	96 17       	cp	r25, r22
 522:	08 f0       	brcs	.+2      	; 0x526 <__udivmodqi4_ep>
 524:	96 1b       	sub	r25, r22

00000526 <__udivmodqi4_ep>:
 526:	88 1f       	adc	r24, r24
 528:	7a 95       	dec	r23
 52a:	c9 f7       	brne	.-14     	; 0x51e <__udivmodqi4_loop>
 52c:	80 95       	com	r24
 52e:	08 95       	ret

00000530 <__divmodhi4>:
 530:	97 fb       	bst	r25, 7
 532:	09 2e       	mov	r0, r25
 534:	07 26       	eor	r0, r23
 536:	0a d0       	rcall	.+20     	; 0x54c <__divmodhi4_neg1>
 538:	77 fd       	sbrc	r23, 7
 53a:	04 d0       	rcall	.+8      	; 0x544 <__divmodhi4_neg2>
 53c:	0c d0       	rcall	.+24     	; 0x556 <__udivmodhi4>
 53e:	06 d0       	rcall	.+12     	; 0x54c <__divmodhi4_neg1>
 540:	00 20       	and	r0, r0
 542:	1a f4       	brpl	.+6      	; 0x54a <__divmodhi4_exit>

00000544 <__divmodhi4_neg2>:
 544:	70 95       	com	r23
 546:	61 95       	neg	r22
 548:	7f 4f       	sbci	r23, 0xFF	; 255

0000054a <__divmodhi4_exit>:
 54a:	08 95       	ret

0000054c <__divmodhi4_neg1>:
 54c:	f6 f7       	brtc	.-4      	; 0x54a <__divmodhi4_exit>
 54e:	90 95       	com	r25
 550:	81 95       	neg	r24
 552:	9f 4f       	sbci	r25, 0xFF	; 255
 554:	08 95       	ret

00000556 <__udivmodhi4>:
 556:	aa 1b       	sub	r26, r26
 558:	bb 1b       	sub	r27, r27
 55a:	51 e1       	ldi	r21, 0x11	; 17
 55c:	07 c0       	rjmp	.+14     	; 0x56c <__udivmodhi4_ep>

0000055e <__udivmodhi4_loop>:
 55e:	aa 1f       	adc	r26, r26
 560:	bb 1f       	adc	r27, r27
 562:	a6 17       	cp	r26, r22
 564:	b7 07       	cpc	r27, r23
 566:	10 f0       	brcs	.+4      	; 0x56c <__udivmodhi4_ep>
 568:	a6 1b       	sub	r26, r22
 56a:	b7 0b       	sbc	r27, r23

0000056c <__udivmodhi4_ep>:
 56c:	88 1f       	adc	r24, r24
 56e:	99 1f       	adc	r25, r25
 570:	5a 95       	dec	r21
 572:	a9 f7       	brne	.-22     	; 0x55e <__udivmodhi4_loop>
 574:	80 95       	com	r24
 576:	90 95       	com	r25
 578:	bc 01       	movw	r22, r24
 57a:	cd 01       	movw	r24, r26
 57c:	08 95       	ret

0000057e <_exit>:
 57e:	f8 94       	cli

00000580 <__stop_program>:
 580:	ff cf       	rjmp	.-2      	; 0x580 <__stop_program>
